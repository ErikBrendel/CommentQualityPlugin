# id;timestamp;commentText;codeText;commentWords;codeWords
BindyKeyValuePairFactory -> public String getPairSeparator();1235652242;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1236098343;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1236835446;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1236912265;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1245936806;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_		return pairSeparator__	};find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1246045355;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1246454824;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1246526096;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1246589739;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1252503390;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1252575745;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1252663206;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1252844150;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1254476721;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1257975505;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1258732346;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1258736086;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1258969576;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1276268359;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1276357650;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1290574380;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1293121457;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1296495624;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1307685726;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1308432267;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1311784042;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1311838731;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1312713116;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1325779288;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1326392736;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1335090271;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1335788887;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1349099486;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1355739468;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1357140814;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1376549254;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1438938304;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1438938346;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1458660774;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1463827036;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1463827036;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1479916286;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1506410459;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1523968787;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public String getPairSeparator();1536517284;Find the pair separator used to delimit the key value pair fields;public String getPairSeparator() {_        return pairSeparator__    };find,the,pair,separator,used,to,delimit,the,key,value,pair,fields;public,string,get,pair,separator,return,pair,separator
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1258732346;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {_    	_        Map<Integer, List> results = new HashMap<Integer, List>()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Key value pairs data : " + data)__        }_        _        _        _        ObjectHelper.notNull( keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")__        _        _        _        for (String s : data) {_        	_        	_        	String[] keyValuePair = s.split( getKeyValuePairSeparator() )__        	_        	_            int key = Integer.parseInt(keyValuePair[0])__            _            _            String value = keyValuePair[1]__            _            if (LOG.isDebugEnabled()) {_                LOG.debug("Key : " + key + ", value : " + value)__            }_            _            _			if (!results.containsKey(key)) {_				_				List list = new LinkedList()__				list.add(value)__				results.put(key, list)___			} else {__				List list = (LinkedList) results.get(key)__				list.add(value)__			}_            _        }_        __        _		for (Class clazz : models) {__			Object obj = model.get(clazz.getName())___			if (obj != null) {__				_				generateModelFromKeyValueMap(clazz, obj, results, line)___			}_		}_		_    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,if,log,is,debug,enabled,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,if,log,is,debug,enabled,log,debug,key,key,value,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1258736086;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Key value pairs data : " + data)__        }__        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            if (LOG.isDebugEnabled()) {_                LOG.debug("Key : " + key + ", value : " + value)__            }__            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,if,log,is,debug,enabled,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,if,log,is,debug,enabled,log,debug,key,key,value,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1258969576;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Key value pairs data : " + data)__        }__        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            if (LOG.isDebugEnabled()) {_                LOG.debug("Key : " + key + ", value : " + value)__            }__            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,if,log,is,debug,enabled,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,if,log,is,debug,enabled,log,debug,key,key,value,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1276268359;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Key value pairs data : " + data)__        }__        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            if (LOG.isDebugEnabled()) {_                LOG.debug("Key : " + key + ", value : " + value)__            }__            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,if,log,is,debug,enabled,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,if,log,is,debug,enabled,log,debug,key,key,value,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1276357650;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Key value pairs data : " + data)__        }__        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            if (LOG.isDebugEnabled()) {_                LOG.debug("Key : " + key + ", value : " + value)__            }__            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,if,log,is,debug,enabled,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,if,log,is,debug,enabled,log,debug,key,key,value,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1290574380;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Key value pairs data : " + data)__        }__        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            if (LOG.isDebugEnabled()) {_                LOG.debug("Key : " + key + ", value : " + value)__            }__            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,if,log,is,debug,enabled,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,if,log,is,debug,enabled,log,debug,key,key,value,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1293121457;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Key value pairs data : " + data)__        }__        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            if (LOG.isDebugEnabled()) {_                LOG.debug("Key : " + key + ", value : " + value)__            }__            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,if,log,is,debug,enabled,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,if,log,is,debug,enabled,log,debug,key,key,value,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1296495624;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Key value pairs data : " + data)__        }__        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            if (LOG.isDebugEnabled()) {_                LOG.debug("Key : " + key + ", value : " + value)__            }__            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,if,log,is,debug,enabled,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,if,log,is,debug,enabled,log,debug,key,key,value,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1307685726;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        LOG.debug("Key value pairs data : {}", data)___        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            LOG.debug("Key : {}, value : {}", key, value)___            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,log,debug,key,value,key,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1308432267;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List> results = new HashMap<Integer, List>()___        LOG.debug("Key value pairs data : {}", data)___        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            LOG.debug("Key : {}, value : {}", key, value)___            _            if (!results.containsKey(key)) {__                List list = new LinkedList()__                list.add(value)__                results.put(key, list)___            } else {__                List list = (LinkedList)results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,results,new,hash,map,integer,list,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,log,debug,key,value,key,value,if,results,contains,key,key,list,list,new,linked,list,list,add,value,results,put,key,list,else,list,list,linked,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1311784042;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List<String>> results = new HashMap<Integer, List<String>>()___        LOG.debug("Key value pairs data : {}", data)___        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            int key = Integer.parseInt(keyValuePair[0])___            _            String value = keyValuePair[1]___            LOG.debug("Key : {}, value : {}", key, value)___            _            if (!results.containsKey(key)) {__                List<String> list = new LinkedList<String>()__                list.add(value)__                results.put(key, list)___            } else {__                List<String> list = results.get(key)__                list.add(value)__            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,string,results,new,hash,map,integer,list,string,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,log,debug,key,value,key,value,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,value,results,put,key,list,else,list,string,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> public void bind(List<String> data, Map<String, Object> model, int line) throws Exception;1311838731;;public void bind(List<String> data, Map<String, Object> model, int line) throws Exception {__        Map<Integer, List<String>> results = new HashMap<Integer, List<String>>()___        LOG.debug("Key value pairs data : {}", data)___        _        _        ObjectHelper.notNull(keyValuePairSeparator, "Key Value Pair not defined in the @Message annotation")___        _        _        _        for (String s : data) {__            _            String[] keyValuePair = s.split(getKeyValuePairSeparator())___            _            if (keyValuePair.length > 1) {_                _                int key = Integer.parseInt(keyValuePair[0])___                _                String value = keyValuePair[1]___                LOG.debug("Key: {}, value: {}", key, value)___                _                if (!results.containsKey(key)) {_                    List<String> list = new LinkedList<String>()__                    list.add(value)__                    results.put(key, list)__                } else {_                    List<String> list = results.get(key)__                    list.add(value)__                }_            }__        }__        _        for (Class clazz : models) {__            Object obj = model.get(clazz.getName())___            if (obj != null) {__                _                generateModelFromKeyValueMap(clazz, obj, results, line)___            }_        }__    };;public,void,bind,list,string,data,map,string,object,model,int,line,throws,exception,map,integer,list,string,results,new,hash,map,integer,list,string,log,debug,key,value,pairs,data,data,object,helper,not,null,key,value,pair,separator,key,value,pair,not,defined,in,the,message,annotation,for,string,s,data,string,key,value,pair,s,split,get,key,value,pair,separator,if,key,value,pair,length,1,int,key,integer,parse,int,key,value,pair,0,string,value,key,value,pair,1,log,debug,key,value,key,value,if,results,contains,key,key,list,string,list,new,linked,list,string,list,add,value,results,put,key,list,else,list,string,list,results,get,key,list,add,value,for,class,clazz,models,object,obj,model,get,clazz,get,name,if,obj,null,generate,model,from,key,value,map,clazz,obj,results,line
BindyKeyValuePairFactory -> @Override     public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception;1506410459;;@Override_    public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField,_                    field.getType(),_                    field.getAnnotation(BindyConverter.class),_                    getLocale())__            Format<Object> format = (Format<Object>) formatFactory.getFormat(formattingOptions)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()___                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)___                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;override,public,string,unbind,camel,context,camel,context,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,key,value,pair,field,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,object,format,format,object,format,factory,get,format,formatting,options,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> @Override     public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception;1523968787;;@Override_    public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField,_                    field.getType(),_                    field.getAnnotation(BindyConverter.class),_                    getLocale())__            Format<Object> format = (Format<Object>) formatFactory.getFormat(formattingOptions)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()___                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)___                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;override,public,string,unbind,camel,context,camel,context,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,formatting,options,formatting,options,converter,utils,convert,key,value,pair,field,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,object,format,format,object,format,factory,get,format,formatting,options,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> @Override     public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception;1536517284;;@Override_    public String unbind(CamelContext camelContext, Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName())__            }__            _            FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField,_                    field.getType(),_                    field.getAnnotation(BindyConverter.class),_                    getLocale())__            Format<Object> format = (Format<Object>) formatFactory.getFormat(formattingOptions)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()___                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)___                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", keyValue, keyValuePairField.tag(), valueFormatted)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", posit, value, separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;override,public,string,unbind,camel,context,camel,context,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,formatting,options,formatting,options,converter,utils,convert,key,value,pair,field,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,object,format,format,object,format,factory,get,format,formatting,options,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1235652242;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the classes and fields annoted. Next, we retrieve the_parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {_        _        _        initAnnotedFields()__        _        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,classes,and,fields,annoted,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1236098343;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the classes and fields annoted. Next, we retrieve the_parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {_        _        _        initAnnotedFields()__        _        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,classes,and,fields,annoted,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1236835446;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the classes and fields annoted. Next, we retrieve the_parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {_        _        _        initAnnotedFields()__        _        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,classes,and,fields,annoted,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1236912265;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the classes and fields annoted. Next, we retrieve the_parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {_        _        _        initAnnotedFields()__        _        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,classes,and,fields,annoted,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1245936806;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the classes and fields annoted. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__		_		initAnnotedFields()___		_		initMessageParameters()___	};method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,classes,and,fields,annoted,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1246045355;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1246454824;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1246526096;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1246589739;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1252503390;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1252575745;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1252663206;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1252844150;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1254476721;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1257975505;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1258732346;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1258736086;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1258969576;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1276268359;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1276357650;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1290574380;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annoted,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1293121457;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1296495624;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1307685726;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1308432267;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1311784042;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1311838731;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1312713116;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1325779288;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1326392736;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1335090271;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1335788887;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1349099486;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1355739468;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1357140814;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1376549254;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1438938304;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1438938346;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1458660774;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1463827036;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1463827036;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1479916286;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1506410459;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1523968787;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> public void initKeyValuePairModel() throws Exception;1536517284;method uses to initialize the model representing the classes who will_bind the data This process will scan for classes according to the package_name provided, check the annotated classes and fields. Next, we retrieve_the parameters required like : Pair Separator & key value pair separator__@throws Exception;public void initKeyValuePairModel() throws Exception {__        _        initAnnotatedFields()___        _        initMessageParameters()___    };method,uses,to,initialize,the,model,representing,the,classes,who,will,bind,the,data,this,process,will,scan,for,classes,according,to,the,package,name,provided,check,the,annotated,classes,and,fields,next,we,retrieve,the,parameters,required,like,pair,separator,key,value,pair,separator,throws,exception;public,void,init,key,value,pair,model,throws,exception,init,annotated,fields,init,message,parameters
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1258736086;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required() && values == null) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueforPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueforPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                if (LOG.isDebugEnabled()) {_                                    LOG.debug("Value formated : " + result)__                                }__                            } else {_                                result = getDefaultValueforPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    if (LOG.isDebugEnabled()) {_                                        LOG.debug("Value formated : " + result)__                                    }__                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueforPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueforPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (targetClass != "") {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    }__                    catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,values,null,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,key,value,pair,field,precision,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,else,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,key,value,pair,field,precision,object,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,valuefor,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1258969576;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required() && values == null) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueforPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueforPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                if (LOG.isDebugEnabled()) {_                                    LOG.debug("Value formated : " + result)__                                }__                            } else {_                                result = getDefaultValueforPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    if (LOG.isDebugEnabled()) {_                                        LOG.debug("Value formated : " + result)__                                    }__                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueforPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueforPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (!targetClass.equals("")) {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    } catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,values,null,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,key,value,pair,field,precision,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,else,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,key,value,pair,field,precision,object,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,valuefor,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,equals,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1276268359;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required() && values == null) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueforPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueforPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                if (LOG.isDebugEnabled()) {_                                    LOG.debug("Value formated : " + result)__                                }__                            } else {_                                result = getDefaultValueforPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    if (LOG.isDebugEnabled()) {_                                        LOG.debug("Value formated : " + result)__                                    }__                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueforPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueforPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (!targetClass.equals("")) {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    } catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,values,null,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,key,value,pair,field,precision,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,else,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,key,value,pair,field,precision,object,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,valuefor,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,valuefor,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,equals,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1276357650;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required() && values == null) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueForPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                if (LOG.isDebugEnabled()) {_                                    LOG.debug("Value formated : " + result)__                                }__                            } else {_                                result = getDefaultValueForPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    if (LOG.isDebugEnabled()) {_                                        LOG.debug("Value formated : " + result)__                                    }__                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueForPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (!targetClass.equals("")) {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    } catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,values,null,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,key,value,pair,field,precision,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,else,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,key,value,pair,field,precision,object,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,value,for,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,equals,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1290574380;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required() && values == null) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueForPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                if (LOG.isDebugEnabled()) {_                                    LOG.debug("Value formated : " + result)__                                }__                            } else {_                                result = getDefaultValueForPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    if (LOG.isDebugEnabled()) {_                                        LOG.debug("Value formated : " + result)__                                    }__                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueForPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (!targetClass.equals("")) {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    } catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,values,null,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,else,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,object,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,value,for,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,equals,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1293121457;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required() && values == null) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueForPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                if (LOG.isDebugEnabled()) {_                                    LOG.debug("Value formated : " + result)__                                }__                            } else {_                                result = getDefaultValueForPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    if (LOG.isDebugEnabled()) {_                                        LOG.debug("Value formated : " + result)__                                    }__                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueForPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (!targetClass.equals("")) {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    } catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,values,null,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,else,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,object,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,value,for,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,equals,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1296495624;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required() && values == null) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueForPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                if (LOG.isDebugEnabled()) {_                                    LOG.debug("Value formated : " + result)__                                }__                            } else {_                                result = getDefaultValueForPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    if (LOG.isDebugEnabled()) {_                                        LOG.debug("Value formated : " + result)__                                    }__                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueForPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (!targetClass.equals("")) {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    } catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,values,null,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,else,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,object,result,format,field,format,value,key,line,if,log,is,debug,enabled,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,value,for,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,equals,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1307685726;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required() && values == null) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueForPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                LOG.debug("Value formated : {}", result)___                            } else {_                                result = getDefaultValueForPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    LOG.debug("Value formated : {}", result)___                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueForPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (!targetClass.equals("")) {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    } catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,values,null,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,result,format,field,format,value,key,line,log,debug,value,formated,result,else,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,object,result,format,field,format,value,key,line,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,value,for,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,equals,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception;1308432267;@param clazz_@param obj_@param results_@param line_@throws Exception;private void generateModelFromKeyValueMap(Class clazz, Object obj, Map<Integer, List> results, int line) throws Exception {__        for (Field field : clazz.getDeclaredFields()) {__            field.setAccessible(true)___            KeyValuePairField keyValuePairField = field.getAnnotation(KeyValuePairField.class)___            if (keyValuePairField != null) {__                _                int key = keyValuePairField.tag()___                _                List<String> values = results.get(key)__                String value = null___                _                if (values == null) {__                    _                    if (obj != null) {__                        _                        if (keyValuePairField.required()) {_                            throw new IllegalArgumentException("The mandatory key/tag : " + key + " has not been defined !")__                        }__                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }__                    } else {__                        __                        _                        List l = lists.get(clazz.getName())___                        if (l != null) {__                            _                            if (!l.isEmpty()) {_                                obj = l.get(0)__                            } else {_                                obj = clazz.newInstance()__                            }__                            Object result = getDefaultValueForPrimitive(field.getType())__                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                            _                            if (!l.isEmpty()) {_                                l.set(0, obj)__                            } else {_                                l.add(0, obj)__                            }__                            _                            lists.put(clazz.getName(), l)___                            _                            obj = null___                        } else {_                            throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                        }__                    } __                } else {__                    _                    if (values.size() >= 1) {__                        if (obj != null) {__                            _                            value = (String)values.get(0)__                            Object result = null___                            if (value != null) {__                                _                                String pattern = keyValuePairField.pattern()___                                _                                Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                _                                result = formatField(format, value, key, line)___                                LOG.debug("Value formated : {}", result)___                            } else {_                                result = getDefaultValueForPrimitive(field.getType())__                            }_                            try {_                                field.set(obj, result)__                            } catch (Exception e) {_                                _                                throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                            }__                        } else {__                            _                            List l = lists.get(clazz.getName())___                            if (l != null) {__                                _                                for (int i = 0_ i < values.size()_ i++) {__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        obj = l.get(i)__                                    } else {_                                        obj = clazz.newInstance()__                                    }__                                    value = (String)values.get(i)___                                    _                                    String pattern = keyValuePairField.pattern()___                                    _                                    Format<?> format = FormatFactory.getFormat(field.getType(), pattern, getLocale(), keyValuePairField.precision())___                                    _                                    Object result = formatField(format, value, key, line)___                                    LOG.debug("Value formated : {}", result)___                                    try {_                                        if (value != null) {_                                            field.set(obj, result)__                                        } else {_                                            field.set(obj, getDefaultValueForPrimitive(field.getType()))__                                        }_                                    } catch (Exception e) {_                                        throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                                    }__                                    _                                    if ((!l.isEmpty()) && (l.size() > i)) {_                                        l.set(i, obj)__                                    } else {_                                        l.add(i, obj)__                                    }_                                    _                                    lists.put(clazz.getName(), l)___                                    _                                    obj = null___                                }__                            } else {_                                throw new IllegalArgumentException("The list of values is empty for the following key : " + key + " defined in the class : " + clazz.getName())__                            }_                        }__                    } else {__                        _                        Object result = getDefaultValueForPrimitive(field.getType())___                        try {_                            field.set(obj, result)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Setting of field " + field + " failed for object : " + obj + " and result : " + result)__                        }_                    }_                }_            }__            OneToMany oneToMany = field.getAnnotation(OneToMany.class)__            if (oneToMany != null) {__                String targetClass = oneToMany.mappedTo()___                if (!targetClass.equals("")) {_                    _                    _                    Class cl = null___                    try {_                        cl = Thread.currentThread().getContextClassLoader().loadClass(targetClass)__                    } catch (ClassNotFoundException e) {_                        cl = getClass().getClassLoader().loadClass(targetClass)__                    }__                    if (!lists.containsKey(cl.getName())) {_                        lists.put(cl.getName(), new ArrayList())__                    }__                    generateModelFromKeyValueMap(cl, null, results, line)___                    _                    field.set(obj, lists.get(cl.getName()))___                } else {_                    throw new IllegalArgumentException("No target class has been defined in @OneToMany annotation !")__                }__            }__        }__    };param,clazz,param,obj,param,results,param,line,throws,exception;private,void,generate,model,from,key,value,map,class,clazz,object,obj,map,integer,list,results,int,line,throws,exception,for,field,field,clazz,get,declared,fields,field,set,accessible,true,key,value,pair,field,key,value,pair,field,field,get,annotation,key,value,pair,field,class,if,key,value,pair,field,null,int,key,key,value,pair,field,tag,list,string,values,results,get,key,string,value,null,if,values,null,if,obj,null,if,key,value,pair,field,required,throw,new,illegal,argument,exception,the,mandatory,key,tag,key,has,not,been,defined,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,if,l,is,empty,obj,l,get,0,else,obj,clazz,new,instance,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,set,0,obj,else,l,add,0,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,if,values,size,1,if,obj,null,value,string,values,get,0,object,result,null,if,value,null,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,result,format,field,format,value,key,line,log,debug,value,formated,result,else,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,else,list,l,lists,get,clazz,get,name,if,l,null,for,int,i,0,i,values,size,i,if,l,is,empty,l,size,i,obj,l,get,i,else,obj,clazz,new,instance,value,string,values,get,i,string,pattern,key,value,pair,field,pattern,format,format,format,factory,get,format,field,get,type,pattern,get,locale,key,value,pair,field,precision,object,result,format,field,format,value,key,line,log,debug,value,formated,result,try,if,value,null,field,set,obj,result,else,field,set,obj,get,default,value,for,primitive,field,get,type,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,if,l,is,empty,l,size,i,l,set,i,obj,else,l,add,i,obj,lists,put,clazz,get,name,l,obj,null,else,throw,new,illegal,argument,exception,the,list,of,values,is,empty,for,the,following,key,key,defined,in,the,class,clazz,get,name,else,object,result,get,default,value,for,primitive,field,get,type,try,field,set,obj,result,catch,exception,e,throw,new,illegal,argument,exception,setting,of,field,field,failed,for,object,obj,and,result,result,one,to,many,one,to,many,field,get,annotation,one,to,many,class,if,one,to,many,null,string,target,class,one,to,many,mapped,to,if,target,class,equals,class,cl,null,try,cl,thread,current,thread,get,context,class,loader,load,class,target,class,catch,class,not,found,exception,e,cl,get,class,get,class,loader,load,class,target,class,if,lists,contains,key,cl,get,name,lists,put,cl,get,name,new,array,list,generate,model,from,key,value,map,cl,null,results,line,field,set,obj,lists,get,cl,get,name,else,throw,new,illegal,argument,exception,no,target,class,has,been,defined,in,one,to,many,annotation
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1235652242;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1236098343;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1236835446;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1236912265;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1245936806;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_		return keyValuePairSeparator__	};find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1246045355;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1246454824;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1246526096;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1246589739;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1252503390;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1252575745;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1252663206;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1252844150;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1254476721;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1257975505;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1258732346;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1258736086;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1258969576;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1276268359;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1276357650;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1290574380;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1293121457;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1296495624;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1307685726;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1308432267;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1311784042;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1311838731;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1312713116;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1325779288;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1326392736;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1335090271;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1335788887;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1349099486;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1355739468;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1357140814;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1376549254;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1438938304;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1438938346;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1458660774;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1463827036;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1463827036;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1479916286;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1506410459;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1523968787;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public String getKeyValuePairSeparator();1536517284;Find the key value pair separator used to link the key with its value;public String getKeyValuePairSeparator() {_        return keyValuePairSeparator__    };find,the,key,value,pair,separator,used,to,link,the,key,with,its,value;public,string,get,key,value,pair,separator,return,key,value,pair,separator
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1245936806;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_		return messageOrdered__	};flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1246045355;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1246454824;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1246526096;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1246589739;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1252503390;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1252575745;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1252663206;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1252844150;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1254476721;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1257975505;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1258732346;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1258736086;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1258969576;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1276268359;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1276357650;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1290574380;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1293121457;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1296495624;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1307685726;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1308432267;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1311784042;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1311838731;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1312713116;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1325779288;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1326392736;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1335090271;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1335788887;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1349099486;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1355739468;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1357140814;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1376549254;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1438938304;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1438938346;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1458660774;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1463827036;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1463827036;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1479916286;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1506410459;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1523968787;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> public boolean isMessageOrdered();1536517284;Flag indicating if the message must be ordered__@return boolean;public boolean isMessageOrdered() {_        return messageOrdered__    };flag,indicating,if,the,message,must,be,ordered,return,boolean;public,boolean,is,message,ordered,return,message,ordered
BindyKeyValuePairFactory -> private void initMessageParameters();1235652242;Get parameters defined in @Message annotation;private void initMessageParameters() {__        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {__            for (Class<?> cl : models) {_                _                _                Message message = cl.getAnnotation(Message.class)___                if (message != null) {_                    _                    _                    ObjectHelper.notNull(message.pairSeparator(),_                                         "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper_                        .notNull(message.keyValuePairSeparator(),_                                 "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : "_                                  + keyValuePairSeparator)__                    }__                }__            }__        }__    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator
BindyKeyValuePairFactory -> private void initMessageParameters();1236098343;Get parameters defined in @Message annotation;private void initMessageParameters() {__        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {__            for (Class<?> cl : models) {_                _                _                Message message = cl.getAnnotation(Message.class)___                if (message != null) {_                    _                    _                    ObjectHelper.notNull(message.pairSeparator(),_                                         "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper_                        .notNull(message.keyValuePairSeparator(),_                                 "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : "_                                  + keyValuePairSeparator)__                    }__                }__            }__        }__    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator
BindyKeyValuePairFactory -> private void initMessageParameters();1236835446;Get parameters defined in @Message annotation;private void initMessageParameters() {__        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {__            for (Class<?> cl : models) {_                _                _                Message message = cl.getAnnotation(Message.class)___                if (message != null) {_                    _                    _                    ObjectHelper.notNull(message.pairSeparator(),_                        "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                        "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : "_                            + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }_                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf
BindyKeyValuePairFactory -> private void initMessageParameters();1236912265;Get parameters defined in @Message annotation;private void initMessageParameters() {__        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {__            for (Class<?> cl : models) {_                _                _                Message message = cl.getAnnotation(Message.class)___                if (message != null) {_                    _                    _                    ObjectHelper.notNull(message.pairSeparator(),_                        "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                        "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : "_                            + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }_                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf
BindyKeyValuePairFactory -> private void initMessageParameters();1245936806;Get parameters defined in @Message annotation;private void initMessageParameters() {__		if ((pairSeparator == null) || (keyValuePairSeparator == null)) {__			for (Class<?> cl : models) {__				_				Message message = cl.getAnnotation(Message.class)__				_				_				Section section = cl.getAnnotation(Section.class)___				if (message != null) {__					_					ObjectHelper.notNull(message.pairSeparator(),_							"No Pair Separator has been defined in the @Message annotation !")__					pairSeparator = message.pairSeparator()__					if (LOG.isDebugEnabled()) {_						LOG.debug("Pair Separator defined for the message : " + pairSeparator)__					}__					_					ObjectHelper.notNull(message.keyValuePairSeparator(),_							"No Key Value Pair Separator has been defined in the @Message annotation !")__					keyValuePairSeparator = message.keyValuePairSeparator()__					if (LOG.isDebugEnabled()) {_						LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__					}__					_					crlf = message.crlf()__					if (LOG.isDebugEnabled()) {_						LOG.debug("Carriage return defined for the message : " + crlf)__					}__					_					messageOrdered = message.isOrdered()__					if (LOG.isDebugEnabled()) {_						LOG.debug("Is the message ordered in output : " + messageOrdered)__					}_				}_				_				if (section != null) {_					_					_					ObjectHelper.notNull(section.nber(), "No number has been defined for the section !")__					_					_					sections.put(cl.getName(), section.nber())__					_				}_			}_		}_	};get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,nber,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,nber
BindyKeyValuePairFactory -> private void initMessageParameters();1246045355;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1246454824;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1246526096;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1246589739;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1252503390;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1252575745;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1252663206;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1252844150;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1254476721;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1257975505;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1258732346;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)__                _                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(),_                            "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(),_                            "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }_                _                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")__                    _                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1258736086;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1258969576;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1276268359;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1276357650;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1290574380;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1293121457;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1296495624;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Pair Separator defined for the message : " + pairSeparator)__                    }__                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key Value Pair Separator defined for the message : " + keyValuePairSeparator)__                    }__                    _                    crlf = message.crlf()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Carriage return defined for the message : " + crlf)__                    }__                    _                    messageOrdered = message.isOrdered()__                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Is the message ordered in output : " + messageOrdered)__                    }_                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,if,log,is,debug,enabled,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,if,log,is,debug,enabled,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,if,log,is,debug,enabled,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,if,log,is,debug,enabled,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1307685726;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message : {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message : {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message : {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output : {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1308432267;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message : {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message : {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message : {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output : {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1311784042;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation !")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message : {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation !")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message : {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message : {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output : {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section !")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1311838731;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1312713116;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1325779288;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1326392736;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1335090271;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1335788887;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1349099486;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1355739468;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1357140814;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1376549254;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1438938304;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            Class<?> cl = type()__            _            Message message = cl.getAnnotation(Message.class)___            _            Section section = cl.getAnnotation(Section.class)___            if (message != null) {_                _                ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                pairSeparator = message.pairSeparator()__                LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                _                ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                keyValuePairSeparator = message.keyValuePairSeparator()__                LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                _                crlf = message.crlf()__                LOG.debug("Carriage return defined for the message: {}", crlf)___                _                messageOrdered = message.isOrdered()__                LOG.debug("Is the message ordered in output: {}", messageOrdered)__            }__            if (section != null) {_                _                ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                _                sections.put(cl.getName(), section.number())__            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,class,cl,type,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1438938346;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1458660774;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1463827036;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1463827036;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1479916286;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1506410459;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1523968787;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> private void initMessageParameters();1536517284;Get parameters defined in @Message annotation;private void initMessageParameters() {_        if ((pairSeparator == null) || (keyValuePairSeparator == null)) {_            for (Class<?> cl : models) {_                _                Message message = cl.getAnnotation(Message.class)___                _                Section section = cl.getAnnotation(Section.class)___                if (message != null) {_                    _                    ObjectHelper.notNull(message.pairSeparator(), "No Pair Separator has been defined in the @Message annotation")__                    pairSeparator = message.pairSeparator()__                    LOG.debug("Pair Separator defined for the message: {}", pairSeparator)___                    _                    ObjectHelper.notNull(message.keyValuePairSeparator(), "No Key Value Pair Separator has been defined in the @Message annotation")__                    keyValuePairSeparator = message.keyValuePairSeparator()__                    LOG.debug("Key Value Pair Separator defined for the message: {}", keyValuePairSeparator)___                    _                    crlf = message.crlf()__                    LOG.debug("Carriage return defined for the message: {}", crlf)___                    _                    messageOrdered = message.isOrdered()__                    LOG.debug("Is the message ordered in output: {}", messageOrdered)__                }__                if (section != null) {_                    _                    ObjectHelper.notNull(section.number(), "No number has been defined for the section")___                    _                    sections.put(cl.getName(), section.number())__                }_            }_        }_    };get,parameters,defined,in,message,annotation;private,void,init,message,parameters,if,pair,separator,null,key,value,pair,separator,null,for,class,cl,models,message,message,cl,get,annotation,message,class,section,section,cl,get,annotation,section,class,if,message,null,object,helper,not,null,message,pair,separator,no,pair,separator,has,been,defined,in,the,message,annotation,pair,separator,message,pair,separator,log,debug,pair,separator,defined,for,the,message,pair,separator,object,helper,not,null,message,key,value,pair,separator,no,key,value,pair,separator,has,been,defined,in,the,message,annotation,key,value,pair,separator,message,key,value,pair,separator,log,debug,key,value,pair,separator,defined,for,the,message,key,value,pair,separator,crlf,message,crlf,log,debug,carriage,return,defined,for,the,message,crlf,message,ordered,message,is,ordered,log,debug,is,the,message,ordered,in,output,message,ordered,if,section,null,object,helper,not,null,section,number,no,number,has,been,defined,for,the,section,sections,put,cl,get,name,section,number
BindyKeyValuePairFactory -> @Override     public String unbind(Map<String, Object> model) throws Exception;1458660774;;@Override_    public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, getLocale(), keyValuePairField, field.getAnnotation(BindyConverter.class))___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()___                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)___                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;override,public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,get,locale,key,value,pair,field,field,get,annotation,bindy,converter,class,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> @Override     public String unbind(Map<String, Object> model) throws Exception;1463827036;;@Override_    public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            @SuppressWarnings("unchecked")_            FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField,_                    field.getType(),_                    field.getAnnotation(BindyConverter.class),_                    getLocale())__            Format<Object> format = (Format<Object>) formatFactory.getFormat(formattingOptions)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()___                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)___                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;override,public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,suppress,warnings,unchecked,formatting,options,formatting,options,converter,utils,convert,key,value,pair,field,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,object,format,format,object,format,factory,get,format,formatting,options,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> @Override     public String unbind(Map<String, Object> model) throws Exception;1463827036;;@Override_    public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            @SuppressWarnings("unchecked")_            FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField,_                    field.getType(),_                    field.getAnnotation(BindyConverter.class),_                    getLocale())__            Format<Object> format = (Format<Object>) formatFactory.getFormat(formattingOptions)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()___                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)___                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;override,public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,suppress,warnings,unchecked,formatting,options,formatting,options,converter,utils,convert,key,value,pair,field,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,object,format,format,object,format,factory,get,format,formatting,options,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> @Override     public String unbind(Map<String, Object> model) throws Exception;1479916286;;@Override_    public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            FormattingOptions formattingOptions = ConverterUtils.convert(keyValuePairField,_                    field.getType(),_                    field.getAnnotation(BindyConverter.class),_                    getLocale())__            Format<Object> format = (Format<Object>) formatFactory.getFormat(formattingOptions)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()___                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)___                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;override,public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,formatting,options,formatting,options,converter,utils,convert,key,value,pair,field,field,get,type,field,get,annotation,bindy,converter,class,get,locale,format,object,format,format,object,format,factory,get,format,formatting,options,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1258732346;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper_            .notNull(this.pairSeparator,_                     "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x" + Integer.toHexString(separator) + "', from : "_                      + this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : " + keyValuePairField.tag() + ", Field type : " + field.getType()_                          + ", class : " + field.getDeclaringClass().getName())__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : " + String.valueOf(keyGenerated) + ", for section : "_                                  + key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : "_                                                               + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator()_                                       + valueFormated__                                       _                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : " + keyValue + ", for the tag : " + keyValuePairField.tag() + ", and its formated value : " + valueFormated)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : " + positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : "_                                                               + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator()_                                       + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : " + keyValuePairField.tag()_                                      + this.getKeyValuePairSeparator() + valueFormated + separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position (" + posit + ") : " + value + separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,integer,to,hex,string,separator,from,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,key,value,pair,field,tag,field,type,field,get,type,class,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,string,value,of,key,generated,for,section,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,key,value,for,the,tag,key,value,pair,field,tag,and,its,formated,value,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1258736086;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x" + Integer.toHexString(separator) + "', from : " + this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : " + keyValuePairField.tag() + ", Field type : " + field.getType() + ", class : " + field.getDeclaringClass().getName())__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : " + String.valueOf(keyGenerated) + ", for section : " + key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : " + keyValue + ", for the tag : " + keyValuePairField.tag() + ", and its formated value : " + valueFormated)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : " + positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : " + keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position (" + posit + ") : " + value + separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,integer,to,hex,string,separator,from,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,key,value,pair,field,tag,field,type,field,get,type,class,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,string,value,of,key,generated,for,section,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,key,value,for,the,tag,key,value,pair,field,tag,and,its,formated,value,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1258969576;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x" + Integer.toHexString(separator) + "', from : " + this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : " + keyValuePairField.tag() + ", Field type : " + field.getType() + ", class : " + field.getDeclaringClass().getName())__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : " + String.valueOf(keyGenerated) + ", for section : " + key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : " + keyValue + ", for the tag : " + keyValuePairField.tag() + ", and its formated value : " + valueFormated)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : " + positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : " + keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position (" + posit + ") : " + value + separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,integer,to,hex,string,separator,from,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,key,value,pair,field,tag,field,type,field,get,type,class,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,string,value,of,key,generated,for,section,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,key,value,for,the,tag,key,value,pair,field,tag,and,its,formated,value,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1276268359;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x" + Integer.toHexString(separator) + "', from : " + this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : " + keyValuePairField.tag() + ", Field type : " + field.getType() + ", class : " + field.getDeclaringClass().getName())__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key of the section : " + key1 + ", and the field  : " + key2)__                    }   _                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : " + String.valueOf(keyGenerated) + ", for section : " + key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : " + keyValue + ", for the tag : " + keyValuePairField.tag() + ", and its formated value : " + valueFormated)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : " + positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : " + keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position (" + posit + ") : " + value + separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,integer,to,hex,string,separator,from,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,key,value,pair,field,tag,field,type,field,get,type,class,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,if,log,is,debug,enabled,log,debug,key,of,the,section,key1,and,the,field,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,string,value,of,key,generated,for,section,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,key,value,for,the,tag,key,value,pair,field,tag,and,its,formated,value,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1276357650;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x" + Integer.toHexString(separator) + "', from : " + this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : " + keyValuePairField.tag() + ", Field type : " + field.getType() + ", class : " + field.getDeclaringClass().getName())__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key of the section : " + key1 + ", and the field  : " + key2)__                    }   _                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : " + String.valueOf(keyGenerated) + ", for section : " + key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : " + keyValue + ", for the tag : " + keyValuePairField.tag() + ", and its formated value : " + valueFormated)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : " + positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : " + keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position (" + posit + ") : " + value + separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,integer,to,hex,string,separator,from,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,key,value,pair,field,tag,field,type,field,get,type,class,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,if,log,is,debug,enabled,log,debug,key,of,the,section,key1,and,the,field,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,string,value,of,key,generated,for,section,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,key,value,for,the,tag,key,value,pair,field,tag,and,its,formated,value,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1290574380;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x" + Integer.toHexString(separator) + "', from : " + this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : " + keyValuePairField.tag() + ", Field type : " + field.getType() + ", class : " + field.getDeclaringClass().getName())__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key of the section : " + key1 + ", and the field  : " + key2)__                    }   _                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : " + String.valueOf(keyGenerated) + ", for section : " + key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : " + keyValue + ", for the tag : " + keyValuePairField.tag() + ", and its formated value : " + valueFormated)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : " + positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : " + keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position (" + posit + ") : " + value + separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,integer,to,hex,string,separator,from,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,key,value,pair,field,tag,field,type,field,get,type,class,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,if,log,is,debug,enabled,log,debug,key,of,the,section,key1,and,the,field,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,string,value,of,key,generated,for,section,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,key,value,for,the,tag,key,value,pair,field,tag,and,its,formated,value,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1293121457;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x" + Integer.toHexString(separator) + "', from : " + this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : " + keyValuePairField.tag() + ", Field type : " + field.getType() + ", class : " + field.getDeclaringClass().getName())__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key of the section : " + key1 + ", and the field  : " + key2)__                    }   _                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : " + String.valueOf(keyGenerated) + ", for section : " + key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : " + keyValue + ", for the tag : " + keyValuePairField.tag() + ", and its formated value : " + valueFormated)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : " + positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : " + keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position (" + posit + ") : " + value + separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,integer,to,hex,string,separator,from,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,key,value,pair,field,tag,field,type,field,get,type,class,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,if,log,is,debug,enabled,log,debug,key,of,the,section,key1,and,the,field,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,string,value,of,key,generated,for,section,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,key,value,for,the,tag,key,value,pair,field,tag,and,its,formated,value,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1296495624;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x" + Integer.toHexString(separator) + "', from : " + this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : " + keyValuePairField.tag() + ", Field type : " + field.getType() + ", class : " + field.getDeclaringClass().getName())__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key of the section : " + key1 + ", and the field  : " + key2)__                    }   _                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : " + String.valueOf(keyGenerated) + ", for section : " + key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : " + keyValue + ", for the tag : " + keyValuePairField.tag() + ", and its formated value : " + valueFormated)__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : " + positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : " + keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator)__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position (" + posit + ") : " + value + separator)__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,integer,to,hex,string,separator,from,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,key,value,pair,field,tag,field,type,field,get,type,class,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,if,log,is,debug,enabled,log,debug,key,of,the,section,key1,and,the,field,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,string,value,of,key,generated,for,section,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,key,value,for,the,tag,key,value,pair,field,tag,and,its,formated,value,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1307685726;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x{}', from : {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : {}, Field type : {}, class : {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section : {}, and the field  : {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : {}, for section : {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : {}, for the tag : {}, and its formated value : {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormated})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormated, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formated,value,new,object,key,value,key,value,pair,field,tag,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1308432267;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x{}', from : {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : {}, Field type : {}, class : {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            Format format = FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section : {}, and the field  : {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : {}, for section : {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : {}, for the tag : {}, and its formated value : {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormated})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormated, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,format,format,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formated,value,new,object,key,value,key,value,pair,field,tag,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1311784042;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted : '0x{}', from : {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair is null !")___            _            Field field = annotedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag : {}, Field type : {}, class : {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section : {}, and the field  : {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated : {}, for section : {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted : {}, for the tag : {}, and its formated value : {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormated})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size : {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormated___                        try {_                            valueFormated = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added : {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormated, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,is,null,field,field,annoted,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formated,value,new,object,key,value,key,value,pair,field,tag,value,formated,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formated,try,value,formated,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formating,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formated,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1311838731;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1312713116;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1325779288;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1326392736;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = Converter.getCharDelimitor(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,get,char,delimitor,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1335090271;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1335788887;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1349099486;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, pattern, getLocale(), precision)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,pattern,get,locale,precision,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1355739468;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()__            String pattern = keyValuePairField.pattern()__            int precision = keyValuePairField.precision()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, getLocale(), keyValuePairField)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,string,pattern,key,value,pair,field,pattern,int,precision,key,value,pair,field,precision,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,get,locale,key,value,pair,field,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1357140814;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, getLocale(), keyValuePairField)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,get,locale,key,value,pair,field,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1376549254;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, getLocale(), keyValuePairField)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,get,locale,key,value,pair,field,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1438938304;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, getLocale(), keyValuePairField)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,get,locale,key,value,pair,field,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
BindyKeyValuePairFactory -> public String unbind(Map<String, Object> model) throws Exception;1438938346;;public String unbind(Map<String, Object> model) throws Exception {__        StringBuilder builder = new StringBuilder()___        Map<Integer, KeyValuePairField> keyValuePairFieldsSorted = new TreeMap<Integer, KeyValuePairField>(keyValuePairFields)__        Iterator<Integer> it = keyValuePairFieldsSorted.keySet().iterator()___        _        _        _        Map<Integer, String> positions = new TreeMap<Integer, String>()___        _        ObjectHelper.notNull(this.pairSeparator, "The pair separator has not been instantiated or property not defined in the @Message annotation")___        char separator = ConverterUtils.getCharDelimiter(this.getPairSeparator())___        if (LOG.isDebugEnabled()) {_            LOG.debug("Separator converted: '0x{}', from: {}", Integer.toHexString(separator), this.getPairSeparator())__        }__        while (it.hasNext()) {__            KeyValuePairField keyValuePairField = keyValuePairFieldsSorted.get(it.next())__            ObjectHelper.notNull(keyValuePairField, "KeyValuePair")___            _            Field field = annotatedFields.get(keyValuePairField.tag())__            _            field.setAccessible(true)___            if (LOG.isDebugEnabled()) {_                LOG.debug("Tag: {}, Field type: {}, class: {}", new Object[]{keyValuePairField.tag(), field.getType(), field.getDeclaringClass().getName()})__            }__            _            Class<?> type = field.getType()___            _            @SuppressWarnings("unchecked")_            Format<Object> format = (Format<Object>)FormatFactory.getFormat(type, getLocale(), keyValuePairField)___            _            Object obj = model.get(field.getDeclaringClass().getName())___            if (obj != null) {__                _                Object keyValue = field.get(obj)___                if (this.isMessageOrdered()) {_                    _                    _                    Integer key1 = sections.get(obj.getClass().getName())__                    Integer key2 = keyValuePairField.position()__                    _                    LOG.debug("Key of the section: {}, and the field: {}", key1, key2)__                 _                    Integer keyGenerated = generateKey(key1, key2)___                    if (LOG.isDebugEnabled()) {_                        LOG.debug("Key generated: {}, for section: {}", String.valueOf(keyGenerated), key1)__                    }__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value to be formatted: {}, for the tag: {}, and its formatted value: {}", new Object[]{keyValue, keyValuePairField.tag(), valueFormatted})__                        }__                        _                        _                        positions.put(keyGenerated, value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Positions size: {}", positions.size())__                        }_                    }_                } else {__                    _                    if (keyValue != null) {__                        _                        String valueFormatted___                        try {_                            valueFormatted = format.format(keyValue)__                        } catch (Exception e) {_                            throw new IllegalArgumentException("Formatting error detected for the tag: " + keyValuePairField.tag(), e)__                        }__                        _                        String value = keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormatted + separator___                        _                        builder.append(value)___                        if (LOG.isDebugEnabled()) {_                            LOG.debug("Value added: {}{}{}{}", new Object[]{keyValuePairField.tag(), this.getKeyValuePairSeparator(), valueFormatted, separator})__                        }_                    }_                }_            }_        }__        _        _        if (this.isMessageOrdered()) {__            Iterator<Integer> posit = positions.keySet().iterator()___            while (posit.hasNext()) {_                String value = positions.get(posit.next())___                if (LOG.isDebugEnabled()) {_                    LOG.debug("Value added at the position ({}) : {}{}", new Object[]{posit, value, separator})__                }__                builder.append(value + separator)__            }_        }__        return builder.toString()__    };;public,string,unbind,map,string,object,model,throws,exception,string,builder,builder,new,string,builder,map,integer,key,value,pair,field,key,value,pair,fields,sorted,new,tree,map,integer,key,value,pair,field,key,value,pair,fields,iterator,integer,it,key,value,pair,fields,sorted,key,set,iterator,map,integer,string,positions,new,tree,map,integer,string,object,helper,not,null,this,pair,separator,the,pair,separator,has,not,been,instantiated,or,property,not,defined,in,the,message,annotation,char,separator,converter,utils,get,char,delimiter,this,get,pair,separator,if,log,is,debug,enabled,log,debug,separator,converted,0x,from,integer,to,hex,string,separator,this,get,pair,separator,while,it,has,next,key,value,pair,field,key,value,pair,field,key,value,pair,fields,sorted,get,it,next,object,helper,not,null,key,value,pair,field,key,value,pair,field,field,annotated,fields,get,key,value,pair,field,tag,field,set,accessible,true,if,log,is,debug,enabled,log,debug,tag,field,type,class,new,object,key,value,pair,field,tag,field,get,type,field,get,declaring,class,get,name,class,type,field,get,type,suppress,warnings,unchecked,format,object,format,format,object,format,factory,get,format,type,get,locale,key,value,pair,field,object,obj,model,get,field,get,declaring,class,get,name,if,obj,null,object,key,value,field,get,obj,if,this,is,message,ordered,integer,key1,sections,get,obj,get,class,get,name,integer,key2,key,value,pair,field,position,log,debug,key,of,the,section,and,the,field,key1,key2,integer,key,generated,generate,key,key1,key2,if,log,is,debug,enabled,log,debug,key,generated,for,section,string,value,of,key,generated,key1,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,if,log,is,debug,enabled,log,debug,value,to,be,formatted,for,the,tag,and,its,formatted,value,new,object,key,value,key,value,pair,field,tag,value,formatted,positions,put,key,generated,value,if,log,is,debug,enabled,log,debug,positions,size,positions,size,else,if,key,value,null,string,value,formatted,try,value,formatted,format,format,key,value,catch,exception,e,throw,new,illegal,argument,exception,formatting,error,detected,for,the,tag,key,value,pair,field,tag,e,string,value,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,builder,append,value,if,log,is,debug,enabled,log,debug,value,added,new,object,key,value,pair,field,tag,this,get,key,value,pair,separator,value,formatted,separator,if,this,is,message,ordered,iterator,integer,posit,positions,key,set,iterator,while,posit,has,next,string,value,positions,get,posit,next,if,log,is,debug,enabled,log,debug,value,added,at,the,position,new,object,posit,value,separator,builder,append,value,separator,return,builder,to,string
