commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new Web3jProducer(this, configuration). }
false;public;1;6;;@Override public Consumer createConsumer(Processor processor) throws Exception {     Web3jConsumer consumer = new Web3jConsumer(this, processor, configuration).     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public Web3j getWeb3j() {     return web3j. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;private;2;24;;private Web3j buildService(String clientAddress, Web3jConfiguration configuration) {     LOG.info("Building service for endpoint: {}", clientAddress + configuration).     if (configuration.getWeb3j() != null) {         return configuration.getWeb3j().     }     Web3jService web3jService.     if (clientAddress == null || clientAddress.equals("")) {         web3jService = new HttpService().     } else if (clientAddress.startsWith("http")) {         web3jService = new HttpService(clientAddress).     } else if (System.getProperty("os.name").toLowerCase().startsWith("win")) {         web3jService = new WindowsIpcService(clientAddress).     } else {         web3jService = new UnixIpcService(clientAddress).     }     if (configuration.isQuorumAPI()) {         return Quorum.build(web3jService).     }     return Web3j.build(web3jService). }
false;public;0;3;;public String getNodeAddress() {     return nodeAddress. }
true;public;1;3;/**  * Sets the node address used to communicate  */ ;/**  * Sets the node address used to communicate  */ public void setNodeAddress(String nodeAddress) {     this.nodeAddress = nodeAddress. }
false;public,static;4;5;;public static EthFilter buildEthFilter(DefaultBlockParameter fromBlock, DefaultBlockParameter toBlock, List<String> addresses, List<String> topics) {     EthFilter filter = new EthFilter(fromBlock, toBlock, addresses).     addTopics(filter, topics).     return filter. }
false;public,static;2;5;;public static ShhFilter buildShhFilter(String data, List<String> topics) {     ShhFilter filter = new ShhFilter(data).     addTopics(filter, topics).     return filter. }
false;private,static;2;11;;private static void addTopics(Filter filter, List<String> topics) {     if (topics != null) {         for (String topic : topics) {             if (topic != null && topic.length() > 0) {                 filter.addSingleTopic(topic).             } else {                 filter.addNullTopic().             }         }     } }
