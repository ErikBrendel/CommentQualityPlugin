commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public Subscription answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     ((Action1<EthBlock>) args[0]).call(new EthBlock()).     return subscription. }
false;public;0;18;;@Test public void successTest() throws Exception {     mockError.expectedMinimumMessageCount(0).     mockResult.expectedMinimumMessageCount(1).     Mockito.when(mockWeb3j.replayBlocksObservable(any(DefaultBlockParameter.class), any(DefaultBlockParameter.class), any(Boolean.class))).thenReturn(observable).     Mockito.when(observable.subscribe(any(), any(), any())).thenAnswer(new Answer() {          public Subscription answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             ((Action1<EthBlock>) args[0]).call(new EthBlock()).             return subscription.         }     }).     context.start().     mockResult.assertIsSatisfied().     mockError.assertIsSatisfied(). }
false;public;1;5;;public Subscription answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     ((Action1<Throwable>) args[1]).call(new RuntimeException("Error")).     return subscription. }
false;public;0;18;;@Test public void errorTest() throws Exception {     mockResult.expectedMessageCount(0).     mockError.expectedMinimumMessageCount(1).     Mockito.when(mockWeb3j.replayBlocksObservable(any(DefaultBlockParameter.class), any(DefaultBlockParameter.class), any(Boolean.class))).thenReturn(observable).     Mockito.when(observable.subscribe(any(), any(), any())).thenAnswer(new Answer() {          public Subscription answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             ((Action1<Throwable>) args[1]).call(new RuntimeException("Error")).             return subscription.         }     }).     context.start().     mockError.assertIsSatisfied().     mockResult.assertIsSatisfied(). }
false;public;1;5;;public Subscription answer(InvocationOnMock invocation) {     Object[] args = invocation.getArguments().     ((Action0) args[2]).call().     return subscription. }
false;public;0;19;;@Test public void doneTest() throws Exception {     mockResult.expectedMessageCount(1).     mockResult.expectedHeaderReceived("status", "done").     mockError.expectedMinimumMessageCount(0).     Mockito.when(mockWeb3j.replayBlocksObservable(any(DefaultBlockParameter.class), any(DefaultBlockParameter.class), any(Boolean.class))).thenReturn(observable).     Mockito.when(observable.subscribe(any(), any(), any())).thenAnswer(new Answer() {          public Subscription answer(InvocationOnMock invocation) {             Object[] args = invocation.getArguments().             ((Action0) args[2]).call().             return subscription.         }     }).     context.start().     mockError.assertIsSatisfied().     mockResult.assertIsSatisfied(). }
false;public;0;5;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from(getUrl() + OPERATION.toLowerCase() + "=" + REPLAY_BLOCKS_OBSERVABLE + "&fromBlock=5499965&toBlock=5499967&fullTransactionObjects=true").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from(getUrl() + OPERATION.toLowerCase() + "=" + REPLAY_BLOCKS_OBSERVABLE + "&fromBlock=5499965&toBlock=5499967&fullTransactionObjects=true").to("mock:result").         }     }. }
