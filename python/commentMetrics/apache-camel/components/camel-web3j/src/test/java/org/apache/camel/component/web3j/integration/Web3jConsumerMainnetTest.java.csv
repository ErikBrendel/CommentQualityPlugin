commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getUrl() {     return "https://mainnet.infura.io/YOUR_INFURA_ID?". }
false;public;0;6;;@Test public void consumerTest() throws Exception {     // block 5713030 and 5713031 have 261 transactions in total     mockResult.expectedMinimumMessageCount(261).     mockError.expectedMessageCount(0).     MockEndpoint.assertIsSatisfied(context). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     EthBlock.Block body = exchange.getIn().getBody(EthBlock.Block.class).     List<EthBlock.TransactionResult> transactions = body.getTransactions().     exchange.getIn().setBody(transactions). }
false;public;0;25;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("web3j://" + getUrl() + OPERATION.toLowerCase() + "=" + REPLAY_BLOCKS_OBSERVABLE + "&" + "fromBlock=5713030&" + "toBlock=5713031&" + "fullTransactionObjects=false").choice().when(simple("${in.header.status} != 'done'")).to("log:foo?showAll=true&multiline=true&level=INFO").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             EthBlock.Block body = exchange.getIn().getBody(EthBlock.Block.class).             List<EthBlock.TransactionResult> transactions = body.getTransactions().             exchange.getIn().setBody(transactions).         }     }).split(body()).to("mock:result").endChoice().otherwise().log("DONE"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("web3j://" + getUrl() + OPERATION.toLowerCase() + "=" + REPLAY_BLOCKS_OBSERVABLE + "&" + "fromBlock=5713030&" + "toBlock=5713031&" + "fullTransactionObjects=false").choice().when(simple("${in.header.status} != 'done'")).to("log:foo?showAll=true&multiline=true&level=INFO").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     EthBlock.Block body = exchange.getIn().getBody(EthBlock.Block.class).                     List<EthBlock.TransactionResult> transactions = body.getTransactions().                     exchange.getIn().setBody(transactions).                 }             }).split(body()).to("mock:result").endChoice().otherwise().log("DONE").         }     }. }
