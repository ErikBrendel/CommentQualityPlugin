commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;public void handleEvent(Event event) {     Exchange exchange = endpoint.createExchange().     // TODO: populate exchange headers     exchange.getIn().setBody(event).     log.trace("EventAdmin {} is firing", endpoint.getTopic()).     try {         getProcessor().process(exchange).         // log exception if an exception occurred and was not handled         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).         }     } catch (Exception e) {         getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).     } }
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     Dictionary<String, String> props = new Hashtable<>().     props.put(EventConstants.EVENT_TOPIC, endpoint.getTopic()).     registration = endpoint.getComponent().getBundleContext().registerService(EventHandler.class.getName(), this, props). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     if (registration != null) {         registration.unregister().     }     super.doStop(). }
