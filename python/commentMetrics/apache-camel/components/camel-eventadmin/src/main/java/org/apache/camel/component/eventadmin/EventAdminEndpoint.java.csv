commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Name of topic to listen or send to  */ ;/**  * Name of topic to listen or send to  */ public String getTopic() {     return topic. }
false;public;0;3;;public boolean isSend() {     return send. }
true;public;1;3;/**  * Whether to use 'send' or 'synchronous' deliver.  * Default false (async delivery)  */ ;/**  * Whether to use 'send' or 'synchronous' deliver.  * Default false (async delivery)  */ public void setSend(boolean send) {     this.send = send. }
false;public;0;3;;public EventAdminComponent getComponent() {     return (EventAdminComponent) super.getComponent(). }
false;public;0;3;;public Producer createProducer() throws Exception {     return new EventAdminProducer(this). }
false;public;1;5;;public Consumer createConsumer(Processor processor) throws Exception {     EventAdminConsumer answer = new EventAdminConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public boolean isMultipleConsumersSupported() {     return true. }
