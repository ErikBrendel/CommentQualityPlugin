commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void configure() throws Exception {     from(DIRECT_SEND_S_1).toF("iec60870-server:localhost:%s/00-00-00-00-01", port).     fromF("iec60870-client:localhost:%s/00-00-00-00-01", port).to(MOCK_CLIENT_1).     fromF("iec60870-client:localhost:%s/00-00-00-00-02", port).to(MOCK_CLIENT_2).     from(DIRECT_SEND_C_1).toF("iec60870-client:localhost:%s/00-00-00-01-01", port).     fromF("iec60870-server:localhost:%s/00-00-00-01-01", port).to(MOCK_SERVER_1). }
false;protected;0;17;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     final int port = Ports.pickServerPort().     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(DIRECT_SEND_S_1).toF("iec60870-server:localhost:%s/00-00-00-00-01", port).             fromF("iec60870-client:localhost:%s/00-00-00-00-01", port).to(MOCK_CLIENT_1).             fromF("iec60870-client:localhost:%s/00-00-00-00-02", port).to(MOCK_CLIENT_2).             from(DIRECT_SEND_C_1).toF("iec60870-client:localhost:%s/00-00-00-01-01", port).             fromF("iec60870-server:localhost:%s/00-00-00-01-01", port).to(MOCK_SERVER_1).         }     }. }
false;public;0;17;;@Test public void testFloat1() throws InterruptedException {     this.producerServer1.sendBody(1.23f).     // expect - count     this.testClient1Endpoint.setExpectedCount(1).     this.testClient2Endpoint.setExpectedCount(0).     // expect     expectValue(testClient1Endpoint.message(0), assertGoodValue(1.23f)).     // assert     assertMockEndpointsSatisfied(1_000, TimeUnit.MILLISECONDS). }
false;public;0;17;;@Test public void testBoolean1() throws InterruptedException {     this.producerServer1.sendBody(true).     // expect - count     this.testClient1Endpoint.setExpectedCount(1).     this.testClient2Endpoint.setExpectedCount(0).     // expect     expectValue(testClient1Endpoint.message(0), assertGoodValue(true)).     // assert     assertMockEndpointsSatisfied(1_000, TimeUnit.MILLISECONDS). }
false;public;0;21;;@Test public void testCommand1() throws InterruptedException {     Thread.sleep(1_000).     this.producerClient1.sendBody(true).     // expect - count     this.testServer1Endpoint.setExpectedCount(1).     // expect     expectRequest(testServer1Endpoint.message(0), expectRequest(true)).     // assert     assertMockEndpointsSatisfied(2_000, TimeUnit.MILLISECONDS).     System.out.println(testServer1Endpoint.getExchanges().get(0).getIn().getBody()). }
false;private;2;7;;private <T> void expectValue(AssertionClause message, Consumer<Value<?>> consumer) {     message.predicate(exchange -> {         final Value<?> body = exchange.getIn().getBody(Value.class).         consumer.accept(body).         return true.     }). }
false;private;2;7;;private <T> void expectRequest(AssertionClause message, Consumer<Request<?>> consumer) {     message.predicate(exchange -> {         final Request<?> body = exchange.getIn().getBody(Request.class).         consumer.accept(body).         return true.     }). }
false;public,static;1;10;;public static Consumer<Value<?>> assertGoodValue(final Object expectedValue) {     return value -> {         assertNotNull(value).         assertEquals(expectedValue, value.getValue()).         assertTrue(value.getQualityInformation().isValid()).         assertTrue(value.getQualityInformation().isTopical()).         assertFalse(value.getQualityInformation().isBlocked()).         assertFalse(value.getQualityInformation().isSubstituted()).     }. }
false;private;1;6;;private Consumer<Request<?>> expectRequest(final Object expectedValue) {     return value -> {         assertNotNull(value).         assertEquals(expectedValue, value.getValue()).     }. }
