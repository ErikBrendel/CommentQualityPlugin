commented;modifiers;parameterAmount;loc;comment;code
false;;2;1;;void update(ObjectAddress address, Value<?> value).
false;public;2;3;;@Override public void stateChanged(final State state, final Throwable e) { }
true;public;2;5;/**  * Called when the connection was established  */ ;/**  * Called when the connection was established  */ @Override public void activated(final DataModuleContext dataModuleContext, final ChannelHandlerContext ctx) {     dataModuleContext.requestStartData().     dataModuleContext.startInterrogation(ASDUAddress.BROADCAST, QualifierOfInterrogation.GLOBAL). }
true;public;0;3;/**  * Called when the start data was accepted  */ ;/**  * Called when the start data was accepted  */ @Override public void started() { }
true;public;0;3;/**  * Called when the connection broke  */ ;/**  * Called when the connection broke  */ @Override public void disconnected() { }
false;protected;3;4;;@Override protected void fireEntry(final ASDUAddress asduAddress, final InformationObjectAddress address, final Value<?> value) {     ClientConnection.this.handleData(ObjectAddress.valueOf(asduAddress, address), value). }
false;public;0;5;;public void start() {     final DataModule dataModule = new DataModule(this.dataHandler, this.options.getDataModuleOptions()).     final ModulesFactory factory = () -> Arrays.asList(dataModule, new DiscardAckModule()).     this.client = new AutoConnectClient(this.host, this.port, this.options.getProtocolOptions(), factory, this.stateListener). }
false;public;0;3;;public void stop() throws Exception {     this.client.close(). }
false;protected,synchronized;2;7;;protected synchronized void handleData(final ObjectAddress address, final Value<?> value) {     this.lastValue.put(address, value).     final ValueListener listener = this.listeners.get(address).     if (listener != null) {         listener.update(address, value).     } }
false;public,synchronized;2;11;;public synchronized void setListener(final ObjectAddress address, final ValueListener listener) {     if (listener != null) {         this.listeners.put(address, listener).         final Value<?> last = this.lastValue.get(address).         if (last != null) {             listener.update(address, last).         }     } else {         this.listeners.remove(address).     } }
false;public;1;3;;public boolean executeCommand(final Object command) {     return this.client.writeCommand(command). }
