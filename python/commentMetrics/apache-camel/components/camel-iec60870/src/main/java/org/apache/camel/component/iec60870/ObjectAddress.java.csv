commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return String.format("%02d-%02d-%02d-%02d-%02d", this.address[0], this.address[1], this.address[2], this.address[3], this.address[4]). }
false;public;0;7;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + Arrays.hashCode(this.address).     return result. }
false;public;1;17;;@Override public boolean equals(final Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     final ObjectAddress other = (ObjectAddress) obj.     if (!Arrays.equals(this.address, other.address)) {         return false.     }     return true. }
false;public,static;2;9;;public static ObjectAddress valueOf(final ASDUAddress asduAddress, final InformationObjectAddress address) {     Objects.requireNonNull(asduAddress).     Objects.requireNonNull(address).     final int[] a = asduAddress.toArray().     final int[] b = address.toArray().     return new ObjectAddress(a[0], a[1], b[0], b[1], b[2]). }
false;public,static;1;29;;public static ObjectAddress valueOf(final String address) {     if (address == null || address.isEmpty()) {         return null.     }     final String[] toks = address.split("-").     if (toks.length != 5) {         throw new IllegalArgumentException("Invalid address. Must have 5 octets.").     }     final int[] a = new int[toks.length].     for (int i = 0. i < toks.length. i++) {         final int v.         try {             v = Integer.parseInt(toks[i]).         } catch (final NumberFormatException e) {             throw new IllegalArgumentException("Address segment must be numeric", e).         }         if (v < 0 || v > 255) {             throw new IllegalArgumentException(String.format("Address segment must be an octet, between 0 and 255 (is %s)", v)).         }         a[i] = v.     }     return new ObjectAddress(a). }
false;public;0;3;;public ASDUAddress getASDUAddress() {     return ASDUAddress.fromArray(new int[] { this.address[0], this.address[1] }). }
false;public;0;3;;public InformationObjectAddress getInformationObjectAddress() {     return InformationObjectAddress.fromArray(new int[] { this.address[2], this.address[3], this.address[4] }). }
