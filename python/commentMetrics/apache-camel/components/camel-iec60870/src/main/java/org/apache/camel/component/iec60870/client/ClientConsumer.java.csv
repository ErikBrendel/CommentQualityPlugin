commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart().     this.connection.setListener(this.endpoint.getAddress(), this::updateValue). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     this.connection.setListener(this.endpoint.getAddress(), null).     super.doStop(). }
false;private;2;10;;private void updateValue(final ObjectAddress address, final Value<?> value) {     // Note: we hold the sync lock for the connection     try {         final Exchange exchange = getEndpoint().createExchange().         exchange.setIn(mapMessage(value)).         getAsyncProcessor().process(exchange).     } catch (final Exception e) {         log.debug("Failed to process message", e).     } }
false;private;1;12;;private Message mapMessage(final Value<?> value) {     final DefaultMessage message = new DefaultMessage(this.endpoint.getCamelContext()).     message.setBody(value).     message.setHeader("value", value.getValue()).     message.setHeader("timestamp", Instant.ofEpochMilli(value.getTimestamp())).     message.setHeader("quality", value.getQualityInformation()).     message.setHeader("overflow", value.isOverflow()).     return message. }
