commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected ChangeModel createChangeModel() {     if (ServerInstance.this.options.getBufferingPeriod() != null && ServerInstance.this.options.getBufferingPeriod() > 0) {         LOG.info("Creating buffering change model: {} ms", ServerInstance.this.options.getBufferingPeriod()).         return makeBufferingChangeModel(ServerInstance.this.options.getBufferingPeriod()).     } else {         LOG.info("Creating instant change model").         return makeInstantChangeModel().     } }
false;public;1;4;;@Override public Action prepareCommand(final Request<Boolean> request) {     return prepareAction(request). }
false;public;1;4;;@Override public Action prepareSetpointFloat(final Request<Float> request) {     return prepareAction(request). }
false;public;1;4;;@Override public Action prepareSetpointScaled(final Request<Short> request) {     return prepareAction(request). }
false;protected;0;20;;@Override protected WriteModel createWriteModel() {     return new WriteModel() {          @Override         public Action prepareCommand(final Request<Boolean> request) {             return prepareAction(request).         }          @Override         public Action prepareSetpointFloat(final Request<Float> request) {             return prepareAction(request).         }          @Override         public Action prepareSetpointScaled(final Request<Short> request) {             return prepareAction(request).         }     }. }
false;protected;0;9;;@Override protected BackgroundModel createBackgroundModel() {     if (ServerInstance.this.options.getBackgroundScanPeriod() > 0) {         LOG.info("Creating background scan model: {} ms", ServerInstance.this.options.getBackgroundScanPeriod()).         return makeDefaultBackgroundModel().     }     LOG.info("Not creating background scan model").     return null. }
false;public;4;4;;@Override public void notifyDataChange(final ASDUAddress asduAddress, final InformationObjectAddress informationObjectAddress, final Value<?> value, final boolean notify) {     super.notifyDataChange(asduAddress, informationObjectAddress, value, notify). }
false;;1;1;;CompletionStage<Void> execute(Request<?> request).
false;public;0;5;;public void start() {     this.dataModel.start().     this.dataModule = new DataModule(this.options.getDataModuleOptions(), this.dataModel).     this.server = new Server(this.address, this.options.getProtocolOptions(), asList(this.dataModule, new DiscardAckModule())). }
false;public;0;34;;public void stop() {     final LinkedList<Exception> ex = new LinkedList<>().     if (this.server != null) {         try {             this.server.close().         } catch (final Exception e) {             ex.add(e).         }         this.server = null.     }     if (this.dataModule != null) {         try {             this.dataModule.dispose().         } catch (final Exception e) {             ex.add(e).         }         this.dataModule = null.     }     // handle all exceptions     final Exception e = ex.pollFirst().     if (e != null) {         RuntimeException re.         if (e instanceof RuntimeException) {             re = (RuntimeException) e.         } else {             re = new RuntimeException(e).         }         ex.forEach(re::addSuppressed).         throw re.     } }
false;private;1;11;;private Action prepareAction(final Request<?> request) {     final ObjectAddress address = ObjectAddress.valueOf(request.getHeader().getAsduAddress(), request.getAddress()).     final ServerObjectListener listener = this.listeners.get(address).     if (listener == null) {         // no one is listening         return null.     }     return () -> listener.execute(request). }
false;public;2;9;;public void setListener(final ObjectAddress address, final ServerObjectListener listener) {     Objects.requireNonNull(address).     if (listener != null) {         this.listeners.put(address, listener).     } else {         this.listeners.remove(address).     } }
false;public;2;6;;public void notifyValue(final ObjectAddress address, final Value<?> value) {     Objects.requireNonNull(address).     Objects.requireNonNull(value).     this.dataModel.notifyDataChange(address.getASDUAddress(), address.getInformationObjectAddress(), value, true). }
