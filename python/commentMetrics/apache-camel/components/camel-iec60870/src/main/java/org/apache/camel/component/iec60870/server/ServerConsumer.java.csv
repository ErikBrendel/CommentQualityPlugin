commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart().     this.server.setListener(this.endpoint.getAddress(), this::updateValue). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     this.server.setListener(this.endpoint.getAddress(), null).     super.doStop(). }
false;private;1;38;;private CompletionStage<Void> updateValue(final Request<?> value) {     try {         // create exchange         final Exchange exchange = getEndpoint().createExchange().         exchange.setIn(mapMessage(value)).         // create new future         final CompletableFuture<Void> result = new CompletableFuture<>().         // process and map async callback to our future         getAsyncProcessor().process(exchange, doneSync -> result.complete(null)).         return result.     } catch (final Exception e) {         // we failed triggering the process         log.debug("Failed to process message", e).         // create a future         final CompletableFuture<Void> result = new CompletableFuture<>().         // complete it right away         result.completeExceptionally(e).         return result.     } }
false;private;1;14;;private Message mapMessage(final Request<?> request) {     final DefaultMessage message = new DefaultMessage(this.endpoint.getCamelContext()).     message.setBody(request).     message.setHeader("address", ObjectAddress.valueOf(request.getHeader().getAsduAddress(), request.getAddress())).     message.setHeader("value", request.getValue()).     message.setHeader("informationObjectAddress", request.getAddress()).     message.setHeader("asduHeader", request.getHeader()).     message.setHeader("type", request.getType()).     message.setHeader("execute", request.isExecute()).     return message. }
