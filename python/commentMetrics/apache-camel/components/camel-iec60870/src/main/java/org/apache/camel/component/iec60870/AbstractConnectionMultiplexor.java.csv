commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;void unregister() throws Exception.
false;public;0;4;;@Override public void unregister() throws Exception {     AbstractConnectionMultiplexor.this.unregister(this). }
false;public,synchronized;0;13;;public synchronized Handle register() throws Exception {     final HandleImplementation handle = new HandleImplementation().     final boolean needStart = this.handles.isEmpty().     this.handles.add(handle).     if (needStart) {         LOG.info("Calling performStart()").         performStart().     }     return handle. }
false;private,synchronized;1;10;;private synchronized void unregister(final HandleImplementation handle) throws Exception {     if (!this.handles.remove(handle)) {         return.     }     if (this.handles.isEmpty()) {         LOG.info("Calling performStop()").         performStop().     } }
false;public,synchronized;0;17;;public synchronized void dispose() {     LOG.info("Disposing").     if (this.handles.isEmpty()) {         LOG.debug("Disposing - not started").         return.     }     LOG.debug("Disposing - calling performStop()").     this.handles.clear().     try {         performStop().     } catch (final Exception e) {         throw new RuntimeException("Failed to stop on dispose", e).     } }
false;protected,abstract;0;1;;protected abstract void performStart() throws Exception.
false;protected,abstract;0;1;;protected abstract void performStop() throws Exception.
