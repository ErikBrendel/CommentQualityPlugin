commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;2;1;;protected abstract T1 createConnection(ConnectionId id, T2 options).
true;protected;1;3;/**  * Default connection options  *  * @param defaultConnectionOptions the new default connection options, must  *            not be {@code null}  */ ;/**  * Default connection options  *  * @param defaultConnectionOptions the new default connection options, must  *            not be {@code null}  */ protected void setDefaultConnectionOptions(final T2 defaultConnectionOptions) {     this.defaultConnectionOptions = requireNonNull(defaultConnectionOptions). }
true;protected;0;3;/**  * Get the default connection options  *  * @return the default connect options, never returns {@code null}  */ ;/**  * Get the default connection options  *  * @return the default connect options, never returns {@code null}  */ protected T2 getDefaultConnectionOptions() {     return this.defaultConnectionOptions. }
false;protected;3;10;;@Override protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {     log.info("Create endpoint - uri: {}, remaining: {}, parameters: {}", uri, remaining, parameters).     final T1 connection = lookupConnection(uri, parameters).     final ObjectAddress address = parseAddress(uri).     return createEndpoint(uri, connection, address). }
false;protected,abstract;3;1;;protected abstract Endpoint createEndpoint(String uri, T1 connection, ObjectAddress address).
false;protected;2;35;;protected T2 parseOptions(final ConnectionId id, final Map<String, Object> parameters) throws Exception {     // test for provided connection options     final Object connectionOptions = parameters.get(Constants.PARAM_CONNECTION_OPTIONS).     if (connectionOptions != null) {         try {             return this.connectionOptionsClazz.cast(connectionOptions).         } catch (final ClassCastException e) {             throw new IllegalArgumentException(String.format("'%s' must by of type %s", Constants.PARAM_CONNECTION_OPTIONS, ClientOptions.class.getName()), e).         }     }     // construct new default set     final T2 options = this.defaultConnectionOptions.copy().     if (parameters.get(Constants.PARAM_PROTOCOL_OPTIONS) instanceof ProtocolOptions) {         options.setProtocolOptions((ProtocolOptions) parameters.get(Constants.PARAM_PROTOCOL_OPTIONS)).     }     // apply dataModuleOptions     applyDataModuleOptions(options, parameters).     // apply parameters to connection options     setProperties(options, parameters).     return options. }
false;protected,abstract;2;1;;protected abstract void applyDataModuleOptions(T2 options, Map<String, Object> parameters).
false;private;2;29;;private T1 lookupConnection(final String fullUri, final Map<String, Object> parameters) throws Exception {     log.debug("parse connection - '{}'", fullUri).     if (fullUri == null || fullUri.isEmpty()) {         throw new IllegalArgumentException("Invalid URI: " + fullUri).     }     final ConnectionId id = parseConnectionId(fullUri, parameters).     log.debug("parse connection - fullUri: {} -> {}", fullUri, id).     synchronized (this) {         log.debug("Locating connection - {}", id).         T1 connection = this.connections.get(id).         log.debug("Result - {} -> {}", id, connection).         if (connection == null) {             final T2 options = parseOptions(id, parameters).             log.debug("Creating new connection: {}", options).             connection = createConnection(id, options).             this.connections.put(id, connection).         }         return connection.     } }
false;private,static;2;7;;private static ConnectionId parseConnectionId(final String fullUri, final Map<String, Object> parameters) {     final URI uri = URI.create(fullUri).     final Object connectionId = parameters.get("connectionId").     return new ConnectionId(uri.getHost(), uri.getPort(), connectionId instanceof String ? (String) connectionId : null). }
false;private,static;1;8;;private static ObjectAddress parseAddress(final String fullUri) {     final URI uri = URI.create(fullUri).     String path = uri.getPath().     path = path.replaceAll("^\\/+", "").     return ObjectAddress.valueOf(path). }
