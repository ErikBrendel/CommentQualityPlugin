commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;6;;@Override protected void applyDataModuleOptions(final ServerOptions options, final Map<String, Object> parameters) {     if (parameters.get(Constants.PARAM_DATA_MODULE_OPTIONS) instanceof DataModuleOptions) {         options.setDataModuleOptions((DataModuleOptions) parameters.get(Constants.PARAM_DATA_MODULE_OPTIONS)).     } }
false;protected;2;10;;@Override protected ServerConnectionMultiplexor createConnection(final ConnectionId id, final ServerOptions options) {     log.debug("Create new server - id: {}", id).     try {         return new ServerConnectionMultiplexor(new ServerInstance(id.getHost(), id.getPort(), options)).     } catch (final UnknownHostException e) {         throw new RuntimeException(e).     } }
false;protected;3;4;;@Override protected Endpoint createEndpoint(final String uri, final ServerConnectionMultiplexor connection, final ObjectAddress address) {     return new ServerEndpoint(uri, this, connection, address). }
true;public;1;4;/**  * Default connection options  *  * @param defaultConnectionOptions the new default connection options, must  *            not be {@code null}  */ ;/**  * Default connection options  *  * @param defaultConnectionOptions the new default connection options, must  *            not be {@code null}  */ @Override public void setDefaultConnectionOptions(final ServerOptions defaultConnectionOptions) {     super.setDefaultConnectionOptions(defaultConnectionOptions). }
false;public;0;4;;@Override public ServerOptions getDefaultConnectionOptions() {     return super.getDefaultConnectionOptions(). }
