commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void process(final Exchange exchange) throws Exception {     final Object command = mapToCommand(exchange).     if (command != null) {         if (!this.connection.executeCommand(command)) {             throw new IllegalStateException("Failed to send command. Not connected.").         }     } }
false;private;1;17;;private Object mapToCommand(final Exchange exchange) {     final Object body = exchange.getIn().getBody().     if (body instanceof Float || body instanceof Double) {         return makeFloatCommand(((Number) body).floatValue()).     }     if (body instanceof Boolean) {         return makeBooleanCommand((Boolean) body).     }     if (body instanceof Integer || body instanceof Short || body instanceof Byte || body instanceof Long) {         return makeIntCommand(((Number) body).longValue()).     }     throw new IllegalArgumentException("Unable to map value to a command: " + body). }
false;private;1;3;;private Object makeBooleanCommand(final Boolean state) {     return new SingleCommand(this.header, this.address, state). }
false;private;1;8;;private Object makeIntCommand(final long value) {     if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {         throw new IllegalArgumentException(String.format("Integer value is outside of range - min: %s, max: %s", Short.MIN_VALUE, Short.MAX_VALUE)).     }     return new SetPointCommandScaledValue(this.header, this.address, (short) value). }
false;private;1;3;;private Object makeFloatCommand(final float value) {     return new SetPointCommandShortFloatingPoint(this.header, this.address, value). }
