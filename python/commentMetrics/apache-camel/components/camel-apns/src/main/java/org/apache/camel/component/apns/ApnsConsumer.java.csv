commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;15;;protected int poll() throws Exception {     List<InactiveDevice> inactiveDeviceList = getInactiveDevices().     Iterator<InactiveDevice> it = inactiveDeviceList.iterator().     while (it.hasNext()) {         InactiveDevice inactiveDevice = it.next().         Exchange e = getEndpoint().createExchange().         e.getIn().setBody(inactiveDevice).         getProcessor().process(e).     }     return inactiveDeviceList.size(). }
false;private;0;16;;private List<InactiveDevice> getInactiveDevices() {     ApnsEndpoint ae = getEndpoint().     Map<String, Date> inactiveDeviceMap = ae.getApnsService().getInactiveDevices().     List<InactiveDevice> inactiveDeviceList = new ArrayList<>().     for (Entry<String, Date> inactiveDeviceEntry : inactiveDeviceMap.entrySet()) {         String deviceToken = inactiveDeviceEntry.getKey().         Date date = inactiveDeviceEntry.getValue().         InactiveDevice inactiveDevice = new InactiveDevice(deviceToken, date).         inactiveDeviceList.add(inactiveDevice).     }     return inactiveDeviceList. }
false;public;0;4;;@Override public ApnsEndpoint getEndpoint() {     return (ApnsEndpoint) super.getEndpoint(). }
false;protected;0;11;;@Override protected void doStart() throws Exception {     // only add as consumer if not already registered     if (!getEndpoint().getConsumers().contains(this)) {         if (!getEndpoint().getConsumers().isEmpty()) {             throw new IllegalStateException("Endpoint " + getEndpoint().getEndpointUri() + " only allows 1 active consumer but you attempted to start a 2nd consumer.").         }         getEndpoint().getConsumers().add(this).     }     super.doStart(). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     super.doStop().     getEndpoint().getConsumers().remove(this). }
