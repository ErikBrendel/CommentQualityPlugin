commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void startup() {     server = ApnsUtils.prepareAndStartServer(TestConstants.TEST_GATEWAY_PORT, TestConstants.TEST_FEEDBACK_PORT). }
false;public;0;4;;@After public void stop() {     server.stop(). }
false;public;0;13;;@Test(timeout = 5000) public void testProducer() throws Exception {     String message = "Hello World".     String messagePayload = APNS.newPayload().alertBody(message).build().     EnhancedApnsNotification apnsNotification = new EnhancedApnsNotification(1, EnhancedApnsNotification.MAXIMUM_EXPIRY, FAKE_TOKEN, messagePayload).     server.stopAt(apnsNotification.length()).     template.sendBody("direct:test", message).     server.getMessages().acquire().     assertArrayEquals(apnsNotification.marshall(), server.getReceived().toByteArray()). }
false;public;0;15;;@Test(timeout = 5000) public void testProducerWithApnsNotification() throws InterruptedException {     String message = "Hello World".     String messagePayload = APNS.newPayload().alertBody(message).build().     final EnhancedApnsNotification apnsNotification = new EnhancedApnsNotification(14, EnhancedApnsNotification.MAXIMUM_EXPIRY, FAKE_TOKEN, messagePayload).     server.stopAt(apnsNotification.length()).     template.sendBody("direct:testWithApnsNotification", apnsNotification).     server.getMessages().acquire().     assertArrayEquals(apnsNotification.marshall(), server.getReceived().toByteArray()). }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ApnsServiceFactory apnsServiceFactory = ApnsUtils.createDefaultTestConfiguration(camelContext).     ApnsService apnsService = apnsServiceFactory.getApnsService().     ApnsComponent apnsComponent = new ApnsComponent(apnsService).     camelContext.addComponent("apns", apnsComponent).     return camelContext. }
false;public;0;6;;public void configure() throws Exception {     from("direct:test").setHeader(ApnsConstants.HEADER_TOKENS, constant(FAKE_TOKEN)).to("apns:notify").     from("direct:testWithApnsNotification").setHeader(ApnsConstants.HEADER_MESSAGE_TYPE, constant(MessageType.APNS_NOTIFICATION.name())).to("apns:notify"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:test").setHeader(ApnsConstants.HEADER_TOKENS, constant(FAKE_TOKEN)).to("apns:notify").             from("direct:testWithApnsNotification").setHeader(ApnsConstants.HEADER_MESSAGE_TYPE, constant(MessageType.APNS_NOTIFICATION.name())).to("apns:notify").         }     }. }
