commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void startup() throws InterruptedException {     server = ApnsUtils.prepareAndStartServer(TestConstants.TEST_GATEWAY_PORT, TestConstants.TEST_FEEDBACK_PORT). }
false;public;0;4;;@After public void stop() {     server.stop(). }
false;public;0;22;;@Test(timeout = 5000) public void testConsumer() throws Exception {     byte[] deviceTokenBytes = ApnsUtils.createRandomDeviceTokenBytes().     String deviceToken = ApnsUtils.encodeHexToken(deviceTokenBytes).     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(InactiveDevice.class).     byte[] feedBackBytes = ApnsUtils.generateFeedbackBytes(deviceTokenBytes).     server.getToSend().write(feedBackBytes).     Thread.sleep(1000).     mock.assertIsSatisfied().     InactiveDevice inactiveDevice = (InactiveDevice) mock.getExchanges().get(0).getIn().getBody().     Assert.assertNotNull(inactiveDevice).     Assert.assertNotNull(inactiveDevice.getDate()).     Assert.assertNotNull(inactiveDevice.getDeviceToken()).     Assert.assertEquals(deviceToken, inactiveDevice.getDeviceToken()). }
