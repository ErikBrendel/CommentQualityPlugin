commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void startup() throws InterruptedException {     server = ApnsUtils.prepareAndStartServer(TestConstants.TEST_GATEWAY_PORT, TestConstants.TEST_FEEDBACK_PORT). }
false;public;0;4;;@After public void stop() {     server.stop(). }
false;public;0;15;;@Test public void testConsumeIdleMessages() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(2).     Thread.sleep(1100).     // cycling the server after first polling cycle because it can not handle reconnects for fast-cycle polling     server.stop().     server.start().     Thread.sleep(1100).     server.stop().     assertMockEndpointsSatisfied().     assertTrue(mock.getExchanges().get(0).getIn().getBody() == null).     assertTrue(mock.getExchanges().get(1).getIn().getBody() == null). }
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ApnsServiceFactory apnsServiceFactory = ApnsUtils.createDefaultTestConfiguration(camelContext).     ApnsService apnsService = apnsServiceFactory.getApnsService().     ApnsComponent apnsComponent = new ApnsComponent(apnsService).     camelContext.addComponent("apns", apnsComponent).     return camelContext. }
false;public;0;6;;public void configure() throws Exception {     from("apns:consumer?initialDelay=1&delay=1&timeUnit=SECONDS&useFixedDelay=true" + "&sendEmptyMessageWhenIdle=true").to("log:com.apache.camel.component.apns?showAll=true&multiline=true").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("apns:consumer?initialDelay=1&delay=1&timeUnit=SECONDS&useFixedDelay=true" + "&sendEmptyMessageWhenIdle=true").to("log:com.apache.camel.component.apns?showAll=true&multiline=true").to("mock:result").         }     }. }
