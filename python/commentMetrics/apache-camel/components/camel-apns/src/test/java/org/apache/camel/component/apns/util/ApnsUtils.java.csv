commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;public static byte[] createRandomDeviceTokenBytes() {     byte[] deviceTokenBytes = new byte[32].     random.nextBytes(deviceTokenBytes).     return deviceTokenBytes. }
false;public,static;1;5;;public static String encodeHexToken(byte[] deviceTokenBytes) {     String deviceToken = Utilities.encodeHex(deviceTokenBytes).     return deviceToken. }
false;public,static;2;12;;public static ApnsServerStub prepareAndStartServer(int gatePort, int feedPort) {     InputStream stream = ClassLoader.getSystemResourceAsStream(FixedCertificates.SERVER_STORE).     SSLContext context = Utilities.newSSLContext(stream, FixedCertificates.SERVER_PASSWORD, "PKCS12", getAlgorithm()).     ApnsServerStub server = new ApnsServerStub(context.getServerSocketFactory(), gatePort, feedPort).     server.start().     return server. }
false;public,static;0;17;;public static String getAlgorithm() {     List<String> keys = new LinkedList<>().     List<String> trusts = new LinkedList<>().     for (Provider p : Security.getProviders()) {         for (Service s : p.getServices()) {             if ("KeyManagerFactory".equals(s.getType()) && s.getAlgorithm().endsWith("509")) {                 keys.add(s.getAlgorithm()).             } else if ("TrustManagerFactory".equals(s.getType()) && s.getAlgorithm().endsWith("509")) {                 trusts.add(s.getAlgorithm()).             }         }     }     keys.retainAll(trusts).     return keys.get(0). }
false;public;2;3;;public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException { }
false;public;2;3;;public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { }
false;public;0;3;;public X509Certificate[] getAcceptedIssuers() {     return new X509Certificate[0]. }
false;public;0;17;;@Override public TrustManager[] createTrustManagers() throws GeneralSecurityException, IOException {     return new TrustManager[] { new X509TrustManager() {          public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {         }          public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {         }          public X509Certificate[] getAcceptedIssuers() {             return new X509Certificate[0].         }     } }. }
false;public,static;0;34;;public static SSLContextParameters clientContext() throws Exception {     final KeyStoreParameters ksp = new KeyStoreParameters().     ksp.setResource(ClassLoader.getSystemResource(FixedCertificates.CLIENT_STORE).toString()).     ksp.setType("PKCS12").     final KeyManagersParameters kmp = new KeyManagersParameters().     kmp.setKeyStore(ksp).     kmp.setKeyPassword(FixedCertificates.CLIENT_PASSWORD).     kmp.setAlgorithm(getAlgorithm()).     final SSLContextParameters contextParameters = new SSLContextParameters().     contextParameters.setKeyManagers(kmp).     contextParameters.setTrustManagers(new TrustManagersParameters() {          @Override         public TrustManager[] createTrustManagers() throws GeneralSecurityException, IOException {             return new TrustManager[] { new X509TrustManager() {                  public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {                 }                  public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {                 }                  public X509Certificate[] getAcceptedIssuers() {                     return new X509Certificate[0].                 }             } }.         }     }).     return contextParameters. }
false;public,static;1;14;;public static ApnsServiceFactory createDefaultTestConfiguration(CamelContext camelContext) throws Exception {     ApnsServiceFactory apnsServiceFactory = new ApnsServiceFactory(camelContext).     apnsServiceFactory.setFeedbackHost(TestConstants.TEST_HOST).     apnsServiceFactory.setFeedbackPort(TestConstants.TEST_FEEDBACK_PORT).     apnsServiceFactory.setGatewayHost(TestConstants.TEST_HOST).     apnsServiceFactory.setGatewayPort(TestConstants.TEST_GATEWAY_PORT).     // apnsServiceFactory.setCertificatePath("classpath:/" +     // FixedCertificates.CLIENT_STORE).     // apnsServiceFactory.setCertificatePassword(FixedCertificates.CLIENT_PASSWD).     apnsServiceFactory.setSslContextParameters(clientContext()).     return apnsServiceFactory. }
false;public,static;1;8;;public static byte[] generateFeedbackBytes(byte[] deviceTokenBytes) {     byte[] feedbackBytes = ApnsFeedbackParsingUtilsAcessor.pack(/* time_t */     new byte[] { 0, 0, 0, 0 }, /* length */     new byte[] { 0, 32 }, /* device token */     deviceTokenBytes).     return feedbackBytes. }
