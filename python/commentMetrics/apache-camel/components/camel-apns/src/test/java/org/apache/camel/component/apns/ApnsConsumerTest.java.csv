commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void startup() throws InterruptedException {     server = ApnsUtils.prepareAndStartServer(TestConstants.TEST_GATEWAY_PORT, TestConstants.TEST_FEEDBACK_PORT). }
false;public;0;4;;@After public void stop() {     server.stop(). }
false;public;0;23;;@Test(timeout = 15000) public void testConsumer() throws Exception {     byte[] deviceTokenBytes = ApnsUtils.createRandomDeviceTokenBytes().     String deviceToken = ApnsUtils.encodeHexToken(deviceTokenBytes).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(InactiveDevice.class).     byte[] feedBackBytes = ApnsUtils.generateFeedbackBytes(deviceTokenBytes).     server.getToSend().write(feedBackBytes).     Thread.sleep(1000).     assertMockEndpointsSatisfied().     InactiveDevice inactiveDevice = (InactiveDevice) mock.getExchanges().get(0).getIn().getBody().     assertNotNull(inactiveDevice).     assertNotNull(inactiveDevice.getDate()).     assertNotNull(inactiveDevice.getDeviceToken()).     assertEquals(deviceToken, inactiveDevice.getDeviceToken()). }
false;protected;0;12;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ApnsServiceFactory apnsServiceFactory = ApnsUtils.createDefaultTestConfiguration(camelContext).     ApnsService apnsService = apnsServiceFactory.getApnsService().     ApnsComponent apnsComponent = new ApnsComponent(apnsService).     camelContext.addComponent("apns", apnsComponent).     return camelContext. }
false;public;0;5;;public void configure() throws Exception {     from("apns:consumer?initialDelay=500&delay=500&timeUnit=MILLISECONDS").to("log:apns?showAll=true&multiline=true").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("apns:consumer?initialDelay=500&delay=500&timeUnit=MILLISECONDS").to("log:apns?showAll=true&multiline=true").to("mock:result").         }     }. }
