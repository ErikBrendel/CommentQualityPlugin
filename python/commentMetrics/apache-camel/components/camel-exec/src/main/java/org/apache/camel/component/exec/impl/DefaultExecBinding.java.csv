# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultExecBinding -> protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType);1270120851;Gets and removes the <code> <code>headerName</code> header form the input_<code>message</code> (the header will not be propagated);protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType) {_        T h = message.getHeader(headerName, defaultValue, headerType)__        message.removeHeader(headerName)__        return h__    };gets,and,removes,the,code,code,header,name,code,header,form,the,input,code,message,code,the,header,will,not,be,propagated;protected,t,t,get,and,remove,header,message,message,string,header,name,t,default,value,class,t,header,type,t,h,message,get,header,header,name,default,value,header,type,message,remove,header,header,name,return,h
DefaultExecBinding -> protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType);1271313326;Gets and removes the <code> <code>headerName</code> header form the input_<code>message</code> (the header will not be propagated);protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType) {_        T h = message.getHeader(headerName, defaultValue, headerType)__        message.removeHeader(headerName)__        return h__    };gets,and,removes,the,code,code,header,name,code,header,form,the,input,code,message,code,the,header,will,not,be,propagated;protected,t,t,get,and,remove,header,message,message,string,header,name,t,default,value,class,t,header,type,t,h,message,get,header,header,name,default,value,header,type,message,remove,header,header,name,return,h
DefaultExecBinding -> protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType);1273935981;Gets and removes the <code> <code>headerName</code> header form the input_<code>message</code> (the header will not be propagated);protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType) {_        T h = message.getHeader(headerName, defaultValue, headerType)__        message.removeHeader(headerName)__        return h__    };gets,and,removes,the,code,code,header,name,code,header,form,the,input,code,message,code,the,header,will,not,be,propagated;protected,t,t,get,and,remove,header,message,message,string,header,name,t,default,value,class,t,header,type,t,h,message,get,header,header,name,default,value,header,type,message,remove,header,header,name,return,h
DefaultExecBinding -> protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType);1287653738;Gets and removes the <code> <code>headerName</code> header form the input_<code>message</code> (the header will not be propagated);protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType) {_        T h = message.getHeader(headerName, defaultValue, headerType)__        message.removeHeader(headerName)__        return h__    };gets,and,removes,the,code,code,header,name,code,header,form,the,input,code,message,code,the,header,will,not,be,propagated;protected,t,t,get,and,remove,header,message,message,string,header,name,t,default,value,class,t,header,type,t,h,message,get,header,header,name,default,value,header,type,message,remove,header,header,name,return,h
DefaultExecBinding -> protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType);1291798292;Gets and removes the <code> <code>headerName</code> header form the input_<code>message</code> (the header will not be propagated);protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType) {_        T h = message.getHeader(headerName, defaultValue, headerType)__        message.removeHeader(headerName)__        return h__    };gets,and,removes,the,code,code,header,name,code,header,form,the,input,code,message,code,the,header,will,not,be,propagated;protected,t,t,get,and,remove,header,message,message,string,header,name,t,default,value,class,t,header,type,t,h,message,get,header,header,name,default,value,header,type,message,remove,header,header,name,return,h
DefaultExecBinding -> protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType);1296546062;Gets and removes the <code> <code>headerName</code> header form the input_<code>message</code> (the header will not be propagated);protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType) {_        T h = message.getHeader(headerName, defaultValue, headerType)__        message.removeHeader(headerName)__        return h__    };gets,and,removes,the,code,code,header,name,code,header,form,the,input,code,message,code,the,header,will,not,be,propagated;protected,t,t,get,and,remove,header,message,message,string,header,name,t,default,value,class,t,header,type,t,h,message,get,header,header,name,default,value,header,type,message,remove,header,header,name,return,h
DefaultExecBinding -> protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType);1307685726;Gets and removes the <code> <code>headerName</code> header form the input_<code>message</code> (the header will not be propagated);protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType) {_        T h = message.getHeader(headerName, defaultValue, headerType)__        message.removeHeader(headerName)__        return h__    };gets,and,removes,the,code,code,header,name,code,header,form,the,input,code,message,code,the,header,will,not,be,propagated;protected,t,t,get,and,remove,header,message,message,string,header,name,t,default,value,class,t,header,type,t,h,message,get,header,header,name,default,value,header,type,message,remove,header,header,name,return,h
DefaultExecBinding -> protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType);1431926722;Gets and removes the <code> <code>headerName</code> header form the input_<code>message</code> (the header will not be propagated);protected <T> T getAndRemoveHeader(Message message, String headerName, T defaultValue, Class<T> headerType) {_        T h = message.getHeader(headerName, defaultValue, headerType)__        message.removeHeader(headerName)__        return h__    };gets,and,removes,the,code,code,header,name,code,header,form,the,input,code,message,code,the,header,will,not,be,propagated;protected,t,t,get,and,remove,header,message,message,string,header,name,t,default,value,class,t,header,type,t,h,message,get,header,header,name,default,value,header,type,message,remove,header,header,name,return,h
DefaultExecBinding -> protected void writeOutputInMessage(Message message, ExecResult result);1270120851;Write the {@link ExecResult} in the message body. Write the stderr and_the exit value for convenience in the message headers. <br>_The stdout and/or resultFile should be accessible using a converter or_using the result object directly.__@param message a Camel message_@param result an {@link ExecResult} instance;protected void writeOutputInMessage(Message message, ExecResult result) {_        message.setHeader(EXEC_STDERR, result.getStderr())__        message.setHeader(EXEC_EXIT_VALUE, result.getExitValue())__        message.setBody(result)__    };write,the,link,exec,result,in,the,message,body,write,the,stderr,and,the,exit,value,for,convenience,in,the,message,headers,br,the,stdout,and,or,result,file,should,be,accessible,using,a,converter,or,using,the,result,object,directly,param,message,a,camel,message,param,result,an,link,exec,result,instance;protected,void,write,output,in,message,message,message,exec,result,result,message,set,header,result,get,stderr,message,set,header,result,get,exit,value,message,set,body,result
DefaultExecBinding -> protected void writeOutputInMessage(Message message, ExecResult result);1271313326;Write the {@link ExecResult} in the message body. Write the stderr and_the exit value for convenience in the message headers. <br>_The stdout and/or resultFile should be accessible using a converter or_using the result object directly.__@param message a Camel message_@param result an {@link ExecResult} instance;protected void writeOutputInMessage(Message message, ExecResult result) {_        message.setHeader(EXEC_STDERR, result.getStderr())__        message.setHeader(EXEC_EXIT_VALUE, result.getExitValue())__        message.setBody(result)__    };write,the,link,exec,result,in,the,message,body,write,the,stderr,and,the,exit,value,for,convenience,in,the,message,headers,br,the,stdout,and,or,result,file,should,be,accessible,using,a,converter,or,using,the,result,object,directly,param,message,a,camel,message,param,result,an,link,exec,result,instance;protected,void,write,output,in,message,message,message,exec,result,result,message,set,header,result,get,stderr,message,set,header,result,get,exit,value,message,set,body,result
DefaultExecBinding -> protected void writeOutputInMessage(Message message, ExecResult result);1273935981;Write the {@link ExecResult} in the message body. Write the stderr and_the exit value for convenience in the message headers. <br>_The stdout and/or resultFile should be accessible using a converter or_using the result object directly.__@param message a Camel message_@param result an {@link ExecResult} instance;protected void writeOutputInMessage(Message message, ExecResult result) {_        message.setHeader(EXEC_STDERR, result.getStderr())__        message.setHeader(EXEC_EXIT_VALUE, result.getExitValue())__        message.setBody(result)__    };write,the,link,exec,result,in,the,message,body,write,the,stderr,and,the,exit,value,for,convenience,in,the,message,headers,br,the,stdout,and,or,result,file,should,be,accessible,using,a,converter,or,using,the,result,object,directly,param,message,a,camel,message,param,result,an,link,exec,result,instance;protected,void,write,output,in,message,message,message,exec,result,result,message,set,header,result,get,stderr,message,set,header,result,get,exit,value,message,set,body,result
DefaultExecBinding -> protected void writeOutputInMessage(Message message, ExecResult result);1287653738;Write the {@link ExecResult} in the message body. Write the stderr and_the exit value for convenience in the message headers. <br>_The stdout and/or resultFile should be accessible using a converter or_using the result object directly.__@param message a Camel message_@param result an {@link ExecResult} instance;protected void writeOutputInMessage(Message message, ExecResult result) {_        message.setHeader(EXEC_STDERR, result.getStderr())__        message.setHeader(EXEC_EXIT_VALUE, result.getExitValue())__        message.setBody(result)__    };write,the,link,exec,result,in,the,message,body,write,the,stderr,and,the,exit,value,for,convenience,in,the,message,headers,br,the,stdout,and,or,result,file,should,be,accessible,using,a,converter,or,using,the,result,object,directly,param,message,a,camel,message,param,result,an,link,exec,result,instance;protected,void,write,output,in,message,message,message,exec,result,result,message,set,header,result,get,stderr,message,set,header,result,get,exit,value,message,set,body,result
DefaultExecBinding -> protected void writeOutputInMessage(Message message, ExecResult result);1291798292;Write the {@link ExecResult} in the message body. Write the stderr and_the exit value for convenience in the message headers. <br>_The stdout and/or resultFile should be accessible using a converter or_using the result object directly.__@param message a Camel message_@param result an {@link ExecResult} instance;protected void writeOutputInMessage(Message message, ExecResult result) {_        message.setHeader(EXEC_STDERR, result.getStderr())__        message.setHeader(EXEC_EXIT_VALUE, result.getExitValue())__        message.setBody(result)__    };write,the,link,exec,result,in,the,message,body,write,the,stderr,and,the,exit,value,for,convenience,in,the,message,headers,br,the,stdout,and,or,result,file,should,be,accessible,using,a,converter,or,using,the,result,object,directly,param,message,a,camel,message,param,result,an,link,exec,result,instance;protected,void,write,output,in,message,message,message,exec,result,result,message,set,header,result,get,stderr,message,set,header,result,get,exit,value,message,set,body,result
DefaultExecBinding -> protected void writeOutputInMessage(Message message, ExecResult result);1296546062;Write the {@link ExecResult} in the message body. Write the stderr and_the exit value for convenience in the message headers. <br>_The stdout and/or resultFile should be accessible using a converter or_using the result object directly.__@param message a Camel message_@param result an {@link ExecResult} instance;protected void writeOutputInMessage(Message message, ExecResult result) {_        message.setHeader(EXEC_STDERR, result.getStderr())__        message.setHeader(EXEC_EXIT_VALUE, result.getExitValue())__        message.setBody(result)__    };write,the,link,exec,result,in,the,message,body,write,the,stderr,and,the,exit,value,for,convenience,in,the,message,headers,br,the,stdout,and,or,result,file,should,be,accessible,using,a,converter,or,using,the,result,object,directly,param,message,a,camel,message,param,result,an,link,exec,result,instance;protected,void,write,output,in,message,message,message,exec,result,result,message,set,header,result,get,stderr,message,set,header,result,get,exit,value,message,set,body,result
DefaultExecBinding -> protected void writeOutputInMessage(Message message, ExecResult result);1307685726;Write the {@link ExecResult} in the message body. Write the stderr and_the exit value for convenience in the message headers. <br>_The stdout and/or resultFile should be accessible using a converter or_using the result object directly.__@param message a Camel message_@param result an {@link ExecResult} instance;protected void writeOutputInMessage(Message message, ExecResult result) {_        message.setHeader(EXEC_STDERR, result.getStderr())__        message.setHeader(EXEC_EXIT_VALUE, result.getExitValue())__        message.setBody(result)__    };write,the,link,exec,result,in,the,message,body,write,the,stderr,and,the,exit,value,for,convenience,in,the,message,headers,br,the,stdout,and,or,result,file,should,be,accessible,using,a,converter,or,using,the,result,object,directly,param,message,a,camel,message,param,result,an,link,exec,result,instance;protected,void,write,output,in,message,message,message,exec,result,result,message,set,header,result,get,stderr,message,set,header,result,get,exit,value,message,set,body,result
DefaultExecBinding -> protected void writeOutputInMessage(Message message, ExecResult result);1431926722;Write the {@link ExecResult} in the message body. Write the stderr and_the exit value for convenience in the message headers. <br>_The stdout and/or resultFile should be accessible using a converter or_using the result object directly.__@param message a Camel message_@param result an {@link ExecResult} instance;protected void writeOutputInMessage(Message message, ExecResult result) {_        message.setHeader(EXEC_STDERR, result.getStderr())__        message.setHeader(EXEC_EXIT_VALUE, result.getExitValue())__        message.setBody(result)__    };write,the,link,exec,result,in,the,message,body,write,the,stderr,and,the,exit,value,for,convenience,in,the,message,headers,br,the,stdout,and,or,result,file,should,be,accessible,using,a,converter,or,using,the,result,object,directly,param,message,a,camel,message,param,result,an,link,exec,result,instance;protected,void,write,output,in,message,message,message,exec,result,result,message,set,header,result,get,stderr,message,set,header,result,get,exit,value,message,set,body,result
