# id;timestamp;commentText;codeText;commentWords;codeWords
ExecParseUtils -> protected static boolean isSingleQuoted(String input);1270120851;Tests if the input is enclosed within {@link #QUOTE_CHAR} characters__@param input a not null String_@return;protected static boolean isSingleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{1}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{1})")__    };tests,if,the,input,is,enclosed,within,link,characters,param,input,a,not,null,string,return;protected,static,boolean,is,single,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,1,1
ExecParseUtils -> protected static boolean isSingleQuoted(String input);1271313326;Tests if the input is enclosed within {@link #QUOTE_CHAR} characters__@param input a not null String_@return true if the regular expression is matched;protected static boolean isSingleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{1}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{1})")__    };tests,if,the,input,is,enclosed,within,link,characters,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,single,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,1,1
ExecParseUtils -> protected static boolean isSingleQuoted(String input);1322845387;Tests if the input is enclosed within {@link #QUOTE_CHAR} characters__@param input a not null String_@return true if the regular expression is matched;protected static boolean isSingleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{1}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{1})")__    };tests,if,the,input,is,enclosed,within,link,characters,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,single,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,1,1
ExecParseUtils -> protected static boolean isSingleQuoted(String input);1523994310;Tests if the input is enclosed within {@link #QUOTE_CHAR} characters__@param input a not null String_@return true if the regular expression is matched;protected static boolean isSingleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{1}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{1})")__    };tests,if,the,input,is,enclosed,within,link,characters,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,single,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,1,1
ExecParseUtils -> protected static boolean isSingleQuoted(String input);1529182388;Tests if the input is enclosed within {@link #QUOTE_CHAR} characters__@param input a not null String_@return true if the regular expression is matched;protected static boolean isSingleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{1}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{1})")__    };tests,if,the,input,is,enclosed,within,link,characters,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,single,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,1,1
ExecParseUtils -> protected static boolean isDoubleQuoted(String input);1270120851;Tests if the input is enclosed within a double-{@link #QUOTE_CHAR} string__@param input a not null String_@return true if the regular expression is matched;protected static boolean isDoubleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{2}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{2})")__    };tests,if,the,input,is,enclosed,within,a,double,link,string,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,double,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,2,2
ExecParseUtils -> protected static boolean isDoubleQuoted(String input);1271313326;Tests if the input is enclosed within a double-{@link #QUOTE_CHAR} string__@param input a not null String_@return true if the regular expression is matched;protected static boolean isDoubleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{2}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{2})")__    };tests,if,the,input,is,enclosed,within,a,double,link,string,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,double,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,2,2
ExecParseUtils -> protected static boolean isDoubleQuoted(String input);1322845387;Tests if the input is enclosed within a double-{@link #QUOTE_CHAR} string__@param input a not null String_@return true if the regular expression is matched;protected static boolean isDoubleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{2}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{2})")__    };tests,if,the,input,is,enclosed,within,a,double,link,string,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,double,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,2,2
ExecParseUtils -> protected static boolean isDoubleQuoted(String input);1523994310;Tests if the input is enclosed within a double-{@link #QUOTE_CHAR} string__@param input a not null String_@return true if the regular expression is matched;protected static boolean isDoubleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{2}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{2})")__    };tests,if,the,input,is,enclosed,within,a,double,link,string,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,double,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,2,2
ExecParseUtils -> protected static boolean isDoubleQuoted(String input);1529182388;Tests if the input is enclosed within a double-{@link #QUOTE_CHAR} string__@param input a not null String_@return true if the regular expression is matched;protected static boolean isDoubleQuoted(String input) {_        if (input == null || input.trim().length() == 0) {_            return false__        }_        return input.matches("(^" + QUOTE_CHAR + "{2}([^" + QUOTE_CHAR + "]+)" + QUOTE_CHAR + "{2})")__    };tests,if,the,input,is,enclosed,within,a,double,link,string,param,input,a,not,null,string,return,true,if,the,regular,expression,is,matched;protected,static,boolean,is,double,quoted,string,input,if,input,null,input,trim,length,0,return,false,return,input,matches,2,2
ExecParseUtils -> public static List<String> splitToWhiteSpaceSeparatedTokens(String input);1270120851;Splits the input line string by {@link #WHITESPACE}. Supports quoting the_white-spaces with a {@link #QUOTE_CHAR}. A quote itself can also be_quoted with another #{@link #QUOTE_CHAR}. More than two quotes in a_sequence is not allowed<br>_E.g. The string_<code>"arg 1"  arg2<code> will return the tokens <code>arg 1</code>,_<code>arg2</code><br>_The string_<code>""arg 1""  "arg2" arg 3<code> will return the tokens <code>"arg 1"</code>_, <code>arg2</code>,<code>arg</code> and <code>3</code> <br>__@param input_@return a list of {@link #WHITESPACE} separated tokens;public static List<String> splitToWhiteSpaceSeparatedTokens(String input) {_        if (input == null) {_            return new ArrayList<String>()__        }_        StringTokenizer tokenizer = new StringTokenizer(input.trim(), QUOTE_CHAR + WHITESPACE, true)__        List<String> args = new ArrayList<String>()___        StringBuilder quotedText = new StringBuilder()___        while (tokenizer.hasMoreTokens()) {_            String token = tokenizer.nextToken()__            if (QUOTE_CHAR.equals(token)) {_                _                _                quotedText.append(QUOTE_CHAR)__                String buffer = quotedText.toString()__                if (isSingleQuoted(buffer) || isDoubleQuoted(buffer)) {_                    args.add(buffer.substring(1, buffer.length() - 1))__                    quotedText = new StringBuilder()__                }_            } else if (WHITESPACE.equals(token)) {_                _                _                if (quotedText.length() > 0) {_                    quotedText.append(WHITESPACE)__                }_            } else {_                if (quotedText.length() > 0) {_                    quotedText.append(token)__                } else {_                    args.add(token)__                }_            }_        }_        if (quotedText.length() > 0) {_            throw new IllegalArgumentException("Invalid quoting found in args " + quotedText)__        }_        return args__    };splits,the,input,line,string,by,link,whitespace,supports,quoting,the,white,spaces,with,a,link,a,quote,itself,can,also,be,quoted,with,another,link,more,than,two,quotes,in,a,sequence,is,not,allowed,br,e,g,the,string,code,arg,1,arg2,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,br,the,string,code,arg,1,arg2,arg,3,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,code,arg,code,and,code,3,code,br,param,input,return,a,list,of,link,whitespace,separated,tokens;public,static,list,string,split,to,white,space,separated,tokens,string,input,if,input,null,return,new,array,list,string,string,tokenizer,tokenizer,new,string,tokenizer,input,trim,whitespace,true,list,string,args,new,array,list,string,string,builder,quoted,text,new,string,builder,while,tokenizer,has,more,tokens,string,token,tokenizer,next,token,if,equals,token,quoted,text,append,string,buffer,quoted,text,to,string,if,is,single,quoted,buffer,is,double,quoted,buffer,args,add,buffer,substring,1,buffer,length,1,quoted,text,new,string,builder,else,if,whitespace,equals,token,if,quoted,text,length,0,quoted,text,append,whitespace,else,if,quoted,text,length,0,quoted,text,append,token,else,args,add,token,if,quoted,text,length,0,throw,new,illegal,argument,exception,invalid,quoting,found,in,args,quoted,text,return,args
ExecParseUtils -> public static List<String> splitToWhiteSpaceSeparatedTokens(String input);1271313326;Splits the input line string by {@link #WHITESPACE}. Supports quoting the_white-spaces with a {@link #QUOTE_CHAR}. A quote itself can also be_enclosed within #{@link #QUOTE_CHAR}#{@link #QUOTE_CHAR}. More than two_double-quotes in a sequence is not allowed. Nested quotes are not_allowed.<br>_E.g. The string_<code>"arg 1"  arg2<code> will return the tokens <code>arg 1</code>,_<code>arg2</code><br>_The string_<code>""arg 1""  "arg2" arg 3<code> will return the tokens <code>"arg 1"</code>_, <code>arg2</code>,<code>arg</code> and <code>3</code> <br>__@param input the input to split._@return a not-null list of tokens;public static List<String> splitToWhiteSpaceSeparatedTokens(String input) {_        if (input == null) {_            return new ArrayList<String>()__        }_        StringTokenizer tokenizer = new StringTokenizer(input.trim(), QUOTE_CHAR + WHITESPACE, true)__        List<String> tokens = new ArrayList<String>()___        StringBuilder quotedText = new StringBuilder()___        while (tokenizer.hasMoreTokens()) {_            String token = tokenizer.nextToken()__            if (QUOTE_CHAR.equals(token)) {_                _                _                quotedText.append(QUOTE_CHAR)__                String buffer = quotedText.toString()__                if (isSingleQuoted(buffer) || isDoubleQuoted(buffer)) {_                    tokens.add(buffer.substring(1, buffer.length() - 1))__                    quotedText = new StringBuilder()__                }_            } else if (WHITESPACE.equals(token)) {_                _                _                if (quotedText.length() > 0) {_                    quotedText.append(WHITESPACE)__                }_            } else {_                if (quotedText.length() > 0) {_                    quotedText.append(token)__                } else {_                    tokens.add(token)__                }_            }_        }_        if (quotedText.length() > 0) {_            throw new IllegalArgumentException("Invalid quoting found in args " + quotedText)__        }_        return tokens__    };splits,the,input,line,string,by,link,whitespace,supports,quoting,the,white,spaces,with,a,link,a,quote,itself,can,also,be,enclosed,within,link,link,more,than,two,double,quotes,in,a,sequence,is,not,allowed,nested,quotes,are,not,allowed,br,e,g,the,string,code,arg,1,arg2,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,br,the,string,code,arg,1,arg2,arg,3,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,code,arg,code,and,code,3,code,br,param,input,the,input,to,split,return,a,not,null,list,of,tokens;public,static,list,string,split,to,white,space,separated,tokens,string,input,if,input,null,return,new,array,list,string,string,tokenizer,tokenizer,new,string,tokenizer,input,trim,whitespace,true,list,string,tokens,new,array,list,string,string,builder,quoted,text,new,string,builder,while,tokenizer,has,more,tokens,string,token,tokenizer,next,token,if,equals,token,quoted,text,append,string,buffer,quoted,text,to,string,if,is,single,quoted,buffer,is,double,quoted,buffer,tokens,add,buffer,substring,1,buffer,length,1,quoted,text,new,string,builder,else,if,whitespace,equals,token,if,quoted,text,length,0,quoted,text,append,whitespace,else,if,quoted,text,length,0,quoted,text,append,token,else,tokens,add,token,if,quoted,text,length,0,throw,new,illegal,argument,exception,invalid,quoting,found,in,args,quoted,text,return,tokens
ExecParseUtils -> public static List<String> splitToWhiteSpaceSeparatedTokens(String input);1322845387;Splits the input line string by {@link #WHITESPACE}. Supports quoting the_white-spaces with a {@link #QUOTE_CHAR}. A quote itself can also be_enclosed within #{@link #QUOTE_CHAR}#{@link #QUOTE_CHAR}. More than two_double-quotes in a sequence is not allowed. Nested quotes are not_allowed.<br>_E.g. The string_<code>"arg 1"  arg2<code> will return the tokens <code>arg 1</code>,_<code>arg2</code><br>_The string_<code>""arg 1""  "arg2" arg 3<code> will return the tokens <code>"arg 1"</code>_, <code>arg2</code>,<code>arg</code> and <code>3</code> <br>__@param input the input to split._@return a not-null list of tokens;public static List<String> splitToWhiteSpaceSeparatedTokens(String input) {_        if (input == null) {_            return new ArrayList<String>()__        }_        StringTokenizer tokenizer = new StringTokenizer(input.trim(), QUOTE_CHAR + WHITESPACE, true)__        List<String> tokens = new ArrayList<String>()___        StringBuilder quotedText = new StringBuilder()___        while (tokenizer.hasMoreTokens()) {_            String token = tokenizer.nextToken()__            if (QUOTE_CHAR.equals(token)) {_                _                _                quotedText.append(QUOTE_CHAR)__                String buffer = quotedText.toString()__                if (isSingleQuoted(buffer) || isDoubleQuoted(buffer)) {_                    tokens.add(buffer.substring(1, buffer.length() - 1))__                    quotedText = new StringBuilder()__                }_            } else if (WHITESPACE.equals(token)) {_                _                _                if (quotedText.length() > 0) {_                    quotedText.append(WHITESPACE)__                }_            } else {_                if (quotedText.length() > 0) {_                    quotedText.append(token)__                } else {_                    tokens.add(token)__                }_            }_        }_        if (quotedText.length() > 0) {_            throw new IllegalArgumentException("Invalid quoting found in args " + quotedText)__        }_        return tokens__    };splits,the,input,line,string,by,link,whitespace,supports,quoting,the,white,spaces,with,a,link,a,quote,itself,can,also,be,enclosed,within,link,link,more,than,two,double,quotes,in,a,sequence,is,not,allowed,nested,quotes,are,not,allowed,br,e,g,the,string,code,arg,1,arg2,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,br,the,string,code,arg,1,arg2,arg,3,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,code,arg,code,and,code,3,code,br,param,input,the,input,to,split,return,a,not,null,list,of,tokens;public,static,list,string,split,to,white,space,separated,tokens,string,input,if,input,null,return,new,array,list,string,string,tokenizer,tokenizer,new,string,tokenizer,input,trim,whitespace,true,list,string,tokens,new,array,list,string,string,builder,quoted,text,new,string,builder,while,tokenizer,has,more,tokens,string,token,tokenizer,next,token,if,equals,token,quoted,text,append,string,buffer,quoted,text,to,string,if,is,single,quoted,buffer,is,double,quoted,buffer,tokens,add,buffer,substring,1,buffer,length,1,quoted,text,new,string,builder,else,if,whitespace,equals,token,if,quoted,text,length,0,quoted,text,append,whitespace,else,if,quoted,text,length,0,quoted,text,append,token,else,tokens,add,token,if,quoted,text,length,0,throw,new,illegal,argument,exception,invalid,quoting,found,in,args,quoted,text,return,tokens
ExecParseUtils -> public static List<String> splitToWhiteSpaceSeparatedTokens(String input);1523994310;Splits the input line string by {@link #WHITESPACE}. Supports quoting the_white-spaces with a {@link #QUOTE_CHAR}. A quote itself can also be_enclosed within #{@link #QUOTE_CHAR}#{@link #QUOTE_CHAR}. More than two_double-quotes in a sequence is not allowed. Nested quotes are not_allowed.<br>_E.g. The string_<code>"arg 1"  arg2<code> will return the tokens <code>arg 1</code>,_<code>arg2</code><br>_The string_<code>""arg 1""  "arg2" arg 3<code> will return the tokens <code>"arg 1"</code>_, <code>arg2</code>,<code>arg</code> and <code>3</code> <br>__@param input the input to split._@return a not-null list of tokens;public static List<String> splitToWhiteSpaceSeparatedTokens(String input) {_        if (input == null) {_            return new ArrayList<>()__        }_        StringTokenizer tokenizer = new StringTokenizer(input.trim(), QUOTE_CHAR + WHITESPACE, true)__        List<String> tokens = new ArrayList<>()___        StringBuilder quotedText = new StringBuilder()___        while (tokenizer.hasMoreTokens()) {_            String token = tokenizer.nextToken()__            if (QUOTE_CHAR.equals(token)) {_                _                _                quotedText.append(QUOTE_CHAR)__                String buffer = quotedText.toString()__                if (isSingleQuoted(buffer) || isDoubleQuoted(buffer)) {_                    tokens.add(buffer.substring(1, buffer.length() - 1))__                    quotedText = new StringBuilder()__                }_            } else if (WHITESPACE.equals(token)) {_                _                _                if (quotedText.length() > 0) {_                    quotedText.append(WHITESPACE)__                }_            } else {_                if (quotedText.length() > 0) {_                    quotedText.append(token)__                } else {_                    tokens.add(token)__                }_            }_        }_        if (quotedText.length() > 0) {_            throw new IllegalArgumentException("Invalid quoting found in args " + quotedText)__        }_        return tokens__    };splits,the,input,line,string,by,link,whitespace,supports,quoting,the,white,spaces,with,a,link,a,quote,itself,can,also,be,enclosed,within,link,link,more,than,two,double,quotes,in,a,sequence,is,not,allowed,nested,quotes,are,not,allowed,br,e,g,the,string,code,arg,1,arg2,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,br,the,string,code,arg,1,arg2,arg,3,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,code,arg,code,and,code,3,code,br,param,input,the,input,to,split,return,a,not,null,list,of,tokens;public,static,list,string,split,to,white,space,separated,tokens,string,input,if,input,null,return,new,array,list,string,tokenizer,tokenizer,new,string,tokenizer,input,trim,whitespace,true,list,string,tokens,new,array,list,string,builder,quoted,text,new,string,builder,while,tokenizer,has,more,tokens,string,token,tokenizer,next,token,if,equals,token,quoted,text,append,string,buffer,quoted,text,to,string,if,is,single,quoted,buffer,is,double,quoted,buffer,tokens,add,buffer,substring,1,buffer,length,1,quoted,text,new,string,builder,else,if,whitespace,equals,token,if,quoted,text,length,0,quoted,text,append,whitespace,else,if,quoted,text,length,0,quoted,text,append,token,else,tokens,add,token,if,quoted,text,length,0,throw,new,illegal,argument,exception,invalid,quoting,found,in,args,quoted,text,return,tokens
ExecParseUtils -> public static List<String> splitToWhiteSpaceSeparatedTokens(String input);1529182388;Splits the input line string by {@link #WHITESPACE}. Supports quoting the_white-spaces with a {@link #QUOTE_CHAR}. A quote itself can also be_enclosed within #{@link #QUOTE_CHAR}#{@link #QUOTE_CHAR}. More than two_double-quotes in a sequence is not allowed. Nested quotes are not_allowed.<br>_E.g. The string_<code>"arg 1"  arg2<code> will return the tokens <code>arg 1</code>,_<code>arg2</code><br>_The string_<code>""arg 1""  "arg2" arg 3<code> will return the tokens <code>"arg 1"</code>_, <code>arg2</code>,<code>arg</code> and <code>3</code> <br>__@param input the input to split._@return a not-null list of tokens;public static List<String> splitToWhiteSpaceSeparatedTokens(String input) {_        if (input == null) {_            return new ArrayList<>()__        }_        StringTokenizer tokenizer = new StringTokenizer(input.trim(), QUOTE_CHAR + WHITESPACE, true)__        List<String> tokens = new ArrayList<>()___        StringBuilder quotedText = new StringBuilder()___        while (tokenizer.hasMoreTokens()) {_            String token = tokenizer.nextToken()__            if (QUOTE_CHAR.equals(token)) {_                _                _                quotedText.append(QUOTE_CHAR)__                String buffer = quotedText.toString()__                if (isSingleQuoted(buffer) || isDoubleQuoted(buffer)) {_                    tokens.add(buffer.substring(1, buffer.length() - 1))__                    quotedText = new StringBuilder()__                }_            } else if (WHITESPACE.equals(token)) {_                _                _                if (quotedText.length() > 0) {_                    quotedText.append(WHITESPACE)__                }_            } else {_                if (quotedText.length() > 0) {_                    quotedText.append(token)__                } else {_                    tokens.add(token)__                }_            }_        }_        if (quotedText.length() > 0) {_            throw new IllegalArgumentException("Invalid quoting found in args " + quotedText)__        }_        return tokens__    };splits,the,input,line,string,by,link,whitespace,supports,quoting,the,white,spaces,with,a,link,a,quote,itself,can,also,be,enclosed,within,link,link,more,than,two,double,quotes,in,a,sequence,is,not,allowed,nested,quotes,are,not,allowed,br,e,g,the,string,code,arg,1,arg2,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,br,the,string,code,arg,1,arg2,arg,3,code,will,return,the,tokens,code,arg,1,code,code,arg2,code,code,arg,code,and,code,3,code,br,param,input,the,input,to,split,return,a,not,null,list,of,tokens;public,static,list,string,split,to,white,space,separated,tokens,string,input,if,input,null,return,new,array,list,string,tokenizer,tokenizer,new,string,tokenizer,input,trim,whitespace,true,list,string,tokens,new,array,list,string,builder,quoted,text,new,string,builder,while,tokenizer,has,more,tokens,string,token,tokenizer,next,token,if,equals,token,quoted,text,append,string,buffer,quoted,text,to,string,if,is,single,quoted,buffer,is,double,quoted,buffer,tokens,add,buffer,substring,1,buffer,length,1,quoted,text,new,string,builder,else,if,whitespace,equals,token,if,quoted,text,length,0,quoted,text,append,whitespace,else,if,quoted,text,length,0,quoted,text,append,token,else,tokens,add,token,if,quoted,text,length,0,throw,new,illegal,argument,exception,invalid,quoting,found,in,args,quoted,text,return,tokens
