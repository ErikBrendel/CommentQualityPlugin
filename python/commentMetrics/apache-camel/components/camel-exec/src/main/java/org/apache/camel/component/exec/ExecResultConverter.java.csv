# id;timestamp;commentText;codeText;commentWords;codeWords
ExecResultConverter -> @SuppressWarnings("unchecked")     public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1274693059;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result the exec result_@return the converted {@link ExecResult}_@throws FileNotFoundException if there is a file in the execResult, and_the file can not be found;@SuppressWarnings("unchecked")_    public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        InputStream is = toInputStream(result)__        if (is != null) {_            return exchange.getContext().getTypeConverter().convertTo(type, exchange, is)__        } else {_            _            _            return (T) Void.TYPE__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,the,exec,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,there,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;suppress,warnings,unchecked,public,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,input,stream,is,to,input,stream,result,if,is,null,return,exchange,get,context,get,type,converter,convert,to,type,exchange,is,else,return,t,void,type
ExecResultConverter -> @SuppressWarnings("unchecked")     public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1296546062;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result the exec result_@return the converted {@link ExecResult}_@throws FileNotFoundException if there is a file in the execResult, and_the file can not be found;@SuppressWarnings("unchecked")_    public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        InputStream is = toInputStream(result)__        if (is != null) {_            return exchange.getContext().getTypeConverter().convertTo(type, exchange, is)__        } else {_            _            _            return (T) Void.TYPE__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,the,exec,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,there,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;suppress,warnings,unchecked,public,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,input,stream,is,to,input,stream,result,if,is,null,return,exchange,get,context,get,type,converter,convert,to,type,exchange,is,else,return,t,void,type
ExecResultConverter -> @SuppressWarnings("unchecked")     public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1334502428;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result the exec result_@return the converted {@link ExecResult}_@throws FileNotFoundException if there is a file in the execResult, and_the file can not be found;@SuppressWarnings("unchecked")_    public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        InputStream is = toInputStream(result)__        if (is != null) {_            return exchange.getContext().getTypeConverter().convertTo(type, exchange, is)__        } else {_            _            _            return (T) Void.TYPE__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,the,exec,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,there,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;suppress,warnings,unchecked,public,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,input,stream,is,to,input,stream,result,if,is,null,return,exchange,get,context,get,type,converter,convert,to,type,exchange,is,else,return,t,void,type
ExecResultConverter -> public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1270120851;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result_@return the converted {@link ExecResult}_@throws FileNotFoundException if theres is a file in the execResult, and_the file can not be found;public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        if (exchange != null) {_            return (T)exchange.getContext().getTypeConverter().convertTo(type, exchange, toInputStream(result))__        } else {_            _            return null__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,theres,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;public,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,if,exchange,null,return,t,exchange,get,context,get,type,converter,convert,to,type,exchange,to,input,stream,result,else,return,null
ExecResultConverter -> public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1271313326;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result_@return the converted {@link ExecResult}_@throws FileNotFoundException if theres is a file in the execResult, and_the file can not be found;public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        if (exchange != null) {_            return (T)exchange.getContext().getTypeConverter().convertTo(type, exchange, toInputStream(result))__        } else {_            _            return null__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,theres,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;public,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,if,exchange,null,return,t,exchange,get,context,get,type,converter,convert,to,type,exchange,to,input,stream,result,else,return,null
ExecResultConverter -> public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1272343105;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result_@return the converted {@link ExecResult}_@throws FileNotFoundException if theres is a file in the execResult, and_the file can not be found;public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        if (exchange != null) {_            return (T)exchange.getContext().getTypeConverter().convertTo(type, exchange, toInputStream(result))__        } else {_            _            return null__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,theres,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;public,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,if,exchange,null,return,t,exchange,get,context,get,type,converter,convert,to,type,exchange,to,input,stream,result,else,return,null
ExecResultConverter -> public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1272703260;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result the exec result_@return the converted {@link ExecResult}_@throws FileNotFoundException if there is a file in the execResult, and_the file can not be found;public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        return exchange.getContext().getTypeConverter().convertTo(type, exchange, toInputStream(result))__    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,the,exec,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,there,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;public,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,return,exchange,get,context,get,type,converter,convert,to,type,exchange,to,input,stream,result
ExecResultConverter -> public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1273935981;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result the exec result_@return the converted {@link ExecResult}_@throws FileNotFoundException if there is a file in the execResult, and_the file can not be found;public static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        InputStream is = toInputStream(result)__        if (is != null) {_            return exchange.getContext().getTypeConverter().convertTo(type, exchange, is)__        } else {_            _            _            return (T) Void.TYPE__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,the,exec,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,there,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;public,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,input,stream,is,to,input,stream,result,if,is,null,return,exchange,get,context,get,type,converter,convert,to,type,exchange,is,else,return,t,void,type
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1272343105;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream != null && stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,null,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1272703260;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream != null && stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,null,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1273935981;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream != null && stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,null,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1274693059;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream != null && stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,null,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1296546062;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream != null && stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,null,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1334502428;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream != null && stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,null,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1335103640;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream != null && stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,null,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1513158838;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static void resetIfByteArrayInputStream(InputStream stream);1540973089;Resets the stream, only if it's a ByteArrayInputStream.;private static void resetIfByteArrayInputStream(InputStream stream) {_        if (stream instanceof ByteArrayInputStream) {_            try {_                stream.reset()__            } catch (IOException ioe) {_                LOG.error("Unable to reset the stream ", ioe)__            }_        }_    };resets,the,stream,only,if,it,s,a,byte,array,input,stream;private,static,void,reset,if,byte,array,input,stream,input,stream,stream,if,stream,instanceof,byte,array,input,stream,try,stream,reset,catch,ioexception,ioe,log,error,unable,to,reset,the,stream,ioe
ExecResultConverter -> private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1335103640;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout() != null ? execResult.getStdout() : null__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;private,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,exec,result,get,command,is,use,stderr,on,empty,stdout,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,null,exec,result,get,stdout,null,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1513158838;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout() != null ? execResult.getStdout() : null__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;private,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,exec,result,get,command,is,use,stderr,on,empty,stdout,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,null,exec,result,get,stdout,null,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1540973089;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout() != null ? execResult.getStdout() : null__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;private,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,exec,result,get,command,is,use,stderr,on,empty,stdout,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,null,exec,result,get,stdout,null,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1270120851;If the ExecResult contains out file,_<code>InputStream<code> with the output of the <code>execResult</code>._If there is {@link ExecCommand#getOutFile()}, its content is preferred to_{@link ExecResult#getStdout()}__@param execResult ExecResult object._@return InputStream object_@throws FileNotFoundException if the {@link ExecResult#getOutFile()} is_not <code>null</code>, but can not be found;public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.error("Unable to convert a null exec result!")__            return null__        }_        InputStream resultVal = execResult.getStdout()__        _        if (execResult.getCommand().getOutFile() != null) {_            resultVal = new FileInputStream(execResult.getCommand().getOutFile())__        }_        return resultVal__    };if,the,exec,result,contains,out,file,code,input,stream,code,with,the,output,of,the,code,exec,result,code,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,param,exec,result,exec,result,object,return,input,stream,object,throws,file,not,found,exception,if,the,link,exec,result,get,out,file,is,not,code,null,code,but,can,not,be,found;public,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,error,unable,to,convert,a,null,exec,result,return,null,input,stream,result,val,exec,result,get,stdout,if,exec,result,get,command,get,out,file,null,result,val,new,file,input,stream,exec,result,get,command,get,out,file,return,result,val
ExecResultConverter -> public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1271313326;If the ExecResult contains out file,_<code>InputStream<code> with the output of the <code>execResult</code>._If there is {@link ExecCommand#getOutFile()}, its content is preferred to_{@link ExecResult#getStdout()}. Returns <code>null</code> if the stdout_is null, or if the <code>execResult</code> is <code>null</code>.__@param execResult ExecResult object._@return InputStream object if the output of the executable._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} is_not <code>null</code>, but can not be found;public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        if (execResult.getCommand().getOutFile() != null) {_            return new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            if (execResult.getStdout() == null) {_                LOG.warn("Received null stdout of the ExecResult for conversion!")__            }_            return execResult.getStdout()__        }_    };if,the,exec,result,contains,out,file,code,input,stream,code,with,the,output,of,the,code,exec,result,code,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,returns,code,null,code,if,the,stdout,is,null,or,if,the,code,exec,result,code,is,code,null,code,param,exec,result,exec,result,object,return,input,stream,object,if,the,output,of,the,executable,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,is,not,code,null,code,but,can,not,be,found;public,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,if,exec,result,get,command,get,out,file,null,return,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,log,warn,received,null,stdout,of,the,exec,result,for,conversion,return,exec,result,get,stdout
ExecResultConverter -> public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1272343105;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout()__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;public,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1272703260;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout()__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;public,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1273935981;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout() != null ? execResult.getStdout() : null__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;public,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,exec,result,get,command,is,use,stderr,on,empty,stdout,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,null,exec,result,get,stdout,null,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1274693059;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout() != null ? execResult.getStdout() : null__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;public,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,exec,result,get,command,is,use,stderr,on,empty,stdout,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,null,exec,result,get,stdout,null,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1296546062;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout() != null ? execResult.getStdout() : null__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;public,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,exec,result,get,command,is,use,stderr,on,empty,stdout,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,null,exec,result,get,stdout,null,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException;1334502428;Returns <code>InputStream</code> object with the <i>output</i> of the_executable. If there is {@link ExecCommand#getOutFile()}, its content is_preferred to {@link ExecResult#getStdout()}. If no out file is set, and_the stdout of the exec result is <code>null</code> returns the stderr of_the exec result. <br>_If the output stream is of type <code>ByteArrayInputStream</code>, its_<code>reset()</code> method is called.__@param execResult ExecResult object to convert to InputStream._@return InputStream object with the <i>output</i> of the executable._Returns <code>null</code> if both {@link ExecResult#getStdout()}_and {@link ExecResult#getStderr()} are <code>null</code> , or if_the <code>execResult</code> is <code>null</code>._@throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can_not be opened. In this case the out file must have had a not_<code>null</code> value;public static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {_        if (execResult == null) {_            LOG.warn("Received a null ExecResult instance to convert!")__            return null__        }_        _        InputStream result__        if (execResult.getCommand().getOutFile() != null) {_            result = new FileInputStream(execResult.getCommand().getOutFile())__        } else {_            _            if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {_                LOG.warn("ExecResult has no stdout, will fallback to use stderr.")__                result = execResult.getStderr()__            } else {_                result = execResult.getStdout() != null ? execResult.getStdout() : null__            }_        }_        _        resetIfByteArrayInputStream(result)__        return result__    };returns,code,input,stream,code,object,with,the,i,output,i,of,the,executable,if,there,is,link,exec,command,get,out,file,its,content,is,preferred,to,link,exec,result,get,stdout,if,no,out,file,is,set,and,the,stdout,of,the,exec,result,is,code,null,code,returns,the,stderr,of,the,exec,result,br,if,the,output,stream,is,of,type,code,byte,array,input,stream,code,its,code,reset,code,method,is,called,param,exec,result,exec,result,object,to,convert,to,input,stream,return,input,stream,object,with,the,i,output,i,of,the,executable,returns,code,null,code,if,both,link,exec,result,get,stdout,and,link,exec,result,get,stderr,are,code,null,code,or,if,the,code,exec,result,code,is,code,null,code,throws,file,not,found,exception,if,the,link,exec,command,get,out,file,can,not,be,opened,in,this,case,the,out,file,must,have,had,a,not,code,null,code,value;public,static,input,stream,to,input,stream,exec,result,exec,result,throws,file,not,found,exception,if,exec,result,null,log,warn,received,a,null,exec,result,instance,to,convert,return,null,input,stream,result,if,exec,result,get,command,get,out,file,null,result,new,file,input,stream,exec,result,get,command,get,out,file,else,if,exec,result,get,stdout,null,exec,result,get,command,is,use,stderr,on,empty,stdout,log,warn,exec,result,has,no,stdout,will,fallback,to,use,stderr,result,exec,result,get,stderr,else,result,exec,result,get,stdout,null,exec,result,get,stdout,null,reset,if,byte,array,input,stream,result,return,result
ExecResultConverter -> @SuppressWarnings("unchecked")     private static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1335103640;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result the exec result_@return the converted {@link ExecResult}_@throws FileNotFoundException if there is a file in the execResult, and_the file can not be found;@SuppressWarnings("unchecked")_    private static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        InputStream is = toInputStream(result)__        if (is != null) {_            return exchange.getContext().getTypeConverter().convertTo(type, exchange, is)__        } else {_            _            _            return (T) Void.TYPE__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,the,exec,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,there,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;suppress,warnings,unchecked,private,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,input,stream,is,to,input,stream,result,if,is,null,return,exchange,get,context,get,type,converter,convert,to,type,exchange,is,else,return,t,void,type
ExecResultConverter -> @SuppressWarnings("unchecked")     private static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1513158838;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result the exec result_@return the converted {@link ExecResult}_@throws FileNotFoundException if there is a file in the execResult, and_the file can not be found;@SuppressWarnings("unchecked")_    private static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        InputStream is = toInputStream(result)__        if (is != null) {_            return exchange.getContext().getTypeConverter().convertTo(type, exchange, is)__        } else {_            _            _            return (T) Void.TYPE__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,the,exec,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,there,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;suppress,warnings,unchecked,private,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,input,stream,is,to,input,stream,result,if,is,null,return,exchange,get,context,get,type,converter,convert,to,type,exchange,is,else,return,t,void,type
ExecResultConverter -> @SuppressWarnings("unchecked")     private static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException;1540973089;Converts <code>ExecResult</code> to the type <code>T</code>.__@param <T> The type to convert to_@param type Class instance of the type to which to convert_@param exchange a Camel exchange. If exchange is <code>null</code>, no_conversion will be made_@param result the exec result_@return the converted {@link ExecResult}_@throws FileNotFoundException if there is a file in the execResult, and_the file can not be found;@SuppressWarnings("unchecked")_    private static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {_        InputStream is = toInputStream(result)__        if (is != null) {_            return exchange.getContext().getTypeConverter().convertTo(type, exchange, is)__        } else {_            _            _            return (T) MISS_VALUE__        }_    };converts,code,exec,result,code,to,the,type,code,t,code,param,t,the,type,to,convert,to,param,type,class,instance,of,the,type,to,which,to,convert,param,exchange,a,camel,exchange,if,exchange,is,code,null,code,no,conversion,will,be,made,param,result,the,exec,result,return,the,converted,link,exec,result,throws,file,not,found,exception,if,there,is,a,file,in,the,exec,result,and,the,file,can,not,be,found;suppress,warnings,unchecked,private,static,t,t,convert,to,class,t,type,exchange,exchange,exec,result,result,throws,file,not,found,exception,input,stream,is,to,input,stream,result,if,is,null,return,exchange,get,context,get,type,converter,convert,to,type,exchange,is,else,return,t
