commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;@Converter public static InputStream convertToInputStream(ExecResult result) throws FileNotFoundException {     return toInputStream(result). }
false;public,static;2;9;;@Converter public static byte[] convertToByteArray(ExecResult result, Exchange exchange) throws FileNotFoundException, IOException {     InputStream stream = toInputStream(result).     try {         return IOUtils.toByteArray(stream).     } finally {         IOUtils.closeQuietly(stream).     } }
false;public,static;2;11;;@Converter public static String convertToString(ExecResult result, Exchange exchange) throws FileNotFoundException {     // special for string, as we want an empty string if no output from stdin / stderr     InputStream is = toInputStream(result).     if (is != null) {         return exchange.getContext().getTypeConverter().convertTo(String.class, exchange, is).     } else {         // no stdin/stdout, so return an empty string         return "".     } }
false;public,static;2;4;;@Converter public static Document convertToDocument(ExecResult result, Exchange exchange) throws FileNotFoundException {     return convertTo(Document.class, exchange, result). }
true;private,static;3;11;/**  * Converts <code>ExecResult</code> to the type <code>T</code>.  *  * @param <T> The type to convert to  * @param type Class instance of the type to which to convert  * @param exchange a Camel exchange. If exchange is <code>null</code>, no  *            conversion will be made  * @param result the exec result  * @return the converted {@link ExecResult}  * @throws FileNotFoundException if there is a file in the execResult, and  *             the file can not be found  */ ;/**  * Converts <code>ExecResult</code> to the type <code>T</code>.  *  * @param <T> The type to convert to  * @param type Class instance of the type to which to convert  * @param exchange a Camel exchange. If exchange is <code>null</code>, no  *            conversion will be made  * @param result the exec result  * @return the converted {@link ExecResult}  * @throws FileNotFoundException if there is a file in the execResult, and  *             the file can not be found  */ @SuppressWarnings("unchecked") private static <T> T convertTo(Class<T> type, Exchange exchange, ExecResult result) throws FileNotFoundException {     InputStream is = toInputStream(result).     if (is != null) {         return exchange.getContext().getTypeConverter().convertTo(type, exchange, is).     } else {         // (prevents Camel from using a fallback converter which may convert a String from the instance name)         return (T) MISS_VALUE.     } }
true;private,static;1;22;/**  * Returns <code>InputStream</code> object with the <i>output</i> of the  * executable. If there is {@link ExecCommand#getOutFile()}, its content is  * preferred to {@link ExecResult#getStdout()}. If no out file is set, and  * the stdout of the exec result is <code>null</code> returns the stderr of  * the exec result. <br>  * If the output stream is of type <code>ByteArrayInputStream</code>, its  * <code>reset()</code> method is called.  *  * @param execResult ExecResult object to convert to InputStream.  * @return InputStream object with the <i>output</i> of the executable.  *         Returns <code>null</code> if both {@link ExecResult#getStdout()}  *         and {@link ExecResult#getStderr()} are <code>null</code> , or if  *         the <code>execResult</code> is <code>null</code>.  * @throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can  *             not be opened. In this case the out file must have had a not  *             <code>null</code> value  */ ;/**  * Returns <code>InputStream</code> object with the <i>output</i> of the  * executable. If there is {@link ExecCommand#getOutFile()}, its content is  * preferred to {@link ExecResult#getStdout()}. If no out file is set, and  * the stdout of the exec result is <code>null</code> returns the stderr of  * the exec result. <br>  * If the output stream is of type <code>ByteArrayInputStream</code>, its  * <code>reset()</code> method is called.  *  * @param execResult ExecResult object to convert to InputStream.  * @return InputStream object with the <i>output</i> of the executable.  *         Returns <code>null</code> if both {@link ExecResult#getStdout()}  *         and {@link ExecResult#getStderr()} are <code>null</code> , or if  *         the <code>execResult</code> is <code>null</code>.  * @throws FileNotFoundException if the {@link ExecCommand#getOutFile()} can  *             not be opened. In this case the out file must have had a not  *             <code>null</code> value  */ private static InputStream toInputStream(ExecResult execResult) throws FileNotFoundException {     if (execResult == null) {         LOG.warn("Received a null ExecResult instance to convert!").         return null.     }     // prefer the out file for output     InputStream result.     if (execResult.getCommand().getOutFile() != null) {         result = new FileInputStream(execResult.getCommand().getOutFile()).     } else {         // if the stdout is null, return the stderr.         if (execResult.getStdout() == null && execResult.getCommand().isUseStderrOnEmptyStdout()) {             LOG.warn("ExecResult has no stdout, will fallback to use stderr.").             result = execResult.getStderr().         } else {             result = execResult.getStdout() != null ? execResult.getStdout() : null.         }     }     // reset the stream if it was already read.     resetIfByteArrayInputStream(result).     return result. }
true;private,static;1;9;/**  * Resets the stream, only if it's a ByteArrayInputStream.  */ ;/**  * Resets the stream, only if it's a ByteArrayInputStream.  */ private static void resetIfByteArrayInputStream(InputStream stream) {     if (stream instanceof ByteArrayInputStream) {         try {             stream.reset().         } catch (IOException ioe) {             LOG.error("Unable to reset the stream ", ioe).         }     } }
