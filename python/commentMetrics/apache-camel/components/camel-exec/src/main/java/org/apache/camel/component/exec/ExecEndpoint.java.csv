commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new ExecProducer(this). }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Consumer not supported for ExecEndpoint!"). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public String getExecutable() {     return executable. }
true;public;1;4;/**  * Sets the executable to be executed. The executable must not be empty or  * <code>null</code>.  */ ;/**  * Sets the executable to be executed. The executable must not be empty or  * <code>null</code>.  */ public void setExecutable(String executable) {     StringHelper.notEmpty(executable, "executable").     this.executable = executable. }
false;public;0;3;;public String getArgs() {     return args. }
true;public;1;3;/**  * The arguments may be one or many whitespace-separated tokens.  */ ;/**  * The arguments may be one or many whitespace-separated tokens.  */ public void setArgs(String args) {     this.args = args. }
false;public;0;3;;public String getWorkingDir() {     return workingDir. }
true;public;1;3;/**  * The directory in which the command should be executed. If null, the working directory of the current process will be used.  */ ;/**  * The directory in which the command should be executed. If null, the working directory of the current process will be used.  */ public void setWorkingDir(String dir) {     this.workingDir = dir. }
false;public;0;3;;public long getTimeout() {     return timeout. }
true;public;1;6;/**  * The timeout, in milliseconds, after which the executable should be terminated. If execution has not completed within the timeout, the component will send a termination request.  */ ;/**  * The timeout, in milliseconds, after which the executable should be terminated. If execution has not completed within the timeout, the component will send a termination request.  */ public void setTimeout(long timeout) {     if (timeout <= 0) {         throw new IllegalArgumentException("The timeout must be a positive long!").     }     this.timeout = timeout. }
false;public;0;3;;public String getOutFile() {     return outFile. }
true;public;1;4;/**  * The name of a file, created by the executable, that should be considered as its output.  * If no outFile is set, the standard output (stdout) of the executable will be used instead.  */ ;/**  * The name of a file, created by the executable, that should be considered as its output.  * If no outFile is set, the standard output (stdout) of the executable will be used instead.  */ public void setOutFile(String outFile) {     StringHelper.notEmpty(outFile, "outFile").     this.outFile = outFile. }
false;public;0;3;;public ExecCommandExecutor getCommandExecutor() {     return commandExecutor. }
true;public;1;4;/**  * A reference to a org.apache.commons.exec.ExecCommandExecutor in the Registry that customizes the command execution.  * The default command executor utilizes the commons-exec library, which adds a shutdown hook for every executed command.  */ ;/**  * A reference to a org.apache.commons.exec.ExecCommandExecutor in the Registry that customizes the command execution.  * The default command executor utilizes the commons-exec library, which adds a shutdown hook for every executed command.  */ public void setCommandExecutor(ExecCommandExecutor commandExecutor) {     ObjectHelper.notNull(commandExecutor, "commandExecutor").     this.commandExecutor = commandExecutor. }
false;public;0;3;;public ExecBinding getBinding() {     return binding. }
true;public;1;4;/**  * A reference to a org.apache.commons.exec.ExecBinding in the Registry.  */ ;/**  * A reference to a org.apache.commons.exec.ExecBinding in the Registry.  */ public void setBinding(ExecBinding binding) {     ObjectHelper.notNull(binding, "binding").     this.binding = binding. }
false;public;0;3;;public boolean isUseStderrOnEmptyStdout() {     return useStderrOnEmptyStdout. }
true;public;1;3;/**  * A boolean indicating that when stdout is empty, this component will populate the Camel Message Body with stderr. This behavior is disabled (false) by default.  */ ;/**  * A boolean indicating that when stdout is empty, this component will populate the Camel Message Body with stderr. This behavior is disabled (false) by default.  */ public void setUseStderrOnEmptyStdout(boolean useStderrOnEmptyStdout) {     this.useStderrOnEmptyStdout = useStderrOnEmptyStdout. }
