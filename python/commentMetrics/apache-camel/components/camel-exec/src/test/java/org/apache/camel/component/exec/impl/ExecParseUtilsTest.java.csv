commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testSingleQuoted() {     assertTrue(isSingleQuoted("\"c:\\program files\\test\"")). }
false;public;0;4;;@Test public void testSingleQuoted2() {     assertTrue(isSingleQuoted("\"with space\"")). }
false;public;0;4;;@Test public void testSingleQuotedNegative() {     assertFalse(isSingleQuoted("arg 0")). }
false;public;0;4;;@Test public void testSingleQuotedNegative2() {     assertFalse(isSingleQuoted("\" \" space not allowed between quotes \"")). }
false;public;0;4;;@Test public void testSingleQuotedNegative3() {     assertFalse(isSingleQuoted("\"\"double quoted is not single quoted\"\"")). }
false;public;0;4;;@Test public void testEmptySingleQuotedNegative() {     assertFalse(isSingleQuoted("\"\"")). }
false;public;0;4;;@Test public void testEmptySingleQuotedNegative2() {     assertFalse(isSingleQuoted("\"")). }
false;public;0;4;;@Test public void testDoubleQuoted() {     assertTrue(isDoubleQuoted("\"\"c:\\program files\\test\\\"\"")). }
false;public;0;4;;@Test public void testEmptyDoubleQuotedNegative() {     assertFalse(isDoubleQuoted("\"\"\"\"")). }
false;public;0;7;;@Test public void testWhiteSpaceSeparatedArgs() {     List<String> args = splitToWhiteSpaceSeparatedTokens("arg0 arg1 arg2").     assertEquals("arg0", args.get(0)).     assertEquals("arg1", args.get(1)).     assertEquals("arg2", args.get(2)). }
false;public;0;5;;@Test public void testWhiteSpaceQuoted() {     List<String> args = splitToWhiteSpaceSeparatedTokens("\"arg 0\"").     assertEquals("arg 0", args.get(0)). }
false;public;0;6;;@Test public void testTwoQuotings() {     List<String> args = splitToWhiteSpaceSeparatedTokens("\"arg 0\" \"arg 1\"").     assertEquals("arg 0", args.get(0)).     assertEquals("arg 1", args.get(1)). }
false;public;0;7;;@Test public void testWhitespaceSeparatedArgsWithSpaces() {     List<String> args = splitToWhiteSpaceSeparatedTokens("\"arg 0 \"   arg1 \"arg 2\"").     assertEquals("arg 0 ", args.get(0)).     assertEquals("arg1", args.get(1)).     assertEquals("arg 2", args.get(2)). }
false;public;0;5;;@Test public void testDoubleQuote() {     List<String> args = splitToWhiteSpaceSeparatedTokens("\"\"arg0\"\"").     assertEquals("\"arg0\"", args.get(0)). }
false;public;0;6;;@Test public void testDoubleQuoteAndSpace() {     List<String> args = splitToWhiteSpaceSeparatedTokens("\"\"arg0\"\" arg1").     assertEquals("\"arg0\"", args.get(0)).     assertEquals("arg1", args.get(1)). }
false;public;0;6;;@Test public void testTwoDoubleQuotes() {     List<String> args = splitToWhiteSpaceSeparatedTokens("\"\"arg0\"\" \"\"arg1\"\"").     assertEquals("\"arg0\"", args.get(0)).     assertEquals("\"arg1\"", args.get(1)). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testWhiteSpaceSeparatedArgsNotClosed() {     splitToWhiteSpaceSeparatedTokens("arg 0 \" arg1 \"arg 2\""). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testInvalidQuotes() {     splitToWhiteSpaceSeparatedTokens("\"\"arg 0 \" arg1 \"arg 2\""). }
