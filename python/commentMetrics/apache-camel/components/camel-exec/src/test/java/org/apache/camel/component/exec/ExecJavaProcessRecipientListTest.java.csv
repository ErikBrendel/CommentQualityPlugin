commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testExecJavaProcessExitCode0() throws Exception {     output.setExpectedMessageCount(1).     output.expectedHeaderReceived(EXEC_EXIT_VALUE, 0).     sendExchange(EXIT_WITH_VALUE_0, NO_TIMEOUT).     output.assertIsSatisfied(). }
false;public;0;7;;@Test public void testExecJavaProcessExitCode1Direct() throws Exception {     Exchange out = sendExchange("direct:direct", EXIT_WITH_VALUE_1, NO_TIMEOUT).     assertNotNull(out).     assertEquals(1, out.getIn().getHeader(EXEC_EXIT_VALUE)). }
false;public;0;8;;@Test public void testExecJavaProcessExitCode1() throws Exception {     output.setExpectedMessageCount(1).     output.expectedHeaderReceived(EXEC_EXIT_VALUE, 1).     sendExchange(EXIT_WITH_VALUE_1, NO_TIMEOUT).     output.assertIsSatisfied(). }
false;public;0;12;;@Test public void testExecJavaProcessStdout() throws Exception {     String commandArgument = PRINT_IN_STDOUT.     output.setExpectedMessageCount(1).     output.expectedHeaderReceived(EXEC_EXIT_VALUE, 0).     Exchange e = sendExchange(commandArgument, NO_TIMEOUT).     ExecResult inBody = e.getIn().getBody(ExecResult.class).     output.assertIsSatisfied().     assertEquals(PRINT_IN_STDOUT, IOUtils.toString(inBody.getStdout())). }
false;public;0;10;;@Test public void testConvertResultToString() throws Exception {     String commandArgument = PRINT_IN_STDOUT.     output.setExpectedMessageCount(1).     Exchange e = sendExchange(commandArgument, NO_TIMEOUT).     output.assertIsSatisfied().     String out = e.getIn().getBody(String.class).     assertEquals(PRINT_IN_STDOUT, out). }
false;public;0;15;;@Test public void testByteArrayInputStreamIsResetInConverter() throws Exception {     String commandArgument = PRINT_IN_STDOUT.     output.setExpectedMessageCount(1).     Exchange e = sendExchange(commandArgument, NO_TIMEOUT).     String out1 = e.getIn().getBody(String.class).     // the second conversion should not need a reset, this is handled     // in the type converter.     String out2 = e.getIn().getBody(String.class).     output.assertIsSatisfied().     assertEquals(PRINT_IN_STDOUT, out1).     assertEquals(out1, out2). }
false;public;0;16;;@Test public void testIfStdoutIsNullStderrIsReturnedInConverter() throws Exception {     // this will be printed     String commandArgument = PRINT_IN_STDERR.     output.setExpectedMessageCount(1).     Exchange e = sendExchange(commandArgument, NO_TIMEOUT, null, true).     ExecResult body = e.getIn().getBody(ExecResult.class).     output.assertIsSatisfied().     assertNull("the test executable must not print anything in stdout", body.getStdout()).     assertNotNull("the test executable must print in stderr", body.getStderr()).     // the converter must fall back to the stderr, because stdout is null     String stderr = e.getIn().getBody(String.class).     assertEquals(PRINT_IN_STDERR, stderr). }
false;public;0;16;;@Test public void testStdoutIsNull() throws Exception {     // this will be printed     String commandArgument = PRINT_IN_STDERR.     output.setExpectedMessageCount(1).     Exchange e = sendExchange(commandArgument, NO_TIMEOUT, null, false).     ExecResult body = e.getIn().getBody(ExecResult.class).     output.assertIsSatisfied().     assertNull("the test executable must not print anything in stdout", body.getStdout()).     assertNotNull("the test executable must print in stderr", body.getStderr()).     // the converter must fall back to the stderr, because stdout is null     String out = e.getIn().getBody(String.class).     assertEquals("Should be empty", "", out). }
false;public;0;10;;@Test public void testConvertResultToInputStream() throws Exception {     String commandArgument = PRINT_IN_STDOUT.     output.setExpectedMessageCount(1).     Exchange e = sendExchange(commandArgument, NO_TIMEOUT).     output.assertIsSatisfied().     InputStream out = e.getIn().getBody(InputStream.class).     assertEquals(PRINT_IN_STDOUT, IOUtils.toString(out)). }
false;public;0;11;;@Test public void testConvertResultToByteArray() throws Exception {     String commandArgument = PRINT_IN_STDOUT.     output.setExpectedMessageCount(1).     Exchange e = sendExchange(commandArgument, NO_TIMEOUT).     output.assertIsSatisfied().     byte[] out = e.getIn().getBody(byte[].class).     assertNotNull(out).     assertEquals(PRINT_IN_STDOUT, new String(out)). }
true;public;0;14;/**  * Test print in stdout from threads.  */ ;/**  * Test print in stdout from threads.  */ @Test public void testExecJavaProcessThreads() throws Exception {     output.setExpectedMessageCount(1).     Exchange exchange = sendExchange(THREADS, NO_TIMEOUT).     String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class)).     ExecResult result = exchange.getIn().getBody(ExecResult.class).     String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR).     String[] errs = err.split(LINE_SEPARATOR).     output.assertIsSatisfied().     assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length).     assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length). }
true;public;0;12;/**  * Test if the process will be terminate in about a second  */ ;/**  * Test if the process will be terminate in about a second  */ @Test public void testExecJavaProcessTimeout() throws Exception {     int killAfterMillis = 1000.     output.setExpectedMessageCount(1).     // add some tolerance     output.setResultMinimumWaitTime(800).     // max (the test program sleeps 60 000)     output.setResultWaitTime(30000).     sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis).     output.assertIsSatisfied(). }
true;public;0;14;/**  * Test reading of input lines from the executable's stdin  */ ;/**  * Test reading of input lines from the executable's stdin  */ @Test public void testExecJavaProcessInputLines() throws Exception {     final StringBuilder builder = new StringBuilder().     int lines = 10.     for (int t = 1. t < lines. t++) {         builder.append("Line" + t + LINE_SEPARATOR).     }     String whiteSpaceSeparatedLines = builder.toString().     String expected = builder.toString().     Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false).     ExecResult inBody = e.getIn().getBody(ExecResult.class).     assertEquals(expected, IOUtils.toString(inBody.getStdout())). }
false;protected;3;3;;protected Exchange sendExchange(final String endpoint, final Object commandArgument, final long timeout) {     return sendExchange(endpoint, commandArgument, timeout, "testBody", false). }
false;protected;2;3;;protected Exchange sendExchange(final Object commandArgument, final long timeout) {     return sendExchange(commandArgument, timeout, "testBody", false). }
false;protected;4;3;;protected Exchange sendExchange(final Object commandArgument, final long timeout, final String body, final boolean useStderrOnEmptyStdout) {     return sendExchange("direct:input", commandArgument, timeout, body, useStderrOnEmptyStdout). }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(body).     exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath).     exchange.getIn().setHeader(EXEC_COMMAND_TIMEOUT, timeout).     exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args).     exchange.getIn().setHeader("whereTo", "exec:java").     if (useStderrOnEmptyStdout) {         exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true).     } }
false;protected;5;17;;protected Exchange sendExchange(final String endpoint, final Object commandArgument, final long timeout, final String body, final boolean useStderrOnEmptyStdout) {     final List<String> args = buildArgs(commandArgument).     final String javaAbsolutePath = buildJavaExecutablePath().     return producerTemplate.send(endpoint, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(body).             exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath).             exchange.getIn().setHeader(EXEC_COMMAND_TIMEOUT, timeout).             exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args).             exchange.getIn().setHeader("whereTo", "exec:java").             if (useStderrOnEmptyStdout) {                 exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true).             }         }     }). }
false;;1;9;;List<String> buildArgs(Object commandArgument) {     String classpath = System.getProperty("java.class.path").     List<String> args = new ArrayList<>().     args.add("-cp").     args.add(classpath).     args.add(EXECUTABLE_PROGRAM_ARG).     args.add(commandArgument.toString()).     return args. }
false;public;0;7;;public void configure() {     from("direct:input").recipientList(header("whereTo")).to("mock:output").     from("direct:direct").recipientList(header("whereTo")). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:input").recipientList(header("whereTo")).to("mock:output").             from("direct:direct").recipientList(header("whereTo")).         }     }. }
