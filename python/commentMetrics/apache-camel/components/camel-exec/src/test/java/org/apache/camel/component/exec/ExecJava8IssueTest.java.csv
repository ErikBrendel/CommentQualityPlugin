commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() {     tempDir = new File("target", tempDirName).     if (!(tempDir.mkdir())) {         fail("Couldn't create temp dir for test").     } }
false;public;0;4;;@After public void tearDown() throws Exception {     FileUtils.deleteDirectory(tempDir). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     String output = exchange.getIn().getBody(String.class).     assertEquals("hello world\n", output). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:source").to("file:" + tempDir.getAbsolutePath() + "?fileName=" + tempFileName).to("exec:" + exec).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String output = exchange.getIn().getBody(String.class).             assertEquals("hello world\n", output).         }     }). }
false;public;0;41;;@Test public void test() throws Exception {     if (!OS.isFamilyUnix()) {         System.err.println("The test 'CamelExecTest' does not support the following OS : " + System.getProperty("os.name")).         return.     }     String tempFilePath = tempDir.getAbsolutePath() + "/" + tempFileName.     final File script = File.createTempFile("script", ".sh", tempDir).     writeScript(script).     final String exec = "bash?args=" + script.getAbsolutePath() + " " + tempFilePath + "&outFile=" + tempFilePath.     DefaultCamelContext context = new DefaultCamelContext().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:source").to("file:" + tempDir.getAbsolutePath() + "?fileName=" + tempFileName).to("exec:" + exec).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String output = exchange.getIn().getBody(String.class).                     assertEquals("hello world\n", output).                 }             }).         }     }).     context.start().     ProducerTemplate pt = context.createProducerTemplate().     String payload = "hello".     pt.sendBody("direct:source", payload). }
true;private;1;7;/**  * Creates a script which will append " world" to a file  */ ;/**  * Creates a script which will append " world" to a file  */ private void writeScript(File script) throws IOException {     try (FileWriter fw = new FileWriter(script).         PrintWriter pw = new PrintWriter(fw)) {         String s = "echo \" world\" >> $1".         pw.print(s).     } }
true;private;0;3;/**  * Returns a random UUID  */ ;/**  * Returns a random UUID  */ private String name() {     return UUID.randomUUID().toString(). }
