# id;timestamp;commentText;codeText;commentWords;codeWords
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1270120851;Test print in stdout from threads.__@see ExecutableJavaProgram#THREADS_@throws Exception;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)___    };test,print,in,stdout,from,threads,see,executable,java,program,threads,throws,exception;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1271313326;Test print in stdout from threads.__@see ExecutableJavaProgram#THREADS_@throws Exception;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)___    };test,print,in,stdout,from,threads,see,executable,java,program,threads,throws,exception;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1272343105;Test print in stdout from threads.__@see ExecutableJavaProgram#THREADS_@throws Exception;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)___    };test,print,in,stdout,from,threads,see,executable,java,program,threads,throws,exception;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1273935981;Test print in stdout from threads.__@see ExecutableJavaProgram#THREADS_@throws Exception;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)___    };test,print,in,stdout,from,threads,see,executable,java,program,threads,throws,exception;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1287653738;Test print in stdout from threads.__@see ExecutableJavaProgram#THREADS_@throws Exception;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads,see,executable,java,program,threads,throws,exception;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1291798292;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1291967500;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1292482895;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1322845387;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1334502428;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1415211488;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1431929975;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1445934917;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1445935073;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1455869133;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1523994310;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Test     public void testExecJavaProcessThreads() throws Exception;1540481324;Test print in stdout from threads.;@Test_    public void testExecJavaProcessThreads() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)__        Exchange exchange = sendExchange(THREADS, NO_TIMEOUT)___        String err = IOUtils.toString(exchange.getIn().getHeader(EXEC_STDERR, InputStream.class))__        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        String[] outs = IOUtils.toString(result.getStdout()).split(LINE_SEPARATOR)__        String[] errs = err.split(LINE_SEPARATOR)___        output.assertIsSatisfied()__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, outs.length)__        assertEquals(ExecutableJavaProgram.LINES_TO_PRINT_FROM_EACH_THREAD, errs.length)__    };test,print,in,stdout,from,threads;test,public,void,test,exec,java,process,threads,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,send,exchange,threads,string,err,ioutils,to,string,exchange,get,in,get,header,input,stream,class,exec,result,result,exchange,get,in,get,body,exec,result,class,string,outs,ioutils,to,string,result,get,stdout,split,string,errs,err,split,output,assert,is,satisfied,assert,equals,executable,java,program,outs,length,assert,equals,executable,java,program,errs,length
ExecJavaProcessTest -> @Override     protected JndiRegistry createRegistry() throws Exception;1445934917;Create JndiRegistry and bind custom {@link org.apache.camel.component.exec.ExecCommandExecutor}_@return_@throws java.lang.Exception;@Override_    protected JndiRegistry createRegistry() throws Exception {_        JndiRegistry registry = super.createRegistry()__        registry.bind("executorMock", new ProvokeExceptionExecCommandExecutor())__        return registry__    };create,jndi,registry,and,bind,custom,link,org,apache,camel,component,exec,exec,command,executor,return,throws,java,lang,exception;override,protected,jndi,registry,create,registry,throws,exception,jndi,registry,registry,super,create,registry,registry,bind,executor,mock,new,provoke,exception,exec,command,executor,return,registry
ExecJavaProcessTest -> @Override     protected JndiRegistry createRegistry() throws Exception;1445935073;Create JndiRegistry and bind custom {@link org.apache.camel.component.exec.ExecCommandExecutor}_@return_@throws java.lang.Exception;@Override_    protected JndiRegistry createRegistry() throws Exception {_        JndiRegistry registry = super.createRegistry()__        registry.bind("executorMock", new ProvokeExceptionExecCommandExecutor())__        return registry__    };create,jndi,registry,and,bind,custom,link,org,apache,camel,component,exec,exec,command,executor,return,throws,java,lang,exception;override,protected,jndi,registry,create,registry,throws,exception,jndi,registry,registry,super,create,registry,registry,bind,executor,mock,new,provoke,exception,exec,command,executor,return,registry
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1270120851;Test if the process will be terminate in about a second__@see ExecutableJavaProgram#SLEEP_WITH_TIMEOUT_@throws Exception;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1271313326;Test if the process will be terminate in about a second__@see ExecutableJavaProgram#SLEEP_WITH_TIMEOUT_@throws Exception;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1272343105;Test if the process will be terminate in about a second__@see ExecutableJavaProgram#SLEEP_WITH_TIMEOUT_@throws Exception;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1273935981;Test if the process will be terminate in about a second__@see ExecutableJavaProgram#SLEEP_WITH_TIMEOUT_@throws Exception;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1287653738;Test if the process will be terminate in about a second__@see ExecutableJavaProgram#SLEEP_WITH_TIMEOUT_@throws Exception;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1291798292;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1291967500;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1292482895;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1322845387;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1334502428;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1415211488;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setMinimumResultWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,minimum,result,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1431929975;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setResultMinimumWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,result,minimum,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1445934917;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setResultMinimumWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,result,minimum,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1445935073;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setResultMinimumWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,result,minimum,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1455869133;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        context.start()___        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setResultMinimumWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,context,start,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,result,minimum,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1523994310;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        context.start()___        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setResultMinimumWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,context,start,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,result,minimum,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessTimeout() throws Exception;1540481324;Test if the process will be terminate in about a second;@Test_    public void testExecJavaProcessTimeout() throws Exception {_        context.start()___        int killAfterMillis = 1000__        output.setExpectedMessageCount(1)__        _        output.setResultMinimumWaitTime(800)__        _        output.setResultWaitTime(30000)___        sendExchange(SLEEP_WITH_TIMEOUT, killAfterMillis)__        output.assertIsSatisfied()__    };test,if,the,process,will,be,terminate,in,about,a,second;test,public,void,test,exec,java,process,timeout,throws,exception,context,start,int,kill,after,millis,1000,output,set,expected,message,count,1,output,set,result,minimum,wait,time,800,output,set,result,wait,time,30000,send,exchange,kill,after,millis,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1291798292;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_ARGS_STDOUT + "\nHello World\n", out)__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,n,hello,world,n,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1291967500;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_ARGS_STDOUT + "\nHello World\n", out)__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,n,hello,world,n,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1292482895;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1322845387;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1334502428;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1415211488;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1431929975;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1445934917;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1445935073;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1455869133;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1523994310;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithQuote() throws Exception;1540481324;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithQuote() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " \"Hello World\""___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,with,quote,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,world
ExecJavaProcessTest -> @Test     public void testExecJavaProcessWithThrownExecException() throws Exception;1445934917;Test for thrown {@link ExecException} and access stderr and exitValue_of thrown Exception;@Test_    public void testExecJavaProcessWithThrownExecException() throws Exception {_        _        context.getRouteDefinitions().get(0).adviceWith(context, new AdviceWithRouteBuilder() {_            @Override_            public void configure() throws Exception {_                weaveByToString(".*java.*").replace().to("exec:java?commandExecutor=#executorMock")__            }_        })___        output.setExpectedMessageCount(0)__        Exchange out = sendFailExchange(EXIT_WITH_VALUE_0, NO_TIMEOUT)__        assertEquals(ExecException.class, out.getException().getClass())___        _        ExecException ee = (ExecException) out.getException()__        assertNotNull(ee.getExitValue())__        assertNotNull(ee.getStderr())___        output.assertIsSatisfied()__    };test,for,thrown,link,exec,exception,and,access,stderr,and,exit,value,of,thrown,exception;test,public,void,test,exec,java,process,with,thrown,exec,exception,throws,exception,context,get,route,definitions,get,0,advice,with,context,new,advice,with,route,builder,override,public,void,configure,throws,exception,weave,by,to,string,java,replace,to,exec,java,command,executor,executor,mock,output,set,expected,message,count,0,exchange,out,send,fail,exchange,assert,equals,exec,exception,class,out,get,exception,get,class,exec,exception,ee,exec,exception,out,get,exception,assert,not,null,ee,get,exit,value,assert,not,null,ee,get,stderr,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessWithThrownExecException() throws Exception;1445935073;Test for thrown {@link ExecException} and access stderr and exitValue_of thrown Exception;@Test_    public void testExecJavaProcessWithThrownExecException() throws Exception {_        _        context.getRouteDefinitions().get(0).adviceWith(context, new AdviceWithRouteBuilder() {_            @Override_            public void configure() throws Exception {_                weaveByToString(".*java.*").replace().to("exec:java?commandExecutor=#executorMock")__            }_        })___        output.setExpectedMessageCount(0)__        Exchange out = sendFailExchange(EXIT_WITH_VALUE_0, NO_TIMEOUT)__        assertEquals(ExecException.class, out.getException().getClass())___        _        ExecException ee = (ExecException) out.getException()__        assertNotNull(ee.getExitValue())__        assertNotNull(ee.getStderr())___        output.assertIsSatisfied()__    };test,for,thrown,link,exec,exception,and,access,stderr,and,exit,value,of,thrown,exception;test,public,void,test,exec,java,process,with,thrown,exec,exception,throws,exception,context,get,route,definitions,get,0,advice,with,context,new,advice,with,route,builder,override,public,void,configure,throws,exception,weave,by,to,string,java,replace,to,exec,java,command,executor,executor,mock,output,set,expected,message,count,0,exchange,out,send,fail,exchange,assert,equals,exec,exception,class,out,get,exception,get,class,exec,exception,ee,exec,exception,out,get,exception,assert,not,null,ee,get,exit,value,assert,not,null,ee,get,stderr,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessWithThrownExecException() throws Exception;1455869133;Test for thrown {@link ExecException} and access stderr and exitValue_of thrown Exception;@Test_    public void testExecJavaProcessWithThrownExecException() throws Exception {_        context.getRouteDefinitions().get(0).adviceWith(context, new AdviceWithRouteBuilder() {_            @Override_            public void configure() throws Exception {_                weaveByToString(".*java.*").replace().to("exec:java?commandExecutor=#executorMock")__            }_        })__        context.start()___        output.setExpectedMessageCount(0)__        Exchange out = sendFailExchange(EXIT_WITH_VALUE_0, NO_TIMEOUT)___        _        ExecException ee = (ExecException) out.getException()__        assertNotNull(ee.getExitValue())__        assertNotNull(ee.getStderr())___        output.assertIsSatisfied()__    };test,for,thrown,link,exec,exception,and,access,stderr,and,exit,value,of,thrown,exception;test,public,void,test,exec,java,process,with,thrown,exec,exception,throws,exception,context,get,route,definitions,get,0,advice,with,context,new,advice,with,route,builder,override,public,void,configure,throws,exception,weave,by,to,string,java,replace,to,exec,java,command,executor,executor,mock,context,start,output,set,expected,message,count,0,exchange,out,send,fail,exchange,exec,exception,ee,exec,exception,out,get,exception,assert,not,null,ee,get,exit,value,assert,not,null,ee,get,stderr,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessWithThrownExecException() throws Exception;1523994310;Test for thrown {@link ExecException} and access stderr and exitValue_of thrown Exception;@Test_    public void testExecJavaProcessWithThrownExecException() throws Exception {_        context.getRouteDefinitions().get(0).adviceWith(context, new AdviceWithRouteBuilder() {_            @Override_            public void configure() throws Exception {_                weaveByToString(".*java.*").replace().to("exec:java?commandExecutor=#executorMock")__            }_        })__        context.start()___        output.setExpectedMessageCount(0)__        Exchange out = sendFailExchange(EXIT_WITH_VALUE_0, NO_TIMEOUT)___        _        ExecException ee = (ExecException) out.getException()__        assertNotNull(ee.getExitValue())__        assertNotNull(ee.getStderr())___        output.assertIsSatisfied()__    };test,for,thrown,link,exec,exception,and,access,stderr,and,exit,value,of,thrown,exception;test,public,void,test,exec,java,process,with,thrown,exec,exception,throws,exception,context,get,route,definitions,get,0,advice,with,context,new,advice,with,route,builder,override,public,void,configure,throws,exception,weave,by,to,string,java,replace,to,exec,java,command,executor,executor,mock,context,start,output,set,expected,message,count,0,exchange,out,send,fail,exchange,exec,exception,ee,exec,exception,out,get,exception,assert,not,null,ee,get,exit,value,assert,not,null,ee,get,stderr,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessWithThrownExecException() throws Exception;1540481324;Test for thrown {@link ExecException} and access stderr and exitValue_of thrown Exception;@Test_    public void testExecJavaProcessWithThrownExecException() throws Exception {_        RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {_            @Override_            public void configure() throws Exception {_                weaveByToString(".*java.*").replace().to("exec:java?commandExecutor=#executorMock")__            }_        })__        context.start()___        output.setExpectedMessageCount(0)__        Exchange out = sendFailExchange(EXIT_WITH_VALUE_0, NO_TIMEOUT)___        _        ExecException ee = (ExecException) out.getException()__        assertNotNull(ee.getExitValue())__        assertNotNull(ee.getStderr())___        output.assertIsSatisfied()__    };test,for,thrown,link,exec,exception,and,access,stderr,and,exit,value,of,thrown,exception;test,public,void,test,exec,java,process,with,thrown,exec,exception,throws,exception,route,reifier,advice,with,context,get,route,definitions,get,0,context,new,advice,with,route,builder,override,public,void,configure,throws,exception,weave,by,to,string,java,replace,to,exec,java,command,executor,executor,mock,context,start,output,set,expected,message,count,0,exchange,out,send,fail,exchange,exec,exception,ee,exec,exception,out,get,exception,assert,not,null,ee,get,exit,value,assert,not,null,ee,get,stderr,output,assert,is,satisfied
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1270120851;Test reading of input lines from the executable's stdin__@see ExecutableJavaProgram#READ_INPUT_LINES_AND_PRINT_THEM_@throws Exception;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))___    };test,reading,of,input,lines,from,the,executable,s,stdin,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1271313326;Test reading of input lines from the executable's stdin__@see ExecutableJavaProgram#READ_INPUT_LINES_AND_PRINT_THEM_@throws Exception;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))___    };test,reading,of,input,lines,from,the,executable,s,stdin,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1272343105;Test reading of input lines from the executable's stdin__@see ExecutableJavaProgram#READ_INPUT_LINES_AND_PRINT_THEM_@throws Exception;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))___    };test,reading,of,input,lines,from,the,executable,s,stdin,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1273935981;Test reading of input lines from the executable's stdin__@see ExecutableJavaProgram#READ_INPUT_LINES_AND_PRINT_THEM_@throws Exception;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))___    };test,reading,of,input,lines,from,the,executable,s,stdin,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1287653738;Test reading of input lines from the executable's stdin__@see ExecutableJavaProgram#READ_INPUT_LINES_AND_PRINT_THEM_@throws Exception;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin,see,executable,java,program,throws,exception;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1291798292;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1291967500;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1292482895;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1322845387;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1334502428;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1415211488;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1431929975;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1445934917;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1445935073;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1455869133;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        context.start()___        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,context,start,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1523994310;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        context.start()___        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,context,start,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaProcessInputLines() throws Exception;1540481324;Test reading of input lines from the executable's stdin;@Test_    public void testExecJavaProcessInputLines() throws Exception {_        context.start()___        final StringBuilder builder = new StringBuilder()__        int lines = 10__        for (int t = 1_ t < lines_ t++) {_            builder.append("Line" + t + LINE_SEPARATOR)__        }_        String whiteSpaceSeparatedLines = builder.toString()__        String expected = builder.toString()___        Exchange e = sendExchange(READ_INPUT_LINES_AND_PRINT_THEM, 20000, whiteSpaceSeparatedLines, false)__        ExecResult inBody = e.getIn().getBody(ExecResult.class)__        assertEquals(expected, IOUtils.toString(inBody.getStdout()))__    };test,reading,of,input,lines,from,the,executable,s,stdin;test,public,void,test,exec,java,process,input,lines,throws,exception,context,start,final,string,builder,builder,new,string,builder,int,lines,10,for,int,t,1,t,lines,t,builder,append,line,t,string,white,space,separated,lines,builder,to,string,string,expected,builder,to,string,exchange,e,send,exchange,20000,white,space,separated,lines,false,exec,result,in,body,e,get,in,get,body,exec,result,class,assert,equals,expected,ioutils,to,string,in,body,get,stdout
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1287653738;Test print in stdout using string as args__@see ExecutableJavaProgram#THREADS_@throws Exception;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args,see,executable,java,program,threads,throws,exception;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1291798292;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1291967500;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1292482895;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1322845387;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1334502428;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1415211488;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1431929975;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1445934917;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1445935073;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1455869133;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1523994310;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsString() throws Exception;1540481324;Test print in stdout using string as args;@Test_    public void testExecJavaArgsAsString() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_IN_STDOUT___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_IN_STDOUT, out)__    };test,print,in,stdout,using,string,as,args;test,public,void,test,exec,java,args,as,string,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1291798292;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_ARGS_STDOUT + "\nHello\nWorld\n", out)__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,n,hello,n,world,n,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1291967500;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertEquals(PRINT_ARGS_STDOUT + "\nHello\nWorld\n", out)__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,equals,n,hello,n,world,n,out
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1292482895;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1322845387;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1334502428;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1415211488;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1431929975;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1445934917;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1445935073;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1455869133;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1523994310;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> @Test     public void testExecJavaArgsAsStringWithoutQuote() throws Exception;1540481324;Test print in stdout using string as args with quotes;@Test_    public void testExecJavaArgsAsStringWithoutQuote() throws Exception {_        context.start()___        output.setExpectedMessageCount(1)___        Exchange exchange = producerTemplate.send("direct:input", new Processor() {_            public void process(Exchange exchange) throws Exception {_                final String javaAbsolutePath = buildJavaExecutablePath()___                _                String classpath = System.getProperty("java.class.path")__                String args = "-cp \"" + classpath + "\" " + EXECUTABLE_PROGRAM_ARG + " " + PRINT_ARGS_STDOUT + " Hello World"___                exchange.getIn().setBody("hello")__                exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, javaAbsolutePath)__                exchange.getIn().setHeader(EXEC_COMMAND_ARGS, args)__                exchange.getIn().setHeader(EXEC_USE_STDERR_ON_EMPTY_STDOUT, true)__            }_        })___        output.assertIsSatisfied()___        ExecResult result = exchange.getIn().getBody(ExecResult.class)__        assertNotNull(result)___        String out = IOConverter.toString(result.getStdout(), exchange)__        assertTrue(out, out.contains("1Hello"))__        assertTrue(out, out.contains("2World"))__    };test,print,in,stdout,using,string,as,args,with,quotes;test,public,void,test,exec,java,args,as,string,without,quote,throws,exception,context,start,output,set,expected,message,count,1,exchange,exchange,producer,template,send,direct,input,new,processor,public,void,process,exchange,exchange,throws,exception,final,string,java,absolute,path,build,java,executable,path,string,classpath,system,get,property,java,class,path,string,args,cp,classpath,hello,world,exchange,get,in,set,body,hello,exchange,get,in,set,header,java,absolute,path,exchange,get,in,set,header,args,exchange,get,in,set,header,true,output,assert,is,satisfied,exec,result,result,exchange,get,in,get,body,exec,result,class,assert,not,null,result,string,out,ioconverter,to,string,result,get,stdout,exchange,assert,true,out,out,contains,1hello,assert,true,out,out,contains,2world
ExecJavaProcessTest -> List<String> buildFailArgs(Object commandArgument);1445934917;Build arguments for execution which will result in error;List<String> buildFailArgs(Object commandArgument) {_        String classpath = System.getProperty("java.class.path")__        List<String> args = new ArrayList<String>()__        args.add("-failArg")__        args.add(classpath)__        args.add(EXECUTABLE_PROGRAM_ARG)__        args.add(commandArgument.toString())__        return args__    };build,arguments,for,execution,which,will,result,in,error;list,string,build,fail,args,object,command,argument,string,classpath,system,get,property,java,class,path,list,string,args,new,array,list,string,args,add,fail,arg,args,add,classpath,args,add,args,add,command,argument,to,string,return,args
ExecJavaProcessTest -> List<String> buildFailArgs(Object commandArgument);1445935073;Build arguments for execution which will result in error;List<String> buildFailArgs(Object commandArgument) {_        String classpath = System.getProperty("java.class.path")__        List<String> args = new ArrayList<String>()__        args.add("-failArg")__        args.add(classpath)__        args.add(EXECUTABLE_PROGRAM_ARG)__        args.add(commandArgument.toString())__        return args__    };build,arguments,for,execution,which,will,result,in,error;list,string,build,fail,args,object,command,argument,string,classpath,system,get,property,java,class,path,list,string,args,new,array,list,string,args,add,fail,arg,args,add,classpath,args,add,args,add,command,argument,to,string,return,args
ExecJavaProcessTest -> List<String> buildFailArgs(Object commandArgument);1455869133;Build arguments for execution which will result in error;List<String> buildFailArgs(Object commandArgument) {_        String classpath = System.getProperty("java.class.path")__        List<String> args = new ArrayList<String>()__        args.add("-failArg")__        args.add(classpath)__        args.add(EXECUTABLE_PROGRAM_ARG)__        args.add(commandArgument.toString())__        return args__    };build,arguments,for,execution,which,will,result,in,error;list,string,build,fail,args,object,command,argument,string,classpath,system,get,property,java,class,path,list,string,args,new,array,list,string,args,add,fail,arg,args,add,classpath,args,add,args,add,command,argument,to,string,return,args
ExecJavaProcessTest -> List<String> buildFailArgs(Object commandArgument);1523994310;Build arguments for execution which will result in error;List<String> buildFailArgs(Object commandArgument) {_        String classpath = System.getProperty("java.class.path")__        List<String> args = new ArrayList<>()__        args.add("-failArg")__        args.add(classpath)__        args.add(EXECUTABLE_PROGRAM_ARG)__        args.add(commandArgument.toString())__        return args__    };build,arguments,for,execution,which,will,result,in,error;list,string,build,fail,args,object,command,argument,string,classpath,system,get,property,java,class,path,list,string,args,new,array,list,args,add,fail,arg,args,add,classpath,args,add,args,add,command,argument,to,string,return,args
ExecJavaProcessTest -> List<String> buildFailArgs(Object commandArgument);1540481324;Build arguments for execution which will result in error;List<String> buildFailArgs(Object commandArgument) {_        String classpath = System.getProperty("java.class.path")__        List<String> args = new ArrayList<>()__        args.add("-failArg")__        args.add(classpath)__        args.add(EXECUTABLE_PROGRAM_ARG)__        args.add(commandArgument.toString())__        return args__    };build,arguments,for,execution,which,will,result,in,error;list,string,build,fail,args,object,command,argument,string,classpath,system,get,property,java,class,path,list,string,args,new,array,list,args,add,fail,arg,args,add,classpath,args,add,args,add,command,argument,to,string,return,args
