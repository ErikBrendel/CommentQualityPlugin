commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;45;;public static void main(String[] args) throws Exception {     if (args == null || args.length == 0) {         throw new IllegalArgumentException("Empty args are not allowed.").     }     if (args[0].equals(PRINT_IN_STDOUT)) {         System.out.print(PRINT_IN_STDOUT).         System.exit(0).     } else if (args[0].equals(PRINT_ARGS_STDOUT)) {         for (int i = 0. i < args.length. i++) {             String arg = args[i].             System.out.println(i + arg).         }         System.exit(0).     } else if (args[0].equals(PRINT_IN_STDERR)) {         System.err.print(PRINT_IN_STDERR).         System.exit(1).     } else if (args[0].equals(String.valueOf(EXIT_WITH_VALUE_0))) {         System.exit(0).     } else if (args[0].equals(String.valueOf(EXIT_WITH_VALUE_1))) {         System.exit(1).     } else if (args[0].equals(THREADS)) {         Thread stderrPrinterThread = new Thread(new ErrPrinter()).         Thread stdoutPrinterThread = new Thread(new OutPrinter()).         stderrPrinterThread.start().         stdoutPrinterThread.start().         stderrPrinterThread.join().         stdoutPrinterThread.join().     } else if (args[0].equals(SLEEP_WITH_TIMEOUT)) {         doSleep().         System.exit(0).     } else if (READ_INPUT_LINES_AND_PRINT_THEM.equals(args[0])) {         LineIterator iterator = IOUtils.lineIterator(System.in, "UTF-8").         while (iterator.hasNext()) {             String line = iterator.nextLine().             System.out.println(line).         }     } else {         System.out.println(args[0]).     } }
false;private,static;0;12;;private static void doSleep() throws InterruptedException {     int sleepInterval = 50.     // Note, that sleeping in the main thread prevents the process from     // being destroyed for that time. The process is killed namely when     // sleep returns(observed on Windows XP)     int t = 0.     System.out.println("Sleeping every " + String.valueOf(sleepInterval) + " ms").     for (. t < SLEEP_TIME % sleepInterval. t += sleepInterval) {         Thread.sleep(sleepInterval).     } }
false;public;0;5;;public void run() {     for (int t = 0. t < LINES_TO_PRINT_FROM_EACH_THREAD. t++) {         System.err.println(PRINT_IN_STDERR).     } }
false;public;0;5;;public void run() {     for (int t = 0. t < LINES_TO_PRINT_FROM_EACH_THREAD. t++) {         System.out.println(PRINT_IN_STDOUT).     } }
