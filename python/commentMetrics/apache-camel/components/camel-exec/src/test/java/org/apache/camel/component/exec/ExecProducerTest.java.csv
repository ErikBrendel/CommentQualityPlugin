commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test @DirtiesContext public void testWithContextConfiguration() {     producerTemplate.sendBody("direct:input", "test").     // the expected string is defined in the route configuration     assertEquals("mockedByCommandExecutorMock.exe", execCommandExecutorMock.lastCommandResult.getCommand().getExecutable()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("noinput").     exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, command). }
false;public;0;15;;@Test @DirtiesContext public void testOverrideExecutable() {     final String command = "java".     producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("noinput").             exchange.getIn().setHeader(EXEC_COMMAND_EXECUTABLE, command).         }     }).     assertEquals(command, execCommandExecutorMock.lastCommandResult.getCommand().getExecutable()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("noinput").     exchange.getIn().setHeader(EXEC_COMMAND_ARGS, Arrays.asList(args)). }
true;public;0;16;/**  * Tests that the args are set literally.  */ ;/**  * Tests that the args are set literally.  */ @Test @DirtiesContext public void testOverrideArgs() {     final String[] args = { "-version", "classpath:c:/program files/test/" }.     producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("noinput").             exchange.getIn().setHeader(EXEC_COMMAND_ARGS, Arrays.asList(args)).         }     }).     List<String> commandArgs = execCommandExecutorMock.lastCommandResult.getCommand().getArgs().     assertEquals(args[0], commandArgs.get(0)).     assertEquals(args[1], commandArgs.get(1)). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("noinput").     exchange.getIn().setHeader(EXEC_COMMAND_TIMEOUT, "1000"). }
false;public;0;12;;@Test @DirtiesContext public void testOverrideTimeout() {     producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("noinput").             exchange.getIn().setHeader(EXEC_COMMAND_TIMEOUT, "1000").         }     }).     assertEquals(1000, execCommandExecutorMock.lastCommandResult.getCommand().getTimeout()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(input). }
false;public;0;13;;@Test @DirtiesContext public void testInputLines() throws IOException {     // String must be convertible to InputStream     final String input = "line1" + LINE_SEPARATOR + "line2".     producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(input).         }     }).     assertEquals(input, IOUtils.toString(execCommandExecutorMock.lastCommandResult.getCommand().getInput())). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(notConvertibleToInputStreamBody). }
false;public;0;15;;@Test @DirtiesContext public void testInputLinesNotConvertibleToInputStream() throws IOException {     // String must be convertible to InputStream     final Integer notConvertibleToInputStreamBody = new Integer(1).     Exchange e = producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(notConvertibleToInputStreamBody).         }     }).     ExecResult result = e.getIn().getBody(ExecResult.class).     assertNotNull(result).     assertNull(result.getCommand().getInput()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(null). }
false;public;0;14;;@Test @DirtiesContext public void testNullInBody() throws IOException {     // Null body must also be supported     Exchange e = producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(null).         }     }).     ExecResult result = e.getIn().getBody(ExecResult.class).     assertNotNull(result).     assertNull(result.getCommand().getInput()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("").     exchange.getIn().setHeader(EXEC_COMMAND_WORKING_DIR, workingDir). }
false;public;0;13;;@Test @DirtiesContext public void testOverrideWorkingDir() {     final String workingDir = "c:/program files/test".     producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("").             exchange.getIn().setHeader(EXEC_COMMAND_WORKING_DIR, workingDir).         }     }).     assertEquals(workingDir, execCommandExecutorMock.lastCommandResult.getCommand().getWorkingDir()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOnly).     exchange.getIn().setBody("inonly"). }
false;public;0;13;;@Test @DirtiesContext public void testInInOnlyExchange() throws Exception {     Exchange exchange = producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOnly).             exchange.getIn().setBody("inonly").         }     }).     // test the conversion     ExecResult result = exchange.getIn().getBody(ExecResult.class).     assertNotNull(result). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     exchange.getIn().setBody("inout"). }
false;public;0;13;;@Test @DirtiesContext public void testOutCapableExchange() throws Exception {     Exchange exchange = producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             exchange.getIn().setBody("inout").         }     }).     // test the conversion     ExecResult result = exchange.getOut().getBody(ExecResult.class).     assertNotNull(result). }
