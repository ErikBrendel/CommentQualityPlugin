commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws IOException {     FILE.createNewFile().     FileUtils.writeStringToFile(FILE, FILE_CONTENT). }
false;public;0;4;;@After public void tearDown() {     FileUtils.deleteQuietly(FILE). }
false;public;0;10;;@Test @DirtiesContext public void testOutFile() throws Exception {     Exchange e = sendWithMockedExecutor().     ExecResult result = e.getIn().getBody(ExecResult.class).     assertNotNull(result).     File outFile = result.getCommand().getOutFile().     assertNotNull(outFile).     assertEquals(FILE_CONTENT, FileUtils.readFileToString(outFile)). }
false;public;0;8;;@Test @DirtiesContext public void testOutFileConvertToInputStream() throws Exception {     Exchange e = sendWithMockedExecutor().     InputStream body = e.getIn().getBody(InputStream.class).     assertNotNull(body).     assertEquals(FILE_CONTENT, IOUtils.toString(body)). }
false;public;0;7;;@Test @DirtiesContext public void testOutFileConvertToDocument() throws Exception {     Exchange e = sendWithMockedExecutor().     Document body = e.getIn().getBody(Document.class).     // do not parse it     assertNotNull(body). }
false;public;0;6;;@Test @DirtiesContext public void testOutFileConvertToString() throws Exception {     Exchange e = sendWithMockedExecutor().     assertEquals(FILE_CONTENT, e.getIn().getBody(String.class)). }
false;public;0;7;;@Test @DirtiesContext public void testOutFileConvertToByteArray() throws Exception {     Exchange e = sendWithMockedExecutor().     byte[] body = e.getIn().getBody(byte[].class).     assertEquals(FILE_CONTENT, new String(body)). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(EXEC_COMMAND_OUT_FILE, FILE.getPath()).     exchange.getIn().setBody(FILE_CONTENT). }
false;private;0;9;;private Exchange sendWithMockedExecutor() {     Exchange e = producerTemplate.send(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(EXEC_COMMAND_OUT_FILE, FILE.getPath()).             exchange.getIn().setBody(FILE_CONTENT).         }     }).     return e. }
false;private,static;0;10;;private static String buildFileContent() {     StringBuilder builder = new StringBuilder().     builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>").append(LINE_SEPARATOR).     builder.append("<data>").append(LINE_SEPARATOR).     builder.append("<element>data1</element>").append(LINE_SEPARATOR).     builder.append("<element>data2</element>").append(LINE_SEPARATOR).     builder.append("</data>").append(LINE_SEPARATOR).     builder.append(LINE_SEPARATOR).     return builder.toString(). }
