commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test @Ignore public void testExecLinuxWordCount() throws Exception {     // use type conversion here     ExecResult body = templateWordCount.requestBody((Object) "test", ExecResult.class).     assertNotNull(body). }
true;public;0;13;/**  * The test assumes, that java is in the system path  */ ;/**  * The test assumes, that java is in the system path  */ @Test @Ignore public void testJavaVersion() throws Exception {     ExecResult body = templateJavaVersion.requestBody((Object) "test", ExecResult.class).     InputStream out = body.getStdout().     InputStream err = body.getStderr().     // Strange that Sun Java 1.5 writes the -version in the syserr     assertNull(out).     assertNotNull(err).     String outString = IOUtils.toString(err).     log.info("Received stdout: " + outString).     assertTrue(outString.contains("java version")). }
false;public;0;13;;@Test @Ignore public void testWinJavaVersionWorkingDir() throws Exception {     ExecResult body = templateJavaVersionWorkingDir.requestBody((Object) "test", ExecResult.class).     InputStream out = body.getStdout().     InputStream err = body.getStderr().     // Strange that Sun Java 1.5 writes the -version in the syserr     assertNull(out).     assertNotNull(err).     String outerr = IOUtils.toString(err).     log.info("Received stderr: " + outerr).     assertTrue(outerr.contains("java version")). }
true;public;0;13;/**  * The test assumes that Apache ant is installed  */ ;/**  * The test assumes that Apache ant is installed  */ @Test @Ignore public void testExecWinAnt() throws Exception {     File f = new File(ANT_BUILD_FILE_NAME).     f.createNewFile().     FileUtils.writeStringToFile(f, ANT_BUILD_FILE_CONTENT).     assertTrue("You must create a sample build file!", f.exists()).     ExecResult body = templateExecAnt.requestBody((Object) "test", ExecResult.class).     String stdout = IOUtils.toString(body.getStdout()).     assertNull(body.getStderr()).     assertTrue("The ant script should print" + TEST_MSG, stdout.contains(TEST_MSG)).     f.delete(). }
true;public;0;13;/**  * The test assumes that Apache ant is installed  */ ;/**  * The test assumes that Apache ant is installed  */ @Test @Ignore public void testExecWinAntWithOutFile() throws Exception {     File f = new File(ANT_BUILD_FILE_NAME).     f.createNewFile().     FileUtils.writeStringToFile(f, ANT_BUILD_FILE_CONTENT).     assertTrue("You must create a sample build file!", f.exists()).     // use type conversion here     InputStream body = templateExecAntWithOutFile.requestBody((Object) "test", InputStream.class).     String bodyString = IOUtils.toString(body).     assertTrue("The ant script should print" + TEST_MSG, bodyString.contains(TEST_MSG)).     f.delete(). }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     // By default, the body is ExecResult instance     assertIsInstanceOf(ExecResult.class, exchange.getIn().getBody()).     // Use the Camel Exec String type converter to     // convert the ExecResult to String     // In this case, the stdout is considered as output     String wordCountOutput = exchange.getIn().getBody(String.class).     // do something with the output     log.info(wordCountOutput). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     InputStream outFile = exchange.getIn().getBody(InputStream.class).     // do something with the out file here     log.info(IOUtils.toString(outFile)). }
false;public;0;36;;public void configure() {     // word count     from("direct:wordCount").to("exec:wc?args=--words /usr/share/dict/words").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // By default, the body is ExecResult instance             assertIsInstanceOf(ExecResult.class, exchange.getIn().getBody()).             // Use the Camel Exec String type converter to             // convert the ExecResult to String             // In this case, the stdout is considered as output             String wordCountOutput = exchange.getIn().getBody(String.class).             // do something with the output             log.info(wordCountOutput).         }     }).     // example 1 in the component docs     from("direct:javaVersion").to("exec:java?args=-version -server").     // example 2 in the component docs     from("direct:javaVersionWorkingDir").to("exec:" + buildJavaExecutablePath() + "?args=-version -Duser.name=Camel&workingDir=C:/temp").     // advanced, test ant     from("direct:execAnt").to("exec:ant.bat?args=-f " + ANT_BUILD_FILE_NAME).     // advanced, test ant with out file     from("direct:execAntWithOutFile").to("exec:ant.bat?args=-f " + ANT_BUILD_FILE_NAME + " -l " + ANT_OUT_FILE_NAME + "&outFile=" + ANT_OUT_FILE_NAME).process(new Processor() {          public void process(Exchange exchange) throws Exception {             InputStream outFile = exchange.getIn().getBody(InputStream.class).             // do something with the out file here             log.info(IOUtils.toString(outFile)).         }     }). }
false;protected;0;41;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // word count             from("direct:wordCount").to("exec:wc?args=--words /usr/share/dict/words").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // By default, the body is ExecResult instance                     assertIsInstanceOf(ExecResult.class, exchange.getIn().getBody()).                     // Use the Camel Exec String type converter to                     // convert the ExecResult to String                     // In this case, the stdout is considered as output                     String wordCountOutput = exchange.getIn().getBody(String.class).                     // do something with the output                     log.info(wordCountOutput).                 }             }).             // example 1 in the component docs             from("direct:javaVersion").to("exec:java?args=-version -server").             // example 2 in the component docs             from("direct:javaVersionWorkingDir").to("exec:" + buildJavaExecutablePath() + "?args=-version -Duser.name=Camel&workingDir=C:/temp").             // advanced, test ant             from("direct:execAnt").to("exec:ant.bat?args=-f " + ANT_BUILD_FILE_NAME).             // advanced, test ant with out file             from("direct:execAntWithOutFile").to("exec:ant.bat?args=-f " + ANT_BUILD_FILE_NAME + " -l " + ANT_OUT_FILE_NAME + "&outFile=" + ANT_OUT_FILE_NAME).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     InputStream outFile = exchange.getIn().getBody(InputStream.class).                     // do something with the out file here                     log.info(IOUtils.toString(outFile)).                 }             }).         }     }. }
false;private,static;0;9;;private static String buildAntFileContent() {     StringBuilder builder = new StringBuilder().     builder.append("<project name=\"TestExec\" default=\"test\" basedir=\".\">").     builder.append("<target name=\"test\">").     builder.append("<echo message=\"" + TEST_MSG + "\"/>").     builder.append("</target>").     builder.append("</project>").     return builder.toString(). }
