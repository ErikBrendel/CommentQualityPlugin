commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Override public int read() throws IOException {     if (packetQueue.size() > 0) {         if (packetQueue.peek() == null) {             if (useSocketExceptionOnNullPacket) {                 throw new SocketException("Faking Socket read() failure - simulating reset").             } else {                 throw new IOException("Faking Socket read() failure").             }         }         Object element = packetQueue.element().         if (element instanceof ByteArrayInputStream) {             ByteArrayInputStream inputStreamElement = (ByteArrayInputStream) element.             int answer = inputStreamElement.read().             if (answer == -1 || inputStreamElement.available() == 0) {                 packetQueue.remove().             }             return answer.         } else if (element instanceof IOException) {             packetQueue.remove().             throw (IOException) element.         }     }     throw new SocketTimeoutException("Faking Socket read() Timeout"). }
false;public;1;26;;@Override public int read(byte[] buffer) throws IOException {     if (packetQueue.size() > 0) {         if (packetQueue.peek() == null) {             if (useSocketExceptionOnNullPacket) {                 throw new SocketException("Faking Socket read(byte[]) failure - simulating reset").             } else {                 throw new IOException("Faking Socket read(byte[]) failure").             }         }         Object element = packetQueue.element().         if (element instanceof ByteArrayInputStream) {             ByteArrayInputStream inputStreamElement = (ByteArrayInputStream) element.             int answer = inputStreamElement.read(buffer).             if (answer == -1 || inputStreamElement.available() == 0) {                 packetQueue.remove().             }             return answer.         } else if (element instanceof IOException) {             packetQueue.remove().             throw (IOException) element.         }     }     throw new SocketTimeoutException("Faking Socket read(byte[]) Timeout"). }
false;public;3;26;;@Override public int read(byte[] buffer, int offset, int length) throws IOException {     if (packetQueue.size() > 0) {         if (packetQueue.peek() == null) {             if (useSocketExceptionOnNullPacket) {                 throw new SocketException("Faking Socket read(byte[], int, int) failure - simulating reset").             } else {                 throw new IOException("Faking Socket read(byte[], int, int) failure").             }         }         Object element = packetQueue.element().         if (element instanceof ByteArrayInputStream) {             ByteArrayInputStream inputStreamElement = (ByteArrayInputStream) element.             int answer = inputStreamElement.read(buffer, offset, length).             if (answer == -1 || inputStreamElement.available() == 0) {                 packetQueue.remove().             }             return answer.         } else if (element instanceof IOException) {             packetQueue.remove().             throw (IOException) element.         }     }     throw new SocketTimeoutException("Faking Socket read(byte[], int, int) Timeout"). }
false;public;0;14;;@Override public int available() throws IOException {     if (packetQueue.size() > 0) {         Object element = packetQueue.element().         if (element instanceof ByteArrayInputStream) {             ByteArrayInputStream inputStreamElement = (ByteArrayInputStream) element.             return inputStreamElement.available().         }         return 1.     }     return 0. }
false;public;1;5;;public SocketInputStreamStub addPacket(Exception exception) {     this.packetQueue.add(exception).     return this. }
false;public;1;5;;public SocketInputStreamStub addPacket(char... packet) {     this.packetQueue.add(new ByteArrayInputStream(PayloadBuilder.build(packet))).     return this. }
false;public;1;9;;public SocketInputStreamStub addPacket(byte[] bytes) throws IOException {     if (bytes != null) {         this.packetQueue.add(new ByteArrayInputStream(bytes)).     } else {         this.packetQueue.add(null).     }     return this. }
false;public;2;9;;public SocketInputStreamStub addPacket(byte[] bytes, byte[]... byteArrays) throws IOException {     PayloadBuilder builder = new PayloadBuilder(bytes).     for (byte[] additionalBytes : byteArrays) {         builder.append(additionalBytes).     }     this.packetQueue.add(new ByteArrayInputStream(builder.build())).     return this. }
false;public;1;5;;public SocketInputStreamStub addPacket(String... strings) throws IOException {     this.packetQueue.add(new ByteArrayInputStream(PayloadBuilder.build(strings))).     return this. }
false;public;2;8;;public SocketInputStreamStub addPackets(String message, char delimiter) throws IOException {     StringTokenizer tokenizer = new StringTokenizer(message, String.valueOf(delimiter), true).     while (tokenizer.hasMoreTokens()) {         addPacket(tokenizer.nextToken()).     }     return this. }
false;public;1;7;;public SocketInputStreamStub addPackets(char... packets) {     for (char c : packets) {         addPacket(c).     }     return this. }
false;public;1;7;;public SocketInputStreamStub addPackets(byte[]... packets) throws IOException {     for (byte[] packet : packets) {         addPacket(packet).     }     return this. }
false;public;2;3;;public SocketInputStreamStub addPackets(byte[] bytes, String s) throws IOException {     return addPacket(bytes).addPacket(s). }
