commented;modifiers;parameterAmount;loc;comment;code
false;abstract;0;1;;abstract boolean requireEndOfData().
false;abstract;0;1;;abstract boolean validatePayload().
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = (DefaultCamelContext) super.createCamelContext().     context.setUseMDCLogging(true).     context.setName(this.getClass().getSimpleName()).     return context. }
false;public;0;38;;public void configure() {     onException(MllpApplicationRejectAcknowledgementException.class).handled(true).to(ar).log(LoggingLevel.ERROR, routeId, "AR Acknowledgement").     onException(MllpApplicationErrorAcknowledgementException.class).handled(true).to(ae).log(LoggingLevel.ERROR, routeId, "AE Acknowledgement").     onException(MllpAcknowledgementReceiveException.class).handled(true).to(ackReceiveError).log(LoggingLevel.ERROR, routeId, "Acknowledgement Receive failed").     onException(MllpAcknowledgementTimeoutException.class).handled(true).to(ackTimeoutError).log(LoggingLevel.ERROR, routeId, "Acknowledgement Receive timeout").     onException(MllpInvalidAcknowledgementException.class).handled(true).to(invalid).log(LoggingLevel.ERROR, routeId, "Invalid Acknowledgement").     onCompletion().onFailureOnly().to(failed).log(LoggingLevel.DEBUG, routeId, "Exchange failed").     from(source.getDefaultEndpoint()).routeId(routeId).log(LoggingLevel.INFO, routeId, "Sending Message").toF("mllp://%s:%d?receiveTimeout=%d&readTimeout=%d&validatePayload=%b&requireEndOfData=%b", mllpServer.getListenHost(), mllpServer.getListenPort(), RECEIVE_TIMEOUT, READ_TIMEOUT, validatePayload(), requireEndOfData()).log(LoggingLevel.INFO, routeId, "Received Acknowledgement").to(aa). }
false;protected;0;45;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          String routeId = "mllp-sender".          public void configure() {             onException(MllpApplicationRejectAcknowledgementException.class).handled(true).to(ar).log(LoggingLevel.ERROR, routeId, "AR Acknowledgement").             onException(MllpApplicationErrorAcknowledgementException.class).handled(true).to(ae).log(LoggingLevel.ERROR, routeId, "AE Acknowledgement").             onException(MllpAcknowledgementReceiveException.class).handled(true).to(ackReceiveError).log(LoggingLevel.ERROR, routeId, "Acknowledgement Receive failed").             onException(MllpAcknowledgementTimeoutException.class).handled(true).to(ackTimeoutError).log(LoggingLevel.ERROR, routeId, "Acknowledgement Receive timeout").             onException(MllpInvalidAcknowledgementException.class).handled(true).to(invalid).log(LoggingLevel.ERROR, routeId, "Invalid Acknowledgement").             onCompletion().onFailureOnly().to(failed).log(LoggingLevel.DEBUG, routeId, "Exchange failed").             from(source.getDefaultEndpoint()).routeId(routeId).log(LoggingLevel.INFO, routeId, "Sending Message").toF("mllp://%s:%d?receiveTimeout=%d&readTimeout=%d&validatePayload=%b&requireEndOfData=%b", mllpServer.getListenHost(), mllpServer.getListenPort(), RECEIVE_TIMEOUT, READ_TIMEOUT, validatePayload(), requireEndOfData()).log(LoggingLevel.INFO, routeId, "Received Acknowledgement").to(aa).         }     }. }
false;protected;0;11;;protected void setExpectedCounts() throws Exception {     aa.expectedMessageCount(expectedAACount).     ae.expectedMessageCount(expectedAECount).     ar.expectedMessageCount(expectedARCount).     ackReceiveError.expectedMessageCount(expectedReceiveErrorCount).     ackTimeoutError.expectedMessageCount(expectedTimeoutCount).     invalid.expectedMessageCount(expectedInvalidCount).     failed.expectedMessageCount(expectedFailedCount). }
false;public;0;6;;@Override public void tearDown() throws Exception {     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS).     super.tearDown(). }
false;public;0;6;;@Test public void testSendSingleMessageWithEndOfDataByte() throws Exception {     aa.expectedMessageCount(1).     source.sendBody(Hl7TestMessageGenerator.generateMessage()). }
false;public;0;16;;@Test public void testSendMultipleMessagesWithEndOfDataByte() throws Exception {     expectedAACount = 5.     setExpectedCounts().     NotifyBuilder[] complete = new NotifyBuilder[expectedAACount].     for (int i = 0. i < expectedAACount. ++i) {         complete[i] = new NotifyBuilder(context).whenDone(i + 1).create().     }     for (int i = 0. i < expectedAACount. ++i) {         source.sendBody(Hl7TestMessageGenerator.generateMessage(i + 1)).         assertTrue("Messege " + i + " not completed", complete[i].matches(1, TimeUnit.SECONDS)).     } }
false;public,abstract;0;2;;@Test public abstract void testSendSingleMessageWithoutEndOfData() throws Exception.
false;protected;0;7;;protected void runSendSingleMessageWithoutEndOfData() throws Exception {     setExpectedCounts().     mllpServer.setExcludeEndOfDataModulus(1).     source.sendBody(Hl7TestMessageGenerator.generateMessage()). }
false;public,abstract;0;2;;@Test public abstract void testSendMultipleMessagesWithoutEndOfDataByte() throws Exception.
false;protected;0;13;;protected void runSendMultipleMessagesWithoutEndOfDataByte() throws Exception {     NotifyBuilder[] complete = new NotifyBuilder[expectedAACount].     for (int i = 0. i < expectedAACount. ++i) {         complete[i] = new NotifyBuilder(context).whenDone(i + 1).create().     }     mllpServer.setExcludeEndOfDataModulus(1).     for (int i = 0. i < expectedAACount. ++i) {         source.sendBody(Hl7TestMessageGenerator.generateMessage(i + 1)).         assertTrue("Messege " + i + " not completed", complete[i].matches(1, TimeUnit.SECONDS)).     } }
false;protected;1;19;;protected void runSendMultipleMessagesWithoutEndOfDataByte(MockEndpoint expectedEndpoint) throws Exception {     int messageCount = 3.     setExpectedCounts().     expectedEndpoint.expectedMessageCount(messageCount).     NotifyBuilder[] complete = new NotifyBuilder[messageCount].     for (int i = 0. i < messageCount. ++i) {         complete[i] = new NotifyBuilder(context).whenDone(i + 1).create().     }     mllpServer.setExcludeEndOfDataModulus(1).     for (int i = 0. i < messageCount. ++i) {         source.sendBody(Hl7TestMessageGenerator.generateMessage(i + 1)).         assertTrue("Messege " + i + " not completed", complete[i].matches(1, TimeUnit.SECONDS)).     } }
false;public;0;26;;@Test public void testNoResponseOnFirstMessage() throws Exception {     int sendMessageCount = 5.     expectedAACount = sendMessageCount - 1.     expectedTimeoutCount = 1.     setExpectedCounts().     NotifyBuilder[] complete = new NotifyBuilder[sendMessageCount].     for (int i = 0. i < sendMessageCount. ++i) {         complete[i] = new NotifyBuilder(context).whenDone(i + 1).create().     }     mllpServer.disableResponse().     source.sendBody(Hl7TestMessageGenerator.generateMessage(1)).     assertTrue("Messege 1 not completed", complete[0].matches(1, TimeUnit.SECONDS)).     mllpServer.enableResponse().     for (int i = 1. i < sendMessageCount. ++i) {         source.sendBody(Hl7TestMessageGenerator.generateMessage(i + 1)).         assertTrue("Messege " + i + " not completed", complete[i].matches(1, TimeUnit.SECONDS)).     } }
false;public;0;21;;@Test public void testNoResponseOnNthMessage() throws Exception {     int sendMessageCount = 3.     expectedAACount = sendMessageCount - 1.     expectedTimeoutCount = 1.     setExpectedCounts().     NotifyBuilder[] complete = new NotifyBuilder[sendMessageCount].     for (int i = 0. i < sendMessageCount. ++i) {         complete[i] = new NotifyBuilder(context).whenDone(i + 1).create().     }     mllpServer.disableResponse(sendMessageCount).     for (int i = 0. i < sendMessageCount. ++i) {         source.sendBody(Hl7TestMessageGenerator.generateMessage(i + 1)).         assertTrue("Messege " + i + " not completed", complete[i].matches(1, TimeUnit.SECONDS)).     } }
false;public;0;11;;@Test public void testApplicationAcceptAcknowledgement() throws Exception {     setExpectedCounts().     aa.expectedBodiesReceived(TEST_MESSAGE).     aa.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT_TYPE, "AA").     aa.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT, EXPECTED_AA.getBytes()).     aa.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, EXPECTED_AA).     source.sendBody(TEST_MESSAGE). }
false;public;0;13;;@Test public void testApplicationRejectAcknowledgement() throws Exception {     setExpectedCounts().     ar.expectedBodiesReceived(TEST_MESSAGE).     ar.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT_TYPE, "AR").     ar.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT, EXPECTED_AR.getBytes()).     ar.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, EXPECTED_AR).     mllpServer.setSendApplicationRejectAcknowledgementModulus(1).     source.sendBody(TEST_MESSAGE). }
false;public;0;13;;@Test public void testApplicationErrorAcknowledgement() throws Exception {     setExpectedCounts().     ae.expectedBodiesReceived(TEST_MESSAGE).     ae.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT_TYPE, "AE").     ae.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT, EXPECTED_AE.getBytes()).     ae.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, EXPECTED_AE).     mllpServer.setSendApplicationErrorAcknowledgementModulus(1).     source.sendBody(TEST_MESSAGE). }
false;public,abstract;0;2;;@Test public abstract void testEmptyAcknowledgement() throws Exception.
false;protected;1;9;;protected void runEmptyAcknowledgement(MockEndpoint expectedEndpoint) throws Exception {     setExpectedCounts().     expectedEndpoint.expectedMessageCount(1).     mllpServer.setExcludeAcknowledgementModulus(1).     source.sendBody(TEST_MESSAGE). }
false;public,abstract;0;2;;@Test public abstract void testInvalidAcknowledgement() throws Exception.
false;protected;1;14;;protected void runInvalidAcknowledgement(MockEndpoint expectedEndpoint) throws Exception {     final String badAcknowledgement = "A VERY BAD ACKNOWLEDGEMENT".     setExpectedCounts().     expectedEndpoint.expectedMessageCount(1).     expectedEndpoint.expectedBodiesReceived(TEST_MESSAGE).     expectedEndpoint.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, badAcknowledgement.getBytes()).     expectedEndpoint.expectedHeaderReceived(MllpConstants.MLLP_ACKNOWLEDGEMENT_STRING, badAcknowledgement).     mllpServer.setAcknowledgementString(badAcknowledgement).     source.sendBody(TEST_MESSAGE). }
false;public,abstract;0;2;;@Test public abstract void testMissingEndOfDataByte() throws Exception.
true;protected;0;17;/**  * NOTE:  Set expectation variables BEFORE calling this method.  * @throws Exception  */ ;/**  * NOTE:  Set expectation variables BEFORE calling this method.  * @throws Exception  */ protected void runMissingEndOfDataByte() throws Exception {     int sendMessageCount = 3.     setExpectedCounts().     NotifyBuilder[] complete = new NotifyBuilder[sendMessageCount].     for (int i = 0. i < sendMessageCount. ++i) {         complete[i] = new NotifyBuilder(context).whenDone(i + 1).create().     }     mllpServer.setExcludeEndOfDataModulus(sendMessageCount).     for (int i = 0. i < sendMessageCount. ++i) {         source.sendBody(Hl7TestMessageGenerator.generateMessage(i + 1)).         assertTrue("Messege " + i + " not completed", complete[i].matches(1, TimeUnit.SECONDS)).     } }
false;public;0;10;;@Test public void testAcknowledgementReceiveTimeout() throws Exception {     setExpectedCounts().     ackTimeoutError.expectedMessageCount(1).     mllpServer.disableResponse(1).     source.sendBody(Hl7TestMessageGenerator.generateMessage()). }
false;public;0;10;;@Test public void testAcknowledgementReadTimeout() throws Exception {     setExpectedCounts().     ackTimeoutError.expectedMessageCount(1).     mllpServer.setDelayDuringAcknowledgement(15000).     source.sendBody(Hl7TestMessageGenerator.generateMessage()). }
false;public;0;21;;@Test public void testMissingEndOfBlockByte() throws Exception {     int sendMessageCount = 3.     expectedAACount = sendMessageCount - 1.     expectedTimeoutCount = 1.     setExpectedCounts().     NotifyBuilder[] complete = new NotifyBuilder[sendMessageCount].     for (int i = 0. i < sendMessageCount. ++i) {         complete[i] = new NotifyBuilder(context).whenDone(i + 1).create().     }     mllpServer.setExcludeEndOfBlockModulus(sendMessageCount).     for (int i = 0. i < sendMessageCount. ++i) {         source.sendBody(Hl7TestMessageGenerator.generateMessage(i + 1)).         assertTrue("Messege " + i + " not completed", complete[i].matches(1, TimeUnit.SECONDS)).     } }
false;public,abstract;0;2;;@Test public abstract void testSendMultipleMessagesWithoutSomeEndOfDataByte() throws Exception.
false;protected;0;17;;protected void runSendMultipleMessagesWithoutSomeEndOfDataByte() throws Exception {     setExpectedCounts().     int messageCount = expectedAACount + expectedTimeoutCount.     NotifyBuilder[] complete = new NotifyBuilder[messageCount].     for (int i = 0. i < messageCount. ++i) {         complete[i] = new NotifyBuilder(context).whenDone(i + 1).create().     }     mllpServer.setExcludeEndOfDataModulus(messageCount - 1).     for (int i = 0. i < messageCount. ++i) {         source.sendBody(Hl7TestMessageGenerator.generateMessage(i + 1)).         assertTrue("Messege " + i + " not completed", complete[i].matches(1, TimeUnit.SECONDS)).     } }
false;public,abstract;0;2;;@Test public abstract void testInvalidAcknowledgementContainingEmbeddedStartOfBlock() throws Exception.
true;public;0;9;/**  * NOTE:  Set expectation variables BEFORE calling this method.  * @throws Exception  */ ;/**  * NOTE:  Set expectation variables BEFORE calling this method.  * @throws Exception  */ public void runInvalidAcknowledgementContainingEmbeddedStartOfBlock() throws Exception {     final String badAcknowledgement = EXPECTED_AA.replaceFirst("RISTECH", "RISTECH" + MllpProtocolConstants.START_OF_BLOCK).     setExpectedCounts().     mllpServer.setAcknowledgementString(badAcknowledgement).     source.sendBody(TEST_MESSAGE). }
false;public,abstract;0;2;;@Test public abstract void testInvalidAcknowledgementContainingEmbeddedEndOfBlockByte() throws Exception.
true;protected;0;7;/**  * NOTE:  Set expectation variables BEFORE calling this method.  * @throws Exception  */ ;/**  * NOTE:  Set expectation variables BEFORE calling this method.  * @throws Exception  */ protected void runInvalidAcknowledgementContainingEmbeddedEndOfBlockByte() throws Exception {     final String badAcknowledgement = EXPECTED_AA.replaceFirst("RISTECH", "RISTECH" + MllpProtocolConstants.END_OF_BLOCK).     mllpServer.setAcknowledgementString(badAcknowledgement).     source.sendBody(TEST_MESSAGE). }
