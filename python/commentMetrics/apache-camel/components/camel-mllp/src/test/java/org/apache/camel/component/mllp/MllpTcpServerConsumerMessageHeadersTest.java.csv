commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;7;;@Override protected void doPreSetup() throws Exception {     mllpClient.setMllpHost("localhost").     mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable()).     super.doPreSetup(). }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = (DefaultCamelContext) super.createCamelContext().     context.setUseMDCLogging(true).     context.setName(this.getClass().getSimpleName()).     return context. }
false;public;0;31;;@Test public void testHl7HeadersEnabled() throws Exception {     String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'.     addTestRoute(true).     result.expectedMessageCount(1).     result.expectedHeaderReceived(MllpConstants.MLLP_SENDING_APPLICATION, "ADT").     result.expectedHeaderReceived(MllpConstants.MLLP_SENDING_FACILITY, "EPIC").     result.expectedHeaderReceived(MllpConstants.MLLP_RECEIVING_APPLICATION, "JCAPS").     result.expectedHeaderReceived(MllpConstants.MLLP_TIMESTAMP, "20160902123950").     result.expectedHeaderReceived(MllpConstants.MLLP_SECURITY, "RISTECH").     result.expectedHeaderReceived(MllpConstants.MLLP_MESSAGE_TYPE, "ADT^A08").     result.expectedHeaderReceived(MllpConstants.MLLP_EVENT_TYPE, "ADT").     result.expectedHeaderReceived(MllpConstants.MLLP_TRIGGER_EVENT, "A08").     result.expectedHeaderReceived(MllpConstants.MLLP_MESSAGE_CONTROL, "00001").     result.expectedHeaderReceived(MllpConstants.MLLP_PROCESSING_ID, "D").     result.expectedHeaderReceived(MllpConstants.MLLP_VERSION_ID, "2.3").     mllpClient.connect().     mllpClient.sendMessageAndWaitForAcknowledgement(testMessage, 10000).     assertMockEndpointsSatisfied(10, TimeUnit.SECONDS).     Message message = result.getExchanges().get(0).getIn().     assertNotNull("Should have header" + MllpConstants.MLLP_LOCAL_ADDRESS, message.getHeader(MllpConstants.MLLP_LOCAL_ADDRESS)).     assertNotNull("Should have header" + MllpConstants.MLLP_REMOTE_ADDRESS, message.getHeader(MllpConstants.MLLP_REMOTE_ADDRESS)). }
false;public;0;30;;@Test public void testHl7HeadersDisabled() throws Exception {     String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'.     addTestRoute(false).     result.expectedMessageCount(1).     mllpClient.connect().     mllpClient.sendMessageAndWaitForAcknowledgement(testMessage, 10000).     assertMockEndpointsSatisfied(10, TimeUnit.SECONDS).     Message message = result.getExchanges().get(0).getIn().     assertNotNull("Should have header" + MllpConstants.MLLP_LOCAL_ADDRESS, message.getHeader(MllpConstants.MLLP_LOCAL_ADDRESS)).     assertNotNull("Should have header" + MllpConstants.MLLP_REMOTE_ADDRESS, message.getHeader(MllpConstants.MLLP_REMOTE_ADDRESS)).     assertNull("Should NOT have header" + MllpConstants.MLLP_SENDING_APPLICATION, message.getHeader(MllpConstants.MLLP_SENDING_APPLICATION)).     assertNull("Should NOT have header" + MllpConstants.MLLP_SENDING_FACILITY, message.getHeader(MllpConstants.MLLP_SENDING_FACILITY)).     assertNull("Should NOT have header" + MllpConstants.MLLP_RECEIVING_APPLICATION, message.getHeader(MllpConstants.MLLP_RECEIVING_APPLICATION)).     assertNull("Should NOT have header" + MllpConstants.MLLP_TIMESTAMP, message.getHeader(MllpConstants.MLLP_TIMESTAMP)).     assertNull("Should NOT have header" + MllpConstants.MLLP_SECURITY, message.getHeader(MllpConstants.MLLP_SECURITY)).     assertNull("Should NOT have header" + MllpConstants.MLLP_MESSAGE_TYPE, message.getHeader(MllpConstants.MLLP_MESSAGE_TYPE)).     assertNull("Should NOT have header" + MllpConstants.MLLP_EVENT_TYPE, message.getHeader(MllpConstants.MLLP_EVENT_TYPE)).     assertNull("Should NOT have header" + MllpConstants.MLLP_MESSAGE_CONTROL, message.getHeader(MllpConstants.MLLP_MESSAGE_CONTROL)).     assertNull("Should NOT have header" + MllpConstants.MLLP_PROCESSING_ID, message.getHeader(MllpConstants.MLLP_PROCESSING_ID)).     assertNull("Should NOT have header" + MllpConstants.MLLP_VERSION_ID, message.getHeader(MllpConstants.MLLP_VERSION_ID)). }
false;public;0;16;;@Override public void configure() throws Exception {     String routeId = "mllp-test-receiver-route".     onCompletion().to("mock://on-completion-result").toF("log:%s?level=INFO&showAll=true", routeId).log(LoggingLevel.INFO, routeId, "Test route complete").     fromF("mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d&hl7Headers=%b", mllpClient.getMllpHost(), mllpClient.getMllpPort(), connectTimeout, responseTimeout, hl7Headers).routeId(routeId).log(LoggingLevel.INFO, routeId, "Test route received message").to(result). }
false;;1;25;;void addTestRoute(final boolean hl7Headers) throws Exception {     RouteBuilder builder = new RouteBuilder() {          int connectTimeout = 500.          int responseTimeout = 5000.          @Override         public void configure() throws Exception {             String routeId = "mllp-test-receiver-route".             onCompletion().to("mock://on-completion-result").toF("log:%s?level=INFO&showAll=true", routeId).log(LoggingLevel.INFO, routeId, "Test route complete").             fromF("mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d&hl7Headers=%b", mllpClient.getMllpHost(), mllpClient.getMllpPort(), connectTimeout, responseTimeout, hl7Headers).routeId(routeId).log(LoggingLevel.INFO, routeId, "Test route received message").to(result).         }     }.     context.addRoutes(builder).     context.start(). }
