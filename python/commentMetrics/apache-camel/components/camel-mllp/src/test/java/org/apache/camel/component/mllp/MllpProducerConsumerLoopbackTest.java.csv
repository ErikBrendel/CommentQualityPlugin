commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setUpClass() throws Exception {     assumeTrue("Skipping test running in CI server - Fails sometimes on CI server with address already in use", System.getenv("BUILD_ID") == null). }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = (DefaultCamelContext) super.createCamelContext().     context.setUseMDCLogging(true).     context.setName(this.getClass().getSimpleName()).     return context. }
false;public;0;7;;public void configure() {     fromF("mllp://%s:%d?autoAck=true&readTimeout=5000", mllpHost, mllpPort).id(routeId).convertBodyTo(String.class).to(acknowledged).process(new PassthroughProcessor("after send to result")).log(LoggingLevel.DEBUG, routeId, "Receiving: ${body}"). }
false;public;0;6;;public void configure() {     from(source.getDefaultEndpoint()).routeId(routeId).log(LoggingLevel.DEBUG, routeId, "Sending: ${body}").toF("mllp://%s:%d?readTimeout=5000", mllpHost, mllpPort).setBody(header(MllpConstants.MLLP_ACKNOWLEDGEMENT)). }
false;protected;0;29;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     RouteBuilder[] builders = new RouteBuilder[2].     builders[0] = new RouteBuilder() {          String routeId = "mllp-receiver".          public void configure() {             fromF("mllp://%s:%d?autoAck=true&readTimeout=5000", mllpHost, mllpPort).id(routeId).convertBodyTo(String.class).to(acknowledged).process(new PassthroughProcessor("after send to result")).log(LoggingLevel.DEBUG, routeId, "Receiving: ${body}").         }     }.     builders[1] = new RouteBuilder() {          String routeId = "mllp-sender".          public void configure() {             from(source.getDefaultEndpoint()).routeId(routeId).log(LoggingLevel.DEBUG, routeId, "Sending: ${body}").toF("mllp://%s:%d?readTimeout=5000", mllpHost, mllpPort).setBody(header(MllpConstants.MLLP_ACKNOWLEDGEMENT)).         }     }.     return builders. }
false;public;0;10;;@Test public void testLoopbackWithOneMessage() throws Exception {     String testMessage = Hl7TestMessageGenerator.generateMessage().     acknowledged.expectedBodiesReceived(testMessage).     String acknowledgement = source.requestBody((Object) testMessage, String.class).     Assert.assertThat("Should be acknowledgment for message 1", acknowledgement, CoreMatchers.containsString(String.format("MSA|AA|00001"))).     assertMockEndpointsSatisfied(60, TimeUnit.SECONDS). }
false;public;0;15;;@Test public void testLoopbackWithMultipleMessages() throws Exception {     int messageCount = 1000.     acknowledged.expectedMessageCount(messageCount).     for (int i = 1. i <= messageCount. ++i) {         log.debug("Processing message {}", i).         String testMessage = Hl7TestMessageGenerator.generateMessage(i).         acknowledged.message(i - 1).body().isEqualTo(testMessage).         String acknowledgement = source.requestBody((Object) testMessage, String.class).         Assert.assertThat("Should be acknowledgment for message " + i, acknowledgement, CoreMatchers.containsString(String.format("MSA|AA|%05d", i))).     }     assertMockEndpointsSatisfied(60, TimeUnit.SECONDS). }
