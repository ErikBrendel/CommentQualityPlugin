commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected void addServicesOnStartup(Map<String, KeyValueHolder<Object, Dictionary>> services) {     ComponentResolver testResolver = new DefaultComponentResolver().     services.put(ComponentResolver.class.getName(), asService(testResolver, "component", "mllp")). }
false;protected;0;4;;@Override protected String getBlueprintDescriptor() {     return "OSGI-INF/blueprint/mllp-tcp-server-consumer-test.xml". }
false;protected;0;13;;@Override protected Properties useOverridePropertiesWithPropertiesComponent() {     mllpClient.setMllpHost(MLLP_HOST).     mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable()).     Properties props = new Properties().     props.setProperty("RECEIVED_URI", RECEIVED_URI).     props.setProperty("mllp.host", mllpClient.getMllpHost()).     props.setProperty("mllp.port", Integer.toString(mllpClient.getMllpPort())).     return props. }
false;public;0;15;;/*         This doesn't seem to work     @Override     protected String useOverridePropertiesWithConfigAdmin(Dictionary props) throws Exception {         mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable()).          props.put("mllp.port", mllpClient.getMllpPort() ).          return "MllpTcpServerConsumerBlueprintTest".     }     */ @Test public void testReceiveMultipleMessages() throws Exception {     int sendMessageCount = 5.     received.expectedMinimumMessageCount(5).     mllpClient.connect().     for (int i = 1. i <= sendMessageCount. ++i) {         mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(i)).     }     mllpClient.close().     assertMockEndpointsSatisfied(10, TimeUnit.SECONDS). }
