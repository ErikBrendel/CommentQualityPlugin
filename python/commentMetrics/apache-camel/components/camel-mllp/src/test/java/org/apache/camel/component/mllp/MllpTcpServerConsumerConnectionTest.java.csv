# id;timestamp;commentText;codeText;commentWords;codeWords
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectWithoutData() throws Exception;1451464990;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time_between these probes can normally be configured, but it is typically set to about 15-sec.  Since there could be_a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out_more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer_is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectWithoutData() throws Exception {_        result.setExpectedCount(0)__        int connectionCount = 10___        Socket dummyLoadBalancerSocket = null__        SocketAddress address = new InetSocketAddress("localhost", mllpPort)__        int connectTimeout = 5000__        try {_            for (int i = 1_ i <= connectionCount_ ++i) {_                log.debug("Creating connection #{}", i)__                dummyLoadBalancerSocket = new Socket()__                dummyLoadBalancerSocket.connect(address, connectTimeout)__                log.debug("Closing connection #{}", i)__                dummyLoadBalancerSocket.close()__                Thread.sleep(1000)__            }_        } finally {_            if (null != dummyLoadBalancerSocket) {_                try {_                    dummyLoadBalancerSocket.close()__                } catch (Exception ex) {_                    log.warn("Exception encountered closing dummy load balancer socket", ex)__                }_            }_        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,without,data,throws,exception,result,set,expected,count,0,int,connection,count,10,socket,dummy,load,balancer,socket,null,socket,address,address,new,inet,socket,address,localhost,mllp,port,int,connect,timeout,5000,try,for,int,i,1,i,connection,count,i,log,debug,creating,connection,i,dummy,load,balancer,socket,new,socket,dummy,load,balancer,socket,connect,address,connect,timeout,log,debug,closing,connection,i,dummy,load,balancer,socket,close,thread,sleep,1000,finally,if,null,dummy,load,balancer,socket,try,dummy,load,balancer,socket,close,catch,exception,ex,log,warn,exception,encountered,closing,dummy,load,balancer,socket,ex,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectWithoutData() throws Exception;1453968697;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time_between these probes can normally be configured, but it is typically set to about 15-sec.  Since there could be_a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out_more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer_is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectWithoutData() throws Exception {_        result.setExpectedCount(0)__        int connectionCount = 10___        Socket dummyLoadBalancerSocket = null__        SocketAddress address = new InetSocketAddress(mllpHost, mllpPort)__        int connectTimeout = 5000__        try {_            for (int i = 1_ i <= connectionCount_ ++i) {_                log.debug("Creating connection #{}", i)__                dummyLoadBalancerSocket = new Socket()__                dummyLoadBalancerSocket.connect(address, connectTimeout)__                log.debug("Closing connection #{}", i)__                dummyLoadBalancerSocket.close()__                Thread.sleep(1000)__            }_        } finally {_            if (null != dummyLoadBalancerSocket) {_                try {_                    dummyLoadBalancerSocket.close()__                } catch (Exception ex) {_                    log.warn("Exception encountered closing dummy load balancer socket", ex)__                }_            }_        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,without,data,throws,exception,result,set,expected,count,0,int,connection,count,10,socket,dummy,load,balancer,socket,null,socket,address,address,new,inet,socket,address,mllp,host,mllp,port,int,connect,timeout,5000,try,for,int,i,1,i,connection,count,i,log,debug,creating,connection,i,dummy,load,balancer,socket,new,socket,dummy,load,balancer,socket,connect,address,connect,timeout,log,debug,closing,connection,i,dummy,load,balancer,socket,close,thread,sleep,1000,finally,if,null,dummy,load,balancer,socket,try,dummy,load,balancer,socket,close,catch,exception,ex,log,warn,exception,encountered,closing,dummy,load,balancer,socket,ex,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectWithoutData() throws Exception;1473189753;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time_between these probes can normally be configured, but it is typically set to about 15-sec.  Since there could be_a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out_more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer_is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectWithoutData() throws Exception {_        int connectionCount = 10__        long connectionMillis = 200___        result.setExpectedCount(0)___        addTestRoute(-1)___        for (int i = 1_ i <= connectionCount_ ++i) {_            mllpClient.connect()__            Thread.sleep(connectionMillis)__            mllpClient.close()__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,without,data,throws,exception,int,connection,count,10,long,connection,millis,200,result,set,expected,count,0,add,test,route,1,for,int,i,1,i,connection,count,i,mllp,client,connect,thread,sleep,connection,millis,mllp,client,close,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectWithoutData() throws Exception;1473924203;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time_between these probes can normally be configured, but it is typically set to about 15-sec.  Since there could be_a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out_more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer_is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectWithoutData() throws Exception {_        int connectionCount = 10__        long connectionMillis = 200___        result.setExpectedCount(0)___        addTestRoute(-1)___        for (int i = 1_ i <= connectionCount_ ++i) {_            mllpClient.connect()__            Thread.sleep(connectionMillis)__            mllpClient.close()__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,without,data,throws,exception,int,connection,count,10,long,connection,millis,200,result,set,expected,count,0,add,test,route,1,for,int,i,1,i,connection,count,i,mllp,client,connect,thread,sleep,connection,millis,mllp,client,close,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testIdleConnection() throws Exception;1473189753;Simulate an Idle Client__@throws Exception;@Test_    public void testIdleConnection() throws Exception {_        final int maxReceiveTimeouts = 3__        String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'___        result.setExpectedCount(1)__        result.setAssertPeriod(1000)___        addTestRoute(maxReceiveTimeouts)___        mllpClient.connect()__        mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__        Thread.sleep(RECEIVE_TIMEOUT * (maxReceiveTimeouts + 1))___        try {_            mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__            fail("The MllpClientResource should have thrown an exception when writing to the reset socket")__        } catch (MllpJUnitResourceException ex) {_            Throwable cause = ex.getCause()__            assertIsInstanceOf(SocketException.class, cause)__            assertEquals("Broken pipe", cause.getMessage())__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,an,idle,client,throws,exception;test,public,void,test,idle,connection,throws,exception,final,int,max,receive,timeouts,3,string,test,message,msh,adt,epic,jcaps,cc,20160902123950,ristech,adt,a08,00001,d,2,3,r,n,result,set,expected,count,1,result,set,assert,period,1000,add,test,route,max,receive,timeouts,mllp,client,connect,mllp,client,send,message,and,wait,for,acknowledgement,test,message,thread,sleep,max,receive,timeouts,1,try,mllp,client,send,message,and,wait,for,acknowledgement,test,message,fail,the,mllp,client,resource,should,have,thrown,an,exception,when,writing,to,the,reset,socket,catch,mllp,junit,resource,exception,ex,throwable,cause,ex,get,cause,assert,is,instance,of,socket,exception,class,cause,assert,equals,broken,pipe,cause,get,message,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testIdleConnection() throws Exception;1473924203;Simulate an Idle Client__@throws Exception;@Test_    public void testIdleConnection() throws Exception {_        final int maxReceiveTimeouts = 3__        String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'___        result.setExpectedCount(1)__        result.setAssertPeriod(1000)___        addTestRoute(maxReceiveTimeouts)___        mllpClient.connect()__        mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__        Thread.sleep(RECEIVE_TIMEOUT * (maxReceiveTimeouts + 1))___        try {_            mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__            fail("The MllpClientResource should have thrown an exception when writing to the reset socket")__        } catch (MllpJUnitResourceException ex) {_            Throwable cause = ex.getCause()__            assertIsInstanceOf(SocketException.class, cause)__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,an,idle,client,throws,exception;test,public,void,test,idle,connection,throws,exception,final,int,max,receive,timeouts,3,string,test,message,msh,adt,epic,jcaps,cc,20160902123950,ristech,adt,a08,00001,d,2,3,r,n,result,set,expected,count,1,result,set,assert,period,1000,add,test,route,max,receive,timeouts,mllp,client,connect,mllp,client,send,message,and,wait,for,acknowledgement,test,message,thread,sleep,max,receive,timeouts,1,try,mllp,client,send,message,and,wait,for,acknowledgement,test,message,fail,the,mllp,client,resource,should,have,thrown,an,exception,when,writing,to,the,reset,socket,catch,mllp,junit,resource,exception,ex,throwable,cause,ex,get,cause,assert,is,instance,of,socket,exception,class,cause,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testIdleConnection() throws Exception;1481829620;Simulate an Idle Client__@throws Exception;@Test_    public void testIdleConnection() throws Exception {_        final int maxReceiveTimeouts = 3__        String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'___        result.setExpectedCount(1)__        result.setAssertPeriod(1000)___        addTestRoute(maxReceiveTimeouts)___        mllpClient.connect()__        mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__        Thread.sleep(RECEIVE_TIMEOUT * (maxReceiveTimeouts + 1))___        try {_            mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__            fail("The MllpClientResource should have thrown an exception when writing to the reset socket")__        } catch (MllpJUnitResourceException ex) {_            Throwable cause = ex.getCause()__            assertIsInstanceOf(SocketException.class, cause)__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,an,idle,client,throws,exception;test,public,void,test,idle,connection,throws,exception,final,int,max,receive,timeouts,3,string,test,message,msh,adt,epic,jcaps,cc,20160902123950,ristech,adt,a08,00001,d,2,3,r,n,result,set,expected,count,1,result,set,assert,period,1000,add,test,route,max,receive,timeouts,mllp,client,connect,mllp,client,send,message,and,wait,for,acknowledgement,test,message,thread,sleep,max,receive,timeouts,1,try,mllp,client,send,message,and,wait,for,acknowledgement,test,message,fail,the,mllp,client,resource,should,have,thrown,an,exception,when,writing,to,the,reset,socket,catch,mllp,junit,resource,exception,ex,throwable,cause,ex,get,cause,assert,is,instance,of,socket,exception,class,cause,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testIdleConnection() throws Exception;1515779403;Simulate an Idle Client__@throws Exception;@Test_    public void testIdleConnection() throws Exception {_        final int idleTimeout = RECEIVE_TIMEOUT * 3__        String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'___        result.setExpectedCount(1)__        result.setAssertPeriod(1000)___        addTestRoute(idleTimeout)___        mllpClient.connect()__        mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__        Thread.sleep(idleTimeout + RECEIVE_TIMEOUT)___        try {_            mllpClient.checkConnection()__            fail("The MllpClientResource should have thrown an exception when writing to the reset socket")__        } catch (MllpJUnitResourceException expectedEx) {_            assertEquals("checkConnection failed - read() returned END_OF_STREAM", expectedEx.getMessage())__            assertNull(expectedEx.getCause())__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,an,idle,client,throws,exception;test,public,void,test,idle,connection,throws,exception,final,int,idle,timeout,3,string,test,message,msh,adt,epic,jcaps,cc,20160902123950,ristech,adt,a08,00001,d,2,3,r,n,result,set,expected,count,1,result,set,assert,period,1000,add,test,route,idle,timeout,mllp,client,connect,mllp,client,send,message,and,wait,for,acknowledgement,test,message,thread,sleep,idle,timeout,try,mllp,client,check,connection,fail,the,mllp,client,resource,should,have,thrown,an,exception,when,writing,to,the,reset,socket,catch,mllp,junit,resource,exception,expected,ex,assert,equals,check,connection,failed,read,returned,expected,ex,get,message,assert,null,expected,ex,get,cause,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testIdleConnection() throws Exception;1517266680;Simulate an Idle Client__@throws Exception;@Test_    public void testIdleConnection() throws Exception {_        final int idleTimeout = RECEIVE_TIMEOUT * 3__        String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'___        result.setExpectedCount(1)__        result.setAssertPeriod(1000)___        addTestRoute(idleTimeout)___        mllpClient.connect()__        mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__        Thread.sleep(idleTimeout + RECEIVE_TIMEOUT)___        try {_            mllpClient.checkConnection()__            fail("The MllpClientResource should have thrown an exception when writing to the reset socket")__        } catch (MllpJUnitResourceException expectedEx) {_            assertEquals("checkConnection failed - read() returned END_OF_STREAM", expectedEx.getMessage())__            assertNull(expectedEx.getCause())__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,an,idle,client,throws,exception;test,public,void,test,idle,connection,throws,exception,final,int,idle,timeout,3,string,test,message,msh,adt,epic,jcaps,cc,20160902123950,ristech,adt,a08,00001,d,2,3,r,n,result,set,expected,count,1,result,set,assert,period,1000,add,test,route,idle,timeout,mllp,client,connect,mllp,client,send,message,and,wait,for,acknowledgement,test,message,thread,sleep,idle,timeout,try,mllp,client,check,connection,fail,the,mllp,client,resource,should,have,thrown,an,exception,when,writing,to,the,reset,socket,catch,mllp,junit,resource,exception,expected,ex,assert,equals,check,connection,failed,read,returned,expected,ex,get,message,assert,null,expected,ex,get,cause,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testIdleConnection() throws Exception;1517355620;Simulate an Idle Client__@throws Exception;@Test_    public void testIdleConnection() throws Exception {_        final int idleTimeout = RECEIVE_TIMEOUT * 3__        String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'___        result.setExpectedCount(1)__        result.setAssertPeriod(1000)___        addTestRouteWithIdleTimeout(idleTimeout)___        mllpClient.connect()__        mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__        Thread.sleep(idleTimeout + RECEIVE_TIMEOUT)___        try {_            mllpClient.checkConnection()__            fail("The MllpClientResource should have thrown an exception when writing to the reset socket")__        } catch (MllpJUnitResourceException expectedEx) {_            assertEquals("checkConnection failed - read() returned END_OF_STREAM", expectedEx.getMessage())__            assertNull(expectedEx.getCause())__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,an,idle,client,throws,exception;test,public,void,test,idle,connection,throws,exception,final,int,idle,timeout,3,string,test,message,msh,adt,epic,jcaps,cc,20160902123950,ristech,adt,a08,00001,d,2,3,r,n,result,set,expected,count,1,result,set,assert,period,1000,add,test,route,with,idle,timeout,idle,timeout,mllp,client,connect,mllp,client,send,message,and,wait,for,acknowledgement,test,message,thread,sleep,idle,timeout,try,mllp,client,check,connection,fail,the,mllp,client,resource,should,have,thrown,an,exception,when,writing,to,the,reset,socket,catch,mllp,junit,resource,exception,expected,ex,assert,equals,check,connection,failed,read,returned,expected,ex,get,message,assert,null,expected,ex,get,cause,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testIdleConnection() throws Exception;1524063106;Simulate an Idle Client__@throws Exception;@Test_    public void testIdleConnection() throws Exception {_        final int idleTimeout = RECEIVE_TIMEOUT * 3__        String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'___        result.setExpectedCount(1)__        result.setAssertPeriod(1000)___        addTestRouteWithIdleTimeout(idleTimeout)___        mllpClient.connect()__        mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__        Thread.sleep(idleTimeout + RECEIVE_TIMEOUT)___        try {_            mllpClient.checkConnection()__            fail("The MllpClientResource should have thrown an exception when writing to the reset socket")__        } catch (MllpJUnitResourceException expectedEx) {_            assertEquals("checkConnection failed - read() returned END_OF_STREAM", expectedEx.getMessage())__            assertNull(expectedEx.getCause())__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,an,idle,client,throws,exception;test,public,void,test,idle,connection,throws,exception,final,int,idle,timeout,3,string,test,message,msh,adt,epic,jcaps,cc,20160902123950,ristech,adt,a08,00001,d,2,3,r,n,result,set,expected,count,1,result,set,assert,period,1000,add,test,route,with,idle,timeout,idle,timeout,mllp,client,connect,mllp,client,send,message,and,wait,for,acknowledgement,test,message,thread,sleep,idle,timeout,try,mllp,client,check,connection,fail,the,mllp,client,resource,should,have,thrown,an,exception,when,writing,to,the,reset,socket,catch,mllp,junit,resource,exception,expected,ex,assert,equals,check,connection,failed,read,returned,expected,ex,get,message,assert,null,expected,ex,get,cause,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testIdleConnection() throws Exception;1537290824;Simulate an Idle Client__@throws Exception;@Test_    public void testIdleConnection() throws Exception {_        final int idleTimeout = RECEIVE_TIMEOUT * 3__        String testMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n'___        result.setExpectedCount(1)__        result.setAssertPeriod(1000)___        addTestRouteWithIdleTimeout(idleTimeout)___        mllpClient.connect()__        mllpClient.sendMessageAndWaitForAcknowledgement(testMessage)__        Thread.sleep(idleTimeout + RECEIVE_TIMEOUT)___        try {_            mllpClient.checkConnection()__            fail("The MllpClientResource should have thrown an exception when writing to the reset socket")__        } catch (MllpJUnitResourceException expectedEx) {_            assertEquals("checkConnection failed - read() returned END_OF_STREAM", expectedEx.getMessage())__            assertNull(expectedEx.getCause())__        }__        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,an,idle,client,throws,exception;test,public,void,test,idle,connection,throws,exception,final,int,idle,timeout,3,string,test,message,msh,adt,epic,jcaps,cc,20160902123950,ristech,adt,a08,00001,d,2,3,r,n,result,set,expected,count,1,result,set,assert,period,1000,add,test,route,with,idle,timeout,idle,timeout,mllp,client,connect,mllp,client,send,message,and,wait,for,acknowledgement,test,message,thread,sleep,idle,timeout,try,mllp,client,check,connection,fail,the,mllp,client,resource,should,have,thrown,an,exception,when,writing,to,the,reset,socket,catch,mllp,junit,resource,exception,expected,ex,assert,equals,check,connection,failed,read,returned,expected,ex,get,message,assert,null,expected,ex,get,cause,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectThenCloseWithoutData() throws Exception;1481829620;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time_between these probes can normally be configured, but it is typically set to about 15-sec.  Since there could be_a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out_more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer_is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectThenCloseWithoutData() throws Exception {_        int connectionCount = 10__        long connectionMillis = 200___        result.setExpectedCount(0)__        result.setAssertPeriod(SOCKET_STARTUP_TEST_WAIT + SOCKET_STARTUP_TEST_READ_TIMEOUT)___        addTestRoute(-1)___        for (int i = 1_ i <= connectionCount_ ++i) {_            mllpClient.connect()__            Thread.sleep(connectionMillis)__            mllpClient.close()__        }__        _        mllpClient.connect()__        Thread.sleep(SOCKET_STARTUP_TEST_WAIT + SOCKET_STARTUP_TEST_READ_TIMEOUT + 1000)__        mllpClient.close()___        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,then,close,without,data,throws,exception,int,connection,count,10,long,connection,millis,200,result,set,expected,count,0,result,set,assert,period,add,test,route,1,for,int,i,1,i,connection,count,i,mllp,client,connect,thread,sleep,connection,millis,mllp,client,close,mllp,client,connect,thread,sleep,1000,mllp,client,close,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectThenCloseWithoutData() throws Exception;1515779403;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time between these probes can normally be configured, but it is typically set to about_15-sec.  Since there could be a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectThenCloseWithoutData() throws Exception {_        int connectionCount = 10__        long connectionMillis = 200___        result.setExpectedCount(0)__        result.setAssertPeriod(1000)___        addTestRoute(-1)___        for (int i = 1_ i <= connectionCount_ ++i) {_            mllpClient.connect()__            Thread.sleep(connectionMillis)__            mllpClient.close()__        }__        _        mllpClient.connect()__        Thread.sleep(1000)__        mllpClient.close()___        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,then,close,without,data,throws,exception,int,connection,count,10,long,connection,millis,200,result,set,expected,count,0,result,set,assert,period,1000,add,test,route,1,for,int,i,1,i,connection,count,i,mllp,client,connect,thread,sleep,connection,millis,mllp,client,close,mllp,client,connect,thread,sleep,1000,mllp,client,close,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectThenCloseWithoutData() throws Exception;1517266680;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time between these probes can normally be configured, but it is typically set to about_15-sec.  Since there could be a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectThenCloseWithoutData() throws Exception {_        int connectionCount = 10__        long connectionMillis = 200___        result.setExpectedCount(0)__        result.setAssertPeriod(1000)___        addTestRoute(-1)___        for (int i = 1_ i <= connectionCount_ ++i) {_            mllpClient.connect()__            Thread.sleep(connectionMillis)__            mllpClient.close()__        }__        _        mllpClient.connect()__        Thread.sleep(1000)__        mllpClient.close()___        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,then,close,without,data,throws,exception,int,connection,count,10,long,connection,millis,200,result,set,expected,count,0,result,set,assert,period,1000,add,test,route,1,for,int,i,1,i,connection,count,i,mllp,client,connect,thread,sleep,connection,millis,mllp,client,close,mllp,client,connect,thread,sleep,1000,mllp,client,close,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectThenCloseWithoutData() throws Exception;1517355620;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time between these probes can normally be configured, but it is typically set to about_15-sec.  Since there could be a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectThenCloseWithoutData() throws Exception {_        int connectionCount = 10__        long connectionMillis = 200___        result.setExpectedCount(0)__        result.setAssertPeriod(1000)___        addTestRouteWithIdleTimeout(-1)___        for (int i = 1_ i <= connectionCount_ ++i) {_            mllpClient.connect()__            Thread.sleep(connectionMillis)__            mllpClient.close()__        }__        _        mllpClient.connect()__        Thread.sleep(1000)__        mllpClient.close()___        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,then,close,without,data,throws,exception,int,connection,count,10,long,connection,millis,200,result,set,expected,count,0,result,set,assert,period,1000,add,test,route,with,idle,timeout,1,for,int,i,1,i,connection,count,i,mllp,client,connect,thread,sleep,connection,millis,mllp,client,close,mllp,client,connect,thread,sleep,1000,mllp,client,close,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectThenCloseWithoutData() throws Exception;1524063106;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time between these probes can normally be configured, but it is typically set to about_15-sec.  Since there could be a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectThenCloseWithoutData() throws Exception {_        int connectionCount = 10__        long connectionMillis = 200___        result.setExpectedCount(0)__        result.setAssertPeriod(1000)___        addTestRouteWithIdleTimeout(-1)___        for (int i = 1_ i <= connectionCount_ ++i) {_            mllpClient.connect()__            Thread.sleep(connectionMillis)__            mllpClient.close()__        }__        _        mllpClient.connect()__        Thread.sleep(1000)__        mllpClient.close()___        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,then,close,without,data,throws,exception,int,connection,count,10,long,connection,millis,200,result,set,expected,count,0,result,set,assert,period,1000,add,test,route,with,idle,timeout,1,for,int,i,1,i,connection,count,i,mllp,client,connect,thread,sleep,connection,millis,mllp,client,close,mllp,client,connect,thread,sleep,1000,mllp,client,close,assert,mock,endpoints,satisfied,15,time,unit,seconds
MllpTcpServerConsumerConnectionTest -> @Test     public void testConnectThenCloseWithoutData() throws Exception;1537290824;Simulate a Load Balancer Probe_<p/>_Load Balancers check the status of a port by establishing and closing a TCP connection periodically.  The time between these probes can normally be configured, but it is typically set to about_15-sec.  Since there could be a large number of port that are being probed, the logging from the connect/disconnect operations can drown-out more useful information._<p/>_Watch the logs when running this test to verify that the log output will be acceptable when a load balancer is probing the port._<p/>_TODO:  Need to add a custom Log4j Appender that can verify the logging is acceptable__@throws Exception;@Test_    public void testConnectThenCloseWithoutData() throws Exception {_        int connectionCount = 10__        long connectionMillis = 200___        result.setExpectedCount(0)__        result.setAssertPeriod(1000)___        addTestRouteWithIdleTimeout(-1)___        for (int i = 1_ i <= connectionCount_ ++i) {_            mllpClient.connect()__            Thread.sleep(connectionMillis)__            mllpClient.close()__        }__        _        mllpClient.connect()__        Thread.sleep(1000)__        mllpClient.close()___        assertMockEndpointsSatisfied(15, TimeUnit.SECONDS)__    };simulate,a,load,balancer,probe,p,load,balancers,check,the,status,of,a,port,by,establishing,and,closing,a,tcp,connection,periodically,the,time,between,these,probes,can,normally,be,configured,but,it,is,typically,set,to,about,15,sec,since,there,could,be,a,large,number,of,port,that,are,being,probed,the,logging,from,the,connect,disconnect,operations,can,drown,out,more,useful,information,p,watch,the,logs,when,running,this,test,to,verify,that,the,log,output,will,be,acceptable,when,a,load,balancer,is,probing,the,port,p,todo,need,to,add,a,custom,log4j,appender,that,can,verify,the,logging,is,acceptable,throws,exception;test,public,void,test,connect,then,close,without,data,throws,exception,int,connection,count,10,long,connection,millis,200,result,set,expected,count,0,result,set,assert,period,1000,add,test,route,with,idle,timeout,1,for,int,i,1,i,connection,count,i,mllp,client,connect,thread,sleep,connection,millis,mllp,client,close,mllp,client,connect,thread,sleep,1000,mllp,client,close,assert,mock,endpoints,satisfied,15,time,unit,seconds
