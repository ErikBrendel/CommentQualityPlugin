commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = (DefaultCamelContext) super.createCamelContext().     context.setUseMDCLogging(true).     context.setName(this.getClass().getSimpleName()).     return context. }
false;public;0;28;;public void configure() {     onCompletion().to(complete).     onException(ConnectException.class).handled(true).to(connectEx).log(LoggingLevel.ERROR, routeId, "Connect Error").stop().     onException(MllpWriteException.class).handled(true).to(writeEx).log(LoggingLevel.ERROR, routeId, "Write Error").stop().     onException(MllpAcknowledgementException.class).handled(true).to(acknowledgementEx).log(LoggingLevel.ERROR, routeId, "Acknowledgement Error").stop().     from(source.getDefaultEndpoint()).routeId(routeId).log(LoggingLevel.INFO, routeId, "Sending Message").toF("mllp://%s:%d", mllpServer.getListenHost(), mllpServer.getListenPort()).log(LoggingLevel.INFO, routeId, "Received Acknowledgement").to(target). }
false;protected;0;35;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          String routeId = "mllp-sender".          public void configure() {             onCompletion().to(complete).             onException(ConnectException.class).handled(true).to(connectEx).log(LoggingLevel.ERROR, routeId, "Connect Error").stop().             onException(MllpWriteException.class).handled(true).to(writeEx).log(LoggingLevel.ERROR, routeId, "Write Error").stop().             onException(MllpAcknowledgementException.class).handled(true).to(acknowledgementEx).log(LoggingLevel.ERROR, routeId, "Acknowledgement Error").stop().             from(source.getDefaultEndpoint()).routeId(routeId).log(LoggingLevel.INFO, routeId, "Sending Message").toF("mllp://%s:%d", mllpServer.getListenHost(), mllpServer.getListenPort()).log(LoggingLevel.INFO, routeId, "Received Acknowledgement").to(target).         }     }. }
true;public;0;23;/**  * The component should reconnect, so the route shouldn't see any errors.  *  * @throws Exception  */ ;/**  * The component should reconnect, so the route shouldn't see any errors.  *  * @throws Exception  */ @Test public void testConnectionClosedBeforeSendingHL7Message() throws Exception {     target.expectedMessageCount(2).     complete.expectedMessageCount(2).     connectEx.expectedMessageCount(0).     writeEx.expectedMessageCount(0).     acknowledgementEx.expectedMessageCount(0).     NotifyBuilder oneDone = new NotifyBuilder(context).whenCompleted(1).create().     NotifyBuilder twoDone = new NotifyBuilder(context).whenCompleted(2).create().     // Need to send one message to get the connection established     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed an exchange", oneDone.matches(5, TimeUnit.SECONDS)).     mllpServer.closeClientConnections().     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed two exchanges", twoDone.matches(5, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
true;public;0;22;/**  * The component should reconnect, so the route shouldn't see any errors.  *  * @throws Exception  */ ;/**  * The component should reconnect, so the route shouldn't see any errors.  *  * @throws Exception  */ @Test() public void testConnectionResetBeforeSendingHL7Message() throws Exception {     target.expectedMessageCount(2).     complete.expectedMessageCount(2).     connectEx.expectedMessageCount(0).     writeEx.expectedMessageCount(0).     acknowledgementEx.expectedMessageCount(0).     NotifyBuilder oneDone = new NotifyBuilder(context).whenCompleted(1).create().     NotifyBuilder twoDone = new NotifyBuilder(context).whenCompleted(2).create().     // Need to send one message to get the connection established     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed an exchange", oneDone.matches(5, TimeUnit.SECONDS)).     mllpServer.resetClientConnections().     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed two exchanges", twoDone.matches(5, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
false;public;0;18;;@Test() public void testConnectionClosedBeforeReadingAcknowledgement() throws Exception {     target.expectedMessageCount(0).     complete.expectedMessageCount(1).     connectEx.expectedMessageCount(0).     writeEx.expectedMessageCount(0).     acknowledgementEx.expectedMessageCount(1).     mllpServer.setCloseSocketBeforeAcknowledgementModulus(1).     NotifyBuilder done = new NotifyBuilder(context).whenCompleted(1).create().     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed an exchange", done.matches(5, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
false;public;0;18;;@Test() public void testConnectionResetBeforeReadingAcknowledgement() throws Exception {     target.expectedMessageCount(0).     complete.expectedMessageCount(1).     connectEx.expectedMessageCount(0).     writeEx.expectedMessageCount(0).     acknowledgementEx.expectedMessageCount(1).     mllpServer.setResetSocketBeforeAcknowledgementModulus(1).     NotifyBuilder done = new NotifyBuilder(context).whenCompleted(1).create().     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed an exchange", done.matches(5, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
false;public;0;22;;@Test() public void testServerShutdownBeforeSendingHL7Message() throws Exception {     target.expectedMessageCount(1).     complete.expectedMessageCount(2).     connectEx.expectedMessageCount(0).     NotifyBuilder done = new NotifyBuilder(context).whenCompleted(2).create().     // Need to send one message to get the connection established     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     mllpServer.shutdown().     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed an exchange", done.matches(5, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS).     // Depending on the timing, either a write or a receive exception will be thrown     assertEquals("Either a write or a receive exception should have been be thrown", 1, writeEx.getExchanges().size() + acknowledgementEx.getExchanges().size()). }
false;public;0;23;;@Test() public void testConnectionCloseAndServerShutdownBeforeSendingHL7Message() throws Exception {     target.expectedMessageCount(1).     complete.expectedMessageCount(2).     connectEx.expectedMessageCount(0).     NotifyBuilder done = new NotifyBuilder(context).whenCompleted(2).create().     // Need to send one message to get the connection established     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     mllpServer.closeClientConnections().     mllpServer.shutdown().     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed an exchange", done.matches(5, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS).     // Depending on the timing, either a write or a receive exception will be thrown     assertEquals("Either a write or a receive exception should have been be thrown", 1, writeEx.getExchanges().size() + acknowledgementEx.getExchanges().size()). }
false;public;0;22;;@Test() public void testConnectionResetAndServerShutdownBeforeSendingHL7Message() throws Exception {     target.expectedMessageCount(1).     complete.expectedMessageCount(2).     connectEx.expectedMessageCount(0).     writeEx.expectedMessageCount(1).     acknowledgementEx.expectedMessageCount(0).     NotifyBuilder done = new NotifyBuilder(context).whenCompleted(2).create().     // Need to send one message to get the connection established     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     mllpServer.resetClientConnections().     mllpServer.shutdown().     source.sendBody(Hl7TestMessageGenerator.generateMessage()).     assertTrue("Should have completed an exchange", done.matches(5, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
