commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Override public InputStream getInputStream() throws IOException {     if (returnNullInputStream) {         return null.     }     if (isClosed()) {         throw new SocketException("Socket is closed").     }     if (!isConnected()) {         throw new SocketException("Socket is not connected").     }     if (isOutputShutdown()) {         throw new SocketException("Socket output is shutdown").     }     if (inputStreamStub == null) {         throw new IOException("Faking getInputStream failure").     }     return inputStreamStub. }
false;public;0;22;;@Override public OutputStream getOutputStream() throws IOException {     if (returnNullOutputStream) {         return null.     }     if (isClosed()) {         throw new SocketException("Socket is closed").     }     if (!isConnected()) {         throw new SocketException("Socket is not connected").     }     if (isOutputShutdown()) {         throw new SocketException("Socket output is shutdown").     }     if (outputStreamStub == null) {         throw new IOException("Faking getOutputStream failure").     }     return outputStreamStub. }
false;public;2;5;;@Override public void setSoLinger(boolean on, int linger) throws SocketException {     this.linger = on.     this.lingerTimeout = linger. }
false;public;0;8;;@Override public int getSoLinger() throws SocketException {     if (linger) {         return lingerTimeout.     }     return -1. }
false;public;0;4;;@Override public boolean isConnected() {     return connected. }
false;public;0;4;;@Override public boolean isInputShutdown() {     return inputShutdown. }
false;public;0;4;;@Override public boolean isOutputShutdown() {     return outputShutdown. }
false;public;0;4;;@Override public boolean isClosed() {     return closed. }
false;public;0;7;;@Override public void shutdownInput() throws IOException {     inputShutdown = true.     if (throwExceptionOnShutdownInput) {         throw new IOException("Faking a shutdownInput failure").     } }
false;public;0;7;;@Override public void shutdownOutput() throws IOException {     outputShutdown = true.     if (throwExceptionOnShutdownOutput) {         throw new IOException("Faking a shutdownOutput failure").     } }
false;public,synchronized;0;7;;@Override public synchronized void close() throws IOException {     closed = true.     if (throwExceptionOnClose) {         throw new IOException("Faking a close failure").     } }
false;public,synchronized;0;4;;@Override public synchronized int getReceiveBufferSize() throws SocketException {     return receiveBufferSize. }
false;public,synchronized;1;4;;@Override public synchronized void setReceiveBufferSize(int size) throws SocketException {     this.receiveBufferSize = size. }
false;public,synchronized;0;4;;@Override public synchronized int getSendBufferSize() throws SocketException {     return sendBufferSize. }
false;public,synchronized;1;4;;@Override public synchronized void setSendBufferSize(int size) throws SocketException {     this.sendBufferSize = size. }
false;public,synchronized;0;4;;@Override public synchronized int getSoTimeout() throws SocketException {     return timeout. }
false;public,synchronized;1;4;;@Override public synchronized void setSoTimeout(int timeout) throws SocketException {     this.timeout = timeout. }
