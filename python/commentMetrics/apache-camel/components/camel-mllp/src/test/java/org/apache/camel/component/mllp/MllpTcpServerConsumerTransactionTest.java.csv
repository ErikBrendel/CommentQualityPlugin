commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = (DefaultCamelContext) super.createCamelContext().     context.setUseMDCLogging(true).     context.setName(this.getClass().getSimpleName()).     return context. }
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     SjmsComponent target = new SjmsComponent().     target.setConnectionFactory(new ActiveMQConnectionFactory(broker.getVmURL())).     registry.bind("target", target).     return registry. }
false;public;0;26;;@Override public void configure() throws Exception {     String routeId = "mllp-test-receiver-route".     onCompletion().onCompleteOnly().log(LoggingLevel.INFO, routeId, "Test route complete").to(complete).     onCompletion().onFailureOnly().log(LoggingLevel.INFO, routeId, "Test route failed").to(failure).     fromF("mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d", mllpClient.getMllpHost(), mllpClient.getMllpPort(), connectTimeout, responseTimeout).routeId(routeId).log(LoggingLevel.INFO, routeId, "Test route received message").to("target://test-queue?transacted=true").     from("target://test-queue").routeId("jms-consumer").log(LoggingLevel.INFO, routeId, "Test JMS Consumer received message").to(result). }
false;protected;0;38;;@Override protected RouteBuilder createRouteBuilder() {     mllpClient.setMllpHost("localhost").     mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable()).     return new RouteBuilder() {          int connectTimeout = 500.          int responseTimeout = 5000.          @Override         public void configure() throws Exception {             String routeId = "mllp-test-receiver-route".             onCompletion().onCompleteOnly().log(LoggingLevel.INFO, routeId, "Test route complete").to(complete).             onCompletion().onFailureOnly().log(LoggingLevel.INFO, routeId, "Test route failed").to(failure).             fromF("mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d", mllpClient.getMllpHost(), mllpClient.getMllpPort(), connectTimeout, responseTimeout).routeId(routeId).log(LoggingLevel.INFO, routeId, "Test route received message").to("target://test-queue?transacted=true").             from("target://test-queue").routeId("jms-consumer").log(LoggingLevel.INFO, routeId, "Test JMS Consumer received message").to(result).         }     }. }
false;public;0;12;;@Test public void testReceiveSingleMessage() throws Exception {     result.expectedMessageCount(1).     complete.expectedMessageCount(1).     failure.expectedMessageCount(0).     mllpClient.connect().     mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(), 10000).     assertMockEndpointsSatisfied(10, TimeUnit.SECONDS). }
false;public;0;14;;@Test public void testAcknowledgementWriteFailure() throws Exception {     result.expectedMessageCount(0).     result.setAssertPeriod(1000).     complete.expectedMessageCount(0).     failure.expectedMessageCount(1).     mllpClient.connect().     mllpClient.setDisconnectMethod(MllpClientResource.DisconnectMethod.RESET).     mllpClient.sendFramedData(Hl7TestMessageGenerator.generateMessage(), true).     assertMockEndpointsSatisfied(10, TimeUnit.SECONDS). }
