commented;modifiers;parameterAmount;loc;comment;code
true;public;0;9;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConstructorOne() throws Exception {     instance = new MllpApplicationErrorAcknowledgementException(HL7_MESSAGE_BYTES, HL7_ACKNOWLEDGEMENT_BYTES).     assertTrue(instance.getMessage().startsWith(MllpApplicationErrorAcknowledgementException.EXCEPTION_MESSAGE)).     assertNull(instance.getCause()).     assertArrayEquals(HL7_MESSAGE_BYTES, instance.getHl7MessageBytes()).     assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES, instance.getHl7AcknowledgementBytes()). }
true;public;0;9;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConstructorTwo() throws Exception {     instance = new MllpApplicationErrorAcknowledgementException(HL7_MESSAGE_BYTES, HL7_ACKNOWLEDGEMENT_BYTES, CAUSE).     assertTrue(instance.getMessage().startsWith(MllpApplicationErrorAcknowledgementException.EXCEPTION_MESSAGE)).     assertSame(CAUSE, instance.getCause()).     assertArrayEquals(HL7_MESSAGE_BYTES, instance.getHl7MessageBytes()).     assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES, instance.getHl7AcknowledgementBytes()). }
true;public;0;6;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testGetAcknowledgmentType() throws Exception {     instance = new MllpApplicationErrorAcknowledgementException(HL7_MESSAGE_BYTES, HL7_ACKNOWLEDGEMENT_BYTES).     assertEquals("AE", instance.getAcknowledgmentType()). }
