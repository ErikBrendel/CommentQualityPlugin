commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static byte[] build(byte b) {     try {         return new PayloadBuilder(b).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(byte) failure", e).     } }
false;public,static;2;7;;public static byte[] build(byte b, byte... bytes) {     try {         return new PayloadBuilder(b).append(bytes).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(byte) failure", e).     } }
false;public,static;1;7;;public static byte[] build(byte[] bytes) {     try {         return new PayloadBuilder(bytes).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(byte[]) failure", e).     } }
false;public,static;1;7;;public static byte[] build(char c) {     try {         return new PayloadBuilder(c).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(char...) failure", e).     } }
false;public,static;2;7;;public static byte[] build(char c, char... chars) {     try {         return new PayloadBuilder(c).append(chars).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(char...) failure", e).     } }
false;public,static;1;7;;public static byte[] build(char[] chars) {     try {         return new PayloadBuilder(chars).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(char...) failure", e).     } }
false;public,static;1;7;;public static byte[] build(String s) {     try {         return new PayloadBuilder(s).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(String) failure", e).     } }
false;public,static;1;7;;public static byte[] build(String[] strings) {     try {         return new PayloadBuilder(strings).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(String[]) failure", e).     } }
false;public,static;2;9;;public static byte[] build(char start, String s) {     try {         return new PayloadBuilder(start).append(s).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(String) failure", e).     } }
false;public,static;3;10;;public static byte[] build(char start, String s, char... end) {     try {         return new PayloadBuilder(start).append(s).append(end).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(char, String, char...) failure", e).     } }
false;public,static;3;9;;public static byte[] build(char start, byte[] bytes, char... end) {     try {         return new PayloadBuilder(start).append(bytes).append(end).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(char, byte[], char...) failure", e).     } }
false;public,static;2;8;;public static byte[] build(String s, char... end) {     try {         return new PayloadBuilder(s).append(end).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(String, char...) failure", e).     } }
false;public,static;2;8;;public static byte[] build(byte[] bytes, char... end) {     try {         return new PayloadBuilder(bytes).append(end).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(byte[], char...) failure", e).     } }
false;public,static;2;8;;public static byte[] build(byte[] bytes, String s) {     try {         return new PayloadBuilder(bytes).append(s).build().     } catch (IOException e) {         throw new RuntimeException("PayloadBuilder.build(byte[], String) failure", e).     } }
false;public;1;5;;public PayloadBuilder append(byte b) throws IOException {     builderStream.write(b).     return this. }
false;public;1;5;;public PayloadBuilder append(byte[] bytes) throws IOException {     builderStream.write(bytes).     return this. }
false;public;1;9;;public PayloadBuilder append(char... chars) throws IOException {     if (chars != null) {         for (char c : chars) {             builderStream.write(c).         }     }     return this. }
false;public;1;9;;public PayloadBuilder append(String... strings) throws IOException {     if (strings != null) {         for (String s : strings) {             builderStream.write(s.getBytes()).         }     }     return this. }
false;public;3;5;;public PayloadBuilder append(byte[] payload, int startPosition, int length) throws IOException {     builderStream.write(payload, startPosition, length).     return this. }
false;public;0;7;;public byte[] build() {     byte[] answer = builderStream.toByteArray().     builderStream.reset().     return answer. }
