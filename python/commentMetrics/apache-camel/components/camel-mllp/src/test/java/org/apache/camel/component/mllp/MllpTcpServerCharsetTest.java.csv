commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     mllpClient.setMllpHost("localhost").     mllpClient.setMllpPort(AvailablePortFinder.getNextAvailable()).     DefaultCamelContext context = (DefaultCamelContext) super.createCamelContext().     context.setUseMDCLogging(true).     context.setName(this.getClass().getSimpleName()).     return context. }
false;public;0;5;;public void configure() {     fromF("mllp://%d?receiveTimeout=1000&readTimeout=500&charsetName=ISO-IR-100", mllpClient.getMllpPort()).log(LoggingLevel.INFO, routeId, "Sending Message").to(target). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          String routeId = "mllp-sender".          public void configure() {             fromF("mllp://%d?receiveTimeout=1000&readTimeout=500&charsetName=ISO-IR-100", mllpClient.getMllpPort()).log(LoggingLevel.INFO, routeId, "Sending Message").to(target).         }     }. }
false;public;0;10;;@Test public void testReceiveMessageWithInvalidMsh18() throws Exception {     target.expectedMinimumMessageCount(1).     mllpClient.connect().     mllpClient.sendMessageAndWaitForAcknowledgement(TEST_MESSAGE).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
false;public;0;10;;@Test public void testReceiveMessageWithValidMsh18() throws Exception {     target.expectedMinimumMessageCount(1).     mllpClient.connect().     mllpClient.sendMessageAndWaitForAcknowledgement(TEST_MESSAGE.replace("ISO_IR 100", "ISO-IR-100")).     assertMockEndpointsSatisfied(5, TimeUnit.SECONDS). }
