commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testGenerateInvalidPayloadExceptionMessage() throws Exception {     String message = Hl7Util.generateInvalidPayloadExceptionMessage(TEST_MESSAGE.getBytes()).     assertNull("Valid payload should result in a null message", message). }
false;public;0;7;;@Test public void testGenerateInvalidPayloadExceptionMessageWithLengthLargerThanArraySize() throws Exception {     byte[] payload = TEST_MESSAGE.getBytes().     String message = Hl7Util.generateInvalidPayloadExceptionMessage(payload, payload.length * 2).     assertNull("Valid payload should result in a null message", message). }
false;public;0;7;;@Test public void testGenerateInvalidPayloadExceptionMessageWithLengthSmallerThanArraySize() throws Exception {     byte[] payload = TEST_MESSAGE.getBytes().     String message = Hl7Util.generateInvalidPayloadExceptionMessage(payload, 10).     assertEquals("The HL7 payload terminating byte [0x7c] is incorrect - expected [0xd]  {ASCII [<CR>]}", message). }
false;public;0;6;;@Test public void testGenerateInvalidPayloadExceptionMessageWithNullPayload() throws Exception {     assertEquals("HL7 payload is null", Hl7Util.generateInvalidPayloadExceptionMessage(null)).     assertEquals("HL7 payload is null", Hl7Util.generateInvalidPayloadExceptionMessage(null, 1234)). }
false;public;0;11;;@Test public void testGenerateInvalidPayloadExceptionMessageWithInvalidStartingSegment() throws Exception {     byte[] invalidStartingSegment = "MSA|AA|00001|\r".getBytes().     byte[] basePayload = TEST_MESSAGE.getBytes().     ByteArrayOutputStream payloadStream = new ByteArrayOutputStream(invalidStartingSegment.length + basePayload.length).     payloadStream.write(invalidStartingSegment).     payloadStream.write(basePayload.length).     assertEquals("The first segment of the HL7 payload {MSA} is not an MSH segment", Hl7Util.generateInvalidPayloadExceptionMessage(payloadStream.toByteArray())). }
false;public;0;7;;@Test public void testGenerateInvalidPayloadExceptionMessageWithEmptyPayload() throws Exception {     byte[] payload = new byte[0].     assertEquals("HL7 payload is empty", Hl7Util.generateInvalidPayloadExceptionMessage(payload)).     assertEquals("HL7 payload is empty", Hl7Util.generateInvalidPayloadExceptionMessage(payload, payload.length)). }
false;public;0;15;;@Test public void testGenerateInvalidPayloadExceptionMessageWithEmbeddedStartOfBlock() throws Exception {     byte[] basePayload = TEST_MESSAGE.getBytes().     ByteArrayOutputStream payloadStream = new ByteArrayOutputStream(basePayload.length + 1).     int embeddedStartOfBlockIndex = basePayload.length / 2.     payloadStream.write(basePayload, 0, embeddedStartOfBlockIndex).     payloadStream.write(MllpProtocolConstants.START_OF_BLOCK).     payloadStream.write(basePayload, embeddedStartOfBlockIndex, basePayload.length - embeddedStartOfBlockIndex).     String expected = "HL7 payload contains an embedded START_OF_BLOCK {0xb, ASCII <VT>} at index " + embeddedStartOfBlockIndex.     assertEquals(expected, Hl7Util.generateInvalidPayloadExceptionMessage(payloadStream.toByteArray())). }
false;public;0;15;;@Test public void testGenerateInvalidPayloadExceptionMessageWithEmbeddedEndOfBlock() throws Exception {     byte[] basePayload = TEST_MESSAGE.getBytes().     ByteArrayOutputStream payloadStream = new ByteArrayOutputStream(basePayload.length + 1).     int embeddedEndOfBlockIndex = basePayload.length / 2.     payloadStream.write(basePayload, 0, embeddedEndOfBlockIndex).     payloadStream.write(MllpProtocolConstants.END_OF_BLOCK).     payloadStream.write(basePayload, embeddedEndOfBlockIndex, basePayload.length - embeddedEndOfBlockIndex).     String expected = "HL7 payload contains an embedded END_OF_BLOCK {0x1c, ASCII <FS>} at index " + embeddedEndOfBlockIndex.     assertEquals(expected, Hl7Util.generateInvalidPayloadExceptionMessage(payloadStream.toByteArray())). }
true;public;0;10;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testGenerateAcknowledgementPayload() throws Exception {     MllpSocketBuffer mllpSocketBuffer = new MllpSocketBuffer(new MllpEndpointStub()).     Hl7Util.generateAcknowledgementPayload(mllpSocketBuffer, TEST_MESSAGE.getBytes(), "AA").     String actual = mllpSocketBuffer.toString().     assertThat(actual, startsWith(EXPECTED_ACKNOWLEDGEMENT_PAYLOAD_START)).     assertThat(actual, endsWith(EXPECTED_ACKNOWLEDGEMENT_PAYLOAD_END)). }
true;public;0;7;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test(expected = MllpAcknowledgementGenerationException.class) public void testGenerateAcknowledgementPayloadFromNullMessage() throws Exception {     MllpSocketBuffer mllpSocketBuffer = new MllpSocketBuffer(new MllpEndpointStub()).     Hl7Util.generateAcknowledgementPayload(mllpSocketBuffer, null, "AA").     assertEquals(EXPECTED_ACKNOWLEDGEMENT_PAYLOAD, mllpSocketBuffer.toString()). }
true;public;0;7;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test(expected = MllpAcknowledgementGenerationException.class) public void testGenerateAcknowledgementPayloadFromEmptyMessage() throws Exception {     MllpSocketBuffer mllpSocketBuffer = new MllpSocketBuffer(new MllpEndpointStub()).     Hl7Util.generateAcknowledgementPayload(mllpSocketBuffer, new byte[0], "AA").     assertEquals(EXPECTED_ACKNOWLEDGEMENT_PAYLOAD, mllpSocketBuffer.toString()). }
true;public;0;7;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test(expected = MllpAcknowledgementGenerationException.class) public void testGenerateAcknowledgementPayloadWithoutEnoughFields() throws Exception {     final byte[] testMessage = TEST_MESSAGE.replace("|RISTECH|ADT^A08|00001|D|2.3^^|||||||", "").getBytes().     MllpSocketBuffer mllpSocketBuffer = new MllpSocketBuffer(new MllpEndpointStub()).     Hl7Util.generateAcknowledgementPayload(mllpSocketBuffer, testMessage, "AA"). }
true;public;0;15;/**  * If the MSH isn't terminated correctly, we'll get Junk for the acknowledgement.  *  * @throws Exception in the event of a test error.  */ ;/**  * If the MSH isn't terminated correctly, we'll get Junk for the acknowledgement.  *  * @throws Exception in the event of a test error.  */ @Test public void testGenerateAcknowledgementPayloadWithoutEndOfSegment() throws Exception {     String junkMessage = "MSH|^~\\&|ADT|EPIC|JCAPS|CC|20161206193919|RISTECH|ADT^A08|00001|D|2.3^^|||||||" + "EVN|A08|20150107161440||REG_UPDATE_SEND_VISIT_MESSAGES_ON_PATIENT_CHANGES|RISTECH^RADIOLOGY^TECHNOLOGIST^^^^^^UCLA^^^^^RRMC||".     MllpSocketBuffer mllpSocketBuffer = new MllpSocketBuffer(new MllpEndpointStub()).     Hl7Util.generateAcknowledgementPayload(mllpSocketBuffer, junkMessage.getBytes(), "AA").     String actual = mllpSocketBuffer.toString().     assertThat(actual, startsWith(EXPECTED_ACKNOWLEDGEMENT_PAYLOAD_START)).     assertThat(actual, endsWith("|EVN|A08|20150107161440||REG_UPDATE_SEND_VISIT_MESSAGES_ON_PATIENT_CHANGES|RISTECH^RADIOLOGY^TECHNOLOGIST^^^^^^UCLA^^^^^RRMC|\r" + "MSA|AA|00001\r" + MllpProtocolConstants.END_OF_BLOCK + MllpProtocolConstants.END_OF_DATA)). }
true;public;0;6;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConvertStringToPrintFriendlyString() throws Exception {     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((String) null)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString("")).     assertEquals(EXPECTED_MESSAGE, Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE)). }
true;public;0;6;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConvertBytesToPrintFriendlyString() throws Exception {     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0])).     assertEquals(EXPECTED_MESSAGE, Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES)). }
true;public;0;46;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConvertBytesToPrintFriendlyStringWithStartAndEndPositions() throws Exception {     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, 0, 1000)).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, 200, 1000)).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, -200, 1000)).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, 0, 0)).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, 200, 0)).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, -200, 0)).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, 0, -1000)).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, 200, -1000)).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString((byte[]) null, -200, -1000)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], 0, 1000)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], 200, 1000)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], -200, 1000)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], 0, 0)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], 200, 0)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], -200, 0)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], 0, -1000)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], 200, -1000)).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.convertToPrintFriendlyString(new byte[0], -200, -1000)).     assertEquals(EXPECTED_MESSAGE, Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 0, TEST_MESSAGE_BYTES.length)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 0, 0)).     assertEquals(EXPECTED_MESSAGE, Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, -14, TEST_MESSAGE_BYTES.length)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, -14, 0)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, -14, -14)).     assertEquals(EXPECTED_MESSAGE, Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, -14, 1000000)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 0, -14)).     assertEquals(EXPECTED_MESSAGE, Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 0, 1000000)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 1000000, TEST_MESSAGE_BYTES.length)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 1000000, 0)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 1000000, -14)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 1000000, 1000000)).     assertEquals("", Hl7Util.convertToPrintFriendlyString(TEST_MESSAGE_BYTES, 50, 50)). }
true;public;0;6;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testBytesToPrintFriendlyStringBuilder() throws Exception {     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0]).toString()).     assertEquals(EXPECTED_MESSAGE, Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES).toString()). }
true;public;0;46;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testBytesToPrintFriendlyStringBuilderWithStartAndEndPositions() throws Exception {     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, 0, 1000).toString()).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, 200, 1000).toString()).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, -200, 1000).toString()).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, 0, 0).toString()).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, 200, 0).toString()).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, -200, 0).toString()).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, 0, -1000).toString()).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, 200, -1000).toString()).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder((byte[]) null, -200, -1000).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], 0, 1000).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], 200, 1000).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], -200, 1000).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], 0, 0).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], 200, 0).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], -200, 0).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], 0, -1000).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], 200, -1000).toString()).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0], -200, -1000).toString()).     assertEquals(EXPECTED_MESSAGE, Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 0, TEST_MESSAGE_BYTES.length).toString()).     assertEquals("", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 0, 0).toString()).     assertEquals(EXPECTED_MESSAGE, Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, -14, TEST_MESSAGE_BYTES.length).toString()).     assertEquals("", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, -14, 0).toString()).     assertEquals("", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, -14, -14).toString()).     assertEquals(EXPECTED_MESSAGE, Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, -14, 1000000).toString()).     assertEquals("", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 0, -14).toString()).     assertEquals(EXPECTED_MESSAGE, Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 0, 1000000).toString()).     assertEquals("", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 1000000, TEST_MESSAGE_BYTES.length).toString()).     assertEquals("", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 1000000, 0).toString()).     assertEquals("", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 1000000, -14).toString()).     assertEquals("", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 1000000, 1000000).toString()).     assertEquals("ADT^A08|00001|D|2.3^^|||||||<0x0D CR>EVN|A08|2015010716144", Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES, 50, 100).toString()). }
true;public;0;23;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testAppendBytesAsPrintFriendlyString() throws Exception {     StringBuilder builder = null.     try {         Hl7Util.appendBytesAsPrintFriendlyString(builder, null).         fail("Exception should be raised with null StringBuilder argument").     } catch (IllegalArgumentException ignoredEx) {     // Eat this     }     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, (byte[]) null).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0]).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES).     assertEquals(EXPECTED_MESSAGE, builder.toString()). }
true;public;0;146;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testAppendBytesAsPrintFriendlyStringWithStartAndEndPositions() throws Exception {     StringBuilder builder = null.     try {         Hl7Util.appendBytesAsPrintFriendlyString(builder, null).         fail("Exception should be raised with null StringBuilder argument").     } catch (IllegalArgumentException ignoredEx) {     // Eat this     }     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, 0, 1000).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, 200, 1000).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, -200, 1000).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, 0, 0).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, 200, 0).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, -200, 0).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, 0, -1000).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, 200, -1000).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, null, -200, -1000).     assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], 0, 1000).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], 200, 1000).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], -200, 1000).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], 0, 0).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], 200, 0).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], -200, 0).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], 0, -1000).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], 200, -1000).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, new byte[0], -200, -1000).     assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 0, TEST_MESSAGE_BYTES.length).     assertEquals(EXPECTED_MESSAGE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 0, 0).     assertEquals("", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, -14, TEST_MESSAGE_BYTES.length).     assertEquals(EXPECTED_MESSAGE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, -14, 0).     assertEquals("", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, -14, -14).     assertEquals("", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, -14, 1000000).     assertEquals(EXPECTED_MESSAGE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 0, -14).     assertEquals("", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 0, 1000000).     assertEquals(EXPECTED_MESSAGE, builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 1000000, TEST_MESSAGE_BYTES.length).     assertEquals("", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 1000000, 0).     assertEquals("", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 1000000, -14).     assertEquals("", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 1000000, 1000000).     assertEquals("", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendBytesAsPrintFriendlyString(builder, TEST_MESSAGE_BYTES, 50, 100).     assertEquals("ADT^A08|00001|D|2.3^^|||||||<0x0D CR>EVN|A08|2015010716144", builder.toString()). }
true;public;0;27;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testAppendCharacterAsPrintFriendlyString() throws Exception {     StringBuilder builder = null.     try {         Hl7Util.appendCharacterAsPrintFriendlyString(builder, 'a').         fail("Exception should be raised with null StringBuilder argument").     } catch (NullPointerException ignoredEx) {     // Eat this     }     builder = new StringBuilder().     Hl7Util.appendCharacterAsPrintFriendlyString(builder, MllpProtocolConstants.START_OF_BLOCK).     assertEquals("<0x0B VT>", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendCharacterAsPrintFriendlyString(builder, MllpProtocolConstants.END_OF_BLOCK).     assertEquals("<0x1C FS>", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendCharacterAsPrintFriendlyString(builder, MllpProtocolConstants.SEGMENT_DELIMITER).     assertEquals("<0x0D CR>", builder.toString()).     builder = new StringBuilder().     Hl7Util.appendCharacterAsPrintFriendlyString(builder, MllpProtocolConstants.MESSAGE_TERMINATOR).     assertEquals("<0x0A LF>", builder.toString()). }
false;public;0;8;;@Test public void testGetCharacterAsPrintFriendlyString() throws Exception {     assertEquals("<0x0B VT>", Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.START_OF_BLOCK)).     assertEquals("<0x1C FS>", Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.END_OF_BLOCK)).     assertEquals("<0x0D CR>", Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.SEGMENT_DELIMITER)).     assertEquals("<0x0A LF>", Hl7Util.getCharacterAsPrintFriendlyString(MllpProtocolConstants.MESSAGE_TERMINATOR)).     assertEquals("<0x09 TAB>", Hl7Util.getCharacterAsPrintFriendlyString('\t')). }
true;public;0;6;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testFindMsh18WhenExistsWithoutTrailingPipe() throws Exception {     final String testMessage = MSH_SEGMENT + "||||||8859/1" + '\r' + REMAINING_SEGMENTS.     assertEquals("8859/1", Hl7Util.findMsh18(testMessage.getBytes())). }
true;public;0;6;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testFindMsh18WhenExistsWithTrailingPipe() throws Exception {     final String testMessage = MSH_SEGMENT + "||||||8859/1|" + '\r' + REMAINING_SEGMENTS.     assertEquals("8859/1", Hl7Util.findMsh18(testMessage.getBytes())). }
true;public;0;6;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testFindMsh18WhenMissingWithoutTrailingPipe() throws Exception {     final String testMessage = MSH_SEGMENT + "||||||" + '\r' + REMAINING_SEGMENTS.     assertEquals("", Hl7Util.findMsh18(testMessage.getBytes())). }
true;public;0;6;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testFindMsh18WhenMissingWithTrailingPipe() throws Exception {     final String testMessage = MSH_SEGMENT + "|||||||" + '\r' + REMAINING_SEGMENTS.     assertEquals("", Hl7Util.findMsh18(testMessage.getBytes())). }
