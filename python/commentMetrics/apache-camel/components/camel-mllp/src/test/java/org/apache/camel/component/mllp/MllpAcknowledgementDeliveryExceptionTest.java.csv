commented;modifiers;parameterAmount;loc;comment;code
true;public;0;8;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConstructorOne() throws Exception {     instance = new MllpAcknowledgementDeliveryException(HL7_MESSAGE_BYTES, HL7_ACKNOWLEDGEMENT_BYTES).     assertTrue(instance.getMessage().startsWith(TEST_EXCEPTION_MESSAGE)).     assertArrayEquals(HL7_MESSAGE_BYTES, instance.hl7MessageBytes).     assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES, instance.hl7AcknowledgementBytes). }
true;public;0;9;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConstructorTwo() throws Exception {     instance = new MllpAcknowledgementDeliveryException(HL7_MESSAGE_BYTES, HL7_ACKNOWLEDGEMENT_BYTES, CAUSE).     assertSame(CAUSE, instance.getCause()).     assertTrue(instance.getMessage().startsWith(TEST_EXCEPTION_MESSAGE)).     assertArrayEquals(HL7_MESSAGE_BYTES, instance.hl7MessageBytes).     assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES, instance.hl7AcknowledgementBytes). }
true;public;0;10;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConstructorThree() throws Exception {     final String alternateExceptionMessage = "Alternate Message".     instance = new MllpAcknowledgementDeliveryException(alternateExceptionMessage, HL7_MESSAGE_BYTES, HL7_ACKNOWLEDGEMENT_BYTES).     assertTrue(instance.getMessage().startsWith(alternateExceptionMessage)).     assertArrayEquals(HL7_MESSAGE_BYTES, instance.hl7MessageBytes).     assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES, instance.hl7AcknowledgementBytes). }
true;public;0;11;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ ;/**  * Description of test.  *  * @throws Exception in the event of a test error.  */ @Test public void testConstructorFour() throws Exception {     final String alternateExceptionMessage = "Alternate Message".     instance = new MllpAcknowledgementDeliveryException(alternateExceptionMessage, HL7_MESSAGE_BYTES, HL7_ACKNOWLEDGEMENT_BYTES, CAUSE).     assertSame(CAUSE, instance.getCause()).     assertTrue(instance.getMessage().startsWith(alternateExceptionMessage)).     assertArrayEquals(HL7_MESSAGE_BYTES, instance.hl7MessageBytes).     assertArrayEquals(HL7_ACKNOWLEDGEMENT_BYTES, instance.hl7AcknowledgementBytes). }
