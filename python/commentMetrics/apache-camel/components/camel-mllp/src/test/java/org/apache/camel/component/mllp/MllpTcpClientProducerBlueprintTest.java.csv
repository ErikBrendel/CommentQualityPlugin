commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected void addServicesOnStartup(Map<String, KeyValueHolder<Object, Dictionary>> services) {     ComponentResolver testResolver = new DefaultComponentResolver().     services.put(ComponentResolver.class.getName(), asService(testResolver, "component", "mllp")). }
false;protected;1;12;;@Override protected String setConfigAdminInitialConfiguration(Properties props) {     props.setProperty("sourceUri", SOURCE_URI).     props.setProperty("acknowledgedUri", MOCK_ACKNOWLEDGED_URI).     props.setProperty("timeoutUri", MOCK_TIMEOUT_URI).     props.setProperty("errorAcknowledgementUri", MOCK_AE_EX_URI).     props.setProperty("rejectAcknowledgementUri", MOCK_AR_EX_URI).     props.setProperty("mllp.port", Integer.toString(mllpServer.getListenPort())).     return "MllpTcpClientProducer". }
false;protected;0;4;;@Override protected String getBlueprintDescriptor() {     return "OSGI-INF/blueprint/mllp-tcp-client-producer-test.xml". }
false;public;0;23;;@Test() public void testSendMultipleMessages() throws Exception {     int messageCount = 500.     acknowledged.expectedMessageCount(messageCount).     timeout.expectedMessageCount(0).     frame.expectedMessageCount(0).     ae.expectedMessageCount(0).     ar.expectedMessageCount(0).     startCamelContext().     for (int i = 0. i < messageCount. ++i) {         log.debug("Triggering message {}", i).         // Thread.sleep(5000).         Object response = template.requestBodyAndHeader(SOURCE_URI, Hl7TestMessageGenerator.generateMessage(i), "CamelMllpMessageControlId", String.format("%05d", i)).         log.debug("response {}\n{}", i, response).     }     assertMockEndpointsSatisfied(15, TimeUnit.SECONDS). }
