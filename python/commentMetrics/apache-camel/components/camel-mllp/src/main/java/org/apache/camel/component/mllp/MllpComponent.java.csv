commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;18;;@Override protected Endpoint createEndpoint(String uriString, String remaining, Map<String, Object> parameters) throws Exception {     MllpEndpoint endpoint = new MllpEndpoint(uriString, this, hasConfiguration() ? configuration.copy() : new MllpConfiguration()).     setProperties(endpoint, parameters).     // Make sure it has a host - may just be a port     int colonIndex = remaining.indexOf(':').     if (-1 != colonIndex) {         endpoint.setHostname(remaining.substring(0, colonIndex)).         endpoint.setPort(Integer.parseInt(remaining.substring(colonIndex + 1))).     } else {         // No host specified - leave the default host and set the port         endpoint.setPort(Integer.parseInt(remaining)).     }     return endpoint. }
false;public,static;0;3;;public static boolean hasLogPhi() {     return logPhi != null. }
false;public,static;0;14;;public static boolean isLogPhi() {     if (hasLogPhi()) {         return logPhi.     }     boolean answer = DEFAULT_LOG_PHI.     String logPhiProperty = System.getProperty(MllpComponent.MLLP_LOG_PHI_PROPERTY).     if (logPhiProperty != null) {         answer = Boolean.valueOf(logPhiProperty).     }     return answer. }
true;public,static;1;3;/**  * Set the component to log PHI data.  *  * @param logPhi true enables PHI logging. false disables it.  */ ;/**  * Set the component to log PHI data.  *  * @param logPhi true enables PHI logging. false disables it.  */ public static void setLogPhi(Boolean logPhi) {     MllpComponent.logPhi = logPhi. }
false;public,static;0;3;;public static boolean hasLogPhiMaxBytes() {     return logPhiMaxBytes != null. }
false;public,static;0;19;;public static int getLogPhiMaxBytes() {     if (hasLogPhiMaxBytes()) {         return logPhiMaxBytes.     }     int answer = DEFAULT_LOG_PHI_MAX_BYTES.     String logPhiProperty = System.getProperty(MllpComponent.MLLP_LOG_PHI_MAX_BYTES_PROPERTY).     if (logPhiProperty != null && !logPhiProperty.isEmpty()) {         try {             answer = Integer.valueOf(logPhiProperty).         } catch (NumberFormatException numberFormatException) {             log.warn("Invalid Interger value '{}' for system property {} - using default value of {}", logPhiProperty, MllpComponent.MLLP_LOG_PHI_MAX_BYTES_PROPERTY, answer).         // use DEFAULT_LOG_PHI_MAX_BYTES for a invalid entry         }     }     return answer. }
true;public,static;1;3;/**  * Set the maximum number of bytes of PHI that will be logged in a log entry.  *  * @param logPhiMaxBytes the maximum number of bytes to log.  */ ;/**  * Set the maximum number of bytes of PHI that will be logged in a log entry.  *  * @param logPhiMaxBytes the maximum number of bytes to log.  */ public static void setLogPhiMaxBytes(Integer logPhiMaxBytes) {     MllpComponent.logPhiMaxBytes = logPhiMaxBytes. }
false;public,static;0;3;;public static boolean hasDefaultCharset() {     return defaultCharset != null. }
false;public,static;0;27;;public static Charset getDefaultCharset() {     if (hasDefaultCharset()) {         return defaultCharset.     }     String defaultCharacterSetNamePropertyValue = System.getProperty(MllpComponent.MLLP_DEFAULT_CHARSET_PROPERTY).     if (defaultCharacterSetNamePropertyValue != null && !defaultCharacterSetNamePropertyValue.isEmpty()) {         try {             if (Charset.isSupported(defaultCharacterSetNamePropertyValue)) {                 defaultCharset = Charset.forName(defaultCharacterSetNamePropertyValue).             } else {                 defaultCharset = StandardCharsets.ISO_8859_1.                 log.warn("Unsupported character set name '{}' in system property {} - using character set {} as default", defaultCharacterSetNamePropertyValue, MllpComponent.MLLP_DEFAULT_CHARSET_PROPERTY, defaultCharset).             }         } catch (Exception charsetEx) {             defaultCharset = StandardCharsets.ISO_8859_1.             log.warn("Exception encountered determining character set for '{}' found in  system property {} - using default value of {}", defaultCharacterSetNamePropertyValue, MllpComponent.MLLP_DEFAULT_CHARSET_PROPERTY, defaultCharset).         }     } else {         defaultCharset = StandardCharsets.ISO_8859_1.     }     return defaultCharset. }
true;public,static;1;16;/**  * Set the default character set to use for byte[] to/from String conversions.  *  * @param defaultCharacterSetName the name of the Java Charset.  */ ;/**  * Set the default character set to use for byte[] to/from String conversions.  *  * @param defaultCharacterSetName the name of the Java Charset.  */ public static void setDefaultCharset(String defaultCharacterSetName) {     if (defaultCharacterSetName != null && !defaultCharacterSetName.isEmpty()) {         try {             if (Charset.isSupported(defaultCharacterSetName)) {                 MllpComponent.defaultCharset = Charset.forName(defaultCharacterSetName).             } else {                 log.warn("Unsupported character set name '{}' in system property {} - continuing to use character set {} as default", defaultCharacterSetName, defaultCharset).             }         } catch (Exception charsetEx) {             MllpComponent.defaultCharset = StandardCharsets.ISO_8859_1.             log.warn("Exception encountered determining character set for '{}' - continuing to use character set {} as default", defaultCharacterSetName, defaultCharset).         }     } }
false;public,static;1;5;;public static void setDefaultCharset(Charset defaultCharset) {     if (defaultCharset != null) {         MllpComponent.defaultCharset = defaultCharset.     } }
false;public;0;3;;public boolean hasConfiguration() {     return configuration != null. }
false;public;0;3;;public MllpConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * Sets the default configuration to use when creating MLLP endpoints.  *  * @param configuration the default configuration.  */ ;/**  * Sets the default configuration to use when creating MLLP endpoints.  *  * @param configuration the default configuration.  */ public void setConfiguration(MllpConfiguration configuration) {     this.configuration = configuration. }
