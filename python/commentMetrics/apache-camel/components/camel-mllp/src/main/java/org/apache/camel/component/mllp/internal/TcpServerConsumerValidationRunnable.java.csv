# id;timestamp;commentText;codeText;commentWords;codeWords
TcpServerConsumerValidationRunnable -> String createThreadName(Socket socket);1517266680;derive a thread name from the class name, the component URI and the connection information_<p/>_The String will in the format <class name>[endpoint key] - [local socket address] -> [remote socket address]__@return the thread name;String createThreadName(Socket socket) {_        _        String fullEndpointKey = consumer.getEndpoint().getEndpointKey()__        String endpointKey__        if (fullEndpointKey.contains("?")) {_            endpointKey = fullEndpointKey.substring(0, fullEndpointKey.indexOf('?'))__        } else {_            endpointKey = fullEndpointKey__        }__        _        return String.format("%s[%s] - %s", this.getClass().getSimpleName(), endpointKey, combinedAddress)__    };derive,a,thread,name,from,the,class,name,the,component,uri,and,the,connection,information,p,the,string,will,in,the,format,class,name,endpoint,key,local,socket,address,remote,socket,address,return,the,thread,name;string,create,thread,name,socket,socket,string,full,endpoint,key,consumer,get,endpoint,get,endpoint,key,string,endpoint,key,if,full,endpoint,key,contains,endpoint,key,full,endpoint,key,substring,0,full,endpoint,key,index,of,else,endpoint,key,full,endpoint,key,return,string,format,s,s,s,this,get,class,get,simple,name,endpoint,key,combined,address
TcpServerConsumerValidationRunnable -> String createThreadName(Socket socket);1518467159;derive a thread name from the class name, the component URI and the connection information_<p/>_The String will in the format <class name>[endpoint key] - [local socket address] -> [remote socket address]__@return the thread name;String createThreadName(Socket socket) {_        _        String fullEndpointKey = consumer.getEndpoint().getEndpointKey()__        String endpointKey__        if (fullEndpointKey.contains("?")) {_            endpointKey = fullEndpointKey.substring(0, fullEndpointKey.indexOf('?'))__        } else {_            endpointKey = fullEndpointKey__        }__        _        return String.format("%s[%s] - %s", this.getClass().getSimpleName(), endpointKey, combinedAddress)__    };derive,a,thread,name,from,the,class,name,the,component,uri,and,the,connection,information,p,the,string,will,in,the,format,class,name,endpoint,key,local,socket,address,remote,socket,address,return,the,thread,name;string,create,thread,name,socket,socket,string,full,endpoint,key,consumer,get,endpoint,get,endpoint,key,string,endpoint,key,if,full,endpoint,key,contains,endpoint,key,full,endpoint,key,substring,0,full,endpoint,key,index,of,else,endpoint,key,full,endpoint,key,return,string,format,s,s,s,this,get,class,get,simple,name,endpoint,key,combined,address
TcpServerConsumerValidationRunnable -> String createThreadName(Socket socket);1524063106;derive a thread name from the class name, the component URI and the connection information_<p/>_The String will in the format <class name>[endpoint key] - [local socket address] -> [remote socket address]__@return the thread name;String createThreadName(Socket socket) {_        _        String fullEndpointKey = consumer.getEndpoint().getEndpointKey()__        String endpointKey__        if (fullEndpointKey.contains("?")) {_            endpointKey = fullEndpointKey.substring(0, fullEndpointKey.indexOf('?'))__        } else {_            endpointKey = fullEndpointKey__        }__        _        return String.format("%s[%s] - %s", this.getClass().getSimpleName(), endpointKey, combinedAddress)__    };derive,a,thread,name,from,the,class,name,the,component,uri,and,the,connection,information,p,the,string,will,in,the,format,class,name,endpoint,key,local,socket,address,remote,socket,address,return,the,thread,name;string,create,thread,name,socket,socket,string,full,endpoint,key,consumer,get,endpoint,get,endpoint,key,string,endpoint,key,if,full,endpoint,key,contains,endpoint,key,full,endpoint,key,substring,0,full,endpoint,key,index,of,else,endpoint,key,full,endpoint,key,return,string,format,s,s,s,this,get,class,get,simple,name,endpoint,key,combined,address
TcpServerConsumerValidationRunnable -> String createThreadName(Socket socket);1548332772;derive a thread name from the class name, the component URI and the connection information_<p/>_The String will in the format <class name>[endpoint key] - [local socket address] -> [remote socket address]__@return the thread name;String createThreadName(Socket socket) {_        _        String fullEndpointKey = consumer.getEndpoint().getEndpointKey()__        String endpointKey__        if (fullEndpointKey.contains("?")) {_            endpointKey = fullEndpointKey.substring(0, fullEndpointKey.indexOf('?'))__        } else {_            endpointKey = fullEndpointKey__        }__        _        return String.format("%s[%s] - %s", this.getClass().getSimpleName(), endpointKey, combinedAddress)__    };derive,a,thread,name,from,the,class,name,the,component,uri,and,the,connection,information,p,the,string,will,in,the,format,class,name,endpoint,key,local,socket,address,remote,socket,address,return,the,thread,name;string,create,thread,name,socket,socket,string,full,endpoint,key,consumer,get,endpoint,get,endpoint,key,string,endpoint,key,if,full,endpoint,key,contains,endpoint,key,full,endpoint,key,substring,0,full,endpoint,key,index,of,else,endpoint,key,full,endpoint,key,return,string,format,s,s,s,this,get,class,get,simple,name,endpoint,key,combined,address
TcpServerConsumerValidationRunnable -> @Override     public void run();1517266680;Do the initial read on the Socket and try to determine if it has HL7 data, junk, or nothing.;@Override_    public void run() {_        String originalThreadName = Thread.currentThread().getName()__        Thread.currentThread().setName(createThreadName(clientSocket))__        MDC.put(MDCUnitOfWork.MDC_CAMEL_CONTEXT_ID, consumer.getEndpoint().getCamelContext().getName())___        Route route = consumer.getRoute()__        if (route != null) {_            String routeId = route.getId()__            if (routeId != null) {_                MDC.put(MDCUnitOfWork.MDC_ROUTE_ID, route.getId())__            }_        }__        log.debug("Checking {} for data", combinedAddress)___        try {_            mllpBuffer.readFrom(clientSocket, 500, 50)__            if (mllpBuffer.hasCompleteEnvelope()  || mllpBuffer.hasStartOfBlock()) {_                consumer.startConsumer(clientSocket, mllpBuffer)__            } else if (!mllpBuffer.isEmpty()) {_                _                log.info("Ignoring out-of-band data on initial read: {}", mllpBuffer.toStringAndReset())__                mllpBuffer.resetSocket(clientSocket)__            }_        } catch (MllpSocketException socketEx) {_            _            if (!mllpBuffer.isEmpty()) {_                log.warn("Exception encountered receiving complete message: ", mllpBuffer.toStringAndReset())__            }_            mllpBuffer.resetSocket(clientSocket)__        } catch (SocketTimeoutException timeoutEx) {_            if (mllpBuffer.isEmpty()) {_                log.debug("Initial read timed-out but no data was read - starting consumer")__                consumer.startConsumer(clientSocket, mllpBuffer)__            } else {_                log.warn("Timeout receiving complete message: {}", mllpBuffer.toStringAndReset())__                mllpBuffer.resetSocket(clientSocket)__            }_        } finally {_            Thread.currentThread().setName(originalThreadName)__        }_    };do,the,initial,read,on,the,socket,and,try,to,determine,if,it,has,hl7,data,junk,or,nothing;override,public,void,run,string,original,thread,name,thread,current,thread,get,name,thread,current,thread,set,name,create,thread,name,client,socket,mdc,put,mdcunit,of,work,consumer,get,endpoint,get,camel,context,get,name,route,route,consumer,get,route,if,route,null,string,route,id,route,get,id,if,route,id,null,mdc,put,mdcunit,of,work,route,get,id,log,debug,checking,for,data,combined,address,try,mllp,buffer,read,from,client,socket,500,50,if,mllp,buffer,has,complete,envelope,mllp,buffer,has,start,of,block,consumer,start,consumer,client,socket,mllp,buffer,else,if,mllp,buffer,is,empty,log,info,ignoring,out,of,band,data,on,initial,read,mllp,buffer,to,string,and,reset,mllp,buffer,reset,socket,client,socket,catch,mllp,socket,exception,socket,ex,if,mllp,buffer,is,empty,log,warn,exception,encountered,receiving,complete,message,mllp,buffer,to,string,and,reset,mllp,buffer,reset,socket,client,socket,catch,socket,timeout,exception,timeout,ex,if,mllp,buffer,is,empty,log,debug,initial,read,timed,out,but,no,data,was,read,starting,consumer,consumer,start,consumer,client,socket,mllp,buffer,else,log,warn,timeout,receiving,complete,message,mllp,buffer,to,string,and,reset,mllp,buffer,reset,socket,client,socket,finally,thread,current,thread,set,name,original,thread,name
TcpServerConsumerValidationRunnable -> @Override     public void run();1518467159;Do the initial read on the Socket and try to determine if it has HL7 data, junk, or nothing.;@Override_    public void run() {_        String originalThreadName = Thread.currentThread().getName()__        Thread.currentThread().setName(createThreadName(clientSocket))__        MDC.put(MDCUnitOfWork.MDC_CAMEL_CONTEXT_ID, consumer.getEndpoint().getCamelContext().getName())___        Route route = consumer.getRoute()__        if (route != null) {_            String routeId = route.getId()__            if (routeId != null) {_                MDC.put(MDCUnitOfWork.MDC_ROUTE_ID, route.getId())__            }_        }__        log.debug("Checking {} for data", combinedAddress)___        try {_            mllpBuffer.readFrom(clientSocket, Math.min(500, consumer.getConfiguration().getReceiveTimeout()), consumer.getConfiguration().getReadTimeout())__            if (mllpBuffer.hasCompleteEnvelope()  || mllpBuffer.hasStartOfBlock()) {_                consumer.startConsumer(clientSocket, mllpBuffer)__            } else if (!mllpBuffer.isEmpty()) {_                _                log.info("Ignoring out-of-band data on initial read [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__                mllpBuffer.resetSocket(clientSocket)__            }_        } catch (MllpSocketException socketEx) {_            _            if (!mllpBuffer.isEmpty()) {_                log.warn("Exception encountered receiving complete initial message [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__            }_            mllpBuffer.resetSocket(clientSocket)__        } catch (SocketTimeoutException timeoutEx) {_            if (mllpBuffer.isEmpty()) {_                log.debug("Initial read timed-out but no data was read - starting consumer")__                consumer.startConsumer(clientSocket, mllpBuffer)__            } else {_                log.warn("Timeout receiving complete initial message on read [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__                mllpBuffer.resetSocket(clientSocket)__            }_        } finally {_            Thread.currentThread().setName(originalThreadName)__        }_    };do,the,initial,read,on,the,socket,and,try,to,determine,if,it,has,hl7,data,junk,or,nothing;override,public,void,run,string,original,thread,name,thread,current,thread,get,name,thread,current,thread,set,name,create,thread,name,client,socket,mdc,put,mdcunit,of,work,consumer,get,endpoint,get,camel,context,get,name,route,route,consumer,get,route,if,route,null,string,route,id,route,get,id,if,route,id,null,mdc,put,mdcunit,of,work,route,get,id,log,debug,checking,for,data,combined,address,try,mllp,buffer,read,from,client,socket,math,min,500,consumer,get,configuration,get,receive,timeout,consumer,get,configuration,get,read,timeout,if,mllp,buffer,has,complete,envelope,mllp,buffer,has,start,of,block,consumer,start,consumer,client,socket,mllp,buffer,else,if,mllp,buffer,is,empty,log,info,ignoring,out,of,band,data,on,initial,read,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,catch,mllp,socket,exception,socket,ex,if,mllp,buffer,is,empty,log,warn,exception,encountered,receiving,complete,initial,message,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,catch,socket,timeout,exception,timeout,ex,if,mllp,buffer,is,empty,log,debug,initial,read,timed,out,but,no,data,was,read,starting,consumer,consumer,start,consumer,client,socket,mllp,buffer,else,log,warn,timeout,receiving,complete,initial,message,on,read,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,finally,thread,current,thread,set,name,original,thread,name
TcpServerConsumerValidationRunnable -> @Override     public void run();1524063106;Do the initial read on the Socket and try to determine if it has HL7 data, junk, or nothing.;@Override_    public void run() {_        String originalThreadName = Thread.currentThread().getName()__        Thread.currentThread().setName(createThreadName(clientSocket))__        MDC.put(MDCUnitOfWork.MDC_CAMEL_CONTEXT_ID, consumer.getEndpoint().getCamelContext().getName())___        Route route = consumer.getRoute()__        if (route != null) {_            String routeId = route.getId()__            if (routeId != null) {_                MDC.put(MDCUnitOfWork.MDC_ROUTE_ID, route.getId())__            }_        }__        log.debug("Checking {} for data", combinedAddress)___        try {_            mllpBuffer.readFrom(clientSocket, Math.min(500, consumer.getConfiguration().getReceiveTimeout()), consumer.getConfiguration().getReadTimeout())__            if (mllpBuffer.hasCompleteEnvelope()  || mllpBuffer.hasStartOfBlock()) {_                consumer.startConsumer(clientSocket, mllpBuffer)__            } else if (!mllpBuffer.isEmpty()) {_                _                log.info("Ignoring out-of-band data on initial read [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__                mllpBuffer.resetSocket(clientSocket)__            }_        } catch (MllpSocketException socketEx) {_            _            if (!mllpBuffer.isEmpty()) {_                log.warn("Exception encountered receiving complete initial message [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__            }_            mllpBuffer.resetSocket(clientSocket)__        } catch (SocketTimeoutException timeoutEx) {_            if (mllpBuffer.isEmpty()) {_                log.debug("Initial read timed-out but no data was read - starting consumer")__                consumer.startConsumer(clientSocket, mllpBuffer)__            } else {_                log.warn("Timeout receiving complete initial message on read [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__                mllpBuffer.resetSocket(clientSocket)__            }_        } finally {_            Thread.currentThread().setName(originalThreadName)__        }_    };do,the,initial,read,on,the,socket,and,try,to,determine,if,it,has,hl7,data,junk,or,nothing;override,public,void,run,string,original,thread,name,thread,current,thread,get,name,thread,current,thread,set,name,create,thread,name,client,socket,mdc,put,mdcunit,of,work,consumer,get,endpoint,get,camel,context,get,name,route,route,consumer,get,route,if,route,null,string,route,id,route,get,id,if,route,id,null,mdc,put,mdcunit,of,work,route,get,id,log,debug,checking,for,data,combined,address,try,mllp,buffer,read,from,client,socket,math,min,500,consumer,get,configuration,get,receive,timeout,consumer,get,configuration,get,read,timeout,if,mllp,buffer,has,complete,envelope,mllp,buffer,has,start,of,block,consumer,start,consumer,client,socket,mllp,buffer,else,if,mllp,buffer,is,empty,log,info,ignoring,out,of,band,data,on,initial,read,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,catch,mllp,socket,exception,socket,ex,if,mllp,buffer,is,empty,log,warn,exception,encountered,receiving,complete,initial,message,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,catch,socket,timeout,exception,timeout,ex,if,mllp,buffer,is,empty,log,debug,initial,read,timed,out,but,no,data,was,read,starting,consumer,consumer,start,consumer,client,socket,mllp,buffer,else,log,warn,timeout,receiving,complete,initial,message,on,read,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,finally,thread,current,thread,set,name,original,thread,name
TcpServerConsumerValidationRunnable -> @Override     public void run();1548332772;Do the initial read on the Socket and try to determine if it has HL7 data, junk, or nothing.;@Override_    public void run() {_        String originalThreadName = Thread.currentThread().getName()__        Thread.currentThread().setName(createThreadName(clientSocket))__        MDC.put(UnitOfWork.MDC_CAMEL_CONTEXT_ID, consumer.getEndpoint().getCamelContext().getName())___        Route route = consumer.getRoute()__        if (route != null) {_            String routeId = route.getId()__            if (routeId != null) {_                MDC.put(UnitOfWork.MDC_ROUTE_ID, route.getId())__            }_        }__        log.debug("Checking {} for data", combinedAddress)___        try {_            mllpBuffer.readFrom(clientSocket, Math.min(500, consumer.getConfiguration().getReceiveTimeout()), consumer.getConfiguration().getReadTimeout())__            if (mllpBuffer.hasCompleteEnvelope()  || mllpBuffer.hasStartOfBlock()) {_                consumer.startConsumer(clientSocket, mllpBuffer)__            } else if (!mllpBuffer.isEmpty()) {_                _                log.info("Ignoring out-of-band data on initial read [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__                mllpBuffer.resetSocket(clientSocket)__            }_        } catch (MllpSocketException socketEx) {_            _            if (!mllpBuffer.isEmpty()) {_                log.warn("Exception encountered receiving complete initial message [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__            }_            mllpBuffer.resetSocket(clientSocket)__        } catch (SocketTimeoutException timeoutEx) {_            if (mllpBuffer.isEmpty()) {_                log.debug("Initial read timed-out but no data was read - starting consumer")__                consumer.startConsumer(clientSocket, mllpBuffer)__            } else {_                log.warn("Timeout receiving complete initial message on read [{} bytes]: {}", mllpBuffer.size(), mllpBuffer.toPrintFriendlyStringAndReset())__                mllpBuffer.resetSocket(clientSocket)__            }_        } finally {_            Thread.currentThread().setName(originalThreadName)__        }_    };do,the,initial,read,on,the,socket,and,try,to,determine,if,it,has,hl7,data,junk,or,nothing;override,public,void,run,string,original,thread,name,thread,current,thread,get,name,thread,current,thread,set,name,create,thread,name,client,socket,mdc,put,unit,of,work,consumer,get,endpoint,get,camel,context,get,name,route,route,consumer,get,route,if,route,null,string,route,id,route,get,id,if,route,id,null,mdc,put,unit,of,work,route,get,id,log,debug,checking,for,data,combined,address,try,mllp,buffer,read,from,client,socket,math,min,500,consumer,get,configuration,get,receive,timeout,consumer,get,configuration,get,read,timeout,if,mllp,buffer,has,complete,envelope,mllp,buffer,has,start,of,block,consumer,start,consumer,client,socket,mllp,buffer,else,if,mllp,buffer,is,empty,log,info,ignoring,out,of,band,data,on,initial,read,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,catch,mllp,socket,exception,socket,ex,if,mllp,buffer,is,empty,log,warn,exception,encountered,receiving,complete,initial,message,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,catch,socket,timeout,exception,timeout,ex,if,mllp,buffer,is,empty,log,debug,initial,read,timed,out,but,no,data,was,read,starting,consumer,consumer,start,consumer,client,socket,mllp,buffer,else,log,warn,timeout,receiving,complete,initial,message,on,read,bytes,mllp,buffer,size,mllp,buffer,to,print,friendly,string,and,reset,mllp,buffer,reset,socket,client,socket,finally,thread,current,thread,set,name,original,thread,name
