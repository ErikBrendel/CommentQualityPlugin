commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Determine if there is an HL7 message payload associated with this exception.  *  * @return true if this exception contains an HL7 message payload. false otherwise  */ ;/**  * Determine if there is an HL7 message payload associated with this exception.  *  * @return true if this exception contains an HL7 message payload. false otherwise  */ public boolean hasHl7MessageBytes() {     return hl7MessageBytes != null && hl7MessageBytes.length > 0. }
true;public;0;3;/**  * Get the HL7 message payload associated with this exception, if any.  *  * @return the HL7 message payload. null if a message payload is not associated with this exception  */ ;/**  * Get the HL7 message payload associated with this exception, if any.  *  * @return the HL7 message payload. null if a message payload is not associated with this exception  */ public byte[] getHl7MessageBytes() {     return hl7MessageBytes. }
true;public;0;3;/**  * Determine if there is an HL7 message payload associated with this exception.  *  * @return true if this exception contains an HL7 message payload. false otherwise  */ ;/**  * Determine if there is an HL7 message payload associated with this exception.  *  * @return true if this exception contains an HL7 message payload. false otherwise  */ public boolean hasHl7AcknowledgementBytes() {     return hl7AcknowledgementBytes != null && hl7AcknowledgementBytes.length > 0. }
true;public;0;3;/**  * Get the HL7 acknowledgement payload associated with this exception, if any.  *  * @return the HL7 acknowledgement payload. null if an acknowledgement payload is not associated with this exception  */ ;/**  * Get the HL7 acknowledgement payload associated with this exception, if any.  *  * @return the HL7 acknowledgement payload. null if an acknowledgement payload is not associated with this exception  */ public byte[] getHl7AcknowledgementBytes() {     return hl7AcknowledgementBytes. }
true;public;0;41;/**  * Override the base version of this method, and include the HL7 Message and Acknowledgement, if any  *  * @return the detail message of this MLLP Exception  */ ;/**  * Override the base version of this method, and include the HL7 Message and Acknowledgement, if any  *  * @return the detail message of this MLLP Exception  */ @Override public String getMessage() {     String answer.     if (hasHl7MessageBytes() || hasHl7AcknowledgementBytes()) {         String parentMessage = super.getMessage().         StringBuilder messageBuilder = new StringBuilder(parentMessage.length() + (hasHl7MessageBytes() ? hl7MessageBytes.length : 0) + (hasHl7AcknowledgementBytes() ? hl7AcknowledgementBytes.length : 0)).         messageBuilder.append(parentMessage).         if (hasHl7MessageBytes()) {             messageBuilder.append("\n\t{hl7Message [").append(hl7MessageBytes.length).append("] = ").             Hl7Util.appendBytesAsPrintFriendlyString(messageBuilder, hl7MessageBytes, 0, hl7MessageBytes.length).             messageBuilder.append('}').         }         if (hasHl7AcknowledgementBytes()) {             messageBuilder.append("\n\t{hl7Acknowledgement [").append(hl7AcknowledgementBytes.length).append("] = ").             Hl7Util.appendBytesAsPrintFriendlyString(messageBuilder, hl7AcknowledgementBytes, 0, hl7AcknowledgementBytes.length).             messageBuilder.append('}').         }         answer = messageBuilder.toString().     } else {         answer = super.getMessage().     }     return answer. }
