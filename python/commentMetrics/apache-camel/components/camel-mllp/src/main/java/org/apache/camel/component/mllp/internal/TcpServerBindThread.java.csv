commented;modifiers;parameterAmount;loc;comment;code
true;public;0;69;/**  * Bind the TCP ServerSocket within the specified timeout.  */ ;/**  * Bind the TCP ServerSocket within the specified timeout.  */ @Override public void run() {     MDC.put(UnitOfWork.MDC_CAMEL_CONTEXT_ID, consumer.getEndpoint().getCamelContext().getName()).     Route route = consumer.getRoute().     if (route != null) {         String routeId = route.getId().         if (routeId != null) {             MDC.put(UnitOfWork.MDC_ROUTE_ID, route.getId()).         }     }     try {         ServerSocket serverSocket = new ServerSocket().         if (consumer.getConfiguration().hasReceiveBufferSize()) {             serverSocket.setReceiveBufferSize(consumer.getConfiguration().getReceiveBufferSize()).         }         if (consumer.getConfiguration().hasReuseAddress()) {             serverSocket.setReuseAddress(consumer.getConfiguration().getReuseAddress()).         }         // Accept Timeout         serverSocket.setSoTimeout(consumer.getConfiguration().getAcceptTimeout()).         InetSocketAddress socketAddress.         if (null == consumer.getEndpoint().getHostname()) {             socketAddress = new InetSocketAddress(consumer.getEndpoint().getPort()).         } else {             socketAddress = new InetSocketAddress(consumer.getEndpoint().getHostname(), consumer.getEndpoint().getPort()).         }         log.debug("Attempting to bind to {}", socketAddress).         long startTicks = System.currentTimeMillis().         do {             try {                 if (consumer.getConfiguration().hasBacklog()) {                     serverSocket.bind(socketAddress, consumer.getConfiguration().getBacklog()).                 } else {                     serverSocket.bind(socketAddress).                 }                 consumer.startAcceptThread(serverSocket).             } catch (BindException bindException) {                 if (System.currentTimeMillis() > startTicks + consumer.getConfiguration().getBindTimeout()) {                     log.error("Failed to bind to address {} within timeout {}", socketAddress, consumer.getConfiguration().getBindTimeout(), bindException).                     break.                 } else {                     log.warn("Failed to bind to address {} - retrying in {} milliseconds", socketAddress, consumer.getConfiguration().getBindRetryInterval()).                     try {                         Thread.sleep(consumer.getConfiguration().getBindRetryInterval()).                     } catch (InterruptedException interruptedEx) {                         log.info("Bind to address {} interrupted", socketAddress, interruptedEx).                         if (!this.isInterrupted()) {                             super.interrupt().                         }                         break.                     }                 }             } catch (IOException unexpectedEx) {                 log.error("Unexpected exception encountered binding to address {}", socketAddress, unexpectedEx).                 break.             }         } while (!this.isInterrupted() && !serverSocket.isBound()).     } catch (IOException ioEx) {         log.error("Unexpected exception encountered initializing ServerSocket before attempting to bind", ioEx).     } }
