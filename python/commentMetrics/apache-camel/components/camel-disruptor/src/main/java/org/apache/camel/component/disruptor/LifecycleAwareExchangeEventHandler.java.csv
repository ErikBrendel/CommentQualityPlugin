commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Causes the current thread to wait until the event handler has been  * started, unless the thread is {@linkplain Thread#interrupt interrupted}.  * <p/>  * <p>If the event handler is already started then this method returns  * immediately.  * <p/>  * <p>If the current thread:  * <ul>  * <li>has its interrupted status set on entry to this method. or  * <li>is {@linkplain Thread#interrupt interrupted} while waiting,  * </ul>  * then {@link InterruptedException} is thrown and the current thread's  * interrupted status is cleared.  *  * @throws InterruptedException if the current thread is interrupted  *                              while waiting  */ ;/**  * Causes the current thread to wait until the event handler has been  * started, unless the thread is {@linkplain Thread#interrupt interrupted}.  * <p/>  * <p>If the event handler is already started then this method returns  * immediately.  * <p/>  * <p>If the current thread:  * <ul>  * <li>has its interrupted status set on entry to this method. or  * <li>is {@linkplain Thread#interrupt interrupted} while waiting,  * </ul>  * then {@link InterruptedException} is thrown and the current thread's  * interrupted status is cleared.  *  * @throws InterruptedException if the current thread is interrupted  *                              while waiting  */ void awaitStarted() throws InterruptedException.
true;;2;1;/**  * Causes the current thread to wait until the event handler has been  * started, unless the thread is {@linkplain Thread#interrupt interrupted},  * or the specified waiting time elapses.  * <p/>  * <p>If the event handler is already started then this method returns  * immediately with the value {@code true}.  * <p/>  * <p>If the current thread:  * <ul>  * <li>has its interrupted status set on entry to this method. “or  * <li>is {@linkplain Thread#interrupt interrupted} while waiting,  * </ul>  * then {@link InterruptedException} is thrown and the current thread's  * interrupted status is cleared.  * <p/>  * <p>If the specified waiting time elapses then the value {@code false}  * is returned.  If the time is less than or equal to zero, the method  * will not wait at all.  *  * @param timeout the maximum time to wait  * @param unit    the time unit of the {@code timeout} argument  * @return {@code true} if the event hanlder is stopped and {@code false}  *         if the waiting time elapsed before the count reached zero  * @throws InterruptedException if the current thread is interrupted  *                              while waiting  */ ;/**  * Causes the current thread to wait until the event handler has been  * started, unless the thread is {@linkplain Thread#interrupt interrupted},  * or the specified waiting time elapses.  * <p/>  * <p>If the event handler is already started then this method returns  * immediately with the value {@code true}.  * <p/>  * <p>If the current thread:  * <ul>  * <li>has its interrupted status set on entry to this method. “or  * <li>is {@linkplain Thread#interrupt interrupted} while waiting,  * </ul>  * then {@link InterruptedException} is thrown and the current thread's  * interrupted status is cleared.  * <p/>  * <p>If the specified waiting time elapses then the value {@code false}  * is returned.  If the time is less than or equal to zero, the method  * will not wait at all.  *  * @param timeout the maximum time to wait  * @param unit    the time unit of the {@code timeout} argument  * @return {@code true} if the event hanlder is stopped and {@code false}  *         if the waiting time elapsed before the count reached zero  * @throws InterruptedException if the current thread is interrupted  *                              while waiting  */ boolean awaitStarted(long timeout, TimeUnit unit) throws InterruptedException.
true;;0;1;/**  * Causes the current thread to wait until the event handler has been shut  * down, unless the thread is {@linkplain Thread#interrupt interrupted}.  * <p/>  * <p>If the event handler is not (yet) started then this method returns  * immediately.  * <p/>  * <p>If the current thread:  * <ul>  * <li>has its interrupted status set on entry to this method. or  * <li>is {@linkplain Thread#interrupt interrupted} while waiting,  * </ul>  * then {@link InterruptedException} is thrown and the current thread's  * interrupted status is cleared.  *  * @throws InterruptedException if the current thread is interrupted  *                              while waiting  */ ;/**  * Causes the current thread to wait until the event handler has been shut  * down, unless the thread is {@linkplain Thread#interrupt interrupted}.  * <p/>  * <p>If the event handler is not (yet) started then this method returns  * immediately.  * <p/>  * <p>If the current thread:  * <ul>  * <li>has its interrupted status set on entry to this method. or  * <li>is {@linkplain Thread#interrupt interrupted} while waiting,  * </ul>  * then {@link InterruptedException} is thrown and the current thread's  * interrupted status is cleared.  *  * @throws InterruptedException if the current thread is interrupted  *                              while waiting  */ void awaitStopped() throws InterruptedException.
true;;2;1;/**  * Causes the current thread to wait until the event handler has been shut  * down, unless the thread is {@linkplain Thread#interrupt interrupted},  * or the specified waiting time elapses.  * <p/>  * <p>If the event handler is not (yet) started then this method returns  * immediately with the value {@code true}.  * <p/>  * <p>If the current thread:  * <ul>  * <li>has its interrupted status set on entry to this method. “or  * <li>is {@linkplain Thread#interrupt interrupted} while waiting,  * </ul>  * then {@link InterruptedException} is thrown and the current thread's  * interrupted status is cleared.  * <p/>  * <p>If the specified waiting time elapses then the value {@code false}  * is returned.  If the time is less than or equal to zero, the method  * will not wait at all.  *  * @param timeout the maximum time to wait  * @param unit    the time unit of the {@code timeout} argument  * @return {@code true} if the event hanlder is stopped and {@code false}  *         if the waiting time elapsed before the count reached zero  * @throws InterruptedException if the current thread is interrupted  *                              while waiting  */ ;/**  * Causes the current thread to wait until the event handler has been shut  * down, unless the thread is {@linkplain Thread#interrupt interrupted},  * or the specified waiting time elapses.  * <p/>  * <p>If the event handler is not (yet) started then this method returns  * immediately with the value {@code true}.  * <p/>  * <p>If the current thread:  * <ul>  * <li>has its interrupted status set on entry to this method. “or  * <li>is {@linkplain Thread#interrupt interrupted} while waiting,  * </ul>  * then {@link InterruptedException} is thrown and the current thread's  * interrupted status is cleared.  * <p/>  * <p>If the specified waiting time elapses then the value {@code false}  * is returned.  If the time is less than or equal to zero, the method  * will not wait at all.  *  * @param timeout the maximum time to wait  * @param unit    the time unit of the {@code timeout} argument  * @return {@code true} if the event hanlder is stopped and {@code false}  *         if the waiting time elapsed before the count reached zero  * @throws InterruptedException if the current thread is interrupted  *                              while waiting  */ boolean awaitStopped(long timeout, TimeUnit unit) throws InterruptedException.
