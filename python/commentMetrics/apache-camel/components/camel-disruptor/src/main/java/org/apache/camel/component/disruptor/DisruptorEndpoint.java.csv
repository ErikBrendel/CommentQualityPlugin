# id;timestamp;commentText;codeText;commentWords;codeWords
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1431005710;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1439299840;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1451237125;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1451302108;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1451410909;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1452076590;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1460966546;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1485947385;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1523994287;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1528633215;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1540108163;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1547240981;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1547480087;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> public void setWaitStrategy(DisruptorWaitStrategy waitStrategy);1547716072;Defines the strategy used by consumer threads to wait on new exchanges to be published._The options allowed are:Blocking, Sleeping, BusySpin and Yielding.;public void setWaitStrategy(DisruptorWaitStrategy waitStrategy) {_        this.waitStrategy = waitStrategy__    };defines,the,strategy,used,by,consumer,threads,to,wait,on,new,exchanges,to,be,published,the,options,allowed,are,blocking,sleeping,busy,spin,and,yielding;public,void,set,wait,strategy,disruptor,wait,strategy,wait,strategy,this,wait,strategy,wait,strategy
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1369219586;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full__@param exchange;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full,param,exchange;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1384853066;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full__@param exchange;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full,param,exchange;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1420531594;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full__@param exchange;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full,param,exchange;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1420531972;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full__@param exchange;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full,param,exchange;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1425140025;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full__@param exchange;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full,param,exchange;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1427402378;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full__@param exchange;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full,param,exchange;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1427880501;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full__@param exchange;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full,param,exchange;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1431005710;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1439299840;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1451237125;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1451302108;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1451410909;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1452076590;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1460966546;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1485947385;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1523994287;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1528633215;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1540108163;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1547240981;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1547480087;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> void publish(final Exchange exchange) throws DisruptorNotStartedException;1547716072;Called by DisruptorProducers to publish new exchanges on the RingBuffer, blocking when full;void publish(final Exchange exchange) throws DisruptorNotStartedException {_        disruptorReference.publish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,blocking,when,full;void,publish,final,exchange,exchange,throws,disruptor,not,started,exception,disruptor,reference,publish,exchange
DisruptorEndpoint -> public void setTimeout(final long timeout);1431005710;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1439299840;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1451237125;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1451302108;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1451410909;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1452076590;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1460966546;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1485947385;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1523994287;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1528633215;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1540108163;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1547240981;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1547480087;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> public void setTimeout(final long timeout);1547716072;Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete._You can disable timeout by using 0 or a negative value.;public void setTimeout(final long timeout) {_        this.timeout = timeout__    };timeout,in,milliseconds,before,a,producer,will,stop,waiting,for,an,asynchronous,task,to,complete,you,can,disable,timeout,by,using,0,or,a,negative,value;public,void,set,timeout,final,long,timeout,this,timeout,timeout
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1369219586;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@param exchange_@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,param,exchange,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1384853066;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@param exchange_@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,param,exchange,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1420531594;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@param exchange_@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,param,exchange,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1420531972;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@param exchange_@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,param,exchange,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1425140025;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@param exchange_@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,param,exchange,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1427402378;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@param exchange_@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,param,exchange,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1427880501;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@param exchange_@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,param,exchange,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1431005710;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1439299840;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1451237125;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1451302108;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1451410909;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1452076590;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1460966546;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1485947385;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1523994287;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1528633215;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1540108163;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1547240981;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1547480087;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException;1547716072;Called by DisruptorProducers to publish new exchanges on the RingBuffer, throwing InsufficientCapacityException_when full__@throws InsufficientCapacityException when the Ringbuffer is full.;void tryPublish(final Exchange exchange) throws DisruptorNotStartedException, InsufficientCapacityException {_        disruptorReference.tryPublish(exchange)__    };called,by,disruptor,producers,to,publish,new,exchanges,on,the,ring,buffer,throwing,insufficient,capacity,exception,when,full,throws,insufficient,capacity,exception,when,the,ringbuffer,is,full;void,try,publish,final,exchange,exchange,throws,disruptor,not,started,exception,insufficient,capacity,exception,disruptor,reference,try,publish,exchange
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1431005710;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1439299840;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1451237125;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1451302108;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1451410909;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1452076590;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1460966546;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1485947385;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1523994287;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1528633215;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1540108163;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1547240981;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1547480087;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> public void setProducerType(DisruptorProducerType producerType);1547716072;Defines the producers allowed on the Disruptor._The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only_allowed when one concurrent producer (on one thread or otherwise synchronized) is active.;public void setProducerType(DisruptorProducerType producerType) {_        this.producerType = producerType__    };defines,the,producers,allowed,on,the,disruptor,the,options,allowed,are,multi,to,allow,multiple,producers,and,single,to,enable,certain,optimizations,only,allowed,when,one,concurrent,producer,on,one,thread,or,otherwise,synchronized,is,active;public,void,set,producer,type,disruptor,producer,type,producer,type,this,producer,type,producer,type
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1431005710;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1439299840;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1451237125;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1451302108;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1451410909;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1452076590;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1460966546;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1485947385;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1523994287;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1528633215;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1540108163;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1547240981;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1547480087;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> @ManagedAttribute(description = "Number of concurrent consumers")     public int getConcurrentConsumers();1547716072;Number of concurrent threads processing exchanges.;@ManagedAttribute(description = "Number of concurrent consumers")_    public int getConcurrentConsumers() {_        return concurrentConsumers__    };number,of,concurrent,threads,processing,exchanges;managed,attribute,description,number,of,concurrent,consumers,public,int,get,concurrent,consumers,return,concurrent,consumers
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1431005710;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1439299840;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1451237125;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1451302108;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1451410909;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1452076590;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1460966546;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1485947385;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1523994287;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1528633215;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1540108163;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1547240981;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1547480087;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete);1547716072;Option to specify whether the caller should wait for the async task to complete or not before continuing._The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory._The last value, IfReplyExpected, will only wait if the message is Request Reply based.;public void setWaitForTaskToComplete(final WaitForTaskToComplete waitForTaskToComplete) {_        this.waitForTaskToComplete = waitForTaskToComplete__    };option,to,specify,whether,the,caller,should,wait,for,the,async,task,to,complete,or,not,before,continuing,the,following,three,options,are,supported,always,never,or,if,reply,expected,the,first,two,values,are,self,explanatory,the,last,value,if,reply,expected,will,only,wait,if,the,message,is,request,reply,based;public,void,set,wait,for,task,to,complete,final,wait,for,task,to,complete,wait,for,task,to,complete,this,wait,for,task,to,complete,wait,for,task,to,complete
DisruptorEndpoint -> public void setSize(int size);1452076590;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public void setSize(int size);1460966546;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public void setSize(int size);1485947385;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public void setSize(int size);1523994287;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public void setSize(int size);1528633215;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public void setSize(int size);1540108163;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public void setSize(int size);1547240981;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public void setSize(int size);1547480087;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public void setSize(int size);1547716072;The maximum capacity of the Disruptors ringbuffer_Will be effectively increased to the nearest power of two._Notice: Mind if you use this option, then its the first endpoint being created with the queue name,_that determines the size. To make sure all endpoints use same size, then configure the size option_on all of them, or the first endpoint being created.;public void setSize(int size) {_        this.size = size__    };the,maximum,capacity,of,the,disruptors,ringbuffer,will,be,effectively,increased,to,the,nearest,power,of,two,notice,mind,if,you,use,this,option,then,its,the,first,endpoint,being,created,with,the,queue,name,that,determines,the,size,to,make,sure,all,endpoints,use,same,size,then,configure,the,size,option,on,all,of,them,or,the,first,endpoint,being,created;public,void,set,size,int,size,this,size,size
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1369219586;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1384853066;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1420531594;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1420531972;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1425140025;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1427402378;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1427880501;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1431005710;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1439299840;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1451237125;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1451302108;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1451410909;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1452076590;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1460966546;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1485947385;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1523994287;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1528633215;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1540108163;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1547240981;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1547480087;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public Set<DisruptorConsumer> getConsumers();1547716072;Returns the current active consumers on this endpoint;public Set<DisruptorConsumer> getConsumers() {_        return Collections.unmodifiableSet(consumers)__    };returns,the,current,active,consumers,on,this,endpoint;public,set,disruptor,consumer,get,consumers,return,collections,unmodifiable,set,consumers
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1431005710;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1439299840;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1451237125;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1451302108;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1451410909;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1452076590;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1460966546;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1485947385;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1523994287;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1528633215;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1540108163;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1547240981;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1547480087;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public void setBlockWhenFull(boolean blockWhenFull);1547716072;Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted._By default, the calling thread will block and wait until the message can be accepted._By disabling this option, an exception will be thrown stating that the queue is full.;public void setBlockWhenFull(boolean blockWhenFull) {_        this.blockWhenFull = blockWhenFull__    };whether,a,thread,that,sends,messages,to,a,full,disruptor,will,block,until,the,ringbuffer,s,capacity,is,no,longer,exhausted,by,default,the,calling,thread,will,block,and,wait,until,the,message,can,be,accepted,by,disabling,this,option,an,exception,will,be,thrown,stating,that,the,queue,is,full;public,void,set,block,when,full,boolean,block,when,full,this,block,when,full,block,when,full
DisruptorEndpoint -> public boolean isMultipleConsumers();1439299840;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1451237125;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1451302108;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1451410909;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1452076590;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1460966546;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1485947385;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1523994287;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1528633215;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1540108163;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1547240981;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1547480087;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public boolean isMultipleConsumers();1547716072;Specifies whether multiple consumers are allowed._If enabled, you can use Disruptor for Publish-Subscribe messaging._That is, you can send a message to the queue and have each consumer receive a copy of the message._When enabled, this option should be specified on every consumer endpoint.;public boolean isMultipleConsumers() {_        return multipleConsumers__    };specifies,whether,multiple,consumers,are,allowed,if,enabled,you,can,use,disruptor,for,publish,subscribe,messaging,that,is,you,can,send,a,message,to,the,queue,and,have,each,consumer,receive,a,copy,of,the,message,when,enabled,this,option,should,be,specified,on,every,consumer,endpoint;public,boolean,is,multiple,consumers,return,multiple,consumers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1369219586;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1384853066;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1420531594;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1420531972;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1425140025;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1427402378;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1427880501;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1431005710;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1439299840;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1451237125;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1451302108;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1451410909;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1452076590;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1460966546;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1485947385;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1523994287;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1528633215;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1540108163;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1547240981;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1547480087;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
DisruptorEndpoint -> public Set<DisruptorProducer> getProducers();1547716072;Returns the current active producers on this endpoint;public Set<DisruptorProducer> getProducers() {_        return Collections.unmodifiableSet(producers)__    };returns,the,current,active,producers,on,this,endpoint;public,set,disruptor,producer,get,producers,return,collections,unmodifiable,set,producers
