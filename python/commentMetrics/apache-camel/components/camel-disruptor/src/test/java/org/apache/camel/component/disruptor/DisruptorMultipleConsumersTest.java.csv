commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testDisruptorMultipleConsumers() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceivedInAnyOrder("Hello World", "Bye World").     getMockEndpoint("mock:b").expectedBodiesReceivedInAnyOrder("Hello World", "Bye World").     template.sendBody("disruptor:foo", "Hello World").     template.sendBody("disruptor:bar", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("disruptor:foo?multipleConsumers=true").id("testRoute").to("mock:c"). }
false;public;0;43;;@Test public void testDisruptorMultipleConsumersNewAdded() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceivedInAnyOrder("Hello World", "Bye World").     getMockEndpoint("mock:b").expectedBodiesReceivedInAnyOrder("Hello World", "Bye World").     getMockEndpoint("mock:c").expectedMessageCount(0).     template.sendBody("disruptor:foo", "Hello World").     template.sendBody("disruptor:bar", "Bye World").     assertMockEndpointsSatisfied().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo?multipleConsumers=true").id("testRoute").to("mock:c").         }     }).     resetMocks().     getMockEndpoint("mock:a").expectedMessageCount(20).     getMockEndpoint("mock:b").expectedMessageCount(20).     getMockEndpoint("mock:c").expectedMessageCount(20).     for (int i = 0. i < 10. i++) {         template.sendBody("disruptor:foo", "Hello World").         template.sendBody("disruptor:bar", "Bye World").     }     assertMockEndpointsSatisfied().     resetMocks().     context.getRouteController().suspendRoute("testRoute").     getMockEndpoint("mock:a").expectedMessageCount(20).     getMockEndpoint("mock:b").expectedMessageCount(20).     getMockEndpoint("mock:c").expectedMessageCount(0).     for (int i = 0. i < 10. i++) {         template.sendBody("disruptor:foo", "Hello World").         template.sendBody("disruptor:bar", "Bye World").     }     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("disruptor:foo?multipleConsumers=true").to("mock:a").     from("disruptor:foo?multipleConsumers=true").to("mock:b").     from("disruptor:bar").to("disruptor:foo?multipleConsumers=true"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo?multipleConsumers=true").to("mock:a").             from("disruptor:foo?multipleConsumers=true").to("mock:b").             from("disruptor:bar").to("disruptor:foo?multipleConsumers=true").         }     }. }
