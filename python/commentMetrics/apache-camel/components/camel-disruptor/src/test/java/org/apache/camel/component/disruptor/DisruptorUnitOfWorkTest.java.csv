commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testDisruptorUOW() throws Exception {     final NotifyBuilder notify = new NotifyBuilder(context).whenDone(2).create().     final MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     notify.matchesMockWaitTime().     assertEquals("onCompleteA", sync).     assertEquals("onCompleteA", lastOne). }
false;public;1;4;;@Override public void process(final Exchange exchange) throws Exception {     lastOne = "processor". }
false;public;1;4;;@Override public void process(final Exchange exchange) throws Exception {     assertEquals(null, sync). }
false;public;0;18;;@Override public void configure() throws Exception {     context.setTracing(true).     from("direct:start").process(new MyUOWProcessor("A")).to("disruptor:foo").     from("disruptor:foo").process(new Processor() {          @Override         public void process(final Exchange exchange) throws Exception {             assertEquals(null, sync).         }     }).process(new Processor() {          @Override         public void process(final Exchange exchange) throws Exception {             lastOne = "processor".         }     }).to("mock:result"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setTracing(true).             from("direct:start").process(new MyUOWProcessor("A")).to("disruptor:foo").             from("disruptor:foo").process(new Processor() {                  @Override                 public void process(final Exchange exchange) throws Exception {                     assertEquals(null, sync).                 }             }).process(new Processor() {                  @Override                 public void process(final Exchange exchange) throws Exception {                     lastOne = "processor".                 }             }).to("mock:result").         }     }. }
false;public;1;5;;@Override public void onComplete(final Exchange exchange) {     sync = "onComplete" + id.     lastOne = sync. }
false;public;1;5;;@Override public void onFailure(final Exchange exchange) {     sync = "onFailure" + id.     lastOne = sync. }
false;public;1;16;;@Override public void process(final Exchange exchange) throws Exception {     exchange.getUnitOfWork().addSynchronization(new Synchronization() {          @Override         public void onComplete(final Exchange exchange) {             sync = "onComplete" + id.             lastOne = sync.         }          @Override         public void onFailure(final Exchange exchange) {             sync = "onFailure" + id.             lastOne = sync.         }     }). }
