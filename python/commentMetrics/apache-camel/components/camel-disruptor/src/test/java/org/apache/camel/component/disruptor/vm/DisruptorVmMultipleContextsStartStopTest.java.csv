commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testStartStop() throws Exception {     /* Check that contexts are communicated */     MockEndpoint mock = context2.getEndpoint("mock:result", MockEndpoint.class).     mock.expectedMessageCount(1).     template.requestBody("direct:test", "Hello world!").     mock.assertIsSatisfied().     mock.reset().     /* Restart the consumer Camel Context */     context2.stop().     context2.start().     /* Send a message again and assert that it's received */     template.requestBody("direct:test", "Hello world!").     mock.assertIsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:test").to("disruptor-vm:foo"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").to("disruptor-vm:foo").         }     }. }
false;public;0;4;;@Override public void configure() throws Exception {     from("disruptor-vm:foo").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor-vm:foo").to("mock:result").         }     }. }
