commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;// private ThreadCounter threadCounter = new ThreadCounter(). @Test public void testMulticastProduce() throws InterruptedException {     resultEndpoint1.expectedBodiesReceived(VALUE).     resultEndpoint1.setExpectedMessageCount(1).     resultEndpoint2.expectedBodiesReceived(VALUE).     resultEndpoint2.setExpectedMessageCount(1).     template.asyncSendBody(MULTIPLE_CONSUMERS_ENDPOINT_URI, VALUE).     resultEndpoint1.await(5, TimeUnit.SECONDS).     resultEndpoint1.assertIsSatisfied(1).     resultEndpoint2.await(5, TimeUnit.SECONDS).     resultEndpoint2.assertIsSatisfied(1). }
false;public;0;9;;@Override public void configure() throws Exception {     from("disruptor:test?multipleConsumers=true").to("mock:result1").setShutdownRoute(ShutdownRoute.Defer).     from("disruptor:test?multipleConsumers=true").to("mock:result2").setShutdownRoute(ShutdownRoute.Defer). // from("disruptor:testAsynchronous").process(threadCounter).to("mock:result"). // from("disruptor:testMultipleConsumers?concurrentConsumers=4").process(threadCounter).to("mock:result"). }
false;protected;0;14;;//  // @Test // public void testAsynchronous() throws InterruptedException { // threadCounter.reset(). //  // int messagesSent = 1000. //  // resultEndpoint.setExpectedMessageCount(messagesSent). //  // long currentThreadId = Thread.currentThread().getId(). //  // for (int i = 0. i < messagesSent. ++i) { // template.asyncSendBody("disruptor:testAsynchronous", VALUE). // } //  // resultEndpoint.await(20, TimeUnit.SECONDS). // resultEndpoint.assertIsSatisfied(). //  // assertTrue(threadCounter.getThreadIdCount() > 0). // assertFalse(threadCounter.getThreadIds().contains(currentThreadId)). // } //  // @Test // public void testMultipleConsumers() throws InterruptedException { // threadCounter.reset(). //  // int messagesSent = 1000. //  // resultEndpoint.setExpectedMessageCount(messagesSent). //  // for (int i = 0. i < messagesSent. ++i) { // template.asyncSendBody("disruptor:testMultipleConsumers?concurrentConsumers=4", VALUE). // } //  // resultEndpoint.await(20, TimeUnit.SECONDS). //  // //sleep for another second to check for duplicate messages in transit // Thread.sleep(1000). //  // System.out.println("count = " + resultEndpoint.getReceivedCounter()). // resultEndpoint.assertIsSatisfied(). //  // assertEquals(4, threadCounter.getThreadIdCount()). // } //  @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:test?multipleConsumers=true").to("mock:result1").setShutdownRoute(ShutdownRoute.Defer).             from("disruptor:test?multipleConsumers=true").to("mock:result2").setShutdownRoute(ShutdownRoute.Defer).         // from("disruptor:testAsynchronous").process(threadCounter).to("mock:result").         // from("disruptor:testMultipleConsumers?concurrentConsumers=4").process(threadCounter).to("mock:result").         }     }. }
