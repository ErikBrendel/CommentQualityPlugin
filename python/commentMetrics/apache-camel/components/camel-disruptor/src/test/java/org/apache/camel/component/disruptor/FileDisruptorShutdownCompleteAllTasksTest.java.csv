commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/disruptor").     super.setUp(). }
false;public;0;9;;@Override public void configure() throws Exception {     from(url).routeId("route1").shutdownRunningTask(ShutdownRunningTask.CompleteAllTasks).to("log:delay").delay(1000).to("disruptor:foo?size=8").     from("disruptor:foo?size=8").routeId("route2").to("log:bar").to("mock:bar"). }
false;public;0;36;;@Test public void testShutdownCompleteAllTasks() throws Exception {     final String url = "file:target/disruptor".     template.sendBodyAndHeader(url, "A", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader(url, "B", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader(url, "C", Exchange.FILE_NAME, "c.txt").     template.sendBodyAndHeader(url, "D", Exchange.FILE_NAME, "d.txt").     template.sendBodyAndHeader(url, "E", Exchange.FILE_NAME, "e.txt").     // give it 20 seconds to shutdown     context.getShutdownStrategy().setTimeout(20 * 100000).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(url).routeId("route1").shutdownRunningTask(ShutdownRunningTask.CompleteAllTasks).to("log:delay").delay(1000).to("disruptor:foo?size=8").             from("disruptor:foo?size=8").routeId("route2").to("log:bar").to("mock:bar").         }     }).     context.start().     final MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     // shutdown during processing     context.stop().     // should route all 5     assertEquals("Should complete all messages", 5, bar.getReceivedCounter()). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
