commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testInOutWithError() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template2.requestBody("direct:start", "Hello World", String.class).         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Damn I cannot do this", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("disruptor-vm:foo").transform(constant("Bye World")).throwException(new IllegalArgumentException("Damn I cannot do this")).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor-vm:foo").transform(constant("Bye World")).throwException(new IllegalArgumentException("Damn I cannot do this")).to("mock:result").         }     }. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("disruptor-vm:foo"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("disruptor-vm:foo").         }     }. }
