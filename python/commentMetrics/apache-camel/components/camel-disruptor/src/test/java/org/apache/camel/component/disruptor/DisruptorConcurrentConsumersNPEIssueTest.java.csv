commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testSendToDisruptor() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("disruptor:foo", "Hello World").     assertMockEndpointsSatisfied().     try {         context.getRouteController().startRoute("first").         fail("Should have thrown exception").     } catch (FailedToStartRouteException e) {         assertEquals("Failed to start route first because of Multiple consumers for the same endpoint is not allowed:" + " disruptor://foo?concurrentConsumers=5", e.getMessage()).     } }
false;public;0;21;;@Test public void testStartThird() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("disruptor:foo", "Hello World").     assertMockEndpointsSatisfied().     // this should be okay     context.getRouteController().startRoute("third").     try {         context.getRouteController().startRoute("first").         fail("Should have thrown exception").     } catch (FailedToStartRouteException e) {         assertEquals("Failed to start route first because of Multiple consumers for the same endpoint is not allowed:" + " disruptor://foo?concurrentConsumers=5", e.getMessage()).     } }
false;public;0;9;;@Override public void configure() throws Exception {     from("disruptor:foo?concurrentConsumers=5").routeId("first").noAutoStartup().to("mock:result").     from("disruptor:foo?concurrentConsumers=5").routeId("second").to("mock:result").     from("direct:foo").routeId("third").noAutoStartup().to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo?concurrentConsumers=5").routeId("first").noAutoStartup().to("mock:result").             from("disruptor:foo?concurrentConsumers=5").routeId("second").to("mock:result").             from("direct:foo").routeId("third").noAutoStartup().to("mock:result").         }     }. }
