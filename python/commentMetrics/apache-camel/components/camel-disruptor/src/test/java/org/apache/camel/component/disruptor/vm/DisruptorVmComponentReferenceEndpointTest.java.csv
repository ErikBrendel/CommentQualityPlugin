commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("disruptor-vm:foo?blockWhenFull=true").routeId("foo2").to("mock:foo2"). }
false;public;0;38;;@Test public void testDisruptorVmComponentReference() throws Exception {     DisruptorVmComponent vm = context.getComponent("disruptor-vm", DisruptorVmComponent.class).     String key = DisruptorComponent.getDisruptorKey("disruptor-vm://foo").     assertEquals(1, vm.getDisruptors().get(key).getEndpointCount()).     assertEquals(2, numberOfReferences(vm)).     // add a second consumer on the endpoint     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor-vm:foo?blockWhenFull=true").routeId("foo2").to("mock:foo2").         }     }).     assertEquals(2, vm.getDisruptors().get(key).getEndpointCount()).     assertEquals(3, numberOfReferences(vm)).     // remove the 1st route     context.getRouteController().stopRoute("foo").     context.removeRoute("foo").     assertEquals(1, vm.getDisruptors().get(key).getEndpointCount()).     assertEquals(2, numberOfReferences(vm)).     // remove the 2nd route     context.getRouteController().stopRoute("foo2").     context.removeRoute("foo2").     // and there is no longer queues for the foo key     assertNull(vm.getDisruptors().get(key)).     // there should still be a bar     assertEquals(1, numberOfReferences(vm)).     key = DisruptorComponent.getDisruptorKey("disruptor-vm://bar").     assertEquals(1, vm.getDisruptors().get(key).getEndpointCount()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("disruptor-vm:foo").routeId("foo").to("mock:foo").     from("disruptor-vm:bar").routeId("bar").to("mock:bar"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor-vm:foo").routeId("foo").to("mock:foo").             from("disruptor-vm:bar").routeId("bar").to("mock:bar").         }     }. }
false;private;1;8;;private int numberOfReferences(DisruptorVmComponent vm) {     int num = 0.     Iterator<DisruptorReference> it = vm.getDisruptors().values().iterator().     while (it.hasNext()) {         num += it.next().getEndpointCount().     }     return num. }
