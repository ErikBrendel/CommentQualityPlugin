commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testDisruptorNoTimeout() throws Exception {     final MockEndpoint result = getMockEndpoint("mock:result").     result.setExpectedMessageCount(1).     final Future<String> out = template.asyncRequestBody("disruptor:foo", "World", String.class).     assertEquals("Bye World", out.get()).     result.await(1, TimeUnit.SECONDS).     assertMockEndpointsSatisfied(). }
false;public;0;22;;@Test public void testDisruptorTimeout() throws Exception {     final MockEndpoint result = getMockEndpoint("mock:result").     result.setExpectedMessageCount(0).     final Future<String> out = template.asyncRequestBody("disruptor:foo?timeout=" + timeout, "World", String.class).     try {         out.get().         fail("Should have thrown an exception").     } catch (ExecutionException e) {         assertIsInstanceOf(CamelExecutionException.class, e.getCause()).         assertIsInstanceOf(ExchangeTimedOutException.class, e.getCause().getCause()).         final DisruptorEndpoint de = (DisruptorEndpoint) context.getRoute("disruptor").getEndpoint().         assertNotNull("Consumer endpoint cannot be null", de).         // we can't remove the exchange from a Disruptor once it is published, but it should never reach the         // mock:result endpoint because it should be filtered out by the DisruptorConsumer         result.await(1, TimeUnit.SECONDS).         assertMockEndpointsSatisfied().     } }
false;public;0;6;;@Test public void testDisruptorTimeoutWithStoppedRoute() throws Exception {     context.getRouteController().stopRoute("disruptor").     timeout = 500.     testDisruptorTimeout(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("disruptor:foo").routeId("disruptor").to("mock:before").delay(250).transform(body().prepend("Bye ")).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo").routeId("disruptor").to("mock:before").delay(250).transform(body().prepend("Bye ")).to("mock:result").         }     }. }
