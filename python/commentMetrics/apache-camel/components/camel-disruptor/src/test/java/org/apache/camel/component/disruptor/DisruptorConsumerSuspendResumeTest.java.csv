commented;modifiers;parameterAmount;loc;comment;code
false;public;0;42;;@Test public void testSuspendResume() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedMessageCount(1).     template.sendBody("disruptor:foo", "A").     mock.assertIsSatisfied().     assertEquals("Started", context.getRouteController().getRouteStatus("foo").name()).     assertEquals("Started", context.getRouteController().getRouteStatus("bar").name()).     // suspend bar consumer (not the route)     final DisruptorConsumer consumer = (DisruptorConsumer) context.getRoute("bar").getConsumer().     ServiceHelper.suspendService(consumer).     assertEquals("Suspended", consumer.getStatus().name()).     // send a message to the route but the consumer is suspended     // so it should not route it     resetMocks().     mock.expectedMessageCount(0).     // wait a bit to ensure consumer is suspended, as it could be in a poll mode where     // it would poll and route (there is a little slack (up till 1 sec) before suspension is empowered)     Thread.sleep(2000).     template.sendBody("disruptor:foo", "B").     // wait 2 sec to ensure disruptor consumer thread would have tried to poll otherwise     mock.assertIsSatisfied(2000).     // resume consumer     resetMocks().     mock.expectedMessageCount(1).     // resume bar consumer (not the route)     ServiceHelper.resumeService(consumer).     assertEquals("Started", consumer.getStatus().name()).     // the message should be routed now     mock.assertIsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("disruptor:foo").routeId("foo").to("disruptor:bar").     from("disruptor:bar").routeId("bar").to("mock:bar"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo").routeId("foo").to("disruptor:bar").             from("disruptor:bar").routeId("bar").to("mock:bar").         }     }. }
