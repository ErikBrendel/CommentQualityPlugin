commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testInOutDisruptorChainedWithCustomOnCompletion() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("start").     getMockEndpoint("mock:b").expectedBodiesReceived("start-a").     // the onCustomCompletion should be send very last (as it will be handed over)     getMockEndpoint("mock:c").expectedBodiesReceived("start-a-b", "onCustomCompletion").     final String reply = template.requestBody("disruptor:a", "start", String.class).     assertEquals("start-a-b-c", reply).     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void onDone(final Exchange exchange) {     template.sendBody("mock:c", "onCustomCompletion"). }
false;public;1;10;;@Override public void process(final Exchange exchange) throws Exception {     // should come in last     exchange.addOnCompletion(new SynchronizationAdapter() {          @Override         public void onDone(final Exchange exchange) {             template.sendBody("mock:c", "onCustomCompletion").         }     }). }
false;public;0;19;;@Override public void configure() throws Exception {     from("disruptor:a").process(new Processor() {          @Override         public void process(final Exchange exchange) throws Exception {             // should come in last             exchange.addOnCompletion(new SynchronizationAdapter() {                  @Override                 public void onDone(final Exchange exchange) {                     template.sendBody("mock:c", "onCustomCompletion").                 }             }).         }     }).to("mock:a").transform(simple("${body}-a")).to("disruptor:b").     from("disruptor:b").to("mock:b").transform(simple("${body}-b")).to("disruptor:c").     from("disruptor:c").to("mock:c").transform(simple("${body}-c")). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:a").process(new Processor() {                  @Override                 public void process(final Exchange exchange) throws Exception {                     // should come in last                     exchange.addOnCompletion(new SynchronizationAdapter() {                          @Override                         public void onDone(final Exchange exchange) {                             template.sendBody("mock:c", "onCustomCompletion").                         }                     }).                 }             }).to("mock:a").transform(simple("${body}-a")).to("disruptor:b").             from("disruptor:b").to("mock:b").transform(simple("${body}-b")).to("disruptor:c").             from("disruptor:c").to("mock:c").transform(simple("${body}-c")).         }     }. }
