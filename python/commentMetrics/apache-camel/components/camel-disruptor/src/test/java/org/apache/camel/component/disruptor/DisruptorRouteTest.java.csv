commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void process(final Exchange e) {     log.debug("Received exchange: " + e.getIn()).     latch.countDown(). }
false;public;0;11;;@Override public void configure() {     from("disruptor:test.a").to("disruptor:test.b").     from("disruptor:test.b").process(new Processor() {          @Override         public void process(final Exchange e) {             log.debug("Received exchange: " + e.getIn()).             latch.countDown().         }     }). }
false;public;0;36;;@Test public void testDisruptorQueue() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     final CamelContext context = new DefaultCamelContext().     // lets add some routes     context.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("disruptor:test.a").to("disruptor:test.b").             from("disruptor:test.b").process(new Processor() {                  @Override                 public void process(final Exchange e) {                     log.debug("Received exchange: " + e.getIn()).                     latch.countDown().                 }             }).         }     }).     context.start().     // now lets fire in a message     final Endpoint endpoint = context.getEndpoint("disruptor:test.a").     final Exchange exchange = endpoint.createExchange().     exchange.getIn().setHeader("cheese", 123).     final Producer producer = endpoint.createProducer().     producer.process(exchange).     // now lets sleep for a while     assertTrue(latch.await(5, TimeUnit.SECONDS)).     context.stop(). }
false;public;1;5;;@Override public void process(final Exchange e) {     log.debug("Received exchange: " + e.getIn()).     latch.countDown(). }
false;public;0;11;;@Override public void configure() {     from("disruptor:test.a").to("disruptor:test.b").     from("disruptor:test.b").process(new Processor() {          @Override         public void process(final Exchange e) {             log.debug("Received exchange: " + e.getIn()).             latch.countDown().         }     }). }
false;public;0;36;;@Test public void testThatShowsEndpointResolutionIsNotConsistent() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     final CamelContext context = new DefaultCamelContext().     // lets add some routes     context.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from("disruptor:test.a").to("disruptor:test.b").             from("disruptor:test.b").process(new Processor() {                  @Override                 public void process(final Exchange e) {                     log.debug("Received exchange: " + e.getIn()).                     latch.countDown().                 }             }).         }     }).     context.start().     // now lets fire in a message     final Endpoint endpoint = context.getEndpoint("disruptor:test.a").     final Exchange exchange = endpoint.createExchange().     exchange.getIn().setHeader("cheese", 123).     final Producer producer = endpoint.createProducer().     producer.process(exchange).     // now lets sleep for a while     assertTrue(latch.await(5, TimeUnit.SECONDS)).     context.stop(). }
