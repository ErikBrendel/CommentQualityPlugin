commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from(DEFAULT_URI).delay(DELAY).to(MOCK_URI). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(DEFAULT_URI).delay(DELAY).to(MOCK_URI).         }     }. }
false;public;0;10;;@Test public void testDisruptorBlockingWhenFull() throws Exception {     getMockEndpoint(MOCK_URI).setExpectedMessageCount(QUEUE_SIZE + 20).     final DisruptorEndpoint disruptor = context.getEndpoint(DEFAULT_URI, DisruptorEndpoint.class).     assertEquals(QUEUE_SIZE, disruptor.getRemainingCapacity()).     sendSoManyOverCapacity(DEFAULT_URI, QUEUE_SIZE, 20).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test(expected = CamelExecutionException.class) public void testDisruptorExceptionWhenFull() throws Exception {     getMockEndpoint(MOCK_URI).setExpectedMessageCount(QUEUE_SIZE + 20).     final DisruptorEndpoint disruptor = context.getEndpoint(DEFAULT_URI, DisruptorEndpoint.class).     assertEquals(QUEUE_SIZE, disruptor.getRemainingCapacity()).     sendSoManyOverCapacity(EXCEPTION_WHEN_FULL_URI, QUEUE_SIZE, 20).     assertMockEndpointsSatisfied(). }
true;private;3;5;/**  * This method make sure that we hit the limit by sending 'soMany' messages over the given capacity which allows the  * delayer to kick in.  */ ;/**  * This method make sure that we hit the limit by sending 'soMany' messages over the given capacity which allows the  * delayer to kick in.  */ private void sendSoManyOverCapacity(final String uri, final int capacity, final int soMany) {     for (int i = 0. i < (capacity + soMany). i++) {         template.sendBody(uri, "Message " + i).     } }
