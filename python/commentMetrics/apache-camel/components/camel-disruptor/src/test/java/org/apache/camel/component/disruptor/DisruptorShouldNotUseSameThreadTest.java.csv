commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testNotUseSameThread() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(final Exchange exchange) throws Exception {     local.set("Hello").     id = Thread.currentThread().getId(). }
false;public;1;5;;@Override public void process(final Exchange exchange) throws Exception {     assertEquals(null, local.get()).     assertNotSame("Thread ids should not be same", id, Thread.currentThread().getId()). }
false;public;0;20;;@Override public void configure() throws Exception {     final ThreadLocal<String> local = new ThreadLocal<>().     from("direct:start").process(new Processor() {          @Override         public void process(final Exchange exchange) throws Exception {             local.set("Hello").             id = Thread.currentThread().getId().         }     }).to("disruptor:foo").     from("disruptor:foo").process(new Processor() {          @Override         public void process(final Exchange exchange) throws Exception {             assertEquals(null, local.get()).             assertNotSame("Thread ids should not be same", id, Thread.currentThread().getId()).         }     }).to("mock:result"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             final ThreadLocal<String> local = new ThreadLocal<>().             from("direct:start").process(new Processor() {                  @Override                 public void process(final Exchange exchange) throws Exception {                     local.set("Hello").                     id = Thread.currentThread().getId().                 }             }).to("disruptor:foo").             from("disruptor:foo").process(new Processor() {                  @Override                 public void process(final Exchange exchange) throws Exception {                     assertEquals(null, local.get()).                     assertNotSame("Thread ids should not be same", id, Thread.currentThread().getId()).                 }             }).to("mock:result").         }     }. }
