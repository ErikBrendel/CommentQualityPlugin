commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testQueue() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Hello World", "Bye World", "Goodday World", "Bar").     template2.sendBody("disruptor-vm:foo", "Hello World").     template2.sendBody("disruptor-vm:foo?size=20", "Bye World").     template2.sendBody("disruptor-vm:foo?concurrentConsumers=5", "Goodday World").     template.sendBody("disruptor-vm:bar", "Bar"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("disruptor-vm:bar").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor-vm:bar").to("mock:result").         }     }. }
false;public;0;4;;@Override public void configure() throws Exception {     from("disruptor-vm:foo?size=20&concurrentConsumers=2").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor-vm:foo?size=20&concurrentConsumers=2").to("mock:result").         }     }. }
