commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("disruptor:foo?multipleConsumers=true&size=8").id("testRoute").to("mock:b"). }
false;public;0;30;;@Test public void testDisruptorReconfigureWithBlockingProducer() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(20).     getMockEndpoint("mock:b").expectedMinimumMessageCount(10).     long beforeStart = System.currentTimeMillis().     ProducerThread producerThread = new ProducerThread().     producerThread.start().     // synchronize with the producer to the point that the buffer is full     assertTrue(producerThread.awaitFullBufferProduced()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo?multipleConsumers=true&size=8").id("testRoute").to("mock:b").         }     }).     // adding the consumer may take place after the current buffer is flushed     // which will take approximately 8*200=1600 ms because of delay on route.     // If the reconfigure does not correctly hold back the producer thread on this request,     // it will take approximately 20*200=4000 ms.     // be on the safe side and check that it was at least faster than 2 seconds.     assertTrue("Reconfigure of Disruptor blocked", (System.currentTimeMillis() - beforeStart) < 2000).     // Wait and check that the producer has produced all messages without throwing an exception     assertTrue(producerThread.checkResult()).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("disruptor:foo?multipleConsumers=true&size=8").delay(200).to("mock:a"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo?multipleConsumers=true&size=8").delay(200).to("mock:a").         }     }. }
false;public;0;18;;@Override public void run() {     for (int i = 0. i < 8. i++) {         template.sendBody("disruptor:foo", "Message").     }     startedLatch.countDown().     try {         for (int i = 0. i < 12. i++) {             template.sendBody("disruptor:foo", "Message").         }     } catch (Exception e) {         exception = e.     }     resultLatch.countDown(). }
false;public;0;3;;public boolean awaitFullBufferProduced() throws InterruptedException {     return startedLatch.await(5, TimeUnit.SECONDS). }
false;public;0;11;;public boolean checkResult() throws Exception {     if (exception != null) {         throw exception.     }     boolean result = resultLatch.await(5, TimeUnit.SECONDS).     if (exception != null) {         throw exception.     }     return result. }
