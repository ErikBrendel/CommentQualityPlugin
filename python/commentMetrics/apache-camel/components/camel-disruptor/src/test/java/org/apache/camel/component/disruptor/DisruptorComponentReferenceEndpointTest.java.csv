commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("disruptor:foo?concurrentConsumers=1").routeId("foo2").to("mock:foo2"). }
false;public;0;38;;@Test public void testDisruptorComponentReference() throws Exception {     final DisruptorComponent disruptor = context.getComponent("disruptor", DisruptorComponent.class).     final String fooKey = DisruptorComponent.getDisruptorKey("disruptor://foo").     assertEquals(1, disruptor.getDisruptors().get(fooKey).getEndpointCount()).     assertEquals(2, numberOfReferences(disruptor)).     // add a second consumer on the endpoint     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo?concurrentConsumers=1").routeId("foo2").to("mock:foo2").         }     }).     assertEquals(2, disruptor.getDisruptors().get(fooKey).getEndpointCount()).     assertEquals(3, numberOfReferences(disruptor)).     // remove the 1st route     context.getRouteController().stopRoute("foo").     context.removeRoute("foo").     assertEquals(1, disruptor.getDisruptors().get(fooKey).getEndpointCount()).     assertEquals(2, numberOfReferences(disruptor)).     // remove the 2nd route     context.getRouteController().stopRoute("foo2").     context.removeRoute("foo2").     // and there is no longer disruptors for the foo key     assertTrue(disruptor.getDisruptors().get(fooKey) == null).     // there should still be a bar     assertEquals(1, numberOfReferences(disruptor)).     final String barKey = DisruptorComponent.getDisruptorKey("disruptor://bar").     assertEquals(1, disruptor.getDisruptors().get(barKey).getEndpointCount()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("disruptor:foo").routeId("foo").to("mock:foo").     from("disruptor:bar").routeId("bar").to("mock:bar"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo").routeId("foo").to("mock:foo").             from("disruptor:bar").routeId("bar").to("mock:bar").         }     }. }
false;private;1;8;;private int numberOfReferences(final DisruptorComponent disruptor) {     int num = 0.     final Iterator<DisruptorReference> it = disruptor.getDisruptors().values().iterator().     while (it.hasNext()) {         num += it.next().getEndpointCount().     }     return num. }
