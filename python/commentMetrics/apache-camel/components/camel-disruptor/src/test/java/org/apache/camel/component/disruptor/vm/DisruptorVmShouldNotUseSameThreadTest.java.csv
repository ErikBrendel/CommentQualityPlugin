commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testNotUseSameThread() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template2.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertNull(local.get()).     assertNotSame("Thread is should not be same", id, Thread.currentThread().getId()). }
false;public;0;8;;public void configure() throws Exception {     from("disruptor-vm:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertNull(local.get()).             assertNotSame("Thread is should not be same", id, Thread.currentThread().getId()).         }     }).to("mock:result"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("disruptor-vm:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertNull(local.get()).                     assertNotSame("Thread is should not be same", id, Thread.currentThread().getId()).                 }             }).to("mock:result").         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     local.set("Hello").     id = Thread.currentThread().getId(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             local.set("Hello").             id = Thread.currentThread().getId().         }     }).to("disruptor-vm:foo"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     local.set("Hello").                     id = Thread.currentThread().getId().                 }             }).to("disruptor-vm:foo").         }     }. }
