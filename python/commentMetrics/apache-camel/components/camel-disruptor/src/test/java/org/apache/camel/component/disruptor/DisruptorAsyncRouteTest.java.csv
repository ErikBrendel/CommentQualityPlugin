commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSendAsync() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     // START SNIPPET: e2     final Object out = template.requestBody("direct:start", "Hello World").     assertEquals("OK", out).     // END SNIPPET: e2     assertMockEndpointsSatisfied(). }
true;public;0;10;// START SNIPPET: e1 ;// START SNIPPET: e1 @Override public void configure() throws Exception {     from("direct:start").to("disruptor:next").transform(constant("OK")).     from("disruptor:next").to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          // START SNIPPET: e1         @Override         public void configure() throws Exception {             from("direct:start").to("disruptor:next").transform(constant("OK")).             from("disruptor:next").to("mock:result").         }     }. }
