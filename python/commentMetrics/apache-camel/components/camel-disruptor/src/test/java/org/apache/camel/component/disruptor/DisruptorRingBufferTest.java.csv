commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testQueue() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Hello World", "Bye World", "Goodday World", "Bar").     // Following 3 calls should all reference same Disruptor ring buffer.     template.sendBody("disruptor:foo", "Hello World").     template.sendBody("disruptor:foo?size=1024", "Bye World").     template.sendBody("disruptor:foo?concurrentConsumers=5", "Goodday World").     template.sendBody("disruptor:bar", "Bar"). }
false;public;0;6;;@Override public void configure() throws Exception {     from("disruptor:foo?concurrentConsumers=2").to("mock:result").     from("disruptor:bar").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("disruptor:foo?concurrentConsumers=2").to("mock:result").             from("disruptor:bar").to("mock:result").         }     }. }
