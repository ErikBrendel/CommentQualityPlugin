commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;12;;@Parameters public static Collection<String[]> strategies() {     final List<String[]> strategies = new ArrayList<>().     for (final DisruptorWaitStrategy waitStrategy : DisruptorWaitStrategy.values()) {         for (final DisruptorProducerType producerType : DisruptorProducerType.values()) {             strategies.add(new String[] { waitStrategy.name(), producerType.name() }).         }     }     return strategies. }
false;public;0;10;;@Test public void testProduce() throws InterruptedException {     resultEndpoint.expectedBodiesReceived(VALUE).     resultEndpoint.setExpectedMessageCount(1).     template.asyncSendBody(disruptorUri, VALUE).     resultEndpoint.await(5, TimeUnit.SECONDS).     resultEndpoint.assertIsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(disruptorUri).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     disruptorUri = "disruptor:test?waitStrategy=" + waitStrategy + "&producerType=" + producerType.     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(disruptorUri).to("mock:result").         }     }. }
