commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setUpProvider() {     Security.addProvider(new BouncyCastleProvider()). }
false;public;0;10;;@Test public void execute() throws Exception {     String message = "Testmessage".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived(message).     sendBody("direct:start", message).     assertMockEndpointsSatisfied(). }
false;protected;0;5;;protected CamelContext createCamelContext() throws Exception {     simpleReg = new SimpleRegistry().     CamelContext context = new DefaultCamelContext(simpleReg).     return context. }
false;public;0;46;;@Override public void configure() throws Exception {     context.setTracing(true).     String keystoreName = "system.jks".     KeyStoreParameters keystore = KeystoreUtil.getKeyStoreParameters(keystoreName).     DefaultKeyTransRecipientInfo recipient = new DefaultKeyTransRecipientInfo().     recipient.setCertificateAlias("rsa").     recipient.setKeyStoreParameters(keystore).     EnvelopedDataEncryptorConfiguration enConf = new EnvelopedDataEncryptorConfiguration(context).     enConf.setContentEncryptionAlgorithm("DESede/CBC/PKCS5Padding").     enConf.setRecipient(recipient).     // mandatory     enConf.setSecretKeyLength(192).     enConf.init().     EnvelopedDataEncryptor encryptor = new EnvelopedDataEncryptor(enConf).     DefaultEnvelopedDataDecryptorConfiguration conf = new DefaultEnvelopedDataDecryptorConfiguration().     conf.setKeyStoreParameters(keystore).     EnvelopedDataDecryptor decryptor = new EnvelopedDataDecryptor(conf).     DefaultSignerInfo signerInfo = new DefaultSignerInfo().     // optional default     signerInfo.setIncludeCertificates(true).     // value is true     // mandatory     signerInfo.setSignatureAlgorithm("SHA256withRSA").     signerInfo.setPrivateKeyAlias("rsa").     signerInfo.setKeyStoreParameters(keystore).     SignedDataCreatorConfiguration config = new SignedDataCreatorConfiguration(new DefaultCamelContext()).     config.setSigner(signerInfo).     // optional default value is     config.setIncludeContent(true).     // true     config.init().     SignedDataCreator signer = new SignedDataCreator(config).     DefaultSignedDataVerifierConfiguration verifierConf = new DefaultSignedDataVerifierConfiguration().     verifierConf.setKeyStoreParameters(keystore).     SignedDataVerifier verifier = new SignedDataVerifier(verifierConf).     from("direct:start").to("log:before").process(signer).process(encryptor).to("log:signed_encrypted").process(decryptor).process(verifier).convertBodyTo(String.class).to("log:after").to("mock:result"). }
false;protected;0;51;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setTracing(true).             String keystoreName = "system.jks".             KeyStoreParameters keystore = KeystoreUtil.getKeyStoreParameters(keystoreName).             DefaultKeyTransRecipientInfo recipient = new DefaultKeyTransRecipientInfo().             recipient.setCertificateAlias("rsa").             recipient.setKeyStoreParameters(keystore).             EnvelopedDataEncryptorConfiguration enConf = new EnvelopedDataEncryptorConfiguration(context).             enConf.setContentEncryptionAlgorithm("DESede/CBC/PKCS5Padding").             enConf.setRecipient(recipient).             // mandatory             enConf.setSecretKeyLength(192).             enConf.init().             EnvelopedDataEncryptor encryptor = new EnvelopedDataEncryptor(enConf).             DefaultEnvelopedDataDecryptorConfiguration conf = new DefaultEnvelopedDataDecryptorConfiguration().             conf.setKeyStoreParameters(keystore).             EnvelopedDataDecryptor decryptor = new EnvelopedDataDecryptor(conf).             DefaultSignerInfo signerInfo = new DefaultSignerInfo().             // optional default             signerInfo.setIncludeCertificates(true).             // value is true             // mandatory             signerInfo.setSignatureAlgorithm("SHA256withRSA").             signerInfo.setPrivateKeyAlias("rsa").             signerInfo.setKeyStoreParameters(keystore).             SignedDataCreatorConfiguration config = new SignedDataCreatorConfiguration(new DefaultCamelContext()).             config.setSigner(signerInfo).             // optional default value is             config.setIncludeContent(true).             // true             config.init().             SignedDataCreator signer = new SignedDataCreator(config).             DefaultSignedDataVerifierConfiguration verifierConf = new DefaultSignedDataVerifierConfiguration().             verifierConf.setKeyStoreParameters(keystore).             SignedDataVerifier verifier = new SignedDataVerifier(verifierConf).             from("direct:start").to("log:before").process(signer).process(encryptor).to("log:signed_encrypted").process(decryptor).process(verifier).convertBodyTo(String.class).to("log:after").to("mock:result").         }     }. }
