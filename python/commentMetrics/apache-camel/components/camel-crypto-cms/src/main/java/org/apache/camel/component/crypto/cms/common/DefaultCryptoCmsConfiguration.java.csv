commented;modifiers;parameterAmount;loc;comment;code
true;public;1;10;/**  * Keystore containing signer private keys, verifier public keys, encryptor  * public keys, decryptor private keys depending on the operation. Use  * either this parameter or the parameter 'keystore'.  */ ;/**  * Keystore containing signer private keys, verifier public keys, encryptor  * public keys, decryptor private keys depending on the operation. Use  * either this parameter or the parameter 'keystore'.  */ public void setKeyStoreParameters(KeyStoreParameters keyStoreParameters) throws CryptoCmsException {     this.keyStoreParameters = keyStoreParameters.     if (keyStoreParameters != null) {         try {             this.keyStore = keyStoreParameters.createKeyStore().         } catch (GeneralSecurityException | IOException e) {             throw new CryptoCmsException("Problem during generating the keystore", e).         }     } }
true;public;1;3;/**  * Keystore which contains signer private keys, verifier public keys,  * encryptor public keys, decryptor private keys depending on the operation.  * Use either this parameter or the parameter 'keyStoreParameters'.  */ ;/**  * Keystore which contains signer private keys, verifier public keys,  * encryptor public keys, decryptor private keys depending on the operation.  * Use either this parameter or the parameter 'keyStoreParameters'.  */ public void setKeyStore(KeyStore keyStore) {     this.keyStore = keyStore. }
false;protected;0;6;;protected KeyStore getKeyStore() throws CryptoCmsException {     if (keyStore == null) {         throw new CryptoCmsException("Keystore not configured").     }     return keyStore. }
false;protected;0;3;;protected KeyStoreParameters getKeyStoreParameters() {     return keyStoreParameters. }
