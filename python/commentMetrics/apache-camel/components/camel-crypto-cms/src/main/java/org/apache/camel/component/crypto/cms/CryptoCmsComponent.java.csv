commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;60;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // NOPMD     // called     // method     // setProperties     // throws     // Exception     ObjectHelper.notNull(getCamelContext(), "CamelContext").     String scheme.     String name.     try {         URI u = new URI(remaining).         scheme = u.getScheme().         name = u.getPath().     } catch (Exception e) {         throw new // NOPMD -- the stack trace does not         MalformedURLException(// help in this case.         String.format("An invalid crypto-cms uri was provided '%s'." + " Check that the uri matches the format crypto-cms:sign://<name>, crypto-cms:verify://<name>, " + "crypto-cms:encrypt://<name>, or crypto-cms:decrpyt://<name>", uri)).     }     Processor processor.     CryptoOperation operation.     if (CryptoOperation.sign.name().equals(scheme)) {         operation = CryptoOperation.sign.         SignedDataCreatorConfiguration config = new SignedDataCreatorConfiguration(getCamelContext()).         // properties must be set to config before processor is initialized         setProperties(config, parameters).         config.init().         processor = new SignedDataCreator(config).     } else if (CryptoOperation.verify.name().equals(scheme)) {         operation = CryptoOperation.verify.         SignedDataVerifierConfiguration config = getSignedDataVerifierConfiguration().copy().         // properties must be set to config before processor is initialized         setProperties(config, parameters).         processor = new SignedDataVerifierFromHeader(config).     } else if (CryptoOperation.encrypt.name().equals(scheme)) {         operation = CryptoOperation.encrypt.         EnvelopedDataEncryptorConfiguration config = new EnvelopedDataEncryptorConfiguration(getCamelContext()).         // properties must be set to config before processor is initialized         setProperties(config, parameters).         config.init().         processor = new EnvelopedDataEncryptor(config).     } else if (CryptoOperation.decrypt.name().equals(scheme)) {         operation = CryptoOperation.decrypt.         EnvelopedDataDecryptorConfiguration config = getEnvelopedDataDecryptorConfiguration().copy().         // properties must be set to config before processor is initialized         setProperties(config, parameters).         processor = new EnvelopedDataDecryptor(config).     } else {         String error = "Endpoint uri " + uri + " is wrong configured. Operation " + scheme + " is not supported. Supported operations are: sign, verify, encrypt, decrypt".         log.error(error).         throw new IllegalStateException(error).     }     CryptoCmsEndpoint endpoint = new CryptoCmsEndpoint(uri, this, processor).     endpoint.setCryptoOperation(operation).     endpoint.setName(name).     return endpoint. }
true;public;1;3;/**  * To configure the shared SignedDataVerifierConfiguration, which determines  * the uri parameters for the verify operation.  */ ;/**  * To configure the shared SignedDataVerifierConfiguration, which determines  * the uri parameters for the verify operation.  */ public void setSignedDataVerifierConfiguration(SignedDataVerifierConfiguration signedDataVerifierConfiguration) {     this.signedDataVerifierConfiguration = signedDataVerifierConfiguration. }
false;public;0;6;;public SignedDataVerifierConfiguration getSignedDataVerifierConfiguration() {     if (signedDataVerifierConfiguration == null) {         signedDataVerifierConfiguration = new DefaultSignedDataVerifierConfiguration().     }     return signedDataVerifierConfiguration. }
false;public;0;6;;public EnvelopedDataDecryptorConfiguration getEnvelopedDataDecryptorConfiguration() {     if (envelopedDataDecryptorConfiguration == null) {         envelopedDataDecryptorConfiguration = new DefaultEnvelopedDataDecryptorConfiguration().     }     return envelopedDataDecryptorConfiguration. }
true;public;1;3;/**  * To configure the shared EnvelopedDataDecryptorConfiguration, which  * determines the uri parameters for the decrypt operation.  */ ;/**  * To configure the shared EnvelopedDataDecryptorConfiguration, which  * determines the uri parameters for the decrypt operation.  */ public void setEnvelopedDataDecryptorConfiguration(EnvelopedDataDecryptorConfiguration envelopedDataDecryptorConfiguration) {     this.envelopedDataDecryptorConfiguration = envelopedDataDecryptorConfiguration. }
false;protected;0;8;;@Override protected void doStart() throws Exception {     // NOPMD     if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {         log.debug("Adding BouncyCastleProvider as security provider").         Security.addProvider(new BouncyCastleProvider()).     }     super.doStart(). }
