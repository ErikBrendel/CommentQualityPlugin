commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Boolean getIncludeContent() {     return includeContent. }
true;public;1;3;/**  * Indicates whether the signed content should be included into the Signed  * Data instance. If false then a detached Signed Data instance is created  * in the header CamelCryptoCmsSignedData.  */ ;/**  * Indicates whether the signed content should be included into the Signed  * Data instance. If false then a detached Signed Data instance is created  * in the header CamelCryptoCmsSignedData.  */ public void setIncludeContent(Boolean includeContent) {     this.includeContent = includeContent. }
false;public;0;3;;public List<SignerInfo> getSigner() {     return signer. }
false;public;1;3;;public void setSigner(SignerInfo signer) {     this.signer.add(signer). }
true;public;1;18;// for multi values ;// for multi values public void setSigner(List<?> signers) {     if (signers == null) {         return.     }     for (Object signerOb : signers) {         if (signerOb instanceof String) {             String signerName = (String) signerOb.             String valueNoHash = signerName.replaceAll("#", "").             if (getContext() != null && signerName != null) {                 SignerInfo signer = getContext().getRegistry().lookupByNameAndType(valueNoHash, SignerInfo.class).                 if (signer != null) {                     setSigner(signer).                 }             }         }     } }
false;public;0;7;;public void init() throws CryptoCmsException {     if (signer.isEmpty()) {         logErrorAndThrow(LOG, "No signer set.").     } }
