commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;17;;@Override protected void setBodyAndHeader(Message out, Object encodedSignedData) {     if (config.getIncludeContent()) {         /*              * The encodedSignedData object contains the signer infos including              * the message content.              */         out.setBody(encodedSignedData).     } else {         /*              * The encodedSignedData object contains only the signer infos              * (without the message content). As the message body is not changed              * in this case and is passed through              */         out.setHeader(CryptoCmsConstants.CAMEL_CRYPTO_CMS_SIGNED_DATA, encodedSignedData).     } }
false;protected;3;55;;@Override protected void marshalInternal(InputStream is, OutputStream os, Exchange exchange) throws Exception {     CMSSignedDataStreamGenerator gen = new CMSSignedDataStreamGenerator().     if (config.getSigner().isEmpty()) {         throw new CryptoCmsException("No signer information configured").     }     for (SignerInfo signer : config.getSigner()) {         // these certificates are sent within the signature         LOG.debug("Signer info: {}", signer).         X509Certificate signerCert = signer.getCertificate(exchange).         if (signerCert == null) {             throw new CryptoCmsException("Certificate missing in the singer information " + signer).         }         PrivateKey key = signer.getPrivateKey(exchange).         if (key == null) {             throw new CryptoCmsException("Private key missing in the singer information " + signer).         }         ContentSigner contentSigner.         try {             contentSigner = new JcaContentSignerBuilder(signer.getSignatureAlgorithm(exchange)).setProvider(BouncyCastleProvider.PROVIDER_NAME).build(key).         } catch (OperatorCreationException e) {             throw new CryptoCmsInvalidKeyException("The private key of the signer information  '" + signer + "' does not fit to the specified signature algorithm '" + signer.getSignatureAlgorithm(exchange) + "': " + e.getMessage(), e).         }         JcaSignerInfoGeneratorBuilder signerBuilder = new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(BouncyCastleProvider.PROVIDER_NAME).build()).         signerBuilder.setSignedAttributeGenerator(signer.getSignedAttributeGenerator(exchange)).setUnsignedAttributeGenerator(signer.getUnsignedAttributeGenerator(exchange)).         gen.addSignerInfoGenerator(signerBuilder.build(contentSigner, signerCert)).         List<Certificate> certificateList = new ArrayList<>().         for (Certificate cert : signer.getCertificateChain(exchange)) {             if (!certificateList.contains(cert)) {                 certificateList.add(cert).                 gen.addCertificate(new X509CertificateHolder(cert.getEncoded())).                 LOG.debug("Certificate added to Signed Data certificate list: {}", cert).             }         }     }     OutputStream sigOut = gen.open(os, config.getIncludeContent()).     try {         IOHelper.copyAndCloseInput(is, sigOut).     } finally {         IOHelper.close(sigOut).     }     LOG.debug("CMS Signed Data generation successful"). }
