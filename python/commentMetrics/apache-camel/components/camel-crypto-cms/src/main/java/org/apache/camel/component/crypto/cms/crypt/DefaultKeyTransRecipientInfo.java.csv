commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;protected String getCertificateAlias() throws CryptoCmsException {     if (certificateAlias == null) {         throw new CryptoCmsException("Certificate alias not configured in recipient " + this).     }     return certificateAlias. }
true;public;1;3;/**  * Keytstore alias for looking up the X.509 certificate whose public key is  * used to encrypt the secret symmetric encryption key.  *  * @param certificateAlias alias  */ ;/**  * Keytstore alias for looking up the X.509 certificate whose public key is  * used to encrypt the secret symmetric encryption key.  *  * @param certificateAlias alias  */ public void setCertificateAlias(String certificateAlias) {     this.certificateAlias = certificateAlias. }
false;public;0;3;;// /** // * Encryption Algorithm used for encrypting the secret key in // * {@link CmsEnvelopedDataEncryptor}. // * // * @param keyEncryptionAlgorithm algorithm, for example "RSA" // */ // public void setKeyEncryptionAlgorithm(String keyEncryptionAlgorithm) { // this.keyEncryptionAlgorithm = keyEncryptionAlgorithm. // } public String toString() {     return "certificate alias=" + certificateAlias + ", key encryption algorithm=" + keyEncryptionAlgorithm. }
true;public;1;4;/**  * Currently, the key encryption algorithm is fixed to "RSA".  */ ;/**  * Currently, the key encryption algorithm is fixed to "RSA".  */ @Override public String getKeyEncryptionAlgorithm(Exchange exchange) throws CryptoCmsException {     return keyEncryptionAlgorithm. }
false;public;1;14;;@Override public X509Certificate getCertificate(Exchange exchange) throws CryptoCmsException {     String alias = getCertificateAlias().     Certificate cert.     try {         cert = getKeyStore().getCertificate(alias).     } catch (KeyStoreException e) {         throw new CryptoCmsException("Problem during reading the certificate with the alias '" + alias + "' from the keystore of the recipient " + this).     }     if (cert instanceof X509Certificate) {         return (X509Certificate) cert.     }     throw new CryptoCmsNoKeyOrCertificateForAliasException("No X509 certificate found for the alias '" + alias + "' in the keystore of the recipient " + this). }
