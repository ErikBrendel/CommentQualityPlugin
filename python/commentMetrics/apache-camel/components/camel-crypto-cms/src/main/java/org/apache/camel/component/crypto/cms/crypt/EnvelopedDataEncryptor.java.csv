commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;58;;@Override protected void marshalInternal(InputStream is, OutputStream os, Exchange exchange) throws Exception {     LOG.debug("Content encryption algorithm: {}", conf.getAlgorithmID()).     LOG.debug("Parameter secretKeyLength: {}", conf.getSecretKeyLength()).     OutputStream encryptingStream = null.     try {         CMSEnvelopedDataStreamGenerator gen = new CMSEnvelopedDataStreamGenerator().         OriginatorInformationProvider originatorInformationProvider = conf.getOriginatorInformationProvider().         if (originatorInformationProvider != null) {             LOG.debug("originatorInformationProvider found").             OriginatorInformation originatorInformation = originatorInformationProvider.getOriginatorInformation(exchange).             if (originatorInformation != null) {                 LOG.debug("originatorInformation found").                 gen.setOriginatorInfo(originatorInformation).             }         }         AttributesGeneratorProvider attributeGeneratorProvider = conf.getUnprotectedAttributesGeneratorProvider().         if (attributeGeneratorProvider != null) {             LOG.debug("attributeGeneratorProvider found").             gen.setUnprotectedAttributeGenerator(attributeGeneratorProvider.getAttributesGenerator(exchange)).         }         if (conf.getRecipient().isEmpty()) {             throw new CryptoCmsException("No recipient configured.").         }         for (RecipientInfo recipientInfo : conf.getRecipient()) {             // currently we only support key transport alternative, in             // future there maybe others             TransRecipientInfo keyTransrecipientInfo = (TransRecipientInfo) recipientInfo.             LOG.debug("Recipient info: {}", keyTransrecipientInfo).             X509Certificate encryptCert = keyTransrecipientInfo.getCertificate(exchange).             LOG.debug("Encryption certificate for recipient with '{}' : {}", keyTransrecipientInfo, encryptCert).             AlgorithmIdentifier keyEncryptionAlgorithm = determineKeyEncryptionAlgorithmIdentifier(keyTransrecipientInfo.getKeyEncryptionAlgorithm(exchange), keyTransrecipientInfo).             JceKeyTransRecipientInfoGenerator keyTransRecipeintInfoGen = new JceKeyTransRecipientInfoGenerator(encryptCert, keyEncryptionAlgorithm).             keyTransRecipeintInfoGen.setProvider(BouncyCastleProvider.PROVIDER_NAME).             gen.addRecipientInfoGenerator(keyTransRecipeintInfoGen).         }         OutputEncryptor encryptor = new JceCMSContentEncryptorBuilder(conf.getAlgorithmID()).setProvider(BouncyCastleProvider.PROVIDER_NAME).build().         encryptingStream = gen.open(os, encryptor).         IOHelper.copy(is, encryptingStream).         LOG.debug("CMS Enveloped Data creation successful").     } finally {         IOHelper.close(is).         IOHelper.close(encryptingStream).     } }
false;private;2;10;;private AlgorithmIdentifier determineKeyEncryptionAlgorithmIdentifier(String keyEncryptionAlgorithm, TransRecipientInfo keyTransRecipient) throws CryptoCmsException {     if (keyEncryptionAlgorithm == null) {         throw new CryptoCmsException("Key encryption algorithm  of recipient info '" + keyTransRecipient + "' is missing").     }     if ("RSA".equals(keyEncryptionAlgorithm)) {         return new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption).     }     throw new CryptoCmsException("Key encryption algorithm '" + keyEncryptionAlgorithm + "' of recipient info '" + keyTransRecipient + "' is not supported"). }
