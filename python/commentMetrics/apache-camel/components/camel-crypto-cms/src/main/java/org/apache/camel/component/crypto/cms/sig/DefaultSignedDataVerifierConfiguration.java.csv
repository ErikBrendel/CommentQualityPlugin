commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Indicates whether the value in the header CamelCryptoCmsSignedData is  * base64 encoded. Default value is <code>false</code>.  * <p>  * Only relevant for detached signatures. In the detached signature case,  * the header contains the Signed Data object.  */ ;/**  * Indicates whether the value in the header CamelCryptoCmsSignedData is  * base64 encoded. Default value is <code>false</code>.  * <p>  * Only relevant for detached signatures. In the detached signature case,  * the header contains the Signed Data object.  */ public void setSignedDataHeaderBase64(Boolean signedDataHeaderBase64) {     this.signedDataHeaderBase64 = signedDataHeaderBase64. }
false;public;1;4;;@Override public Boolean isSignedDataHeaderBase64(Exchange exchange) throws CryptoCmsException {     return signedDataHeaderBase64. }
true;public;1;3;/**  * If <code>true</code> then the signatures of all signers contained in the  * Signed Data object are verified. If <code>false</code> then only one  * signature whose signer info matches with one of the specified  * certificates is verified. Default value is <code>true</code>.  */ ;/**  * If <code>true</code> then the signatures of all signers contained in the  * Signed Data object are verified. If <code>false</code> then only one  * signature whose signer info matches with one of the specified  * certificates is verified. Default value is <code>true</code>.  */ public void setVerifySignaturesOfAllSigners(Boolean verifySignaturesOfAllSigners) {     this.verifySignaturesOfAllSigners = verifySignaturesOfAllSigners. }
false;public;1;4;;@Override public Boolean isVerifySignaturesOfAllSigners(Exchange exchange) throws CryptoCmsException {     return verifySignaturesOfAllSigners. }
false;public;1;17;;@Override public Collection<X509Certificate> getCertificates(Exchange exchange) throws CryptoCmsException {     KeyStore keystore = getKeyStore().     try {         List<X509Certificate> certs = new ArrayList<>(keystore.size()).         for (Enumeration<String> aliases = keystore.aliases(). aliases.hasMoreElements(). ) {             String alias = aliases.nextElement().             Certificate cert = keystore.getCertificate(alias).             if (cert instanceof X509Certificate) {                 certs.add((X509Certificate) cert).             }         }         return certs.     } catch (KeyStoreException e) {         throw new CryptoCmsException("Problem during reading the certificates of the verifier keystore").     } }
false;public;0;7;;public DefaultSignedDataVerifierConfiguration copy() {     try {         return (DefaultSignedDataVerifierConfiguration) clone().     } catch (CloneNotSupportedException e) {         // should never happen         throw new RuntimeCamelException(e).     } }
