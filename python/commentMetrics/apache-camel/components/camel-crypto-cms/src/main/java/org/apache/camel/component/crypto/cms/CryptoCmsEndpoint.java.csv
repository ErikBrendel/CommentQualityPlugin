commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
true;public;1;3;/**  * Set the Crypto operation from that supplied after the crypto scheme in  * the endpoint uri e.g. crypto-cms:sign sets sign as the operation.  * Possible values: "sign", "verify", "encrypt", or "decrypt".  */ ;/**  * Set the Crypto operation from that supplied after the crypto scheme in  * the endpoint uri e.g. crypto-cms:sign sets sign as the operation.  * Possible values: "sign", "verify", "encrypt", or "decrypt".  */ public void setCryptoOperation(String operation) {     this.cryptoOperation = CryptoOperation.valueOf(operation). }
false;public;1;3;;public void setCryptoOperation(CryptoOperation operation) {     this.cryptoOperation = operation. }
true;public;0;3;/**  * Gets the Crypto operation that was supplied in the crypto scheme in  * the endpoint uri  */ ;/**  * Gets the Crypto operation that was supplied in the crypto scheme in  * the endpoint uri  */ public CryptoOperation getCryptoOperation() {     return cryptoOperation. }
true;public;1;3;/**  * The name part in the URI can be chosen by the user to distinguish between  * different signer/verifier/encryptor/decryptor endpoints within the camel  * context.  */ ;/**  * The name part in the URI can be chosen by the user to distinguish between  * different signer/verifier/encryptor/decryptor endpoints within the camel  * context.  */ public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public Producer createProducer() {     return new CryptoCmsProducer(this, processor). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) {     throw new UnsupportedOperationException("Crypto CMS endpoints are not meant to be consumed from. They are meant be used as intermediate endpoints"). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;1;3;;public Object getManagedObject(CryptoCmsEndpoint endpoint) {     return this. }
