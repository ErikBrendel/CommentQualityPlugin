commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Sets the password of the private keys. It is assumed that all private  * keys in the keystore have the same password. If not set then it is  * assumed that the password of the private keys is given by the keystore  * password given in the {@link KeyStoreParameters}.  */ ;/**  * Sets the password of the private keys. It is assumed that all private  * keys in the keystore have the same password. If not set then it is  * assumed that the password of the private keys is given by the keystore  * password given in the {@link KeyStoreParameters}.  */ public void setPassword(char[] password) {     this.password = password. }
false;protected;1;17;;protected char[] getPassword(Exchange exchange) throws CryptoCmsException {     if (password == null) {         if (getKeyStoreParameters() != null) {             String passwordS = getKeyStoreParameters().getPassword().             if (passwordS == null) {                 throw new CryptoCmsException("Password for private keys not configured").             } else {                 return passwordS.toCharArray().             }         } else {             throw new CryptoCmsException("Password for private keys not configured").         }     } else {         return password.     } }
false;public;1;30;;@Override public Collection<PrivateKeyWithCertificate> getPrivateKeyCertificateCollection(Exchange exchange) throws CryptoCmsException {     KeyStore keystore = getKeyStore().     try {         List<PrivateKeyWithCertificate> privateKeys = new ArrayList<>(keystore.size()).         for (Enumeration<String> aliases = keystore.aliases(). aliases.hasMoreElements(). ) {             String alias = aliases.nextElement().             if (!keystore.isKeyEntry(alias)) {                 // only key entries are relevant!                 continue.             }             Key privateKey = keystore.getKey(alias, getPassword(exchange)).             if (privateKey instanceof PrivateKey) {                 // we currently only                 // support                 // assymmetric keys                 Certificate cert = keystore.getCertificate(alias).                 if (cert instanceof X509Certificate) {                     privateKeys.add(new PrivateKeyWithCertificate((PrivateKey) privateKey, (X509Certificate) cert)).                 }             }         }         if (privateKeys.isEmpty()) {             throw new CryptoCmsException("No private keys in keystore found. Check your configuration.").         }         return privateKeys.     } catch (KeyStoreException | UnrecoverableKeyException | NoSuchAlgorithmException e) {         throw new CryptoCmsException("Problem during reading the private keys from the keystore", e).     } }
false;public;0;7;;public DefaultEnvelopedDataDecryptorConfiguration copy() {     try {         return (DefaultEnvelopedDataDecryptorConfiguration) clone().     } catch (CloneNotSupportedException e) {         // should never happen         throw new RuntimeCamelException(e).     } }
