commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;@Override public void process(Exchange exchange) throws Exception {     // NOPMD see     // method     // processSignedDataHader     InputStream signature = exchange.getIn().getHeader(CryptoCmsConstants.CAMEL_CRYPTO_CMS_SIGNED_DATA, InputStream.class).     if (signature == null) {         LOG.debug("No signed data found in header {}. Assuming signed data contained in message body", CryptoCmsConstants.CAMEL_CRYPTO_CMS_SIGNED_DATA).         super.process(exchange).     } else {         LOG.debug("Signed data header {} found.", CryptoCmsConstants.CAMEL_CRYPTO_CMS_SIGNED_DATA).         processSignedDataHeader(exchange, signature).         // remove header         exchange.getIn().removeHeader(CryptoCmsConstants.CAMEL_CRYPTO_CMS_SIGNED_DATA).     } }
false;protected;2;26;;protected void processSignedDataHeader(Exchange exchange, InputStream signature) throws Exception {     // clean-up, see code below     if (conf.isSignedDataHeaderBase64(exchange)) {         signature = new Base64InputStream(signature).     }     InputStream stream = exchange.getIn().getMandatoryBody(InputStream.class).     try {         // lets setup the out message before we invoke the dataFormat         // so that it can mutate it if necessary         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         if (conf.isFromBase64(exchange)) {             stream = new Base64InputStream(stream).         }         unmarshalInternal(stream, signature, exchange).     } catch (Exception e) {         // remove OUT message, as an exception occurred         exchange.setOut(null).         throw e.     } finally {         IOHelper.close(stream, "input stream").     } }
false;protected;3;21;;protected void unmarshalInternal(InputStream is, InputStream signature, Exchange exchange) throws Exception {     CMSSignedDataParser sp.     try {         sp = new CMSSignedDataParser(new JcaDigestCalculatorProviderBuilder().setProvider(BouncyCastleProvider.PROVIDER_NAME).build(), new CMSTypedStream(is), signature).     } catch (CMSException e) {         throw new CryptoCmsFormatException(getFormatErrorMessage(), e).     }     try {         // content must be read in order to calculate the hash for the         // signature         sp.getSignedContent().drain().     } catch (NullPointerException e) {         // when the signed content is missing         throw getContentMissingException(e).     }     LOG.debug("Signed data found").     debugLog(sp).     verify(sp, exchange). }
