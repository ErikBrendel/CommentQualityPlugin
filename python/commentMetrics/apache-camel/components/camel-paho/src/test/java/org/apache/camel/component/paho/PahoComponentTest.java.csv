commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return false. }
false;public;0;8;;@Override public void doPreSetup() throws Exception {     super.doPreSetup().     broker = new BrokerService().     broker.setPersistent(false).     broker.addConnector("mqtt://localhost:" + mqttPort).     broker.start(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     super.tearDown().     broker.stop(). }
false;public;0;17;;@Override public void configure() throws Exception {     PahoComponent customizedPaho = new PahoComponent().     context.addComponent("customizedPaho", customizedPaho).     from("direct:test").to("paho:queue?brokerUrl=tcp://localhost:" + mqttPort).     from("paho:queue?brokerUrl=tcp://localhost:" + mqttPort).to("mock:test").     from("direct:test2").to("paho:queue?brokerUrl=tcp://localhost:" + mqttPort).     from("paho:persistenceTest?persistence=FILE&brokerUrl=tcp://localhost:" + mqttPort).to("mock:persistenceTest").     from("direct:connectOptions").to("paho:registryConnectOptions?connectOptions=#connectOptions&brokerUrl=tcp://localhost:" + mqttPort).     from("direct:testCustomizedPaho").to("customizedPaho:testCustomizedPaho?brokerUrl=tcp://localhost:" + mqttPort).     from("paho:testCustomizedPaho?brokerUrl=tcp://localhost:" + mqttPort).to("mock:testCustomizedPaho"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             PahoComponent customizedPaho = new PahoComponent().             context.addComponent("customizedPaho", customizedPaho).             from("direct:test").to("paho:queue?brokerUrl=tcp://localhost:" + mqttPort).             from("paho:queue?brokerUrl=tcp://localhost:" + mqttPort).to("mock:test").             from("direct:test2").to("paho:queue?brokerUrl=tcp://localhost:" + mqttPort).             from("paho:persistenceTest?persistence=FILE&brokerUrl=tcp://localhost:" + mqttPort).to("mock:persistenceTest").             from("direct:connectOptions").to("paho:registryConnectOptions?connectOptions=#connectOptions&brokerUrl=tcp://localhost:" + mqttPort).             from("direct:testCustomizedPaho").to("customizedPaho:testCustomizedPaho?brokerUrl=tcp://localhost:" + mqttPort).             from("paho:testCustomizedPaho?brokerUrl=tcp://localhost:" + mqttPort).to("mock:testCustomizedPaho").         }     }. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("connectOptions", connectOptions).     return registry. }
false;public;0;17;;// Tests @Test public void checkOptions() {     String uri = "paho:/test/topic" + "?clientId=sampleClient" + "&brokerUrl=tcp://localhost:" + mqttPort + "&qos=2" + "&persistence=file".     PahoEndpoint endpoint = getMandatoryEndpoint(uri, PahoEndpoint.class).     // Then     assertEquals("/test/topic", endpoint.getTopic()).     assertEquals("sampleClient", endpoint.getClientId()).     assertEquals("tcp://localhost:" + mqttPort, endpoint.getBrokerUrl()).     assertEquals(2, endpoint.getQos()).     assertEquals(PahoPersistence.FILE, endpoint.getPersistence()). }
false;public;0;12;;@Test public void shouldReadMessageFromMqtt() throws InterruptedException {     // Given     String msg = "msg".     mock.expectedBodiesReceived(msg).     // When     template.sendBody("direct:test", msg).     // Then     mock.assertIsSatisfied(). }
false;public;0;11;;@Test public void shouldNotReadMessageFromUnregisteredTopic() throws InterruptedException {     // Given     mock.expectedMessageCount(0).     // When     template.sendBody("paho:someRandomQueue?brokerUrl=tcp://localhost:" + mqttPort, "msg").     // Then     mock.assertIsSatisfied(). }
false;public;0;10;;@Test public void shouldUseConnectionOptionsFromRegistry() {     // Given     PahoEndpoint pahoWithConnectOptionsFromRegistry = getMandatoryEndpoint("paho:registryConnectOptions?connectOptions=#connectOptions&brokerUrl=tcp://localhost:" + mqttPort, PahoEndpoint.class).     // Then     assertSame(connectOptions, pahoWithConnectOptionsFromRegistry.resolveMqttConnectOptions()). }
false;public;0;10;;@Test public void shouldAutomaticallyUseConnectionOptionsFromRegistry() {     // Given     PahoEndpoint pahoWithConnectOptionsFromRegistry = getMandatoryEndpoint("paho:registryConnectOptions?brokerUrl=tcp://localhost:" + mqttPort, PahoEndpoint.class).     // Then     assertSame(connectOptions, pahoWithConnectOptionsFromRegistry.resolveMqttConnectOptions()). }
false;public;0;18;;@Test public void shouldKeepDefaultMessageInHeader() throws InterruptedException, UnsupportedEncodingException {     // Given     final String msg = "msg".     mock.expectedBodiesReceived(msg).     // When     template.sendBody("direct:test", msg).     // Then     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     String payload = new String((byte[]) exchange.getIn().getBody(), "utf-8").     assertEquals("queue", exchange.getIn().getHeader(PahoConstants.MQTT_TOPIC)).     assertEquals(msg, payload). }
false;public;0;17;;@Test public void shouldKeepOriginalMessageInHeader() throws InterruptedException {     // Given     final String msg = "msg".     mock.expectedBodiesReceived(msg).     // When     template.sendBody("direct:test2", msg).     // Then     mock.assertIsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     MqttMessage message = exchange.getIn(PahoMessage.class).getMqttMessage().     assertNotNull(message).     assertEquals(msg, new String(message.getPayload())). }
false;public;0;12;;@Test public void shouldReadMessageFromCustomizedComponent() throws InterruptedException {     // Given     String msg = "msg".     testCustomizedPahoMock.expectedBodiesReceived(msg).     // When     template.sendBody("direct:testCustomizedPaho", msg).     // Then     testCustomizedPahoMock.assertIsSatisfied(). }
false;public;0;11;;@Test public void shouldNotSendMessageAuthIsNotValid() throws InterruptedException {     // Given     mock.expectedMessageCount(0).     // When     template.sendBody("paho:someRandomQueue?brokerUrl=tcp://localhost:" + mqttPort + "&userName=test&password=test", "msg").     // Then     mock.assertIsSatisfied(). }
