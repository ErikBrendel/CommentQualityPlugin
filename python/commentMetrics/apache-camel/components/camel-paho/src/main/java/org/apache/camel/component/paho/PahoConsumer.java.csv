commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public void connectComplete(boolean reconnect, String serverURI) {     if (reconnect) {         try {             getEndpoint().getClient().subscribe(topic, getEndpoint().getQos()).         } catch (MqttException e) {             log.error("MQTT resubscribe failed {}", e.getMessage(), e).         }     } }
false;public;1;4;;@Override public void connectionLost(Throwable cause) {     log.debug("MQTT broker connection lost due {}", cause.getMessage(), cause). }
false;public;1;4;;@Override public void done(boolean doneSync) { // noop }
false;public;2;12;;@Override public void messageArrived(String topic, MqttMessage message) throws Exception {     log.debug("Message arrived on topic: {} -> {}", topic, message).     Exchange exchange = getEndpoint().createExchange(message, topic).     getAsyncProcessor().process(exchange, new AsyncCallback() {          @Override         public void done(boolean doneSync) {         // noop         }     }). }
false;public;1;4;;@Override public void deliveryComplete(IMqttDeliveryToken token) {     log.debug("Delivery complete. Token: {}", token). }
false;protected;0;42;;@Override protected void doStart() throws Exception {     super.doStart().     String topic = getEndpoint().getTopic().     getEndpoint().getClient().subscribe(topic, getEndpoint().getQos()).     getEndpoint().getClient().setCallback(new MqttCallbackExtended() {          @Override         public void connectComplete(boolean reconnect, String serverURI) {             if (reconnect) {                 try {                     getEndpoint().getClient().subscribe(topic, getEndpoint().getQos()).                 } catch (MqttException e) {                     log.error("MQTT resubscribe failed {}", e.getMessage(), e).                 }             }         }          @Override         public void connectionLost(Throwable cause) {             log.debug("MQTT broker connection lost due {}", cause.getMessage(), cause).         }          @Override         public void messageArrived(String topic, MqttMessage message) throws Exception {             log.debug("Message arrived on topic: {} -> {}", topic, message).             Exchange exchange = getEndpoint().createExchange(message, topic).             getAsyncProcessor().process(exchange, new AsyncCallback() {                  @Override                 public void done(boolean doneSync) {                 // noop                 }             }).         }          @Override         public void deliveryComplete(IMqttDeliveryToken token) {             log.debug("Delivery complete. Token: {}", token).         }     }). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     super.doStop().     if (getEndpoint().getClient().isConnected()) {         String topic = getEndpoint().getTopic().         getEndpoint().getClient().unsubscribe(topic).     } }
false;public;0;4;;@Override public PahoEndpoint getEndpoint() {     return (PahoEndpoint) super.getEndpoint(). }
