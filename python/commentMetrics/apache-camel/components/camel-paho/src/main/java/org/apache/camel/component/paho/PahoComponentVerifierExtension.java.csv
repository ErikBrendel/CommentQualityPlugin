commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;// ********************************* // Parameters validation // ********************************* @Override protected Result verifyParameters(Map<String, Object> parameters) {     return ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.PARAMETERS).error(ResultErrorHelper.requiresOption("brokerUrl", parameters)).build(). }
false;protected;1;6;;// ********************************* // Connectivity validation // ********************************* @Override protected Result verifyConnectivity(Map<String, Object> parameters) {     return ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.CONNECTIVITY).error(parameters, this::verifyCredentials).build(). }
false;private;2;35;;private void verifyCredentials(ResultBuilder builder, Map<String, Object> parameters) {     String brokerUrl = (String) parameters.get("brokerUrl").     String username = (String) parameters.get("userName").     String password = (String) parameters.get("password").     if (ObjectHelper.isNotEmpty(brokerUrl)) {         try {             // Create MQTT client             if (ObjectHelper.isEmpty(username) && ObjectHelper.isEmpty(password)) {                 MqttClient client = new MqttClient(brokerUrl, MqttClient.generateClientId()).                 client.connect().                 client.disconnect().             } else {                 MqttClient client = new MqttClient(brokerUrl, MqttClient.generateClientId()).                 MqttConnectOptions connOpts = new MqttConnectOptions().                 connOpts.setUserName(username).                 connOpts.setPassword(password.toCharArray()).                 client.connect(connOpts).                 client.disconnect().             }         } catch (MqttException e) {             builder.error(ResultErrorBuilder.withCodeAndDescription(VerificationError.StandardCode.ILLEGAL_PARAMETER_VALUE, "Unable to connect to MQTT broker").parameterKey("brokerUrl").build()).         }     } else {         builder.error(ResultErrorBuilder.withCodeAndDescription(VerificationError.StandardCode.ILLEGAL_PARAMETER_VALUE, "Invalid blank MQTT brokerUrl ").parameterKey("brokerUrl").build()).     } }
