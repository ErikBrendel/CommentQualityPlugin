commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     Dataset<Row> dataFrame = resolveDataFrame(exchange).     DataFrameCallback dataFrameCallback = resolveDataFrameCallback(exchange).     Object body = exchange.getIn().getBody().     Object result = body instanceof List ? dataFrameCallback.onDataFrame(dataFrame, ((List) body).toArray(new Object[0])) : dataFrameCallback.onDataFrame(dataFrame, body).     collectResults(exchange, result). }
false;public;0;4;;@Override public SparkEndpoint getEndpoint() {     return (SparkEndpoint) super.getEndpoint(). }
false;protected;2;13;;// Helpers protected void collectResults(Exchange exchange, Object result) {     if (result instanceof JavaRDD) {         JavaRDD rddResults = (JavaRDD) result.         if (getEndpoint().isCollect()) {             exchange.getIn().setBody(rddResults.collect()).         } else {             exchange.getIn().setBody(result).             exchange.getIn().setHeader(SPARK_RDD_HEADER, result).         }     } else {         exchange.getIn().setBody(result).     } }
false;protected;1;9;;protected Dataset<Row> resolveDataFrame(Exchange exchange) {     if (exchange.getIn().getHeader(SPARK_DATAFRAME_HEADER) != null) {         return (Dataset<Row>) exchange.getIn().getHeader(SPARK_DATAFRAME_HEADER).     } else if (getEndpoint().getDataFrame() != null) {         return getEndpoint().getDataFrame().     } else {         throw new IllegalStateException("No Data Frame defined.").     } }
false;protected;1;9;;protected DataFrameCallback resolveDataFrameCallback(Exchange exchange) {     if (exchange.getIn().getHeader(SPARK_DATAFRAME_CALLBACK_HEADER) != null) {         return (DataFrameCallback) exchange.getIn().getHeader(SPARK_DATAFRAME_CALLBACK_HEADER).     } else if (getEndpoint().getDataFrameCallback() != null) {         return getEndpoint().getDataFrameCallback().     } else {         throw new IllegalStateException("Cannot resolve Data Frame.").     } }
