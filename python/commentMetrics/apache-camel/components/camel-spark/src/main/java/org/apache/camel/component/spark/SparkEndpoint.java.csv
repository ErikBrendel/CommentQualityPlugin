commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;// Life-cycle @Override protected void doStart() throws Exception {     super.doStart().     if (rdd == null) {         rdd = getComponent().getRdd().     }     if (rddCallback == null) {         rddCallback = getComponent().getRddCallback().     } }
false;public;0;14;;// Overridden @Override public Producer createProducer() throws Exception {     LOG.trace("Creating {} Spark producer.", endpointType).     if (endpointType == EndpointType.rdd) {         LOG.trace("About to create RDD producer.").         return new RddSparkProducer(this).     } else if (endpointType == EndpointType.dataframe) {         LOG.trace("About to create DataFrame producer.").         return new DataFrameSparkProducer(this).     } else {         LOG.trace("About to create Hive producer.").         return new HiveSparkProducer(this).     } }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Spark component supports producer endpoints only."). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;// Setters & getters @Override public SparkComponent getComponent() {     return (SparkComponent) super.getComponent(). }
false;public;0;3;;public EndpointType getEndpointType() {     return endpointType. }
true;public;1;3;/**  * Type of the endpoint (rdd, dataframe, hive).  */ ;/**  * Type of the endpoint (rdd, dataframe, hive).  */ public void setEndpointType(EndpointType endpointType) {     this.endpointType = endpointType. }
false;public;0;3;;public JavaRDDLike getRdd() {     return rdd. }
true;public;1;3;/**  * RDD to compute against.  */ ;/**  * RDD to compute against.  */ public void setRdd(JavaRDDLike rdd) {     this.rdd = rdd. }
false;public;0;3;;public RddCallback getRddCallback() {     return rddCallback. }
true;public;1;3;/**  * Function performing action against an RDD.  */ ;/**  * Function performing action against an RDD.  */ public void setRddCallback(RddCallback rddCallback) {     this.rddCallback = rddCallback. }
false;public;0;3;;public Dataset<Row> getDataFrame() {     return dataFrame. }
true;public;1;3;/**  * DataFrame to compute against.  */ ;/**  * DataFrame to compute against.  */ public void setDataFrame(Dataset<Row> dataFrame) {     this.dataFrame = dataFrame. }
false;public;0;3;;public DataFrameCallback getDataFrameCallback() {     return dataFrameCallback. }
true;public;1;3;/**  * Function performing action against an DataFrame.  */ ;/**  * Function performing action against an DataFrame.  */ public void setDataFrameCallback(DataFrameCallback dataFrameCallback) {     this.dataFrameCallback = dataFrameCallback. }
false;public;0;3;;public boolean isCollect() {     return collect. }
true;public;1;3;/**  * Indicates if results should be collected or counted.  */ ;/**  * Indicates if results should be collected or counted.  */ public void setCollect(boolean collect) {     this.collect = collect. }
