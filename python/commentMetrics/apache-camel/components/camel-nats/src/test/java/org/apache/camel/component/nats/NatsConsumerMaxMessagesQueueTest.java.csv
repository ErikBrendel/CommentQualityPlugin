commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testMaxConsumer() throws InterruptedException, IOException {     mockResultEndpoint.setExpectedMessageCount(2).     template.sendBody("direct:send", "test").     template.sendBody("direct:send", "test1").     mockResultEndpoint.assertIsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:send").to("nats://" + getNatsUrl() + "?topic=test").     from("nats://" + getNatsUrl() + "?topic=test&maxMessages=5&queueName=test").routeId("cons1").to(mockResultEndpoint).     from("nats://" + getNatsUrl() + "?topic=test&maxMessages=6&queueName=test").routeId("cons2").to(mockResultEndpoint). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:send").to("nats://" + getNatsUrl() + "?topic=test").             from("nats://" + getNatsUrl() + "?topic=test&maxMessages=5&queueName=test").routeId("cons1").to(mockResultEndpoint).             from("nats://" + getNatsUrl() + "?topic=test&maxMessages=6&queueName=test").routeId("cons2").to(mockResultEndpoint).         }     }. }
