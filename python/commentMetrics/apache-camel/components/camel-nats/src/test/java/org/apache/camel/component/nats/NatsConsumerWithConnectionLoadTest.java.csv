commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testLoadConsumer() throws InterruptedException, IOException, TimeoutException {     mockResultEndpoint.setExpectedMessageCount(100).     mockResultEndpoint1.setExpectedMessageCount(0).     Options options = new Options.Builder().server("nats://" + getNatsUrl()).build().     Connection connection = Nats.connect(options).     for (int i = 0. i < 100. i++) {         connection.publish("test", ("test" + i).getBytes()).     }     mockResultEndpoint.assertIsSatisfied().     mockResultEndpoint1.assertIsSatisfied(). }
false;protected;0;11;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     Builder options = new Options.Builder().     options.server("nats://" + getNatsUrl()).     connection = Nats.connect(options.build()).     registry.bind("connection", connection).     return registry. }
false;public;0;5;;@Override public void configure() throws Exception {     from("nats://thisismytest?topic=test&connection=#connection").to(mockResultEndpoint).     from("nats://thisismytest?topic=test1&connection=#connection").to(mockResultEndpoint1). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("nats://thisismytest?topic=test&connection=#connection").to(mockResultEndpoint).             from("nats://thisismytest?topic=test1&connection=#connection").to(mockResultEndpoint1).         }     }. }
