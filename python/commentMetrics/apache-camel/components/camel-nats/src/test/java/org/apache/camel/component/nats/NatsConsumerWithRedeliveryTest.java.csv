commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testConsumer() throws InterruptedException, IOException {     mockResultEndpoint.setExpectedMessageCount(1).     mockResultEndpoint.setAssertPeriod(1000).     template.requestBody("direct:send", "test").     template.requestBody("direct:send", "golang").     exception.setExpectedMessageCount(1).     exception.assertIsSatisfied().     mockResultEndpoint.assertIsSatisfied(). }
false;public;1;9;;@Override public boolean matches(Exchange exchange) {     Message g = exchange.getIn().getBody(Message.class).     String s = new String(g.getData()).     if (s.contains("test")) {         return true.     }     return false. }
false;public;0;19;;@Override public void configure() throws Exception {     onException(Exception.class).maximumRedeliveries(REDELIVERY_COUNT).retryAttemptedLogLevel(LoggingLevel.INFO).retriesExhaustedLogLevel(LoggingLevel.ERROR).redeliveryDelay(10).to("mock:exception").handled(true).     from("direct:send").to("nats://" + getNatsUrl() + "?topic=test&flushConnection=true").     from("nats://" + getNatsUrl() + "?topic=test&flushConnection=true").choice().when(new Predicate() {          @Override         public boolean matches(Exchange exchange) {             Message g = exchange.getIn().getBody(Message.class).             String s = new String(g.getData()).             if (s.contains("test")) {                 return true.             }             return false.         }     }).throwException(RuntimeCamelException.class, "Test for this").end().to(mockResultEndpoint). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).maximumRedeliveries(REDELIVERY_COUNT).retryAttemptedLogLevel(LoggingLevel.INFO).retriesExhaustedLogLevel(LoggingLevel.ERROR).redeliveryDelay(10).to("mock:exception").handled(true).             from("direct:send").to("nats://" + getNatsUrl() + "?topic=test&flushConnection=true").             from("nats://" + getNatsUrl() + "?topic=test&flushConnection=true").choice().when(new Predicate() {                  @Override                 public boolean matches(Exchange exchange) {                     Message g = exchange.getIn().getBody(Message.class).                     String s = new String(g.getData()).                     if (s.contains("test")) {                         return true.                     }                     return false.                 }             }).throwException(RuntimeCamelException.class, "Test for this").end().to(mockResultEndpoint).         }     }. }
