commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new NatsProducer(this). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return new NatsConsumer(this, processor). }
false;public;0;3;;public ExecutorService createExecutor() {     return getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, "NatsTopic[" + configuration.getTopic() + "]", configuration.getPoolSize()). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public NatsConfiguration getNatsConfiguration() {     return configuration. }
false;public;0;9;;public Connection getConnection() throws InterruptedException, IllegalArgumentException, GeneralSecurityException, IOException {     Builder builder = getNatsConfiguration().createOptions().     if (getNatsConfiguration().getSslContextParameters() != null && getNatsConfiguration().isSecure()) {         SSLContext sslCtx = getNatsConfiguration().getSslContextParameters().createSSLContext(getCamelContext()).         builder.sslContext(sslCtx).     }     Options options = builder.build().     return Nats.connect(options). }
