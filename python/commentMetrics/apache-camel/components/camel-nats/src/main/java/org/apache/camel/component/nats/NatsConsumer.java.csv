commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public NatsEndpoint getEndpoint() {     return (NatsEndpoint) super.getEndpoint(). }
false;protected;0;12;;@Override protected void doStart() throws Exception {     super.doStart().     log.debug("Starting Nats Consumer").     executor = getEndpoint().createExecutor().     log.debug("Getting Nats Connection").     connection = getEndpoint().getNatsConfiguration().getConnection() != null ? getEndpoint().getNatsConfiguration().getConnection() : getEndpoint().getConnection().     executor.submit(new NatsConsumingTask(connection, getEndpoint().getNatsConfiguration())). }
false;protected;0;32;;@Override protected void doStop() throws Exception {     if (getEndpoint().getNatsConfiguration().isFlushConnection()) {         log.debug("Flushing Messages before stopping").         connection.flush(Duration.ofMillis(getEndpoint().getNatsConfiguration().getFlushTimeout())).     }     try {         dispatcher.unsubscribe(getEndpoint().getNatsConfiguration().getTopic()).     } catch (Exception e) {         getExceptionHandler().handleException("Error during unsubscribing", e).     }     log.debug("Stopping Nats Consumer").     if (executor != null) {         if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {             getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor).         } else {             executor.shutdownNow().         }     }     executor = null.     if (ObjectHelper.isEmpty(getEndpoint().getNatsConfiguration().getConnection())) {         log.debug("Closing Nats Connection").         if (!connection.getStatus().equals(Status.CLOSED)) {             connection.close().         }     }     super.doStop(). }
false;public;0;3;;public boolean isActive() {     return active. }
false;public;1;3;;public void setActive(boolean active) {     this.active = active. }
false;public;0;26;;@Override public void run() {     try {         dispatcher = connection.createDispatcher(new CamelNatsMessageHandler()).         if (ObjectHelper.isNotEmpty(configuration.getQueueName())) {             dispatcher = dispatcher.subscribe(getEndpoint().getNatsConfiguration().getTopic(), getEndpoint().getNatsConfiguration().getQueueName()).             if (ObjectHelper.isNotEmpty(getEndpoint().getNatsConfiguration().getMaxMessages())) {                 dispatcher.unsubscribe(getEndpoint().getNatsConfiguration().getTopic(), Integer.parseInt(getEndpoint().getNatsConfiguration().getMaxMessages())).             }             if (dispatcher.isActive()) {                 setActive(true).             }         } else {             dispatcher = dispatcher.subscribe(getEndpoint().getNatsConfiguration().getTopic()).             if (ObjectHelper.isNotEmpty(getEndpoint().getNatsConfiguration().getMaxMessages())) {                 dispatcher.unsubscribe(getEndpoint().getNatsConfiguration().getTopic(), Integer.parseInt(getEndpoint().getNatsConfiguration().getMaxMessages())).             }             if (dispatcher.isActive()) {                 setActive(true).             }         }     } catch (Throwable e) {         getExceptionHandler().handleException("Error during processing", e).     } }
false;public;1;12;;@Override public void onMessage(Message msg) throws InterruptedException {     log.debug("Received Message: {}", msg).     Exchange exchange = getEndpoint().createExchange().     exchange.getIn().setBody(msg).     exchange.getIn().setHeader(NatsConstants.NATS_MESSAGE_TIMESTAMP, System.currentTimeMillis()).     try {         processor.process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException("Error during processing", exchange, e).     } }
