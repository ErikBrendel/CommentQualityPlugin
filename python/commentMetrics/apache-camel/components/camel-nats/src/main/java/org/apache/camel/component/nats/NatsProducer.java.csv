commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public NatsEndpoint getEndpoint() {     return (NatsEndpoint) super.getEndpoint(). }
false;public;1;14;;@Override public void process(Exchange exchange) throws Exception {     NatsConfiguration config = getEndpoint().getNatsConfiguration().     String body = exchange.getIn().getMandatoryBody(String.class).     log.debug("Publishing to topic: {}", config.getTopic()).     if (ObjectHelper.isNotEmpty(config.getReplySubject())) {         String replySubject = config.getReplySubject().         connection.publish(config.getTopic(), replySubject, body.getBytes()).     } else {         connection.publish(config.getTopic(), body.getBytes()).     } }
false;protected;0;9;;@Override protected void doStart() throws Exception {     super.doStart().     log.debug("Starting Nats Producer").     log.debug("Getting Nats Connection").     connection = getEndpoint().getNatsConfiguration().getConnection() != null ? getEndpoint().getNatsConfiguration().getConnection() : getEndpoint().getConnection(). }
false;protected;0;15;;@Override protected void doStop() throws Exception {     log.debug("Stopping Nats Producer").     if (ObjectHelper.isEmpty(getEndpoint().getNatsConfiguration().getConnection())) {         log.debug("Closing Nats Connection").         if (connection != null && !connection.getStatus().equals(Status.CLOSED)) {             if (getEndpoint().getNatsConfiguration().isFlushConnection()) {                 log.debug("Flushing Nats Connection").                 connection.flush(Duration.ofMillis(getEndpoint().getNatsConfiguration().getFlushTimeout())).             }             connection.close().         }     }     super.doStop(). }
