commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testUnmarshalListPojo() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:reversePojo").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(List.class).     String json = "<list><pojo name=\"Camel\"/><pojo name=\"World\"/></list>".     template.sendBody("direct:backPojo", json).     assertMockEndpointsSatisfied().     List list = mock.getReceivedExchanges().get(0).getIn().getBody(List.class).     assertNotNull(list).     assertEquals(2, list.size()).     TestPojo pojo = (TestPojo) list.get(0).     assertEquals("Camel", pojo.getName()).     pojo = (TestPojo) list.get(1).     assertEquals("World", pojo.getName()). }
false;public;0;18;;@Test public void testUnmarshalListPojoOneElement() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:reversePojo").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(List.class).     String json = "<list><pojo name=\"Camel\"/></list>".     template.sendBody("direct:backPojo", json).     assertMockEndpointsSatisfied().     List list = mock.getReceivedExchanges().get(0).getIn().getBody(List.class).     assertNotNull(list).     assertEquals(1, list.size()).     TestPojo pojo = (TestPojo) list.get(0).     assertEquals("Camel", pojo.getName()). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/jacksonxml/SpringJacksonMarshalUnmarshalListTest.xml"). }
