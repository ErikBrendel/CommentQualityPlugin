commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testMarshalJAXBObject() throws Exception {     TestJAXBPojo in = new TestJAXBPojo().     in.setName("Camel").     MockEndpoint mock = getMockEndpoint("mock:reversePojo").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(TestJAXBPojo.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:inPojo", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("<XMLPojo><PojoName>Camel</PojoName></XMLPojo>", marshalledAsString).     template.sendBody("direct:backPojo", marshalled).     mock.assertIsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     JacksonXMLDataFormat format = new JacksonXMLDataFormat().     from("direct:in").marshal(format).     from("direct:back").unmarshal(format).to("mock:reverse").     JacksonXMLDataFormat formatPojo = new JacksonXMLDataFormat(TestJAXBPojo.class).     from("direct:inPojo").marshal(formatPojo).     from("direct:backPojo").unmarshal(formatPojo).to("mock:reversePojo"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             JacksonXMLDataFormat format = new JacksonXMLDataFormat().             from("direct:in").marshal(format).             from("direct:back").unmarshal(format).to("mock:reverse").             JacksonXMLDataFormat formatPojo = new JacksonXMLDataFormat(TestJAXBPojo.class).             from("direct:inPojo").marshal(formatPojo).             from("direct:backPojo").unmarshal(formatPojo).to("mock:reversePojo").         }     }. }
