commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testMarshalAndUnmarshalMap() throws Exception {     Map<String, Object> in = new HashMap<>().     in.put("name", "Camel").     MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Map.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:in", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("<HashMap><name>Camel</name></HashMap>", marshalledAsString).     template.sendBody("direct:back", marshalled).     mock.assertIsSatisfied(). }
false;public;0;19;;@Test public void testMarshalAndUnmarshalMapWithPrettyPrint() throws Exception {     Map<String, Object> in = new HashMap<>().     in.put("name", "Camel").     MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Map.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:inPretty", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     String expected = "<HashMap>\n  <name>Camel</name>\n</HashMap>\n".     assertEquals(expected, marshalledAsString).     template.sendBody("direct:backPretty", marshalled).     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testMarshalAndUnmarshalPojo() throws Exception {     TestPojo in = new TestPojo().     in.setName("Camel").     MockEndpoint mock = getMockEndpoint("mock:reversePojo").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(TestPojo.class).     mock.message(0).body().isEqualTo(in).     Object marshalled = template.requestBody("direct:inPojo", in).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("<TestPojo><name>Camel</name></TestPojo>", marshalledAsString).     template.sendBody("direct:backPojo", marshalled).     mock.assertIsSatisfied(). }
false;public;0;18;;@Override public void configure() throws Exception {     JacksonXMLDataFormat format = new JacksonXMLDataFormat().     from("direct:in").marshal(format).     from("direct:back").unmarshal(format).to("mock:reverse").     JacksonXMLDataFormat prettyPrintDataFormat = new JacksonXMLDataFormat().     prettyPrintDataFormat.setPrettyPrint(true).     from("direct:inPretty").marshal(prettyPrintDataFormat).     from("direct:backPretty").unmarshal(prettyPrintDataFormat).to("mock:reverse").     JacksonXMLDataFormat formatPojo = new JacksonXMLDataFormat(TestPojo.class).     from("direct:inPojo").marshal(formatPojo).     from("direct:backPojo").unmarshal(formatPojo).to("mock:reversePojo"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             JacksonXMLDataFormat format = new JacksonXMLDataFormat().             from("direct:in").marshal(format).             from("direct:back").unmarshal(format).to("mock:reverse").             JacksonXMLDataFormat prettyPrintDataFormat = new JacksonXMLDataFormat().             prettyPrintDataFormat.setPrettyPrint(true).             from("direct:inPretty").marshal(prettyPrintDataFormat).             from("direct:backPretty").unmarshal(prettyPrintDataFormat).to("mock:reverse").             JacksonXMLDataFormat formatPojo = new JacksonXMLDataFormat(TestPojo.class).             from("direct:inPojo").marshal(formatPojo).             from("direct:backPojo").unmarshal(formatPojo).to("mock:reversePojo").         }     }. }
