commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testMarshalDate() throws Exception {     TimeZone.setDefault(TimeZone.getTimeZone("UTC")).     GregorianCalendar in = new GregorianCalendar(2017, Calendar.APRIL, 25, 17, 0, 10).     MockEndpoint mock = getMockEndpoint("mock:result").     Object marshalled = template.requestBody("direct:in", in.getTime()).     String marshalledAsString = context.getTypeConverter().convertTo(String.class, marshalled).     assertEquals("<Date>1493139610000</Date>", marshalledAsString).     mock.expectedMessageCount(1).     mock.assertIsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     JacksonXMLDataFormat format = new JacksonXMLDataFormat().     TimeZone timeZone = TimeZone.getTimeZone("Africa/Ouagadougou").     format.setTimezone(timeZone).     from("direct:in").marshal(format).to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             JacksonXMLDataFormat format = new JacksonXMLDataFormat().             TimeZone timeZone = TimeZone.getTimeZone("Africa/Ouagadougou").             format.setTimezone(timeZone).             from("direct:in").marshal(format).to("mock:result").         }     }. }
