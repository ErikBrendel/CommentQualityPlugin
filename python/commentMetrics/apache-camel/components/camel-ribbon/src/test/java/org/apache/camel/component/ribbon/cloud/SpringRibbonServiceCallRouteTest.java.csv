commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testServiceCall() throws Exception {     getMockEndpoint("mock:{{firstPort}}").expectedMessageCount(1).     getMockEndpoint("mock:{{secondPort}}").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(2).     String out = template.requestBody("direct:start", null, String.class).     String out2 = template.requestBody("direct:start", null, String.class).     assertEquals(secondPort, out).     assertEquals(firstPort, out2).     assertMockEndpointsSatisfied(). }
false;protected;0;8;;// ************************************ // Helpers // ************************************ protected DefaultServiceCallProcessor findServiceCallProcessor() {     Route route = context().getRoute("scall").     Assert.assertNotNull("ServiceCall Route should be present", route).     return findServiceCallProcessor(route.navigate()).orElseThrow(() -> new IllegalStateException("Unable to find a ServiceCallProcessor")). }
false;protected;1;13;;protected Optional<DefaultServiceCallProcessor> findServiceCallProcessor(Navigate<Processor> navigate) {     for (Processor processor : navigate.next()) {         if (processor instanceof DefaultServiceCallProcessor) {             return Optional.ofNullable((DefaultServiceCallProcessor) processor).         }         if (processor instanceof Navigate) {             return findServiceCallProcessor((Navigate<Processor>) processor).         }     }     return Optional.empty(). }
