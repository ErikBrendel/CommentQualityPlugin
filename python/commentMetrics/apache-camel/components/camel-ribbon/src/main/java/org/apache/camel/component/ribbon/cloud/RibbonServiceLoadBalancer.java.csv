commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;4;;@Override public ServiceDiscovery getServiceDiscovery() {     return serviceDiscovery. }
false;public;1;4;;@Override public void setServiceDiscovery(ServiceDiscovery serviceDiscovery) {     this.serviceDiscovery = serviceDiscovery. }
false;public;0;4;;@Override public ServiceFilter getServiceFilter() {     return serviceFilter. }
false;public;1;4;;@Override public void setServiceFilter(ServiceFilter serviceFilter) {     this.serviceFilter = serviceFilter. }
false;protected;0;15;;// ************************ // lifecycle // ************************ @Override protected void doStart() throws Exception {     ObjectHelper.notNull(configuration, "configuration").     ObjectHelper.notNull(camelContext, "camel context").     if (serviceDiscovery != null) {         LOGGER.info("ServiceCall is using ribbon load balancer with service discovery type: {} and service filter: {}", serviceDiscovery.getClass(), serviceDiscovery != null ? serviceFilter.getClass() : "none").     } else {         LOGGER.info("ServiceCall is using ribbon load balancer").     }     ServiceHelper.startService(serviceDiscovery). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     loadBalancers.values().forEach(ZoneAwareLoadBalancer::stopServerListRefreshing).     loadBalancers.clear().     ServiceHelper.stopService(serviceDiscovery). }
false;public;2;33;;// ************************ // Processor // ************************ @Override public <T> T process(String serviceName, ServiceLoadBalancerFunction<T> request) throws Exception {     ILoadBalancer loadBalancer = loadBalancers.computeIfAbsent(serviceName, key -> createLoadBalancer(key)).     Server server = loadBalancer.chooseServer(serviceName).     if (server == null) {         throw new RejectedExecutionException("No active services with name " + serviceName).     }     ServiceDefinition definition.     if (server instanceof ServiceDefinition) {         // If the service discovery is one of camel provides, the definition         // is already of the expected type.         definition = (ServiceDefinition) server.     } else {         // If ribbon server list is configured through client config properties         // i.e. with listOfServers property the instance provided by the load         // balancer is of type Server so a conversion is needed         definition = new RibbonServiceDefinition(serviceName, server.getHost(), server.getPort()).         String zone = server.getZone().         if (zone != null) {             server.setZone(zone).         }     }     return request.apply(definition). }
false;private;1;32;;// ************************ // Helpers // ************************ private ZoneAwareLoadBalancer<RibbonServiceDefinition> createLoadBalancer(String serviceName) {     // setup client config     IClientConfig config = configuration.getClientName() != null ? IClientConfig.Builder.newBuilder(configuration.getClientName()).build() : IClientConfig.Builder.newBuilder().build().     if (configuration.getProperties() != null) {         for (Map.Entry<String, String> entry : configuration.getProperties().entrySet()) {             IClientConfigKey key = CommonClientConfigKey.valueOf(entry.getKey()).             String value = entry.getValue().             LOGGER.debug("RibbonClientConfig: {}={}", key.key(), value).             config.set(key, value).         }     }     ZoneAwareLoadBalancer<RibbonServiceDefinition> loadBalancer.     if (serviceDiscovery != null) {         loadBalancer = new ZoneAwareLoadBalancer<>(config, configuration.getRuleOrDefault(RoundRobinRule::new), configuration.getPingOrDefault(DummyPing::new), new RibbonServerList(serviceName, serviceDiscovery, serviceFilter), null, new PollingServerListUpdater(config)).     } else {         loadBalancer = new ZoneAwareLoadBalancer<>(config).     }     return loadBalancer. }
false;public;0;9;;@Override public List<RibbonServiceDefinition> getInitialListOfServers() {     List<ServiceDefinition> services = serviceDiscovery.getServices(serviceName).     if (serviceFilter != null) {         services = serviceFilter.apply(services).     }     return asRibbonServerList(services). }
false;public;0;9;;@Override public List<RibbonServiceDefinition> getUpdatedListOfServers() {     List<ServiceDefinition> services = serviceDiscovery.getServices(serviceName).     if (serviceFilter != null) {         services = serviceFilter.apply(services).     }     return asRibbonServerList(services). }
false;private;1;26;;private List<RibbonServiceDefinition> asRibbonServerList(List<ServiceDefinition> services) {     List<RibbonServiceDefinition> ribbonServers = new ArrayList<>().     for (ServiceDefinition service : services) {         if (service instanceof RibbonServiceDefinition) {             ribbonServers.add((RibbonServiceDefinition) service).         } else {             RibbonServiceDefinition serviceDef = new RibbonServiceDefinition(serviceName, service.getHost(), service.getPort(), service.getMetadata(), service.getHealth()).             String zone = serviceDef.getMetadata().get("zone").             if (zone != null) {                 serviceDef.setZone(zone).             }             ribbonServers.add(serviceDef).         }     }     return ribbonServers. }
