commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testExceptionThrownInProcessor() {     String body = "Hello World".     Object result = template.requestBody(String.format("mina2:tcp://localhost:%1$s?textline=true&sync=true", getPort()), body).     // The exception should be passed to the client     assertNotNull("the result should not be null", result).     assertEquals("result is IllegalArgumentException", result, "java.lang.IllegalArgumentException: Forced exception"). }
false;public;1;5;;public void process(Exchange e) {     assertEquals("Hello World", e.getIn().getBody(String.class)).     // simulate a problem processing the input to see if we can handle it properly     throw new IllegalArgumentException("Forced exception"). }
false;public;0;13;;public void configure() {     // use no delay for fast unit testing     errorHandler(defaultErrorHandler().maximumRedeliveries(2)).     from(String.format("mina2:tcp://localhost:%1$s?textline=true&sync=true", getPort())).process(new Processor() {          public void process(Exchange e) {             assertEquals("Hello World", e.getIn().getBody(String.class)).             // simulate a problem processing the input to see if we can handle it properly             throw new IllegalArgumentException("Forced exception").         }     }). }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // use no delay for fast unit testing             errorHandler(defaultErrorHandler().maximumRedeliveries(2)).             from(String.format("mina2:tcp://localhost:%1$s?textline=true&sync=true", getPort())).process(new Processor() {                  public void process(Exchange e) {                     assertEquals("Hello World", e.getIn().getBody(String.class)).                     // simulate a problem processing the input to see if we can handle it properly                     throw new IllegalArgumentException("Forced exception").                 }             }).         }     }. }
