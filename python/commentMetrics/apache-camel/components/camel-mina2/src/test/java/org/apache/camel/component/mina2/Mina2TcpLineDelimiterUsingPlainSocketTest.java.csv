commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testSendAndReceiveOnce() throws Exception {     String response = sendAndReceive("World").     assertNotNull("Nothing received from Mina", response).     assertEquals("Hello World", response). }
false;public;0;10;;@Test public void testSendAndReceiveTwice() throws Exception {     String london = sendAndReceive("London").     String paris = sendAndReceive("Paris").     assertNotNull("Nothing received from Mina", london).     assertNotNull("Nothing received from Mina", paris).     assertEquals("Hello London", london).     assertEquals("Hello Paris", paris). }
false;public;0;5;;@Test public void testReceiveNoResponseSinceOutBodyIsNull() throws Exception {     String out = sendAndReceive("force-null-out-body").     assertNull("no data should be recieved", out). }
false;public;0;8;;@Test public void testReceiveNoResponseSinceOutBodyIsNullTwice() throws Exception {     String out = sendAndReceive("force-null-out-body").     assertNull("no data should be recieved", out).     out = sendAndReceive("force-null-out-body").     assertNull("no data should be recieved", out). }
false;public;0;6;;@Test public void testExchangeFailedOutShouldBeNull() throws Exception {     String out = sendAndReceive("force-exception").     assertTrue("out should not be the same as in when the exchange has failed", !"force-exception".equals(out)).     assertEquals("should get the exception here", out, "java.lang.IllegalArgumentException: Forced exception"). }
false;private;1;39;;private String sendAndReceive(String input) throws IOException {     byte[] buf = new byte[128].     Socket soc = new Socket().     soc.connect(new InetSocketAddress("localhost", getPort())).     // Send message using plain Socket to test if this works     OutputStream os = null.     InputStream is = null.     try {         os = soc.getOutputStream().         // must append MAC newline at the end to flag end of textline to camel-mina2         os.write((input + "\r").getBytes()).         is = soc.getInputStream().         int len = is.read(buf).         if (len == -1) {             // no data received             return null.         }     } finally {         IOHelper.close(is, os).         soc.close().     }     // convert the buffer to chars     StringBuilder sb = new StringBuilder().     for (byte b : buf) {         char ch = (char) b.         if (ch == '\r' || ch == 0) {             // use MAC delimiter denotes end of text (added in the end in the processor below)             break.         } else {             sb.append(ch).         }     }     return sb.toString(). }
false;public;1;13;;public void process(Exchange e) {     String in = e.getIn().getBody(String.class).     if ("force-null-out-body".equals(in)) {         // forcing a null out body         e.getOut().setBody(null).     } else if ("force-exception".equals(in)) {         // clear out before throwing exception         e.getOut().setBody(null).         throw new IllegalArgumentException("Forced exception").     } else {         e.getOut().setBody("Hello " + in).     } }
false;public;0;21;;public void configure() {     // use no delay for fast unit testing     errorHandler(defaultErrorHandler().maximumRedeliveries(2)).     from(String.format("mina2:tcp://localhost:%1$s?textline=true&minaLogger=true&textlineDelimiter=MAC&sync=true", getPort())).process(new Processor() {          public void process(Exchange e) {             String in = e.getIn().getBody(String.class).             if ("force-null-out-body".equals(in)) {                 // forcing a null out body                 e.getOut().setBody(null).             } else if ("force-exception".equals(in)) {                 // clear out before throwing exception                 e.getOut().setBody(null).                 throw new IllegalArgumentException("Forced exception").             } else {                 e.getOut().setBody("Hello " + in).             }         }     }). }
false;protected;0;26;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // use no delay for fast unit testing             errorHandler(defaultErrorHandler().maximumRedeliveries(2)).             from(String.format("mina2:tcp://localhost:%1$s?textline=true&minaLogger=true&textlineDelimiter=MAC&sync=true", getPort())).process(new Processor() {                  public void process(Exchange e) {                     String in = e.getIn().getBody(String.class).                     if ("force-null-out-body".equals(in)) {                         // forcing a null out body                         e.getOut().setBody(null).                     } else if ("force-exception".equals(in)) {                         // clear out before throwing exception                         e.getOut().setBody(null).                         throw new IllegalArgumentException("Forced exception").                     } else {                         e.getOut().setBody("Hello " + in).                     }                 }             }).         }     }. }
