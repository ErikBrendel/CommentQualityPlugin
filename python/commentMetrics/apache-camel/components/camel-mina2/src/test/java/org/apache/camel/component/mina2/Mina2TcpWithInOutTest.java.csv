commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange e) {     receivedExchange = e.     latch.countDown(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:x").to(uri).process(new Processor() {          public void process(Exchange e) {             receivedExchange = e.             latch.countDown().         }     }). }
false;public;0;43;;@Test public void testMinaRouteWithInOut() throws Exception {     latch = new CountDownLatch(1).     uri = String.format("mina2:tcp://localhost:%1$s?textline=true", getPort()).     Mina2ReverserServer server = new Mina2ReverserServer(getPort()).     server.start().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:x").to(uri).process(new Processor() {                  public void process(Exchange e) {                     receivedExchange = e.                     latch.countDown().                 }             }).         }     }).     context.start().     // now lets fire in a message     Endpoint endpoint = context.getEndpoint("direct:x").     Exchange exchange = endpoint.createExchange(ExchangePattern.InOut).     Message message = exchange.getIn().     message.setBody("Hello!").     message.setHeader("cheese", 123).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     // now lets sleep for a while     assertTrue(latch.await(5, TimeUnit.SECONDS)).     assertNotNull(receivedExchange.getIn()).     assertEquals("!olleH", receivedExchange.getIn().getBody()).     producer.stop().     context.stop().     server.stop(). }
false;public;1;4;;public void process(Exchange e) {     receivedExchange = e.     latch.countDown(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:x").to(uri).process(new Processor() {          public void process(Exchange e) {             receivedExchange = e.             latch.countDown().         }     }). }
false;public;0;44;;@Test public void testMinaRouteWithInOutLazy() throws Exception {     latch = new CountDownLatch(1).     uri = String.format("mina2:tcp://localhost:%1$s?textline=true&lazySessionCreation=true", getPort()).     // The server is activated after Camel to check if the lazyness is working     Mina2ReverserServer server = new Mina2ReverserServer(getPort()).     server.start().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:x").to(uri).process(new Processor() {                  public void process(Exchange e) {                     receivedExchange = e.                     latch.countDown().                 }             }).         }     }).     context.start().     // now lets fire in a message     Endpoint endpoint = context.getEndpoint("direct:x").     Exchange exchange = endpoint.createExchange(ExchangePattern.InOut).     Message message = exchange.getIn().     message.setBody("Hello!").     message.setHeader("cheese", 123).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     // now lets sleep for a while     assertTrue(latch.await(5, TimeUnit.SECONDS)).     assertNotNull(receivedExchange.getIn()).     assertEquals("!olleH", receivedExchange.getIn().getBody()).     producer.stop().     context.stop().     server.stop(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
