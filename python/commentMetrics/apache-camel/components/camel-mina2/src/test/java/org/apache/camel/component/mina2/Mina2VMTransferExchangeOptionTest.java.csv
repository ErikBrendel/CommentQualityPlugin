commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testMinaTransferExchangeOptionWithoutException() throws Exception {     Exchange exchange = sendExchange(false).     assertExchange(exchange, false). }
false;public;0;5;;@Test public void testMinaTransferExchangeOptionWithException() throws Exception {     Exchange exchange = sendExchange(true).     assertExchange(exchange, true). }
false;private;1;16;;private Exchange sendExchange(boolean setException) throws Exception {     Endpoint endpoint = context.getEndpoint(String.format("mina2:vm://localhost:%1$s?sync=true&encoding=UTF-8&transferExchange=true", getPort())).     Exchange exchange = endpoint.createExchange().     Message message = exchange.getIn().     message.setBody("Hello!").     message.setHeader("cheese", "feta").     exchange.setProperty("ham", "old").     exchange.setProperty("setException", setException).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     return exchange. }
false;private;2;26;;private void assertExchange(Exchange exchange, boolean hasFault) {     if (!hasFault) {         Message out = exchange.getOut().         assertNotNull(out).         assertFalse(out.isFault()).         assertEquals("Goodbye!", out.getBody()).         assertEquals("cheddar", out.getHeader("cheese")).     } else {         Message fault = exchange.getOut().         assertNotNull(fault).         assertTrue(fault.isFault()).         assertNotNull(fault.getBody()).         assertTrue("Should get the InterrupteException exception", fault.getBody() instanceof InterruptedException).         assertEquals("nihao", fault.getHeader("hello")).     }     // in should stay the same     Message in = exchange.getIn().     assertNotNull(in).     assertEquals("Hello!", in.getBody()).     assertEquals("feta", in.getHeader("cheese")).     // however the shared properties have changed     assertEquals("fresh", exchange.getProperty("salami")).     assertNull(exchange.getProperty("Charset")). }
false;public;1;21;;public void process(Exchange e) throws InterruptedException {     assertNotNull(e.getIn().getBody()).     assertNotNull(e.getIn().getHeaders()).     assertNotNull(e.getProperties()).     assertEquals("Hello!", e.getIn().getBody()).     assertEquals("feta", e.getIn().getHeader("cheese")).     assertEquals("old", e.getProperty("ham")).     assertEquals(ExchangePattern.InOut, e.getPattern()).     Boolean setException = (Boolean) e.getProperty("setException").     if (setException) {         e.getOut().setFault(true).         e.getOut().setBody(new InterruptedException()).         e.getOut().setHeader("hello", "nihao").     } else {         e.getOut().setBody("Goodbye!").         e.getOut().setHeader("cheese", "cheddar").     }     e.setProperty("salami", "fresh").     e.setProperty("Charset", Charset.defaultCharset()). }
false;public;0;26;;public void configure() {     from(String.format("mina2:vm://localhost:%1$s?sync=true&encoding=UTF-8&transferExchange=true", getPort())).process(new Processor() {          public void process(Exchange e) throws InterruptedException {             assertNotNull(e.getIn().getBody()).             assertNotNull(e.getIn().getHeaders()).             assertNotNull(e.getProperties()).             assertEquals("Hello!", e.getIn().getBody()).             assertEquals("feta", e.getIn().getHeader("cheese")).             assertEquals("old", e.getProperty("ham")).             assertEquals(ExchangePattern.InOut, e.getPattern()).             Boolean setException = (Boolean) e.getProperty("setException").             if (setException) {                 e.getOut().setFault(true).                 e.getOut().setBody(new InterruptedException()).                 e.getOut().setHeader("hello", "nihao").             } else {                 e.getOut().setBody("Goodbye!").                 e.getOut().setHeader("cheese", "cheddar").             }             e.setProperty("salami", "fresh").             e.setProperty("Charset", Charset.defaultCharset()).         }     }). }
false;protected;0;31;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(String.format("mina2:vm://localhost:%1$s?sync=true&encoding=UTF-8&transferExchange=true", getPort())).process(new Processor() {                  public void process(Exchange e) throws InterruptedException {                     assertNotNull(e.getIn().getBody()).                     assertNotNull(e.getIn().getHeaders()).                     assertNotNull(e.getProperties()).                     assertEquals("Hello!", e.getIn().getBody()).                     assertEquals("feta", e.getIn().getHeader("cheese")).                     assertEquals("old", e.getProperty("ham")).                     assertEquals(ExchangePattern.InOut, e.getPattern()).                     Boolean setException = (Boolean) e.getProperty("setException").                     if (setException) {                         e.getOut().setFault(true).                         e.getOut().setBody(new InterruptedException()).                         e.getOut().setHeader("hello", "nihao").                     } else {                         e.getOut().setBody("Goodbye!").                         e.getOut().setHeader("cheese", "cheddar").                     }                     e.setProperty("salami", "fresh").                     e.setProperty("Charset", Charset.defaultCharset()).                 }             }).         }     }. }
