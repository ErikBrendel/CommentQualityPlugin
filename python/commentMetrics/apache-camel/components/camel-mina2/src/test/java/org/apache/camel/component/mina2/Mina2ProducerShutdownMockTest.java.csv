commented;modifiers;parameterAmount;loc;comment;code
false;public;0;34;;@Test public void testProducerShutdownTestingWithMock() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     SocketConnector mockConnector = mock(SocketConnector.class).     // normal camel code to get a producer     Endpoint endpoint = context.getEndpoint(String.format("mina2:tcp://localhost:%1$s?textline=true&sync=false", getPort())).     Exchange exchange = endpoint.createExchange().     Producer producer = endpoint.createProducer().     producer.start().     // set input and execute it     exchange.getIn().setBody("Hello World").     producer.process(exchange).     // insert our mock instead of real MINA IoConnector     Field field = producer.getClass().getDeclaredField("connector").     field.setAccessible(true).     field.set(producer, mockConnector).     //      // Everything is asynchronous.     // We need to wait a second to make sure we get the message.     //      Thread.sleep(1000).     // stop using our mock     producer.stop().     verify(mockConnector).dispose(true).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from(String.format("mina2:tcp://localhost:%1$s?textline=true&sync=false", getPort())).to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(String.format("mina2:tcp://localhost:%1$s?textline=true&sync=false", getPort())).to("mock:result").         }     }. }
