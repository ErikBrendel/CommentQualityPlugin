commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testResponse() throws Exception {     Object out = template.requestBody("mina2:tcp://localhost:" + port1 + "?sync=true", "Woodbine").     assertEquals("Hello Chad", out). }
false;public;0;10;;@Test public void testNoResponseDisconnectOnNoReplyFalse() throws Exception {     try {         template.requestBody("mina2:tcp://localhost:" + port2 + "?sync=true&timeout=100", "London").         Thread.sleep(1000).         fail("Should throw an exception").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(ExchangeTimedOutException.class, e.getCause()).     } }
false;public;0;18;;public void configure() throws Exception {     port1 = getPort().     port2 = getNextPort().     from("mina2:tcp://localhost:" + port1 + "?sync=true").choice().when(body().isEqualTo("Woodbine")).transform(constant("Hello Chad")).otherwise().transform(constant(null)).     from("mina2:tcp://localhost:" + port2 + "?sync=true&disconnectOnNoReply=false&noReplyLogLevel=OFF").choice().when(body().isEqualTo("Woodbine")).transform(constant("Hello Chad")).otherwise().transform(constant(null)). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             port1 = getPort().             port2 = getNextPort().             from("mina2:tcp://localhost:" + port1 + "?sync=true").choice().when(body().isEqualTo("Woodbine")).transform(constant("Hello Chad")).otherwise().transform(constant(null)).             from("mina2:tcp://localhost:" + port2 + "?sync=true&disconnectOnNoReply=false&noReplyLogLevel=OFF").choice().when(body().isEqualTo("Woodbine")).transform(constant("Hello Chad")).otherwise().transform(constant(null)).         }     }. }
