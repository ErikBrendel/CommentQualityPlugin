commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testInOnlyUsingMina() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye Chad").     mock.setResultWaitTime(5000).     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     exchange.getOut().setBody("Bye " + body). }
false;public;0;14;;public void configure() throws Exception {     from(String.format("mina2:tcp://localhost:%1$s?sync=true", getPort())).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             exchange.getOut().setBody("Bye " + body).         }     }).     from("timer://start?period=10000&delay=2000").setBody(constant("Chad")).to(String.format("mina2:tcp://localhost:%1$s?sync=true&lazySessionCreation=true", getPort())).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(String.format("mina2:tcp://localhost:%1$s?sync=true", getPort())).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody("Bye " + body).                 }             }).             from("timer://start?period=10000&delay=2000").setBody(constant("Chad")).to(String.format("mina2:tcp://localhost:%1$s?sync=true&lazySessionCreation=true", getPort())).to("mock:result").         }     }. }
