commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testToByteArray() {     byte[] in = "Hello World".getBytes().     IoBuffer bb = IoBuffer.wrap(in).     byte[] out = Mina2Converter.toByteArray(bb).     for (int i = 0. i < out.length. i++) {         assertEquals(in[i], out[i]).     } }
false;public;0;10;;@Test public void testToString() throws UnsupportedEncodingException {     String in = "Hello World \u4f60\u597d".     IoBuffer bb = IoBuffer.wrap(in.getBytes("UTF-8")).     Exchange exchange = new DefaultExchange(new DefaultCamelContext()).     exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").     String out = Mina2Converter.toString(bb, exchange).     assertEquals("Hello World \u4f60\u597d", out). }
false;public;0;14;;@Test public void testToStringTwoTimes() throws UnsupportedEncodingException {     String in = "Hello World \u4f60\u597d".     IoBuffer bb = IoBuffer.wrap(in.getBytes("UTF-8")).     Exchange exchange = new DefaultExchange(new DefaultCamelContext()).     exchange.setProperty(Exchange.CHARSET_NAME, "UTF-8").     String out = Mina2Converter.toString(bb, exchange).     assertEquals("Hello World \u4f60\u597d", out).     // should NOT be possible to convert to string without affecting the ByteBuffer     out = Mina2Converter.toString(bb, exchange).     assertEquals("", out). }
false;public;0;11;;@Test public void testToInputStream() throws Exception {     byte[] in = "Hello World".getBytes().     IoBuffer bb = IoBuffer.wrap(in).     InputStream is = Mina2Converter.toInputStream(bb).     for (byte b : in) {         int out = is.read().         assertEquals(b, out).     } }
false;public;0;15;;@Test public void testToByteBuffer() {     byte[] in = "Hello World".getBytes().     IoBuffer bb = Mina2Converter.toIoBuffer(in).     assertNotNull(bb).     // convert back to byte[] and see if the bytes are equal     // must flip to change direction to read     bb.flip().     byte[] out = Mina2Converter.toByteArray(bb).     for (int i = 0. i < out.length. i++) {         assertEquals(in[i], out[i]).     } }
