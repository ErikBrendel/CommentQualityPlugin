commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void configure() {     from(uri).to("mock:result"). }
false;public;0;21;;@Test public void testTCPEncodeUTF8InputIsBytes() throws Exception {     final String uri = String.format("mina2:tcp://localhost:%1$s?encoding=UTF-8&sync=false", getPort()).     context.addRoutes(new RouteBuilder() {          public void configure() {             from(uri).to("mock:result").         }     }).     MockEndpoint endpoint = getMockEndpoint("mock:result").     // include a UTF-8 char in the text \u0E08 is a Thai elephant     byte[] body = "Hello Thai Elephant \u0E08".getBytes("UTF-8").     endpoint.expectedMessageCount(1).     endpoint.expectedBodiesReceived(body).     template.sendBody(uri, body).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from(uri).to("mock:result"). }
false;public;0;21;;@Test public void testTCPEncodeUTF8InputIsString() throws Exception {     final String uri = String.format("mina2:tcp://localhost:%1$s?encoding=UTF-8&sync=false", getPort()).     context.addRoutes(new RouteBuilder() {          public void configure() {             from(uri).to("mock:result").         }     }).     MockEndpoint endpoint = getMockEndpoint("mock:result").     // include a UTF-8 char in the text \u0E08 is a Thai elephant     String body = "Hello Thai Elephant \u0E08".     endpoint.expectedMessageCount(1).     endpoint.expectedBodiesReceived(body).     template.sendBody(uri, body).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from(uri).to("mock:result"). }
false;public;0;21;;@Test public void testTCPEncodeUTF8TextLineInputIsString() throws Exception {     final String uri = String.format("mina2:tcp://localhost:%1$s?textline=true&encoding=UTF-8&sync=false", getPort()).     context.addRoutes(new RouteBuilder() {          public void configure() {             from(uri).to("mock:result").         }     }).     MockEndpoint endpoint = getMockEndpoint("mock:result").     // include a UTF-8 char in the text \u0E08 is a Thai elephant     String body = "Hello Thai Elephant \u0E08".     endpoint.expectedMessageCount(1).     endpoint.expectedBodiesReceived(body).     template.sendBody(uri, body).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from(uri).to("mock:result"). }
true;public;0;21;// See TextLineEncoder#encode where the message is converted to String using .toString() ;// Note: MINA does not support sending bytes with the textline codec // See TextLineEncoder#encode where the message is converted to String using .toString() @Test public void testUDPEncodeUTF8InputIsBytes() throws Exception {     final String uri = String.format("mina2:udp://localhost:%1$s?encoding=UTF-8&sync=false", getPort()).     context.addRoutes(new RouteBuilder() {          public void configure() {             from(uri).to("mock:result").         }     }).     MockEndpoint endpoint = getMockEndpoint("mock:result").     // include a UTF-8 char in the text \u0E08 is a Thai elephant     byte[] body = "Hello Thai Elephant \u0E08".getBytes().     endpoint.expectedMessageCount(1).     endpoint.expectedBodiesReceived(body).     template.sendBody(uri, body).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from(uri).to("mock:result"). }
false;public;0;23;;@Test public void testUDPEncodeUTF8InputIsString() throws Exception {     final String uri = String.format("mina2:udp://localhost:%1$s?encoding=UTF-8&sync=false", getPort()).     context.addRoutes(new RouteBuilder() {          public void configure() {             from(uri).to("mock:result").         }     }).     MockEndpoint endpoint = getMockEndpoint("mock:result").     // include a UTF-8 char in the text \u0E08 is a Thai elephant     String body = "Hello Thai Elephant \u0E08".     // String body = "Hello Thai Elephant Yay".     endpoint.expectedMessageCount(1).     endpoint.expectedBodiesReceived(body).     template.sendBody(uri, body).     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     String s = exchange.getIn().getBody(String.class).     assertEquals(hello, s).     exchange.getOut().setBody(bye). }
false;public;0;10;;public void configure() {     from(uri).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String s = exchange.getIn().getBody(String.class).             assertEquals(hello, s).             exchange.getOut().setBody(bye).         }     }). }
false;public;0;36;;@Test public void testUDPEncodeUTF8InputIsStringNoMock() throws Exception {     // this unit test covers for testUDPEncodeUTF8InputIsString until the encoding is fixed     // include a UTF-8 char in the text \u0E08 is a Thai elephant     final String hello = "Hello Thai Elephant \u0E08".     final String bye = "Hello Thai Elephant \u0E08".     final String uri = String.format("mina2:udp://localhost:%1$s?sync=true&encoding=UTF-8", getPort()).     context.addRoutes(new RouteBuilder() {          public void configure() {             from(uri).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String s = exchange.getIn().getBody(String.class).                     assertEquals(hello, s).                     exchange.getOut().setBody(bye).                 }             }).         }     }).     Endpoint endpoint = context.getEndpoint(uri).     Producer producer = endpoint.createProducer().     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody(hello).     producer.start().     producer.process(exchange).     String s = exchange.getOut().getBody(String.class).     assertEquals(bye, s).     producer.stop(). }
false;public;0;3;;public void configure() {     from(uri).to("mock:result"). }
false;public;0;17;;@Test public void testInvalidEncoding() throws Exception {     final String uri = String.format("mina2:tcp://localhost:%1$s?textline=true&encoding=XXX&sync=false", getPort()).     try {         context.addRoutes(new RouteBuilder() {              public void configure() {                 from(uri).to("mock:result").             }         }).         fail("Should have thrown a ResolveEndpointFailedException due invalid encoding parameter").     } catch (FailedToCreateRouteException e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("The encoding: XXX is not supported", iae.getMessage()).     } }
