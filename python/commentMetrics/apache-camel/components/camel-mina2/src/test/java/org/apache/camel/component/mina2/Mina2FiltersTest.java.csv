commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testFilterListRef() throws Exception {     testFilter(String.format("mina2:tcp://localhost:%1$s?textline=true&minaLogger=true&sync=false&filters=#myFilters", getPort())). }
false;public;0;4;;@Test public void testFilterElementRef() throws Exception {     testFilter(String.format("mina2:tcp://localhost:%1$s?textline=true&minaLogger=true&sync=false&filters=#myFilter", getPort())). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     TestFilter.called = 0.     super.tearDown(). }
false;public;0;3;;public void configure() throws Exception {     from(uri).to("mock:result"). }
false;private;1;26;;private void testFilter(final String uri) throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from(uri).to("mock:result").         }     }).     MockEndpoint mock = this.getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     Endpoint endpoint = context.getEndpoint(uri).     Exchange exchange = endpoint.createExchange().     Producer producer = endpoint.createProducer().     producer.start().     // set input and execute it     exchange.getIn().setBody("Hello World").     producer.process(exchange).     assertMockEndpointsSatisfied().     assertEquals("The filter should have been called twice (producer and consumer)", 2, TestFilter.called).     producer.stop(). }
false;protected;1;9;;@Override protected void bindToRegistry(Registry registry) throws Exception {     IoFilter myFilter = new TestFilter().     List<IoFilter> myFilters = new ArrayList<>().     myFilters.add(myFilter).     registry.bind("myFilters", myFilters).     registry.bind("myFilter", myFilter). }
false;public;2;5;;@Override public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {     incCalled().     nextFilter.sessionCreated(session). }
false;public,static,synchronized;0;3;;public static synchronized void incCalled() {     called++. }
