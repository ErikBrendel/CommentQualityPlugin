commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testMyCodec() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Bye World").     Object out = template.requestBody(String.format("mina2:vm://localhost:%1$s?sync=true&codec=#myCodec", getPort()), "Hello World").     assertEquals("Bye World", out).     mock.assertIsSatisfied(). }
false;public;0;3;;public void configure() {     from(myUri).to("mock:result"). }
false;public;0;20;;@Test public void testTCPEncodeUTF8InputIsString() throws Exception {     final String myUri = String.format("mina2:vm://localhost:%1$s?encoding=UTF-8&sync=false", getNextPort()).     context.addRoutes(new RouteBuilder() {          public void configure() {             from(myUri).to("mock:result").         }     }).     MockEndpoint endpoint = getMockEndpoint("mock:result").     // include a UTF-8 char in the text \u0E08 is a Thai elephant     String body = "Hello Thai Elephant \u0E08".     endpoint.expectedMessageCount(1).     endpoint.expectedBodiesReceived(body).     template.sendBody(myUri, body).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testBadConfiguration() throws Exception {     try {         template.sendBody(String.format("mina2:vm://localhost:%1$s?sync=true&codec=#XXX", getPort()), "Hello World").         fail("Should have thrown a ResolveEndpointFailedException").     } catch (ResolveEndpointFailedException e) {     // ok     } }
false;protected;0;5;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myCodec", new MyCodec()).     return jndi. }
false;public;0;3;;public void configure() throws Exception {     from(String.format("mina2:vm://localhost:%1$s?sync=true&codec=#myCodec", getPort())).transform(constant("Bye World")).to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(String.format("mina2:vm://localhost:%1$s?sync=true&codec=#myCodec", getPort())).transform(constant("Bye World")).to("mock:result").         }     }. }
false;public;3;8;;public void encode(IoSession ioSession, Object message, ProtocolEncoderOutput out) throws Exception {     IoBuffer bb = IoBuffer.allocate(32).setAutoExpand(true).     String s = (String) message.     bb.put(s.getBytes("US-ASCII")).     bb.flip().     out.write(bb). }
false;public;1;3;;public void dispose(IoSession ioSession) throws Exception { // do nothing }
false;public;1;19;;@Override public ProtocolEncoder getEncoder(IoSession is) throws Exception {     return new ProtocolEncoder() {          public void encode(IoSession ioSession, Object message, ProtocolEncoderOutput out) throws Exception {             IoBuffer bb = IoBuffer.allocate(32).setAutoExpand(true).             String s = (String) message.             bb.put(s.getBytes("US-ASCII")).             bb.flip().             out.write(bb).         }          public void dispose(IoSession ioSession) throws Exception {         // do nothing         }     }. }
false;protected;3;10;;protected boolean doDecode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws Exception {     if (in.remaining() > 0) {         byte[] buf = new byte[in.remaining()].         in.get(buf).         out.write(new String(buf, "US-ASCII")).         return true.     } else {         return false.     } }
false;public;1;16;;@Override public ProtocolDecoder getDecoder(IoSession is) throws Exception {     return new CumulativeProtocolDecoder() {          protected boolean doDecode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws Exception {             if (in.remaining() > 0) {                 byte[] buf = new byte[in.remaining()].                 in.get(buf).                 out.write(new String(buf, "US-ASCII")).                 return true.             } else {                 return false.             }         }     }. }
