commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testMinaRoute() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     endpoint.expectedMessageCount(3).     endpoint.expectedBodiesReceived("Hello Message: 0", "Hello Message: 1", "Hello Message: 2").     sendUdpMessages().     assertMockEndpointsSatisfied(). }
false;protected;0;5;;protected void sendUdpMessages() throws Exception {     for (int i = 0. i < messageCount. i++) {         template.sendBody(String.format("mina2:udp://127.0.0.1:%1$s?sync=false", getPort()), "Hello Message: " + i).     } }
false;public;0;16;;@Test public void testSendingByteMessages() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     endpoint.expectedMessageCount(1).     byte[] in = "Hello from bytes".getBytes().     template.sendBody(String.format("mina2:udp://127.0.0.1:%1$s?sync=false", getPort()), in).     assertMockEndpointsSatisfied().     List<Exchange> list = endpoint.getReceivedExchanges().     byte[] out = list.get(0).getIn().getBody(byte[].class).     for (int i = 0. i < in.length. i++) {         assertEquals("Thew bytes should be the same", in[i], out[i]).     } }
false;public;0;19;;@Test public void testSendingRawByteMessage() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     endpoint.expectedMessageCount(1).     String toSend = "ef3e00559f5faf0262f5ff0962d9008daa91001cd46b0fa9330ef0f3030fff250e46f72444d1cc501678c351e04b8004c" + "4000002080000fe850bbe011030000008031b031bfe9251305441593830354720020800050440ff".     byte[] in = fromHexString(toSend).     template.sendBody(String.format("mina2:udp://127.0.0.1:%1$s?sync=false", getPort()), in).     assertMockEndpointsSatisfied().     List<Exchange> list = endpoint.getReceivedExchanges().     byte[] out = list.get(0).getIn().getBody(byte[].class).     for (int i = 0. i < in.length. i++) {         assertEquals("The bytes should be the same", in[i], out[i]).     }     assertEquals("The strings should be the same", toSend, byteArrayToHex(out)). }
false;private;1;7;;private String byteArrayToHex(byte[] bytes) {     StringBuilder sb = new StringBuilder().     for (byte b : bytes) {         sb.append(String.format("%02x", b & 0xff)).     }     return sb.toString(). }
false;private;1;9;;private byte[] fromHexString(String hexstr) {     byte[] data = new byte[hexstr.length() / 2].     int i = 0.     for (int n = hexstr.length(). i < n. i += 2) {         data[i / 2] = (Integer.decode("0x" + hexstr.charAt(i) + hexstr.charAt(i + 1))).byteValue().     }     return data. }
false;public;0;4;;public void configure() {     from(String.format("mina2:udp://127.0.0.1:%1$s?sync=false&minaLogger=true", getPort())).to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(String.format("mina2:udp://127.0.0.1:%1$s?sync=false&minaLogger=true", getPort())).to("mock:result").         }     }. }
