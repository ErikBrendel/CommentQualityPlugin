commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testIoSession() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody(String.format("mina2:tcp://localhost:%1$s?textline=true", getPort()), "Hello World").     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     Message message = exchange.getIn().     assertNotNull(message.getHeader(Mina2Constants.MINA_IOSESSION)). }
false;public;0;13;;@Test public void testLocalAndRemoteAddressHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody(String.format("mina2:tcp://localhost:%1$s?textline=true", getPort()), "Hello World").     assertMockEndpointsSatisfied().     Message message = mock.getExchanges().get(0).getIn().     // Not making assumptions on what these headers contain, because it might differ     // on different machines/OSs.     assertNotNull(message.getHeader(Mina2Constants.MINA_LOCAL_ADDRESS, SocketAddress.class)).     assertNotNull(message.getHeader(Mina2Constants.MINA_REMOTE_ADDRESS, SocketAddress.class)). }
false;public;0;6;;@Override public void configure() throws Exception {     from(String.format("mina2:tcp://localhost:%1$s?textline=true", getPort())).to("log://mytest").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(String.format("mina2:tcp://localhost:%1$s?textline=true", getPort())).to("log://mytest").to("mock:result").         }     }. }
