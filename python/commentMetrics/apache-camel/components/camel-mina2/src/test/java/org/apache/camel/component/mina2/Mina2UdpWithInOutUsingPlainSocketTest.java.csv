commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testSendAndReceiveOnce() throws Exception {     String out = sendAndReceiveUdpMessages("World").     assertNotNull("should receive data", out).     assertEquals("Hello World", out). }
false;private;1;21;;private String sendAndReceiveUdpMessages(String input) throws Exception {     DatagramSocket socket = new DatagramSocket().     InetAddress address = InetAddress.getByName("127.0.0.1").     byte[] data = input.getBytes().     DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort()).     LOG.debug("+++ Sending data +++").     socket.send(packet).     Thread.sleep(1000).     byte[] buf = new byte[128].     DatagramPacket receive = new DatagramPacket(buf, buf.length, address, getPort()).     LOG.debug("+++ Receiveing data +++").     socket.receive(receive).     socket.close().     return new String(receive.getData(), 0, receive.getLength()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String s = exchange.getIn().getBody(String.class).     exchange.getOut().setBody("Hello " + s). }
false;public;0;9;;public void configure() {     from(String.format("mina2:udp://127.0.0.1:%1$s?sync=true", getPort())).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String s = exchange.getIn().getBody(String.class).             exchange.getOut().setBody("Hello " + s).         }     }). }
false;protected;0;14;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(String.format("mina2:udp://127.0.0.1:%1$s?sync=true", getPort())).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String s = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody("Hello " + s).                 }             }).         }     }. }
