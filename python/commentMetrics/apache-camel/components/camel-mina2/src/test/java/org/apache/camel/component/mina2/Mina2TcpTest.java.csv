commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testMinaRoute1() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     Object body = "Hello there!".     endpoint.expectedBodiesReceived(body).     template.sendBodyAndHeader(String.format("mina2:tcp://localhost:%1$s?sync=false&minaLogger=true", getPort()), body, "cheese", 123).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testMinaRoute2() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     Object body = "Hello there!".     endpoint.expectedBodiesReceived(body).     template.sendBodyAndHeader(String.format("mina2:tcp://localhost:%1$s?sync=false&minaLogger=true", getPort()), body, "cheese", 123).     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from(String.format("mina2:tcp://0.0.0.0:%1$s?sync=false&minaLogger=true", getPort())).to("log:before?showAll=true").to("mock:result").to("log:after?showAll=true"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(String.format("mina2:tcp://0.0.0.0:%1$s?sync=false&minaLogger=true", getPort())).to("log:before?showAll=true").to("mock:result").to("log:after?showAll=true").         }     }. }
