commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testMinaRoute() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     Object body = "Hello there!".     endpoint.expectedBodiesReceived(body).     // need to start the server first     Server server = new Server(getPort()).     server.startup().     // start the camel route to connect to the server     context.getRouteController().startRoute("minaRoute").     endpoint.assertIsSatisfied().     server.shutdown(). }
false;public;0;8;;public void configure() {     from(String.format("mina2:tcp://127.0.0.1:%1$s?sync=false&textline=true&textlineDelimiter=UNIX&clientMode=true", getPort())).id("minaRoute").noAutoStartup().to("log:before?showAll=true").to("mock:result").to("log:after?showAll=true"). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(String.format("mina2:tcp://127.0.0.1:%1$s?sync=false&textline=true&textlineDelimiter=UNIX&clientMode=true", getPort())).id("minaRoute").noAutoStartup().to("log:before?showAll=true").to("mock:result").to("log:after?showAll=true").         }     }. }
false;public;0;7;;public void startup() throws Exception {     acceptor = new NioSocketAcceptor().     Mina2TextLineCodecFactory codecFactory = new Mina2TextLineCodecFactory(Charset.forName("UTF-8"), LineDelimiter.UNIX).     acceptor.getFilterChain().addLast("codec", new ProtocolCodecFilter(codecFactory)).     acceptor.setHandler(new ServerHandler()).     acceptor.bind(new InetSocketAddress("127.0.0.1", port)). }
false;public;0;4;;public void shutdown() throws Exception {     acceptor.unbind().     acceptor.dispose(). }
false;public;1;4;;public void sessionOpened(IoSession session) throws Exception {     session.write("Hello there!\n").     session.closeNow(). }
