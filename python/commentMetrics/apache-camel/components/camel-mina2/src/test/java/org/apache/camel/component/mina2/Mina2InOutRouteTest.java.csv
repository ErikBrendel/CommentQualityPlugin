commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testInOutUsingMina() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye Chad").     // we should preserve headers     mock.expectedHeaderReceived("city", "Woodbine").     mock.setResultWaitTime(5000).     Object out = template.requestBodyAndHeader("direct:in", "Chad", "city", "Woodbine").     assertMockEndpointsSatisfied().     assertEquals("Bye Chad", out). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     exchange.getOut().setBody("Bye " + body). }
false;public;0;11;;public void configure() throws Exception {     from(String.format("mina2:tcp://localhost:%1$s?sync=true", getPort())).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             exchange.getOut().setBody("Bye " + body).         }     }).     from("direct:in").to(String.format("mina2:tcp://localhost:%1$s?sync=true&lazySessionCreation=true", getPort())).to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(String.format("mina2:tcp://localhost:%1$s?sync=true", getPort())).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody("Bye " + body).                 }             }).             from("direct:in").to(String.format("mina2:tcp://localhost:%1$s?sync=true&lazySessionCreation=true", getPort())).to("mock:result").         }     }. }
