commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSendToServer() {     String request = "".     for (int c = 0. c < 4000. c++) {         request += "A".     }     // START SNIPPET: e3     String out = (String) template.requestBody(String.format("mina2:tcp://localhost:%1$s?sync=true&textline=true&encoderMaxLineLength=5000&decoderMaxLineLength=5000", getPort()), request).     assertEquals(request, out). // END SNIPPET: e3 }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // lets setup a server on port %1$s     // we set the sync option so we will send a reply     // and we let the request-reply be processed in the MyServerProcessor     from(String.format("mina2:tcp://localhost:%1$s?sync=true&textline=true&encoderMaxLineLength=5000&decoderMaxLineLength=5000", getPort())).process(new MyServerProcessor()). // END SNIPPET: e1 }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // lets setup a server on port %1$s             // we set the sync option so we will send a reply             // and we let the request-reply be processed in the MyServerProcessor             from(String.format("mina2:tcp://localhost:%1$s?sync=true&textline=true&encoderMaxLineLength=5000&decoderMaxLineLength=5000", getPort())).process(new MyServerProcessor()).         // END SNIPPET: e1         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     // get the input from the IN body     String request = exchange.getIn().getBody(String.class).     // echo back the response on the OUT body     exchange.getOut().setBody(request). }
