commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void initPort() throws Exception {     port = AvailablePortFinder.getNextAvailable(). }
false;protected;0;3;;protected int getNextPort() {     return AvailablePortFinder.getNextAvailable(). }
false;protected;0;3;;protected int getPort() {     return port. }
false;protected;0;3;;protected boolean isUseSslContext() {     return false. }
false;protected;0;9;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry reg = super.createRegistry().     if (isUseSslContext()) {         addSslContextParametersToRegistry(reg).     }     return reg. }
false;protected;1;3;;protected void addSslContextParametersToRegistry(JndiRegistry registry) {     registry.bind("sslContextParameters", createSslContextParameters()). }
false;protected;0;23;;protected SSLContextParameters createSslContextParameters() {     KeyStoreParameters ksp = new KeyStoreParameters().     ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").toString()).     ksp.setPassword(KEY_STORE_PASSWORD).     KeyManagersParameters kmp = new KeyManagersParameters().     kmp.setKeyPassword(KEY_STORE_PASSWORD).     kmp.setKeyStore(ksp).     TrustManagersParameters tmp = new TrustManagersParameters().     tmp.setKeyStore(ksp).     // NOTE: Needed since the client uses a loose trust configuration when no ssl context     // is provided.  We turn on WANT client-auth to prefer using authentication     SSLContextServerParameters scsp = new SSLContextServerParameters().     scsp.setClientAuthentication(ClientAuthentication.WANT.name()).     SSLContextParameters sslContextParameters = new SSLContextParameters().     sslContextParameters.setKeyManagers(kmp).     sslContextParameters.setTrustManagers(tmp).     sslContextParameters.setServerParameters(scsp).     return sslContextParameters. }
