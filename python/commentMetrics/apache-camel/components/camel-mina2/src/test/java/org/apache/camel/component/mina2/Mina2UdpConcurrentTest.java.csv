commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testMinaRoute() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     endpoint.expectedBodiesReceivedInAnyOrder("Hello Message: 0", "Hello Message: 1", "Hello Message: 2").     sendUdpMessages().     assertMockEndpointsSatisfied(). }
false;protected;0;16;;protected void sendUdpMessages() throws Exception {     DatagramSocket socket = new DatagramSocket().     try {         InetAddress address = InetAddress.getByName("127.0.0.1").         for (int i = 0. i < messageCount. i++) {             String text = "Hello Message: " + Integer.toString(i).             byte[] data = text.getBytes().             DatagramPacket packet = new DatagramPacket(data, data.length, address, getPort()).             socket.send(packet).         }         Thread.sleep(2000).     } finally {         socket.close().     } }
false;public;0;6;;public void configure() {     // we use un-ordered to allow processing the UDP messages in any order from same client     from("mina2:udp://127.0.0.1:" + getPort() + "?sync=false&minaLogger=true&orderedThreadPoolExecutor=false").delay(1000).to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // we use un-ordered to allow processing the UDP messages in any order from same client             from("mina2:udp://127.0.0.1:" + getPort() + "?sync=false&minaLogger=true&orderedThreadPoolExecutor=false").delay(1000).to("mock:result").         }     }. }
