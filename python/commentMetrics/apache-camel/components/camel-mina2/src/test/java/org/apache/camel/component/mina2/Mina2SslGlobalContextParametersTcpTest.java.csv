commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.setSSLContextParameters(createSslContextParameters()).     ((SSLContextParametersAware) context.getComponent("mina2")).setUseGlobalSslContextParameters(true).     return context. }
false;public;0;10;;@Test public void testMinaRoute() throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     Object body = "Hello there!".     endpoint.expectedBodiesReceived(body).     template.sendBodyAndHeader("mina2:tcp://localhost:" + getPort() + "?sync=false&minaLogger=true", body, "cheese", 123).     assertMockEndpointsSatisfied(). }
false;protected;0;4;;@Override protected boolean isUseSslContext() {     return true. }
false;public;0;5;;public void configure() {     fromF("mina2:tcp://localhost:%s?sync=false&minaLogger=true", getPort()).to("log:before?showAll=true").to("mock:result").to("log:after?showAll=true"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             fromF("mina2:tcp://localhost:%s?sync=false&minaLogger=true", getPort()).to("log:before?showAll=true").to("mock:result").to("log:after?showAll=true").         }     }. }
