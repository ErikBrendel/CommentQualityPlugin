commented;modifiers;parameterAmount;loc;comment;code
false;public;3;5;;public void encode(IoSession session, Object message, ProtocolEncoderOutput out) throws Exception {     IoBuffer buf = toIoBuffer(message).     buf.flip().     out.write(buf). }
false;public;1;3;;public void dispose(IoSession session) throws Exception { // do nothing }
false;public;1;14;;public ProtocolEncoder getEncoder(IoSession session) throws Exception {     return new ProtocolEncoder() {          public void encode(IoSession session, Object message, ProtocolEncoderOutput out) throws Exception {             IoBuffer buf = toIoBuffer(message).             buf.flip().             out.write(buf).         }          public void dispose(IoSession session) throws Exception {         // do nothing         }     }. }
false;public;3;6;;public void decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws Exception {     // convert to bytes to write, we can not pass in the byte buffer as it could be sent to     // multiple mina sessions so we must convert it to bytes     byte[] bytes = context.getTypeConverter().mandatoryConvertTo(byte[].class, in).     out.write(bytes). }
false;public;2;3;;public void finishDecode(IoSession session, ProtocolDecoderOutput out) throws Exception { // do nothing }
false;public;1;3;;public void dispose(IoSession session) throws Exception { // do nothing }
false;public;1;19;;public ProtocolDecoder getDecoder(IoSession session) throws Exception {     return new ProtocolDecoder() {          public void decode(IoSession session, IoBuffer in, ProtocolDecoderOutput out) throws Exception {             // convert to bytes to write, we can not pass in the byte buffer as it could be sent to             // multiple mina sessions so we must convert it to bytes             byte[] bytes = context.getTypeConverter().mandatoryConvertTo(byte[].class, in).             out.write(bytes).         }          public void finishDecode(IoSession session, ProtocolDecoderOutput out) throws Exception {         // do nothing         }          public void dispose(IoSession session) throws Exception {         // do nothing         }     }. }
false;private;1;12;;private IoBuffer toIoBuffer(Object message) throws CharacterCodingException, NoTypeConversionAvailableException {     // try to convert it to a byte array     byte[] value = context.getTypeConverter().tryConvertTo(byte[].class, message).     if (value != null) {         IoBuffer answer = IoBuffer.allocate(value.length).setAutoExpand(true).         answer.put(value).         return answer.     }     // fallback to use a byte buffer converter     return context.getTypeConverter().mandatoryConvertTo(IoBuffer.class, message). }
