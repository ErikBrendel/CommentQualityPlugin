commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;28;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // Using the configuration which set by the component as a default one     // Since the configuration's properties will be set by the URI     // we need to copy or create a new MinaConfiguration here     // Using the configuration which set by the component as a default one     // Since the configuration's properties will be set by the URI     // we need to copy or create a new MinaConfiguration here     Mina2Configuration config.     if (configuration != null) {         config = configuration.copy().     } else {         config = new Mina2Configuration().     }     URI u = new URI(remaining).     config.setHost(u.getHost()).     config.setPort(u.getPort()).     config.setProtocol(u.getScheme()).     config.setFilters(resolveAndRemoveReferenceListParameter(parameters, "filters", IoFilter.class)).     setProperties(config, parameters).     if (config.getSslContextParameters() == null) {         config.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return createEndpoint(uri, config). }
false;public;1;3;;public Endpoint createEndpoint(Mina2Configuration config) throws Exception {     return createEndpoint(config.getUriString(), config). }
false;private;2;25;;private Endpoint createEndpoint(String uri, Mina2Configuration config) throws Exception {     ObjectHelper.notNull(getCamelContext(), "camelContext").     String protocol = config.getProtocol().     // if mistyped uri then protocol can be null     Mina2Endpoint endpoint = null.     if (protocol != null) {         if (protocol.equals("tcp") || config.isDatagramProtocol() || protocol.equals("vm")) {             endpoint = new Mina2Endpoint(uri, this, config).         }     }     if (endpoint == null) {         // protocol not resolved so error         throw new IllegalArgumentException("Unrecognised MINA protocol: " + protocol + " for uri: " + uri).     }     // set sync or async mode after endpoint is created     if (config.isSync()) {         endpoint.setExchangePattern(ExchangePattern.InOut).     } else {         endpoint.setExchangePattern(ExchangePattern.InOnly).     }     return endpoint. }
true;public;0;3;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- public Mina2Configuration getConfiguration() {     return configuration. }
true;public;1;3;/**  * To use the shared mina configuration.  */ ;/**  * To use the shared mina configuration.  */ public void setConfiguration(Mina2Configuration configuration) {     this.configuration = configuration. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
