commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public Producer createProducer() throws Exception {     ObjectHelper.notNull(configuration, "configuration").     return new Mina2Producer(this). }
false;public;1;7;;@Override public Consumer createConsumer(Processor processor) throws Exception {     ObjectHelper.notNull(configuration, "configuration").     Mina2Consumer answer = new Mina2Consumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;2;8;;public Exchange createExchange(IoSession session, Object payload) {     Exchange exchange = createExchange().     exchange.getIn().setHeader(Mina2Constants.MINA_IOSESSION, session).     exchange.getIn().setHeader(Mina2Constants.MINA_LOCAL_ADDRESS, session.getLocalAddress()).     exchange.getIn().setHeader(Mina2Constants.MINA_REMOTE_ADDRESS, session.getRemoteAddress()).     Mina2PayloadHelper.setIn(exchange, payload).     return exchange. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;5;;@Override public boolean isMultipleConsumersSupported() {     // only datagram should allow multiple consumers     return configuration.isDatagramProtocol(). }
true;public;0;3;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- public Mina2Configuration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(Mina2Configuration configuration) {     this.configuration = configuration. }
