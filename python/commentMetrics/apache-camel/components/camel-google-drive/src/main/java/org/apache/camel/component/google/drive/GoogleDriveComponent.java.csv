commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected GoogleDriveApiName getApiName(String apiNameStr) throws IllegalArgumentException {     return GoogleDriveApiName.fromValue(apiNameStr). }
false;public;1;8;;public Drive getClient(GoogleDriveConfiguration googleDriveConfiguration) {     if (client == null) {         client = getClientFactory().makeClient(googleDriveConfiguration.getClientId(), googleDriveConfiguration.getClientSecret(), googleDriveConfiguration.getScopes(), googleDriveConfiguration.getApplicationName(), googleDriveConfiguration.getRefreshToken(), googleDriveConfiguration.getAccessToken()).     }     return client. }
false;public;0;14;;public GoogleDriveClientFactory getClientFactory() {     if (clientFactory == null) {         // configure https proxy from camelContext         if (ObjectHelper.isNotEmpty(getCamelContext().getGlobalOption("http.proxyHost")) && ObjectHelper.isNotEmpty(getCamelContext().getGlobalOption("http.proxyPort"))) {             String host = getCamelContext().getGlobalOption("http.proxyHost").             int port = Integer.parseInt(getCamelContext().getGlobalOption("http.proxyPort")).             clientFactory = new BatchGoogleDriveClientFactory(host, port).         } else {             clientFactory = new BatchGoogleDriveClientFactory().         }     }     return clientFactory. }
true;public;1;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public void setConfiguration(GoogleDriveConfiguration configuration) {     super.setConfiguration(configuration). }
false;public;0;7;;@Override public GoogleDriveConfiguration getConfiguration() {     if (configuration == null) {         configuration = new GoogleDriveConfiguration().     }     return super.getConfiguration(). }
true;public;1;3;/**  * To use the GoogleCalendarClientFactory as factory for creating the client.  * Will by default use {@link BatchGoogleDriveClientFactory}  */ ;/**  * To use the GoogleCalendarClientFactory as factory for creating the client.  * Will by default use {@link BatchGoogleDriveClientFactory}  */ public void setClientFactory(GoogleDriveClientFactory clientFactory) {     this.clientFactory = clientFactory. }
false;protected;4;9;;@Override protected Endpoint createEndpoint(String uri, String methodName, GoogleDriveApiName apiName, GoogleDriveConfiguration endpointConfiguration) {     endpointConfiguration.setApiName(apiName).     endpointConfiguration.setMethodName(methodName).     GoogleDriveEndpoint endpoint = new GoogleDriveEndpoint(uri, this, apiName, methodName, endpointConfiguration).     endpoint.setClientFactory(clientFactory).     return endpoint. }
