commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new GoogleDriveProducer(this). }
false;public;1;10;;public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final GoogleDriveConsumer consumer = new GoogleDriveConsumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<GoogleDriveConfiguration> getPropertiesHelper() {     return GoogleDrivePropertiesHelper.getHelper(). }
false;protected;0;3;;protected String getThreadProfileName() {     return GoogleDriveConstants.THREAD_PROFILE_NAME. }
false;protected;0;46;;@Override protected void afterConfigureProperties() {     switch(apiName) {         case DRIVE_FILES:             apiProxy = getClient().files().             break.         case DRIVE_ABOUT:             apiProxy = getClient().about().             break.         case DRIVE_APPS:             apiProxy = getClient().apps().             break.         case DRIVE_CHANNELS:             apiProxy = getClient().channels().             break.         case DRIVE_CHANGES:             apiProxy = getClient().changes().             break.         case DRIVE_COMMENTS:             apiProxy = getClient().comments().             break.         case DRIVE_PERMISSIONS:             apiProxy = getClient().permissions().             break.         case DRIVE_PROPERTIES:             apiProxy = getClient().properties().             break.         case DRIVE_REALTIME:             apiProxy = getClient().realtime().             break.         case DRIVE_REPLIES:             apiProxy = getClient().replies().             break.         case DRIVE_REVISIONS:             apiProxy = getClient().revisions().             break.         case DRIVE_CHILDREN:             apiProxy = getClient().children().             break.         case DRIVE_PARENTS:             apiProxy = getClient().parents().             break.         default:             throw new IllegalArgumentException("Invalid API name " + apiName).     } }
false;public;0;3;;public Drive getClient() {     return ((GoogleDriveComponent) getComponent()).getClient(configuration). }
false;public;2;4;;@Override public Object getApiProxy(ApiMethod method, Map<String, Object> args) {     return apiProxy. }
false;public;0;3;;public GoogleDriveClientFactory getClientFactory() {     return clientFactory. }
true;public;1;3;/**  * To use the GoogleCalendarClientFactory as factory for creating the client.  * Will by default use {@link BatchGoogleDriveClientFactory}  */ ;/**  * To use the GoogleCalendarClientFactory as factory for creating the client.  * Will by default use {@link BatchGoogleDriveClientFactory}  */ public void setClientFactory(GoogleDriveClientFactory clientFactory) {     this.clientFactory = clientFactory. }
