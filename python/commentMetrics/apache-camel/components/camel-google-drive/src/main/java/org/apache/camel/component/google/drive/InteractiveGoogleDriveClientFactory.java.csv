commented;modifiers;parameterAmount;loc;comment;code
false;public;6;11;;@Override public Drive makeClient(String clientId, String clientSecret, Collection<String> scopes, String applicationName, String refreshToken, String accessToken) {     Credential credential.     try {         credential = authorize(clientId, clientSecret, scopes).         return new Drive.Builder(transport, jsonFactory, credential).setApplicationName(applicationName).build().     } catch (Exception e) {         LOG.error("Could not create Google Drive client.", e).     }     return null. }
true;private;3;10;/**  * This method interactively creates the necessary authorization tokens on first run,  * and stores the tokens in the data store. Subsequent runs will no longer require interactivity  * as long as the credentials file is not removed.  */ ;/**  * This method interactively creates the necessary authorization tokens on first run,  * and stores the tokens in the data store. Subsequent runs will no longer require interactivity  * as long as the credentials file is not removed.  */ private Credential authorize(String clientId, String clientSecret, Collection<String> scopes) throws Exception {     dataStoreFactory = new FileDataStoreFactory(DATA_STORE_DIR).     // set up authorization code flow     GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(transport, jsonFactory, clientId, clientSecret, scopes).setDataStoreFactory(dataStoreFactory).setAccessType("offline").build().     // authorize     return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user"). }
