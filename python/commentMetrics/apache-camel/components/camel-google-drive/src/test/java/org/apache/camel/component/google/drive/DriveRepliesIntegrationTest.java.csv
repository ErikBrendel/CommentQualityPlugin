commented;modifiers;parameterAmount;loc;comment;code
false;public;0;54;;@Test public void testReplyToComment() throws Exception {     // 1. create test file     File testFile = uploadTestFile().     String fileId = testFile.getId().     // 2. comment on that file     Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleDrive.fileId", fileId).     // parameter type is com.google.api.services.drive.model.Comment     com.google.api.services.drive.model.Comment comment = new com.google.api.services.drive.model.Comment().     comment.setContent("Camel rocks!").     headers.put("CamelGoogleDrive.content", comment).     requestBodyAndHeaders("direct://INSERT_COMMENT", null, headers).     // 3. get a list of comments on the file     // using String message body for single parameter "fileId"     com.google.api.services.drive.model.CommentList result1 = requestBody("direct://LIST_COMMENTS", fileId).     assertNotNull(result1.get("items")).     LOG.debug("list: " + result1).     Comment comment2 = result1.getItems().get(0).     String commentId = comment2.getCommentId().     // 4. add reply     headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleDrive.fileId", fileId).     // parameter type is String     headers.put("CamelGoogleDrive.commentId", commentId).     // parameter type is com.google.api.services.drive.model.CommentReply     com.google.api.services.drive.model.CommentReply reply = new com.google.api.services.drive.model.CommentReply().     reply.setContent("I know :-)").     headers.put("CamelGoogleDrive.content", reply).     requestBodyAndHeaders("direct://INSERT", null, headers).     // 5. list replies on comment to file     headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleDrive.fileId", fileId).     // parameter type is String     headers.put("CamelGoogleDrive.commentId", commentId).     final com.google.api.services.drive.model.CommentReplyList result = requestBodyAndHeaders("direct://LIST", null, headers).     assertNotNull("list result", result).     LOG.debug("list: " + result). }
false;public;0;38;;public void configure() {     // test route for delete     from("direct://DELETE").to("google-drive://" + PATH_PREFIX + "/delete").     // test route for get     from("direct://GET").to("google-drive://" + PATH_PREFIX + "/get").     // test route for insert     from("direct://INSERT").to("google-drive://" + PATH_PREFIX + "/insert").     // test route for list     from("direct://LIST").to("google-drive://" + PATH_PREFIX + "/list").     // test route for patch     from("direct://PATCH").to("google-drive://" + PATH_PREFIX + "/patch").     // test route for update     from("direct://UPDATE").to("google-drive://" + PATH_PREFIX + "/update").     // just used to upload file for test     from("direct://INSERT_1").to("google-drive://" + GoogleDriveApiCollection.getCollection().getApiName(DriveFilesApiMethod.class).getName() + "/insert").     // test route for insert     from("direct://INSERT_COMMENT").to("google-drive://drive-comments/insert").     // test route for list     from("direct://LIST_COMMENTS").to("google-drive://drive-comments/list?inBody=fileId"). }
false;protected;0;43;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for delete             from("direct://DELETE").to("google-drive://" + PATH_PREFIX + "/delete").             // test route for get             from("direct://GET").to("google-drive://" + PATH_PREFIX + "/get").             // test route for insert             from("direct://INSERT").to("google-drive://" + PATH_PREFIX + "/insert").             // test route for list             from("direct://LIST").to("google-drive://" + PATH_PREFIX + "/list").             // test route for patch             from("direct://PATCH").to("google-drive://" + PATH_PREFIX + "/patch").             // test route for update             from("direct://UPDATE").to("google-drive://" + PATH_PREFIX + "/update").             // just used to upload file for test             from("direct://INSERT_1").to("google-drive://" + GoogleDriveApiCollection.getCollection().getApiName(DriveFilesApiMethod.class).getName() + "/insert").             // test route for insert             from("direct://INSERT_COMMENT").to("google-drive://drive-comments/insert").             // test route for list             from("direct://LIST_COMMENTS").to("google-drive://drive-comments/list?inBody=fileId").         }     }. }
