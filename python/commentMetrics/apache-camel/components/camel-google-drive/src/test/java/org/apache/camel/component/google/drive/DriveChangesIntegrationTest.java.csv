commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testGet() throws Exception {     final com.google.api.services.drive.model.ChangeList list = requestBody("direct://LIST", null).     List<Change> items = list.getItems().     if (!items.isEmpty()) {         Change change = items.get(0).         Long id = change.getId().         // using String message body for single parameter "changeId"         final com.google.api.services.drive.model.Change result = requestBody("direct://GET", id).         assertNotNull("get result", result).         LOG.debug("get: " + result).     } }
false;public;0;7;;@Test public void testList() throws Exception {     final com.google.api.services.drive.model.ChangeList result = requestBody("direct://LIST", null).     assertNotNull("list result", result).     LOG.debug("list: " + result). }
false;public;0;14;;public void configure() {     // test route for get     from("direct://GET").to("google-drive://" + PATH_PREFIX + "/get?inBody=changeId").     // test route for list     from("direct://LIST").to("google-drive://" + PATH_PREFIX + "/list").     // test route for watch     from("direct://WATCH").to("google-drive://" + PATH_PREFIX + "/watch?inBody=contentChannel"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for get             from("direct://GET").to("google-drive://" + PATH_PREFIX + "/get?inBody=changeId").             // test route for list             from("direct://LIST").to("google-drive://" + PATH_PREFIX + "/list").             // test route for watch             from("direct://WATCH").to("google-drive://" + PATH_PREFIX + "/watch?inBody=contentChannel").         }     }. }
