commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testUploadFileToFolder() throws Exception {     File folder = uploadTestFolder().     File file = uploadTestFile().     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleDrive.folderId", folder.getId()).     com.google.api.services.drive.model.ChildReference child = new com.google.api.services.drive.model.ChildReference().     child.setId(file.getId()).     // parameter type is com.google.api.services.drive.model.ChildReference     headers.put("CamelGoogleDrive.content", child).     requestBodyAndHeaders("direct://INSERT", null, headers).     final com.google.api.services.drive.model.ChildList result = requestBody("direct://LIST", folder.getId()).     assertNotNull("insert result", result).     LOG.debug("insert: " + result).     headers.put("CamelGoogleDrive.childId", child.getId()).     com.google.api.services.drive.model.ChildReference childReference = requestBodyAndHeaders("direct://GET", null, headers).     assertNotNull("inserted child", childReference).     requestBodyAndHeaders("direct://DELETE", null, headers).     try {         childReference = requestBodyAndHeaders("direct://GET", null, headers).         fail("can't fetch a child that already get deleted").     } catch (Exception ex) {         assertTrue(ex.getCause().getCause() instanceof com.google.api.client.googleapis.json.GoogleJsonResponseException).     } }
false;public;0;26;;@Test public void testUploadFileToRootFolder() throws Exception {     File file = uploadTestFile().     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelGoogleDrive.folderId", ROOT_FOLDER).     com.google.api.services.drive.model.ChildReference child = new com.google.api.services.drive.model.ChildReference().     child.setId(file.getId()).     // parameter type is com.google.api.services.drive.model.ChildReference     headers.put("CamelGoogleDrive.content", child).     requestBodyAndHeaders("direct://INSERT", null, headers).     headers.put("CamelGoogleDrive.childId", child.getId()).     com.google.api.services.drive.model.ChildReference childReference = requestBodyAndHeaders("direct://GET-BODY", child.getId(), headers).     assertNotNull("inserted child", childReference).     requestBodyAndHeaders("direct://DELETE", null, headers).     try {         childReference = requestBodyAndHeaders("direct://GET-BODY", child.getId(), headers, com.google.api.services.drive.model.ChildReference.class).         fail("can't fetch a child that already get deleted").     } catch (Exception ex) {         assertTrue(ex.getCause().getCause() instanceof com.google.api.client.googleapis.json.GoogleJsonResponseException).     } }
false;public;0;26;;public void configure() {     // set proxy if necessary     // this.getContext().getGlobalOptions().put("http.proxyHost", "...").     // this.getContext().getGlobalOptions().put("http.proxyPort", "...").     // test route for delete     from("direct://DELETE").to("google-drive://" + PATH_PREFIX + "/delete").     // test route for get     from("direct://GET").to("google-drive://" + PATH_PREFIX + "/get").     // test route for get with body     from("direct://GET-BODY").to("google-drive://" + PATH_PREFIX + "/get?inBody=childId").     // test route for insert     from("direct://INSERT").to("google-drive://" + PATH_PREFIX + "/insert").     // test route for list     from("direct://LIST").to("google-drive://" + PATH_PREFIX + "/list?inBody=folderId"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // set proxy if necessary             // this.getContext().getGlobalOptions().put("http.proxyHost", "...").             // this.getContext().getGlobalOptions().put("http.proxyPort", "...").             // test route for delete             from("direct://DELETE").to("google-drive://" + PATH_PREFIX + "/delete").             // test route for get             from("direct://GET").to("google-drive://" + PATH_PREFIX + "/get").             // test route for get with body             from("direct://GET-BODY").to("google-drive://" + PATH_PREFIX + "/get?inBody=childId").             // test route for insert             from("direct://INSERT").to("google-drive://" + PATH_PREFIX + "/insert").             // test route for list             from("direct://LIST").to("google-drive://" + PATH_PREFIX + "/list?inBody=folderId").         }     }. }
