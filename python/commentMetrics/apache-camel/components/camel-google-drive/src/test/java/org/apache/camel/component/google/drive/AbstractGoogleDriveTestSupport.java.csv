commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;14;;protected File uploadTestFile() {     File fileMetadata = new File().     fileMetadata.setTitle(UPLOAD_FILE.getName()).     FileContent mediaContent = new FileContent(null, UPLOAD_FILE).     final Map<String, Object> headers = new HashMap<>().     // parameter type is com.google.api.services.drive.model.File     headers.put("CamelGoogleDrive.content", fileMetadata).     // parameter type is com.google.api.client.http.AbstractInputStreamContent     headers.put("CamelGoogleDrive.mediaContent", mediaContent).     File result = requestBodyAndHeaders("google-drive://drive-files/insert", null, headers).     return result. }
false;protected;0;8;;protected File uploadTestFolder() {     File fileMetadata = new File().     fileMetadata.setTitle("testfolder").     fileMetadata.setMimeType("application/vnd.google-apps.folder").     File result = requestBody("google-drive://drive-files/insert?inBody=content", fileMetadata).     return result. }
false;protected;0;47;;@Override protected CamelContext createCamelContext() throws Exception {     final InputStream in = getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES).     if (in == null) {         throw new IOException(TEST_OPTIONS_PROPERTIES + " could not be found").     }     final StringBuilder builder = new StringBuilder().     final BufferedReader reader = new BufferedReader(new InputStreamReader(in, "UTF-8")).     String line.     while ((line = reader.readLine()) != null) {         builder.append(line).append(LS).     }     propertyText = builder.toString().     final Properties properties = new Properties().     try {         properties.load(new StringReader(propertyText)).     } catch (IOException e) {         throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()), e).     }     //      // // cache test properties     // refreshToken = properties.getProperty(REFRESH_TOKEN_PROPERTY).     // testFolderId = properties.getProperty("testFolderId").     // testFileId = properties.getProperty("testFileId").     // testUserId = properties.getProperty("testUserId").     //      Map<String, Object> options = new HashMap<>().     for (Map.Entry<Object, Object> entry : properties.entrySet()) {         options.put(entry.getKey().toString(), entry.getValue()).     }     final GoogleDriveConfiguration configuration = new GoogleDriveConfiguration().     IntrospectionSupport.setProperties(configuration, options).     // add GoogleDriveComponent  to Camel context     final CamelContext context = super.createCamelContext().     final GoogleDriveComponent component = new GoogleDriveComponent(context).     component.setConfiguration(configuration).     context.addComponent("google-drive", component).     return context. }
false;public;0;5;;@Override public boolean isCreateCamelContextPerClass() {     // only create the context once for this class     return true. }
false;protected;3;4;;protected <T> T requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) throws CamelExecutionException {     return (T) template().requestBodyAndHeaders(endpointUri, body, headers). }
false;protected;4;4;;protected <T> T requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers, Class<T> type) throws CamelExecutionException {     return template().requestBodyAndHeaders(endpointUri, body, headers, type). }
false;protected;2;3;;protected <T> T requestBody(String endpoint, Object body) throws CamelExecutionException {     return (T) template().requestBody(endpoint, body). }
