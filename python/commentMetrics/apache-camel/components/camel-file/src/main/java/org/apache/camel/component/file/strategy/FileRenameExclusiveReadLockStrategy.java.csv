commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;@Override public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {     // must call marker first     if (markerFile && !marker.acquireExclusiveReadLock(operations, file, exchange)) {         return false.     }     return super.acquireExclusiveReadLock(operations, file, exchange). }
false;public;3;11;;@Override public void releaseExclusiveReadLockOnAbort(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {     // must call marker first     try {         if (markerFile) {             marker.releaseExclusiveReadLockOnAbort(operations, file, exchange).         }     } finally {         super.releaseExclusiveReadLockOnAbort(operations, file, exchange).     } }
false;public;3;11;;@Override public void releaseExclusiveReadLockOnRollback(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {     // must call marker first     try {         if (markerFile) {             marker.releaseExclusiveReadLockOnRollback(operations, file, exchange).         }     } finally {         super.releaseExclusiveReadLockOnRollback(operations, file, exchange).     } }
false;public;3;11;;@Override public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {     // must call marker first     try {         if (markerFile) {             marker.releaseExclusiveReadLockOnCommit(operations, file, exchange).         }     } finally {         super.releaseExclusiveReadLockOnCommit(operations, file, exchange).     } }
false;public;1;4;;@Override public void setMarkerFiler(boolean markerFile) {     this.markerFile = markerFile. }
