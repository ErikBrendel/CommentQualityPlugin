commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected FileLockClusterView createView(String namespace) throws Exception {     return new FileLockClusterView(this, namespace). }
false;public;0;3;;public String getRoot() {     return root. }
true;public;1;3;/**  * Sets the root path.  */ ;/**  * Sets the root path.  */ public void setRoot(String root) {     this.root = root. }
false;public;0;3;;public long getAcquireLockDelay() {     return acquireLockDelay. }
true;public;1;3;/**  * The time to wait before starting to try to acquire lock, default 1.  */ ;/**  * The time to wait before starting to try to acquire lock, default 1.  */ public void setAcquireLockDelay(long acquireLockDelay) {     this.acquireLockDelay = acquireLockDelay. }
false;public;2;4;;public void setAcquireLockDelay(long pollDelay, TimeUnit pollDelayUnit) {     setAcquireLockDelay(pollDelay).     setAcquireLockDelayUnit(pollDelayUnit). }
false;public;0;3;;public TimeUnit getAcquireLockDelayUnit() {     return acquireLockDelayUnit. }
true;public;1;3;/**  * The time unit fo the acquireLockDelay, default to TimeUnit.SECONDS.  */ ;/**  * The time unit fo the acquireLockDelay, default to TimeUnit.SECONDS.  */ public void setAcquireLockDelayUnit(TimeUnit acquireLockDelayUnit) {     this.acquireLockDelayUnit = acquireLockDelayUnit. }
false;public;0;3;;public long getAcquireLockInterval() {     return acquireLockInterval. }
true;public;1;3;/**  * The time to wait between attempts to try to acquire lock, default 10.  */ ;/**  * The time to wait between attempts to try to acquire lock, default 10.  */ public void setAcquireLockInterval(long acquireLockInterval) {     this.acquireLockInterval = acquireLockInterval. }
false;public;2;4;;public void setAcquireLockInterval(long pollInterval, TimeUnit pollIntervalUnit) {     setAcquireLockInterval(pollInterval).     setAcquireLockIntervalUnit(pollIntervalUnit). }
false;public;0;3;;public TimeUnit getAcquireLockIntervalUnit() {     return acquireLockIntervalUnit. }
true;public;1;3;/**  * The time unit fo the acquireLockInterva, default to TimeUnit.SECONDS.  */ ;/**  * The time unit fo the acquireLockInterva, default to TimeUnit.SECONDS.  */ public void setAcquireLockIntervalUnit(TimeUnit acquireLockIntervalUnit) {     this.acquireLockIntervalUnit = acquireLockIntervalUnit. }
false;protected;0;16;;@Override protected void doStop() throws Exception {     super.doStop().     CamelContext context = getCamelContext().     if (executor != null) {         if (context != null) {             context.getExecutorServiceManager().shutdown(executor).         } else {             executor.shutdown().         }         executor = null.     } }
false;synchronized;0;10;;synchronized ScheduledExecutorService getExecutor() {     if (executor == null) {         // Camel context should be set at this stage.         final CamelContext context = ObjectHelper.notNull(getCamelContext(), "CamelContext").         executor = context.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "FileLockClusterService-" + getId()).     }     return executor. }
