commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;4;/**  * Returns a new sory by file language expression  *  * @param context    the camel context  * @param expression the file language expression  * @param reverse    true to reverse order  * @return the comparator  */ ;/**  * Returns a new sory by file language expression  *  * @param context    the camel context  * @param expression the file language expression  * @param reverse    true to reverse order  * @return the comparator  */ public static Comparator<Exchange> sortByFileLanguage(CamelContext context, String expression, boolean reverse) {     return sortByFileLanguage(context, expression, reverse, false, null). }
true;public,static;4;4;/**  * Returns a new sory by file language expression  *  * @param context    the camel context  * @param expression the file language expression  * @param reverse    true to reverse order  * @param ignoreCase ignore case if comparing strings  * @return the comparator  */ ;/**  * Returns a new sory by file language expression  *  * @param context    the camel context  * @param expression the file language expression  * @param reverse    true to reverse order  * @param ignoreCase ignore case if comparing strings  * @return the comparator  */ public static Comparator<Exchange> sortByFileLanguage(CamelContext context, String expression, boolean reverse, boolean ignoreCase) {     return sortByFileLanguage(context, expression, reverse, ignoreCase, null). }
false;public;2;10;;public int compare(Exchange o1, Exchange o2) {     Object result1 = exp.evaluate(o1, Object.class).     Object result2 = exp.evaluate(o2, Object.class).     int answer = ObjectHelper.compare(result1, result2, ignoreCase).     // if equal then sub sort by nested comparator     if (answer == 0 && nested != null) {         answer = nested.compare(o1, o2).     }     return reverse ? -1 * answer : answer. }
false;public;0;3;;public String toString() {     return expression + (nested != null ? "." + nested.toString() : ""). }
true;public,static;5;32;/**  * Returns a new sort by file language expression  *  * @param context    the camel context  * @param expression the file language expression  * @param reverse    true to reverse order  * @param ignoreCase ignore case if comparing strings  * @param nested     nested comparator for sub group sorting, can be null  * @return the comparator  */ ;/**  * Returns a new sort by file language expression  *  * @param context    the camel context  * @param expression the file language expression  * @param reverse    true to reverse order  * @param ignoreCase ignore case if comparing strings  * @param nested     nested comparator for sub group sorting, can be null  * @return the comparator  */ public static Comparator<Exchange> sortByFileLanguage(final CamelContext context, final String expression, final boolean reverse, final boolean ignoreCase, final Comparator<Exchange> nested) {     // the expression should be enclosed by ${ }     String text = expression.     if (!expression.startsWith("${")) {         text = "${" + text.     }     if (!expression.endsWith("}")) {         text = text + "}".     }     Language language = context.resolveLanguage("file").     final Expression exp = language.createExpression(text).     return new Comparator<Exchange>() {          public int compare(Exchange o1, Exchange o2) {             Object result1 = exp.evaluate(o1, Object.class).             Object result2 = exp.evaluate(o2, Object.class).             int answer = ObjectHelper.compare(result1, result2, ignoreCase).             // if equal then sub sort by nested comparator             if (answer == 0 && nested != null) {                 answer = nested.compare(o1, o2).             }             return reverse ? -1 * answer : answer.         }          public String toString() {             return expression + (nested != null ? "." + nested.toString() : "").         }     }. }
