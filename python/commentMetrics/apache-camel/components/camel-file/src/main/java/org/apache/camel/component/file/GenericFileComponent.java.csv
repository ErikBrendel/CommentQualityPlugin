commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;24;;protected GenericFileEndpoint<T> createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // create the correct endpoint based on the protocol     final GenericFileEndpoint<T> endpoint.     // call to subclasses to build their custom version of a GenericFileEndpoint     endpoint = buildFileEndpoint(uri, remaining, parameters).     // sort by using file language     String sortBy = getAndRemoveParameter(parameters, "sortBy", String.class).     if (isNotEmpty(sortBy) && !EndpointHelper.isReferenceParameter(sortBy)) {         // we support nested sort groups so they should be chained         String[] groups = sortBy.split(".").         Iterator<String> it = CastUtils.cast(ObjectHelper.createIterator(groups)).         Comparator<Exchange> comparator = createSortByComparator(it).         endpoint.setSortBy(comparator).     }     setProperties(endpoint.getConfiguration(), parameters).     setProperties(endpoint, parameters).     afterPropertiesSet(endpoint).     return endpoint. }
true;protected,abstract;3;1;/**  * A factory method for derived file components to create the endpoint  *  * @param uri the full URI of the endpoint  * @param remaining the remaining part of the URI without the query  *                parameters or component prefix  * @param parameters the optional parameters passed in  * @return a newly created endpoint or null if the endpoint cannot be  *         created based on the inputs  * @throws Exception can be thrown  */ ;/**  * A factory method for derived file components to create the endpoint  *  * @param uri the full URI of the endpoint  * @param remaining the remaining part of the URI without the query  *                parameters or component prefix  * @param parameters the optional parameters passed in  * @return a newly created endpoint or null if the endpoint cannot be  *         created based on the inputs  * @throws Exception can be thrown  */ protected abstract GenericFileEndpoint<T> buildFileEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception.
true;protected,abstract;1;1;/**  * A factory method for derived file components to perform validation of properties  *  * @param endpoint the endpoint  * @throws Exception can be thrown in case of validation errors  */ ;/**  * A factory method for derived file components to perform validation of properties  *  * @param endpoint the endpoint  * @throws Exception can be thrown in case of validation errors  */ protected abstract void afterPropertiesSet(GenericFileEndpoint<T> endpoint) throws Exception.
true;private;1;19;/**  * Helper to create a sort comparator  *  * @param it iterator  * @return Comparator<Exchange>  */ ;/**  * Helper to create a sort comparator  *  * @param it iterator  * @return Comparator<Exchange>  */ private Comparator<Exchange> createSortByComparator(Iterator<String> it) {     if (!it.hasNext()) {         return null.     }     String group = it.next().     boolean reverse = group.startsWith("reverse:").     String reminder = reverse ? ifStartsWithReturnRemainder("reverse:", group) : group.     boolean ignoreCase = reminder.startsWith("ignoreCase:").     reminder = ignoreCase ? ifStartsWithReturnRemainder("ignoreCase:", reminder) : reminder.     StringHelper.notEmpty(reminder, "sortBy expression", this).     // recursive add nested sorters     return GenericFileDefaultSorter.sortByFileLanguage(getCamelContext(), reminder, reverse, ignoreCase, createSortByComparator(it)). }
