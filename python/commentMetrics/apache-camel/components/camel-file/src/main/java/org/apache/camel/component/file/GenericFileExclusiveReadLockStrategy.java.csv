commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Allows custom logic to be run on startup preparing the strategy, such as removing old lock files etc.  *  * @param operations generic file operations  * @param endpoint   the endpoint  * @throws Exception can be thrown in case of errors  */ ;/**  * Allows custom logic to be run on startup preparing the strategy, such as removing old lock files etc.  *  * @param operations generic file operations  * @param endpoint   the endpoint  * @throws Exception can be thrown in case of errors  */ void prepareOnStartup(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint) throws Exception.
true;;3;1;/**  * Acquires exclusive read lock to the file.  *  * @param operations generic file operations  * @param file       the file  * @param exchange   the exchange  * @return <tt>true</tt> if read lock was acquired. If <tt>false</tt> Camel  *         will skip the file and try it on the next poll  * @throws Exception can be thrown in case of errors  */ ;/**  * Acquires exclusive read lock to the file.  *  * @param operations generic file operations  * @param file       the file  * @param exchange   the exchange  * @return <tt>true</tt> if read lock was acquired. If <tt>false</tt> Camel  *         will skip the file and try it on the next poll  * @throws Exception can be thrown in case of errors  */ boolean acquireExclusiveReadLock(GenericFileOperations<T> operations, GenericFile<T> file, Exchange exchange) throws Exception.
true;;3;1;/**  * Releases the exclusive read lock granted by the <tt>acquireExclusiveReadLock</tt> method due an abort operation (acquireExclusiveReadLock returned false).  *  * @param operations generic file operations  * @param file       the file  * @param exchange   the exchange  * @throws Exception can be thrown in case of errors  */ ;/**  * Releases the exclusive read lock granted by the <tt>acquireExclusiveReadLock</tt> method due an abort operation (acquireExclusiveReadLock returned false).  *  * @param operations generic file operations  * @param file       the file  * @param exchange   the exchange  * @throws Exception can be thrown in case of errors  */ void releaseExclusiveReadLockOnAbort(GenericFileOperations<T> operations, GenericFile<T> file, Exchange exchange) throws Exception.
true;;3;1;/**  * Releases the exclusive read lock granted by the <tt>acquireExclusiveReadLock</tt> method due a rollback operation (Exchange processing failed)  *  * @param operations generic file operations  * @param file       the file  * @param exchange   the exchange  * @throws Exception can be thrown in case of errors  */ ;/**  * Releases the exclusive read lock granted by the <tt>acquireExclusiveReadLock</tt> method due a rollback operation (Exchange processing failed)  *  * @param operations generic file operations  * @param file       the file  * @param exchange   the exchange  * @throws Exception can be thrown in case of errors  */ void releaseExclusiveReadLockOnRollback(GenericFileOperations<T> operations, GenericFile<T> file, Exchange exchange) throws Exception.
true;;3;1;/**  * Releases the exclusive read lock granted by the <tt>acquireExclusiveReadLock</tt> method due a commit operation (Exchange processing succeeded)  *  * @param operations generic file operations  * @param file       the file  * @param exchange   the exchange  * @throws Exception can be thrown in case of errors  */ ;/**  * Releases the exclusive read lock granted by the <tt>acquireExclusiveReadLock</tt> method due a commit operation (Exchange processing succeeded)  *  * @param operations generic file operations  * @param file       the file  * @param exchange   the exchange  * @throws Exception can be thrown in case of errors  */ void releaseExclusiveReadLockOnCommit(GenericFileOperations<T> operations, GenericFile<T> file, Exchange exchange) throws Exception.
true;;1;1;/**  * Sets an optional timeout period.  * <p/>  * If the readlock could not be granted within the time period then the wait is stopped and the  * <tt>acquireExclusiveReadLock</tt> method returns <tt>false</tt>.  *  * @param timeout period in millis  */ ;/**  * Sets an optional timeout period.  * <p/>  * If the readlock could not be granted within the time period then the wait is stopped and the  * <tt>acquireExclusiveReadLock</tt> method returns <tt>false</tt>.  *  * @param timeout period in millis  */ void setTimeout(long timeout).
true;;1;1;/**  * Sets the check interval period.  * <p/>  * The check interval is used for sleeping between attempts to acquire read lock.  * Setting a high value allows to cater for <i>slow writes</i> in case the producer  * of the file is slow.  * <p/>  * The default period is 1000 millis.  *  * @param checkInterval interval in millis  */ ;/**  * Sets the check interval period.  * <p/>  * The check interval is used for sleeping between attempts to acquire read lock.  * Setting a high value allows to cater for <i>slow writes</i> in case the producer  * of the file is slow.  * <p/>  * The default period is 1000 millis.  *  * @param checkInterval interval in millis  */ void setCheckInterval(long checkInterval).
true;;1;1;/**  * Sets logging level used when a read lock could not be acquired.  * <p/>  * Logging level used when a read lock could not be acquired.  * <p/>  * The default logging level is WARN  * @param readLockLoggingLevel LoggingLevel  */ ;/**  * Sets logging level used when a read lock could not be acquired.  * <p/>  * Logging level used when a read lock could not be acquired.  * <p/>  * The default logging level is WARN  * @param readLockLoggingLevel LoggingLevel  */ void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel).
true;;1;1;/**  * Sets whether marker file should be used or not.  *  * @param markerFile <tt>true</tt> to use marker files.  */ ;/**  * Sets whether marker file should be used or not.  *  * @param markerFile <tt>true</tt> to use marker files.  */ void setMarkerFiler(boolean markerFile).
true;;1;1;/**  * Sets whether orphan marker files should be deleted upon startup  *  * @param deleteOrphanLockFiles <tt>true</tt> to delete files, <tt>false</tt> to skip this check  */ ;/**  * Sets whether orphan marker files should be deleted upon startup  *  * @param deleteOrphanLockFiles <tt>true</tt> to delete files, <tt>false</tt> to skip this check  */ void setDeleteOrphanLockFiles(boolean deleteOrphanLockFiles).
