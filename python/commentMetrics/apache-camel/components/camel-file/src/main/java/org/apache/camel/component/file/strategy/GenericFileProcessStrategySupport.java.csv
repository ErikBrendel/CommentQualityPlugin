commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;2;5;;public void prepareOnStartup(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint) throws Exception {     if (exclusiveReadLockStrategy != null) {         exclusiveReadLockStrategy.prepareOnStartup(operations, endpoint).     } }
false;public;4;12;;public boolean begin(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {     // if we use exclusive read then acquire the exclusive read (waiting until we got it)     if (exclusiveReadLockStrategy != null) {         boolean lock = exclusiveReadLockStrategy.acquireExclusiveReadLock(operations, file, exchange).         if (!lock) {             // do not begin since we could not get the exclusive read lock             return false.         }     }     return true. }
false;public;4;9;;public void abort(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {     deleteLocalWorkFile(exchange).     operations.releaseRetrievedFileResources(exchange).     // must release lock last     if (exclusiveReadLockStrategy != null) {         exclusiveReadLockStrategy.releaseExclusiveReadLockOnAbort(operations, file, exchange).     } }
false;public;4;9;;public void commit(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {     deleteLocalWorkFile(exchange).     operations.releaseRetrievedFileResources(exchange).     // must release lock last     if (exclusiveReadLockStrategy != null) {         exclusiveReadLockStrategy.releaseExclusiveReadLockOnCommit(operations, file, exchange).     } }
false;public;4;9;;public void rollback(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {     deleteLocalWorkFile(exchange).     operations.releaseRetrievedFileResources(exchange).     // must release lock last     if (exclusiveReadLockStrategy != null) {         exclusiveReadLockStrategy.releaseExclusiveReadLockOnRollback(operations, file, exchange).     } }
false;public;0;3;;public GenericFileExclusiveReadLockStrategy<T> getExclusiveReadLockStrategy() {     return exclusiveReadLockStrategy. }
false;public;1;3;;public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy) {     this.exclusiveReadLockStrategy = exclusiveReadLockStrategy. }
false;protected;3;23;;protected GenericFile<T> renameFile(GenericFileOperations<T> operations, GenericFile<T> from, GenericFile<T> to) throws IOException {     // deleting any existing files before renaming     try {         operations.deleteFile(to.getAbsoluteFilePath()).     } catch (GenericFileOperationFailedException e) {     // ignore the file does not exists     }     // make parent folder if missing     boolean mkdir = operations.buildDirectory(to.getParent(), to.isAbsolute()).     if (!mkdir) {         throw new GenericFileOperationFailedException("Cannot create directory: " + to.getParent() + " (could be because of denied permissions)").     }     log.debug("Renaming file: {} to: {}", from, to).     boolean renamed = operations.renameFile(from.getAbsoluteFilePath(), to.getAbsoluteFilePath()).     if (!renamed) {         throw new GenericFileOperationFailedException("Cannot rename file: " + from + " to: " + to).     }     return to. }
false;protected;1;8;;protected void deleteLocalWorkFile(Exchange exchange) {     // delete local work file, if it was used (eg by ftp component)     File local = exchange.getIn().getHeader(Exchange.FILE_LOCAL_WORK_PATH, File.class).     if (local != null && local.exists()) {         boolean deleted = FileUtil.deleteFile(local).         log.trace("Local work file: {} was deleted: {}", local, deleted).     } }
false;protected;0;7;;@Override protected void doStart() throws Exception {     if (exclusiveReadLockStrategy instanceof CamelContextAware) {         ((CamelContextAware) exclusiveReadLockStrategy).setCamelContext(camelContext).     }     ServiceHelper.startService(exclusiveReadLockStrategy). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(exclusiveReadLockStrategy). }
false;protected;0;4;;@Override protected void doShutdown() throws Exception {     ServiceHelper.stopAndShutdownService(exclusiveReadLockStrategy). }
