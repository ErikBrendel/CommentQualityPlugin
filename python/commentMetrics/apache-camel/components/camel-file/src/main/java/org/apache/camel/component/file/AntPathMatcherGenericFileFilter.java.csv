commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public boolean accept(GenericFile<T> file) {     // directories should always be accepted by ANT path matcher     if (file.isDirectory()) {         return true.     }     String path = file.getRelativeFilePath().     return filter.acceptPathName(path). }
false;public;0;3;;public String[] getExcludes() {     return filter.getExcludes(). }
false;public;1;3;;public void setExcludes(String[] excludes) {     filter.setExcludes(excludes). }
false;public;0;3;;public String[] getIncludes() {     return filter.getIncludes(). }
false;public;1;3;;public void setIncludes(String[] includes) {     filter.setIncludes(includes). }
true;public;1;3;/**  * Sets excludes using a single string where each element can be separated with comma  */ ;/**  * Sets excludes using a single string where each element can be separated with comma  */ public void setExcludes(String excludes) {     filter.setExcludes(excludes). }
true;public;1;3;/**  * Sets includes using a single string where each element can be separated with comma  */ ;/**  * Sets includes using a single string where each element can be separated with comma  */ public void setIncludes(String includes) {     filter.setIncludes(includes). }
true;public;1;3;/**  * Sets case sensitive flag on {@link org.apache.camel.component.file.AntPathMatcherFileFilter}  * <p/>  * Is by default turned on <tt>true</tt>.  */ ;/**  * Sets case sensitive flag on {@link org.apache.camel.component.file.AntPathMatcherFileFilter}  * <p/>  * Is by default turned on <tt>true</tt>.  */ public void setCaseSensitive(boolean caseSensitive) {     filter.setCaseSensitive(caseSensitive). }
false;public;0;3;;public boolean isCaseSensitive() {     return filter.isCaseSensitive(). }
