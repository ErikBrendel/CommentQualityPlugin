# id;timestamp;commentText;codeText;commentWords;codeWords
GenericFileEndpoint -> public void setAntInclude(String antInclude);1548250802;Ant style filter inclusion._Multiple inclusions may be specified in comma-delimited format.;public void setAntInclude(String antInclude) {_        this.antInclude = antInclude__    };ant,style,filter,inclusion,multiple,inclusions,may,be,specified,in,comma,delimited,format;public,void,set,ant,include,string,ant,include,this,ant,include,ant,include
GenericFileEndpoint -> public void setAntInclude(String antInclude);1549345447;Ant style filter inclusion._Multiple inclusions may be specified in comma-delimited format.;public void setAntInclude(String antInclude) {_        this.antInclude = antInclude__    };ant,style,filter,inclusion,multiple,inclusions,may,be,specified,in,comma,delimited,format;public,void,set,ant,include,string,ant,include,this,ant,include,ant,include
GenericFileEndpoint -> public void setAntInclude(String antInclude);1549345604;Ant style filter inclusion._Multiple inclusions may be specified in comma-delimited format.;public void setAntInclude(String antInclude) {_        this.antInclude = antInclude__    };ant,style,filter,inclusion,multiple,inclusions,may,be,specified,in,comma,delimited,format;public,void,set,ant,include,string,ant,include,this,ant,include,ant,include
GenericFileEndpoint -> public void setAntInclude(String antInclude);1549879447;Ant style filter inclusion._Multiple inclusions may be specified in comma-delimited format.;public void setAntInclude(String antInclude) {_        this.antInclude = antInclude__    };ant,style,filter,inclusion,multiple,inclusions,may,be,specified,in,comma,delimited,format;public,void,set,ant,include,string,ant,include,this,ant,include,ant,include
GenericFileEndpoint -> public void setKeepLastModified(boolean keepLastModified);1548250802;Will keep the last modified timestamp from the source file (if any)._Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp._This header can contain either a java.util.Date or long with the timestamp._If the timestamp exists and the option is enabled it will set this timestamp on the written file._Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers.;public void setKeepLastModified(boolean keepLastModified) {_        this.keepLastModified = keepLastModified__    };will,keep,the,last,modified,timestamp,from,the,source,file,if,any,will,use,the,exchange,header,to,located,the,timestamp,this,header,can,contain,either,a,java,util,date,or,long,with,the,timestamp,if,the,timestamp,exists,and,the,option,is,enabled,it,will,set,this,timestamp,on,the,written,file,note,this,option,only,applies,to,the,file,producer,you,cannot,use,this,option,with,any,of,the,ftp,producers;public,void,set,keep,last,modified,boolean,keep,last,modified,this,keep,last,modified,keep,last,modified
GenericFileEndpoint -> public void setKeepLastModified(boolean keepLastModified);1549345447;Will keep the last modified timestamp from the source file (if any)._Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp._This header can contain either a java.util.Date or long with the timestamp._If the timestamp exists and the option is enabled it will set this timestamp on the written file._Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers.;public void setKeepLastModified(boolean keepLastModified) {_        this.keepLastModified = keepLastModified__    };will,keep,the,last,modified,timestamp,from,the,source,file,if,any,will,use,the,exchange,header,to,located,the,timestamp,this,header,can,contain,either,a,java,util,date,or,long,with,the,timestamp,if,the,timestamp,exists,and,the,option,is,enabled,it,will,set,this,timestamp,on,the,written,file,note,this,option,only,applies,to,the,file,producer,you,cannot,use,this,option,with,any,of,the,ftp,producers;public,void,set,keep,last,modified,boolean,keep,last,modified,this,keep,last,modified,keep,last,modified
GenericFileEndpoint -> public void setKeepLastModified(boolean keepLastModified);1549345604;Will keep the last modified timestamp from the source file (if any)._Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp._This header can contain either a java.util.Date or long with the timestamp._If the timestamp exists and the option is enabled it will set this timestamp on the written file._Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers.;public void setKeepLastModified(boolean keepLastModified) {_        this.keepLastModified = keepLastModified__    };will,keep,the,last,modified,timestamp,from,the,source,file,if,any,will,use,the,exchange,header,to,located,the,timestamp,this,header,can,contain,either,a,java,util,date,or,long,with,the,timestamp,if,the,timestamp,exists,and,the,option,is,enabled,it,will,set,this,timestamp,on,the,written,file,note,this,option,only,applies,to,the,file,producer,you,cannot,use,this,option,with,any,of,the,ftp,producers;public,void,set,keep,last,modified,boolean,keep,last,modified,this,keep,last,modified,keep,last,modified
GenericFileEndpoint -> public void setKeepLastModified(boolean keepLastModified);1549879447;Will keep the last modified timestamp from the source file (if any)._Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp._This header can contain either a java.util.Date or long with the timestamp._If the timestamp exists and the option is enabled it will set this timestamp on the written file._Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers.;public void setKeepLastModified(boolean keepLastModified) {_        this.keepLastModified = keepLastModified__    };will,keep,the,last,modified,timestamp,from,the,source,file,if,any,will,use,the,exchange,header,to,located,the,timestamp,this,header,can,contain,either,a,java,util,date,or,long,with,the,timestamp,if,the,timestamp,exists,and,the,option,is,enabled,it,will,set,this,timestamp,on,the,written,file,note,this,option,only,applies,to,the,file,producer,you,cannot,use,this,option,with,any,of,the,ftp,producers;public,void,set,keep,last,modified,boolean,keep,last,modified,this,keep,last,modified,keep,last,modified
GenericFileEndpoint -> public void setFilterDirectory(Predicate filterDirectory);1548250802;Filters the directory based on Simple language._For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd};public void setFilterDirectory(Predicate filterDirectory) {_        this.filterDirectory = filterDirectory__    };filters,the,directory,based,on,simple,language,for,example,to,filter,on,current,date,you,can,use,a,simple,date,pattern,such,as,date,now,yyy,mmdd;public,void,set,filter,directory,predicate,filter,directory,this,filter,directory,filter,directory
GenericFileEndpoint -> public void setFilterDirectory(Predicate filterDirectory);1549345447;Filters the directory based on Simple language._For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd};public void setFilterDirectory(Predicate filterDirectory) {_        this.filterDirectory = filterDirectory__    };filters,the,directory,based,on,simple,language,for,example,to,filter,on,current,date,you,can,use,a,simple,date,pattern,such,as,date,now,yyy,mmdd;public,void,set,filter,directory,predicate,filter,directory,this,filter,directory,filter,directory
GenericFileEndpoint -> public void setFilterDirectory(Predicate filterDirectory);1549345604;Filters the directory based on Simple language._For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd};public void setFilterDirectory(Predicate filterDirectory) {_        this.filterDirectory = filterDirectory__    };filters,the,directory,based,on,simple,language,for,example,to,filter,on,current,date,you,can,use,a,simple,date,pattern,such,as,date,now,yyy,mmdd;public,void,set,filter,directory,predicate,filter,directory,this,filter,directory,filter,directory
GenericFileEndpoint -> public void setFilterDirectory(Predicate filterDirectory);1549879447;Filters the directory based on Simple language._For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd};public void setFilterDirectory(Predicate filterDirectory) {_        this.filterDirectory = filterDirectory__    };filters,the,directory,based,on,simple,language,for,example,to,filter,on,current,date,you,can,use,a,simple,date,pattern,such,as,date,now,yyy,mmdd;public,void,set,filter,directory,predicate,filter,directory,this,filter,directory,filter,directory
GenericFileEndpoint -> public void setDirectoryMustExist(boolean directoryMustExist);1548250802;Similar to startingDirectoryMustExist but this applies during polling recursive sub directories.;public void setDirectoryMustExist(boolean directoryMustExist) {_        this.directoryMustExist = directoryMustExist__    };similar,to,starting,directory,must,exist,but,this,applies,during,polling,recursive,sub,directories;public,void,set,directory,must,exist,boolean,directory,must,exist,this,directory,must,exist,directory,must,exist
GenericFileEndpoint -> public void setDirectoryMustExist(boolean directoryMustExist);1549345447;Similar to startingDirectoryMustExist but this applies during polling recursive sub directories.;public void setDirectoryMustExist(boolean directoryMustExist) {_        this.directoryMustExist = directoryMustExist__    };similar,to,starting,directory,must,exist,but,this,applies,during,polling,recursive,sub,directories;public,void,set,directory,must,exist,boolean,directory,must,exist,this,directory,must,exist,directory,must,exist
GenericFileEndpoint -> public void setDirectoryMustExist(boolean directoryMustExist);1549345604;Similar to startingDirectoryMustExist but this applies during polling recursive sub directories.;public void setDirectoryMustExist(boolean directoryMustExist) {_        this.directoryMustExist = directoryMustExist__    };similar,to,starting,directory,must,exist,but,this,applies,during,polling,recursive,sub,directories;public,void,set,directory,must,exist,boolean,directory,must,exist,this,directory,must,exist,directory,must,exist
GenericFileEndpoint -> public void setDirectoryMustExist(boolean directoryMustExist);1549879447;Similar to the startingDirectoryMustExist option but this applies during polling (after starting the consumer).;public void setDirectoryMustExist(boolean directoryMustExist) {_        this.directoryMustExist = directoryMustExist__    };similar,to,the,starting,directory,must,exist,option,but,this,applies,during,polling,after,starting,the,consumer;public,void,set,directory,must,exist,boolean,directory,must,exist,this,directory,must,exist,directory,must,exist
GenericFileEndpoint -> protected String createDoneFileName(String fileName);1548250802;Creates the associated name of the done file based on the given file name._<p/>_This method should only be invoked if a done filename property has been set on this endpoint.__@param fileName the file name_@return name of the associated done file name;protected String createDoneFileName(String fileName) {_        String pattern = getDoneFileName()__        StringHelper.notEmpty(pattern, "doneFileName", pattern)___        _        String path = FileUtil.onlyPath(fileName)__        String onlyName = Matcher.quoteReplacement(FileUtil.stripPath(fileName))___        pattern = pattern.replaceFirst("\\$\\{file:name\\}", onlyName)__        pattern = pattern.replaceFirst("\\$simple\\{file:name\\}", onlyName)__        pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true))__        pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true))___        _        if (StringHelper.hasStartToken(pattern, "simple")) {_            throw new ExpressionIllegalSyntaxException(fileName + ". Cannot resolve reminder: " + pattern)__        }__        String answer = pattern__        if (org.apache.camel.util.ObjectHelper.isNotEmpty(path) && org.apache.camel.util.ObjectHelper.isNotEmpty(pattern)) {_            _            answer = path + getFileSeparator() + pattern__        }__        if (getConfiguration().needToNormalize()) {_            _            answer = FileUtil.normalizePath(answer)__        }__        return answer__    };creates,the,associated,name,of,the,done,file,based,on,the,given,file,name,p,this,method,should,only,be,invoked,if,a,done,filename,property,has,been,set,on,this,endpoint,param,file,name,the,file,name,return,name,of,the,associated,done,file,name;protected,string,create,done,file,name,string,file,name,string,pattern,get,done,file,name,string,helper,not,empty,pattern,done,file,name,pattern,string,path,file,util,only,path,file,name,string,only,name,matcher,quote,replacement,file,util,strip,path,file,name,pattern,pattern,replace,first,file,name,only,name,pattern,pattern,replace,first,simple,file,name,only,name,pattern,pattern,replace,first,file,name,noext,file,util,strip,ext,only,name,true,pattern,pattern,replace,first,simple,file,name,noext,file,util,strip,ext,only,name,true,if,string,helper,has,start,token,pattern,simple,throw,new,expression,illegal,syntax,exception,file,name,cannot,resolve,reminder,pattern,string,answer,pattern,if,org,apache,camel,util,object,helper,is,not,empty,path,org,apache,camel,util,object,helper,is,not,empty,pattern,answer,path,get,file,separator,pattern,if,get,configuration,need,to,normalize,answer,file,util,normalize,path,answer,return,answer
GenericFileEndpoint -> protected String createDoneFileName(String fileName);1549345447;Creates the associated name of the done file based on the given file name._<p/>_This method should only be invoked if a done filename property has been set on this endpoint.__@param fileName the file name_@return name of the associated done file name;protected String createDoneFileName(String fileName) {_        String pattern = getDoneFileName()__        StringHelper.notEmpty(pattern, "doneFileName", pattern)___        _        String path = FileUtil.onlyPath(fileName)__        String onlyName = Matcher.quoteReplacement(FileUtil.stripPath(fileName))___        pattern = pattern.replaceFirst("\\$\\{file:name\\}", onlyName)__        pattern = pattern.replaceFirst("\\$simple\\{file:name\\}", onlyName)__        pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true))__        pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true))___        _        if (StringHelper.hasStartToken(pattern, "simple")) {_            throw new ExpressionIllegalSyntaxException(fileName + ". Cannot resolve reminder: " + pattern)__        }__        String answer = pattern__        if (org.apache.camel.util.ObjectHelper.isNotEmpty(path) && org.apache.camel.util.ObjectHelper.isNotEmpty(pattern)) {_            _            answer = path + getFileSeparator() + pattern__        }__        if (getConfiguration().needToNormalize()) {_            _            answer = FileUtil.normalizePath(answer)__        }__        return answer__    };creates,the,associated,name,of,the,done,file,based,on,the,given,file,name,p,this,method,should,only,be,invoked,if,a,done,filename,property,has,been,set,on,this,endpoint,param,file,name,the,file,name,return,name,of,the,associated,done,file,name;protected,string,create,done,file,name,string,file,name,string,pattern,get,done,file,name,string,helper,not,empty,pattern,done,file,name,pattern,string,path,file,util,only,path,file,name,string,only,name,matcher,quote,replacement,file,util,strip,path,file,name,pattern,pattern,replace,first,file,name,only,name,pattern,pattern,replace,first,simple,file,name,only,name,pattern,pattern,replace,first,file,name,noext,file,util,strip,ext,only,name,true,pattern,pattern,replace,first,simple,file,name,noext,file,util,strip,ext,only,name,true,if,string,helper,has,start,token,pattern,simple,throw,new,expression,illegal,syntax,exception,file,name,cannot,resolve,reminder,pattern,string,answer,pattern,if,org,apache,camel,util,object,helper,is,not,empty,path,org,apache,camel,util,object,helper,is,not,empty,pattern,answer,path,get,file,separator,pattern,if,get,configuration,need,to,normalize,answer,file,util,normalize,path,answer,return,answer
GenericFileEndpoint -> protected String createDoneFileName(String fileName);1549345604;Creates the associated name of the done file based on the given file name._<p/>_This method should only be invoked if a done filename property has been set on this endpoint.__@param fileName the file name_@return name of the associated done file name;protected String createDoneFileName(String fileName) {_        String pattern = getDoneFileName()__        StringHelper.notEmpty(pattern, "doneFileName", pattern)___        _        String path = FileUtil.onlyPath(fileName)__        String onlyName = Matcher.quoteReplacement(FileUtil.stripPath(fileName))___        pattern = pattern.replaceFirst("\\$\\{file:name\\}", onlyName)__        pattern = pattern.replaceFirst("\\$simple\\{file:name\\}", onlyName)__        pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true))__        pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true))___        _        if (StringHelper.hasStartToken(pattern, "simple")) {_            throw new ExpressionIllegalSyntaxException(fileName + ". Cannot resolve reminder: " + pattern)__        }__        String answer = pattern__        if (org.apache.camel.util.ObjectHelper.isNotEmpty(path) && org.apache.camel.util.ObjectHelper.isNotEmpty(pattern)) {_            _            answer = path + getFileSeparator() + pattern__        }__        if (getConfiguration().needToNormalize()) {_            _            answer = FileUtil.normalizePath(answer)__        }__        return answer__    };creates,the,associated,name,of,the,done,file,based,on,the,given,file,name,p,this,method,should,only,be,invoked,if,a,done,filename,property,has,been,set,on,this,endpoint,param,file,name,the,file,name,return,name,of,the,associated,done,file,name;protected,string,create,done,file,name,string,file,name,string,pattern,get,done,file,name,string,helper,not,empty,pattern,done,file,name,pattern,string,path,file,util,only,path,file,name,string,only,name,matcher,quote,replacement,file,util,strip,path,file,name,pattern,pattern,replace,first,file,name,only,name,pattern,pattern,replace,first,simple,file,name,only,name,pattern,pattern,replace,first,file,name,noext,file,util,strip,ext,only,name,true,pattern,pattern,replace,first,simple,file,name,noext,file,util,strip,ext,only,name,true,if,string,helper,has,start,token,pattern,simple,throw,new,expression,illegal,syntax,exception,file,name,cannot,resolve,reminder,pattern,string,answer,pattern,if,org,apache,camel,util,object,helper,is,not,empty,path,org,apache,camel,util,object,helper,is,not,empty,pattern,answer,path,get,file,separator,pattern,if,get,configuration,need,to,normalize,answer,file,util,normalize,path,answer,return,answer
GenericFileEndpoint -> protected String createDoneFileName(String fileName);1549879447;Creates the associated name of the done file based on the given file name._<p/>_This method should only be invoked if a done filename property has been set on this endpoint.__@param fileName the file name_@return name of the associated done file name;protected String createDoneFileName(String fileName) {_        String pattern = getDoneFileName()__        StringHelper.notEmpty(pattern, "doneFileName", pattern)___        _        String path = FileUtil.onlyPath(fileName)__        String onlyName = Matcher.quoteReplacement(FileUtil.stripPath(fileName))___        pattern = pattern.replaceFirst("\\$\\{file:name\\}", onlyName)__        pattern = pattern.replaceFirst("\\$simple\\{file:name\\}", onlyName)__        pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true))__        pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true))___        _        if (StringHelper.hasStartToken(pattern, "simple")) {_            throw new ExpressionIllegalSyntaxException(fileName + ". Cannot resolve reminder: " + pattern)__        }__        String answer = pattern__        if (org.apache.camel.util.ObjectHelper.isNotEmpty(path) && org.apache.camel.util.ObjectHelper.isNotEmpty(pattern)) {_            _            answer = path + getFileSeparator() + pattern__        }__        if (getConfiguration().needToNormalize()) {_            _            answer = FileUtil.normalizePath(answer)__        }__        return answer__    };creates,the,associated,name,of,the,done,file,based,on,the,given,file,name,p,this,method,should,only,be,invoked,if,a,done,filename,property,has,been,set,on,this,endpoint,param,file,name,the,file,name,return,name,of,the,associated,done,file,name;protected,string,create,done,file,name,string,file,name,string,pattern,get,done,file,name,string,helper,not,empty,pattern,done,file,name,pattern,string,path,file,util,only,path,file,name,string,only,name,matcher,quote,replacement,file,util,strip,path,file,name,pattern,pattern,replace,first,file,name,only,name,pattern,pattern,replace,first,simple,file,name,only,name,pattern,pattern,replace,first,file,name,noext,file,util,strip,ext,only,name,true,pattern,pattern,replace,first,simple,file,name,noext,file,util,strip,ext,only,name,true,if,string,helper,has,start,token,pattern,simple,throw,new,expression,illegal,syntax,exception,file,name,cannot,resolve,reminder,pattern,string,answer,pattern,if,org,apache,camel,util,object,helper,is,not,empty,path,org,apache,camel,util,object,helper,is,not,empty,pattern,answer,path,get,file,separator,pattern,if,get,configuration,need,to,normalize,answer,file,util,normalize,path,answer,return,answer
GenericFileEndpoint -> public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy);1548250802;Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured._By default, there is an implementation used if no custom strategy is provided;public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy) {_        this.moveExistingFileStrategy = moveExistingFileStrategy__    };strategy,custom,strategy,used,to,move,file,with,special,naming,token,to,use,when,file,exist,move,is,configured,by,default,there,is,an,implementation,used,if,no,custom,strategy,is,provided;public,void,set,move,existing,file,strategy,file,move,existing,strategy,move,existing,file,strategy,this,move,existing,file,strategy,move,existing,file,strategy
GenericFileEndpoint -> public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy);1549345447;Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured._By default, there is an implementation used if no custom strategy is provided;public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy) {_        this.moveExistingFileStrategy = moveExistingFileStrategy__    };strategy,custom,strategy,used,to,move,file,with,special,naming,token,to,use,when,file,exist,move,is,configured,by,default,there,is,an,implementation,used,if,no,custom,strategy,is,provided;public,void,set,move,existing,file,strategy,file,move,existing,strategy,move,existing,file,strategy,this,move,existing,file,strategy,move,existing,file,strategy
GenericFileEndpoint -> public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy);1549345604;Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured._By default, there is an implementation used if no custom strategy is provided;public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy) {_        this.moveExistingFileStrategy = moveExistingFileStrategy__    };strategy,custom,strategy,used,to,move,file,with,special,naming,token,to,use,when,file,exist,move,is,configured,by,default,there,is,an,implementation,used,if,no,custom,strategy,is,provided;public,void,set,move,existing,file,strategy,file,move,existing,strategy,move,existing,file,strategy,this,move,existing,file,strategy,move,existing,file,strategy
GenericFileEndpoint -> public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy);1549879447;Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured._By default, there is an implementation used if no custom strategy is provided;public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy) {_        this.moveExistingFileStrategy = moveExistingFileStrategy__    };strategy,custom,strategy,used,to,move,file,with,special,naming,token,to,use,when,file,exist,move,is,configured,by,default,there,is,an,implementation,used,if,no,custom,strategy,is,provided;public,void,set,move,existing,file,strategy,file,move,existing,strategy,move,existing,file,strategy,this,move,existing,file,strategy,move,existing,file,strategy
GenericFileEndpoint -> public void setOnCompletionExceptionHandler(ExceptionHandler onCompletionExceptionHandler);1548250802;To use a custom {@link org.apache.camel.spi.ExceptionHandler} to handle any thrown exceptions that happens_during the file on completion process where the consumer does either a commit or rollback. The default_implementation will log any exception at WARN level and ignore.;public void setOnCompletionExceptionHandler(ExceptionHandler onCompletionExceptionHandler) {_        this.onCompletionExceptionHandler = onCompletionExceptionHandler__    };to,use,a,custom,link,org,apache,camel,spi,exception,handler,to,handle,any,thrown,exceptions,that,happens,during,the,file,on,completion,process,where,the,consumer,does,either,a,commit,or,rollback,the,default,implementation,will,log,any,exception,at,warn,level,and,ignore;public,void,set,on,completion,exception,handler,exception,handler,on,completion,exception,handler,this,on,completion,exception,handler,on,completion,exception,handler
GenericFileEndpoint -> public void setOnCompletionExceptionHandler(ExceptionHandler onCompletionExceptionHandler);1549345447;To use a custom {@link org.apache.camel.spi.ExceptionHandler} to handle any thrown exceptions that happens_during the file on completion process where the consumer does either a commit or rollback. The default_implementation will log any exception at WARN level and ignore.;public void setOnCompletionExceptionHandler(ExceptionHandler onCompletionExceptionHandler) {_        this.onCompletionExceptionHandler = onCompletionExceptionHandler__    };to,use,a,custom,link,org,apache,camel,spi,exception,handler,to,handle,any,thrown,exceptions,that,happens,during,the,file,on,completion,process,where,the,consumer,does,either,a,commit,or,rollback,the,default,implementation,will,log,any,exception,at,warn,level,and,ignore;public,void,set,on,completion,exception,handler,exception,handler,on,completion,exception,handler,this,on,completion,exception,handler,on,completion,exception,handler
GenericFileEndpoint -> public void setOnCompletionExceptionHandler(ExceptionHandler onCompletionExceptionHandler);1549345604;To use a custom {@link org.apache.camel.spi.ExceptionHandler} to handle any thrown exceptions that happens_during the file on completion process where the consumer does either a commit or rollback. The default_implementation will log any exception at WARN level and ignore.;public void setOnCompletionExceptionHandler(ExceptionHandler onCompletionExceptionHandler) {_        this.onCompletionExceptionHandler = onCompletionExceptionHandler__    };to,use,a,custom,link,org,apache,camel,spi,exception,handler,to,handle,any,thrown,exceptions,that,happens,during,the,file,on,completion,process,where,the,consumer,does,either,a,commit,or,rollback,the,default,implementation,will,log,any,exception,at,warn,level,and,ignore;public,void,set,on,completion,exception,handler,exception,handler,on,completion,exception,handler,this,on,completion,exception,handler,on,completion,exception,handler
GenericFileEndpoint -> public void setOnCompletionExceptionHandler(ExceptionHandler onCompletionExceptionHandler);1549879447;To use a custom {@link org.apache.camel.spi.ExceptionHandler} to handle any thrown exceptions that happens_during the file on completion process where the consumer does either a commit or rollback. The default_implementation will log any exception at WARN level and ignore.;public void setOnCompletionExceptionHandler(ExceptionHandler onCompletionExceptionHandler) {_        this.onCompletionExceptionHandler = onCompletionExceptionHandler__    };to,use,a,custom,link,org,apache,camel,spi,exception,handler,to,handle,any,thrown,exceptions,that,happens,during,the,file,on,completion,process,where,the,consumer,does,either,a,commit,or,rollback,the,default,implementation,will,log,any,exception,at,warn,level,and,ignore;public,void,set,on,completion,exception,handler,exception,handler,on,completion,exception,handler,this,on,completion,exception,handler,on,completion,exception,handler
GenericFileEndpoint -> protected boolean isDoneFile(String fileName);1548250802;Is the given file a done file?_<p/>_This method should only be invoked if a done filename property has been set on this endpoint.__@param fileName the file name_@return <tt>true</tt> if its a done file, <tt>false</tt> otherwise;protected boolean isDoneFile(String fileName) {_        String pattern = getDoneFileName()__        StringHelper.notEmpty(pattern, "doneFileName", pattern)___        if (!StringHelper.hasStartToken(pattern, "simple")) {_            _            return pattern.equals(fileName)__        }__        _        _        boolean prefix = pattern.indexOf("${") > 0___        _        pattern = pattern.replaceFirst("\\$\\{file:name\\}", "")__        pattern = pattern.replaceFirst("\\$simple\\{file:name\\}", "")__        pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", "")__        pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", "")___        _        if (StringHelper.hasStartToken(pattern, "simple")) {_            throw new ExpressionIllegalSyntaxException(fileName + ". Cannot resolve reminder: " + pattern)__        }__        if (prefix) {_            return fileName.startsWith(pattern)__        } else {_            return fileName.endsWith(pattern)__        }_    };is,the,given,file,a,done,file,p,this,method,should,only,be,invoked,if,a,done,filename,property,has,been,set,on,this,endpoint,param,file,name,the,file,name,return,tt,true,tt,if,its,a,done,file,tt,false,tt,otherwise;protected,boolean,is,done,file,string,file,name,string,pattern,get,done,file,name,string,helper,not,empty,pattern,done,file,name,pattern,if,string,helper,has,start,token,pattern,simple,return,pattern,equals,file,name,boolean,prefix,pattern,index,of,0,pattern,pattern,replace,first,file,name,pattern,pattern,replace,first,simple,file,name,pattern,pattern,replace,first,file,name,noext,pattern,pattern,replace,first,simple,file,name,noext,if,string,helper,has,start,token,pattern,simple,throw,new,expression,illegal,syntax,exception,file,name,cannot,resolve,reminder,pattern,if,prefix,return,file,name,starts,with,pattern,else,return,file,name,ends,with,pattern
GenericFileEndpoint -> protected boolean isDoneFile(String fileName);1549345447;Is the given file a done file?_<p/>_This method should only be invoked if a done filename property has been set on this endpoint.__@param fileName the file name_@return <tt>true</tt> if its a done file, <tt>false</tt> otherwise;protected boolean isDoneFile(String fileName) {_        String pattern = getDoneFileName()__        StringHelper.notEmpty(pattern, "doneFileName", pattern)___        if (!StringHelper.hasStartToken(pattern, "simple")) {_            _            return pattern.equals(fileName)__        }__        _        _        boolean prefix = pattern.indexOf("${") > 0___        _        pattern = pattern.replaceFirst("\\$\\{file:name\\}", "")__        pattern = pattern.replaceFirst("\\$simple\\{file:name\\}", "")__        pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", "")__        pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", "")___        _        if (StringHelper.hasStartToken(pattern, "simple")) {_            throw new ExpressionIllegalSyntaxException(fileName + ". Cannot resolve reminder: " + pattern)__        }__        if (prefix) {_            return fileName.startsWith(pattern)__        } else {_            return fileName.endsWith(pattern)__        }_    };is,the,given,file,a,done,file,p,this,method,should,only,be,invoked,if,a,done,filename,property,has,been,set,on,this,endpoint,param,file,name,the,file,name,return,tt,true,tt,if,its,a,done,file,tt,false,tt,otherwise;protected,boolean,is,done,file,string,file,name,string,pattern,get,done,file,name,string,helper,not,empty,pattern,done,file,name,pattern,if,string,helper,has,start,token,pattern,simple,return,pattern,equals,file,name,boolean,prefix,pattern,index,of,0,pattern,pattern,replace,first,file,name,pattern,pattern,replace,first,simple,file,name,pattern,pattern,replace,first,file,name,noext,pattern,pattern,replace,first,simple,file,name,noext,if,string,helper,has,start,token,pattern,simple,throw,new,expression,illegal,syntax,exception,file,name,cannot,resolve,reminder,pattern,if,prefix,return,file,name,starts,with,pattern,else,return,file,name,ends,with,pattern
GenericFileEndpoint -> protected boolean isDoneFile(String fileName);1549345604;Is the given file a done file?_<p/>_This method should only be invoked if a done filename property has been set on this endpoint.__@param fileName the file name_@return <tt>true</tt> if its a done file, <tt>false</tt> otherwise;protected boolean isDoneFile(String fileName) {_        String pattern = getDoneFileName()__        StringHelper.notEmpty(pattern, "doneFileName", pattern)___        if (!StringHelper.hasStartToken(pattern, "simple")) {_            _            return pattern.equals(fileName)__        }__        _        _        boolean prefix = pattern.indexOf("${") > 0___        _        pattern = pattern.replaceFirst("\\$\\{file:name\\}", "")__        pattern = pattern.replaceFirst("\\$simple\\{file:name\\}", "")__        pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", "")__        pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", "")___        _        if (StringHelper.hasStartToken(pattern, "simple")) {_            throw new ExpressionIllegalSyntaxException(fileName + ". Cannot resolve reminder: " + pattern)__        }__        if (prefix) {_            return fileName.startsWith(pattern)__        } else {_            return fileName.endsWith(pattern)__        }_    };is,the,given,file,a,done,file,p,this,method,should,only,be,invoked,if,a,done,filename,property,has,been,set,on,this,endpoint,param,file,name,the,file,name,return,tt,true,tt,if,its,a,done,file,tt,false,tt,otherwise;protected,boolean,is,done,file,string,file,name,string,pattern,get,done,file,name,string,helper,not,empty,pattern,done,file,name,pattern,if,string,helper,has,start,token,pattern,simple,return,pattern,equals,file,name,boolean,prefix,pattern,index,of,0,pattern,pattern,replace,first,file,name,pattern,pattern,replace,first,simple,file,name,pattern,pattern,replace,first,file,name,noext,pattern,pattern,replace,first,simple,file,name,noext,if,string,helper,has,start,token,pattern,simple,throw,new,expression,illegal,syntax,exception,file,name,cannot,resolve,reminder,pattern,if,prefix,return,file,name,starts,with,pattern,else,return,file,name,ends,with,pattern
GenericFileEndpoint -> protected boolean isDoneFile(String fileName);1549879447;Is the given file a done file?_<p/>_This method should only be invoked if a done filename property has been set on this endpoint.__@param fileName the file name_@return <tt>true</tt> if its a done file, <tt>false</tt> otherwise;protected boolean isDoneFile(String fileName) {_        String pattern = getDoneFileName()__        StringHelper.notEmpty(pattern, "doneFileName", pattern)___        if (!StringHelper.hasStartToken(pattern, "simple")) {_            _            return pattern.equals(fileName)__        }__        _        _        boolean prefix = pattern.indexOf("${") > 0___        _        pattern = pattern.replaceFirst("\\$\\{file:name\\}", "")__        pattern = pattern.replaceFirst("\\$simple\\{file:name\\}", "")__        pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", "")__        pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", "")___        _        if (StringHelper.hasStartToken(pattern, "simple")) {_            throw new ExpressionIllegalSyntaxException(fileName + ". Cannot resolve reminder: " + pattern)__        }__        if (prefix) {_            return fileName.startsWith(pattern)__        } else {_            return fileName.endsWith(pattern)__        }_    };is,the,given,file,a,done,file,p,this,method,should,only,be,invoked,if,a,done,filename,property,has,been,set,on,this,endpoint,param,file,name,the,file,name,return,tt,true,tt,if,its,a,done,file,tt,false,tt,otherwise;protected,boolean,is,done,file,string,file,name,string,pattern,get,done,file,name,string,helper,not,empty,pattern,done,file,name,pattern,if,string,helper,has,start,token,pattern,simple,return,pattern,equals,file,name,boolean,prefix,pattern,index,of,0,pattern,pattern,replace,first,file,name,pattern,pattern,replace,first,simple,file,name,pattern,pattern,replace,first,file,name,noext,pattern,pattern,replace,first,simple,file,name,noext,if,string,helper,has,start,token,pattern,simple,throw,new,expression,illegal,syntax,exception,file,name,cannot,resolve,reminder,pattern,if,prefix,return,file,name,starts,with,pattern,else,return,file,name,ends,with,pattern
GenericFileEndpoint -> public void setDoneFileName(String doneFileName);1548250802;Producer: If provided, then Camel will write a 2nd done file when the original file has been written._The done file will be empty. This option configures what file name to use._Either you can specify a fixed name. Or you can use dynamic placeholders._The done file will always be written in the same folder as the original file._<p/>_Consumer: If provided, Camel will only consume files if a done file exists._This option configures what file name to use. Either you can specify a fixed name._Or you can use dynamic placeholders.The done file is always expected in the same folder_as the original file._<p/>_Only ${file.name} and ${file.name.noext} is supported as dynamic placeholders.;public void setDoneFileName(String doneFileName) {_        this.doneFileName = doneFileName__    };producer,if,provided,then,camel,will,write,a,2nd,done,file,when,the,original,file,has,been,written,the,done,file,will,be,empty,this,option,configures,what,file,name,to,use,either,you,can,specify,a,fixed,name,or,you,can,use,dynamic,placeholders,the,done,file,will,always,be,written,in,the,same,folder,as,the,original,file,p,consumer,if,provided,camel,will,only,consume,files,if,a,done,file,exists,this,option,configures,what,file,name,to,use,either,you,can,specify,a,fixed,name,or,you,can,use,dynamic,placeholders,the,done,file,is,always,expected,in,the,same,folder,as,the,original,file,p,only,file,name,and,file,name,noext,is,supported,as,dynamic,placeholders;public,void,set,done,file,name,string,done,file,name,this,done,file,name,done,file,name
GenericFileEndpoint -> public void setDoneFileName(String doneFileName);1549345447;Producer: If provided, then Camel will write a 2nd done file when the original file has been written._The done file will be empty. This option configures what file name to use._Either you can specify a fixed name. Or you can use dynamic placeholders._The done file will always be written in the same folder as the original file._<p/>_Consumer: If provided, Camel will only consume files if a done file exists._This option configures what file name to use. Either you can specify a fixed name._Or you can use dynamic placeholders.The done file is always expected in the same folder_as the original file._<p/>_Only ${file.name} and ${file.name.noext} is supported as dynamic placeholders.;public void setDoneFileName(String doneFileName) {_        this.doneFileName = doneFileName__    };producer,if,provided,then,camel,will,write,a,2nd,done,file,when,the,original,file,has,been,written,the,done,file,will,be,empty,this,option,configures,what,file,name,to,use,either,you,can,specify,a,fixed,name,or,you,can,use,dynamic,placeholders,the,done,file,will,always,be,written,in,the,same,folder,as,the,original,file,p,consumer,if,provided,camel,will,only,consume,files,if,a,done,file,exists,this,option,configures,what,file,name,to,use,either,you,can,specify,a,fixed,name,or,you,can,use,dynamic,placeholders,the,done,file,is,always,expected,in,the,same,folder,as,the,original,file,p,only,file,name,and,file,name,noext,is,supported,as,dynamic,placeholders;public,void,set,done,file,name,string,done,file,name,this,done,file,name,done,file,name
GenericFileEndpoint -> public void setDoneFileName(String doneFileName);1549345604;Producer: If provided, then Camel will write a 2nd done file when the original file has been written._The done file will be empty. This option configures what file name to use._Either you can specify a fixed name. Or you can use dynamic placeholders._The done file will always be written in the same folder as the original file._<p/>_Consumer: If provided, Camel will only consume files if a done file exists._This option configures what file name to use. Either you can specify a fixed name._Or you can use dynamic placeholders.The done file is always expected in the same folder_as the original file._<p/>_Only ${file.name} and ${file.name.noext} is supported as dynamic placeholders.;public void setDoneFileName(String doneFileName) {_        this.doneFileName = doneFileName__    };producer,if,provided,then,camel,will,write,a,2nd,done,file,when,the,original,file,has,been,written,the,done,file,will,be,empty,this,option,configures,what,file,name,to,use,either,you,can,specify,a,fixed,name,or,you,can,use,dynamic,placeholders,the,done,file,will,always,be,written,in,the,same,folder,as,the,original,file,p,consumer,if,provided,camel,will,only,consume,files,if,a,done,file,exists,this,option,configures,what,file,name,to,use,either,you,can,specify,a,fixed,name,or,you,can,use,dynamic,placeholders,the,done,file,is,always,expected,in,the,same,folder,as,the,original,file,p,only,file,name,and,file,name,noext,is,supported,as,dynamic,placeholders;public,void,set,done,file,name,string,done,file,name,this,done,file,name,done,file,name
GenericFileEndpoint -> public void setDoneFileName(String doneFileName);1549879447;Producer: If provided, then Camel will write a 2nd done file when the original file has been written._The done file will be empty. This option configures what file name to use._Either you can specify a fixed name. Or you can use dynamic placeholders._The done file will always be written in the same folder as the original file._<p/>_Consumer: If provided, Camel will only consume files if a done file exists._This option configures what file name to use. Either you can specify a fixed name._Or you can use dynamic placeholders.The done file is always expected in the same folder_as the original file._<p/>_Only ${file.name} and ${file.name.noext} is supported as dynamic placeholders.;public void setDoneFileName(String doneFileName) {_        this.doneFileName = doneFileName__    };producer,if,provided,then,camel,will,write,a,2nd,done,file,when,the,original,file,has,been,written,the,done,file,will,be,empty,this,option,configures,what,file,name,to,use,either,you,can,specify,a,fixed,name,or,you,can,use,dynamic,placeholders,the,done,file,will,always,be,written,in,the,same,folder,as,the,original,file,p,consumer,if,provided,camel,will,only,consume,files,if,a,done,file,exists,this,option,configures,what,file,name,to,use,either,you,can,specify,a,fixed,name,or,you,can,use,dynamic,placeholders,the,done,file,is,always,expected,in,the,same,folder,as,the,original,file,p,only,file,name,and,file,name,noext,is,supported,as,dynamic,placeholders;public,void,set,done,file,name,string,done,file,name,this,done,file,name,done,file,name
GenericFileEndpoint -> public void setTempFileName(Expression tempFileName);1548250802;The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language.;public void setTempFileName(Expression tempFileName) {_        this.tempFileName = tempFileName__    };the,same,as,temp,prefix,option,but,offering,a,more,fine,grained,control,on,the,naming,of,the,temporary,filename,as,it,uses,the,file,language;public,void,set,temp,file,name,expression,temp,file,name,this,temp,file,name,temp,file,name
GenericFileEndpoint -> public void setTempFileName(Expression tempFileName);1549345447;The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language._The location for tempFilename is relative to the final file location in the option 'fileName', not the target directory in the base uri.  i.e. if option fileName includes a directory prefix,_<dir><finalFilename>, tempFileName is relative to that subdirectory <dir>;public void setTempFileName(Expression tempFileName) {_        this.tempFileName = tempFileName__    };the,same,as,temp,prefix,option,but,offering,a,more,fine,grained,control,on,the,naming,of,the,temporary,filename,as,it,uses,the,file,language,the,location,for,temp,filename,is,relative,to,the,final,file,location,in,the,option,file,name,not,the,target,directory,in,the,base,uri,i,e,if,option,file,name,includes,a,directory,prefix,dir,final,filename,temp,file,name,is,relative,to,that,subdirectory,dir;public,void,set,temp,file,name,expression,temp,file,name,this,temp,file,name,temp,file,name
GenericFileEndpoint -> public void setTempFileName(Expression tempFileName);1549345604;The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language._The location for tempFilename is relative to the final file location in the option 'fileName', not the target directory in the base uri._For example if option fileName includes a directory prefix: dir/finalFilename then tempFileName is relative to that subdirectory dir.;public void setTempFileName(Expression tempFileName) {_        this.tempFileName = tempFileName__    };the,same,as,temp,prefix,option,but,offering,a,more,fine,grained,control,on,the,naming,of,the,temporary,filename,as,it,uses,the,file,language,the,location,for,temp,filename,is,relative,to,the,final,file,location,in,the,option,file,name,not,the,target,directory,in,the,base,uri,for,example,if,option,file,name,includes,a,directory,prefix,dir,final,filename,then,temp,file,name,is,relative,to,that,subdirectory,dir;public,void,set,temp,file,name,expression,temp,file,name,this,temp,file,name,temp,file,name
GenericFileEndpoint -> public void setTempFileName(Expression tempFileName);1549879447;The same as tempPrefix option but offering a more fine grained control on the naming of the temporary filename as it uses the File Language._The location for tempFilename is relative to the final file location in the option 'fileName', not the target directory in the base uri._For example if option fileName includes a directory prefix: dir/finalFilename then tempFileName is relative to that subdirectory dir.;public void setTempFileName(Expression tempFileName) {_        this.tempFileName = tempFileName__    };the,same,as,temp,prefix,option,but,offering,a,more,fine,grained,control,on,the,naming,of,the,temporary,filename,as,it,uses,the,file,language,the,location,for,temp,filename,is,relative,to,the,final,file,location,in,the,option,file,name,not,the,target,directory,in,the,base,uri,for,example,if,option,file,name,includes,a,directory,prefix,dir,final,filename,then,temp,file,name,is,relative,to,that,subdirectory,dir;public,void,set,temp,file,name,expression,temp,file,name,this,temp,file,name,temp,file,name
GenericFileEndpoint -> public void setEagerMaxMessagesPerPoll(boolean eagerMaxMessagesPerPoll);1548250802;Allows for controlling whether the limit from maxMessagesPerPoll is eager or not._If eager then the limit is during the scanning of files. Where as false would scan all files, and then perform sorting._Setting this option to false allows for sorting all files first, and then limit the poll. Mind that this requires a_higher memory usage as all file details are in memory to perform the sorting.;public void setEagerMaxMessagesPerPoll(boolean eagerMaxMessagesPerPoll) {_        this.eagerMaxMessagesPerPoll = eagerMaxMessagesPerPoll__    };allows,for,controlling,whether,the,limit,from,max,messages,per,poll,is,eager,or,not,if,eager,then,the,limit,is,during,the,scanning,of,files,where,as,false,would,scan,all,files,and,then,perform,sorting,setting,this,option,to,false,allows,for,sorting,all,files,first,and,then,limit,the,poll,mind,that,this,requires,a,higher,memory,usage,as,all,file,details,are,in,memory,to,perform,the,sorting;public,void,set,eager,max,messages,per,poll,boolean,eager,max,messages,per,poll,this,eager,max,messages,per,poll,eager,max,messages,per,poll
GenericFileEndpoint -> public void setEagerMaxMessagesPerPoll(boolean eagerMaxMessagesPerPoll);1549345447;Allows for controlling whether the limit from maxMessagesPerPoll is eager or not._If eager then the limit is during the scanning of files. Where as false would scan all files, and then perform sorting._Setting this option to false allows for sorting all files first, and then limit the poll. Mind that this requires a_higher memory usage as all file details are in memory to perform the sorting.;public void setEagerMaxMessagesPerPoll(boolean eagerMaxMessagesPerPoll) {_        this.eagerMaxMessagesPerPoll = eagerMaxMessagesPerPoll__    };allows,for,controlling,whether,the,limit,from,max,messages,per,poll,is,eager,or,not,if,eager,then,the,limit,is,during,the,scanning,of,files,where,as,false,would,scan,all,files,and,then,perform,sorting,setting,this,option,to,false,allows,for,sorting,all,files,first,and,then,limit,the,poll,mind,that,this,requires,a,higher,memory,usage,as,all,file,details,are,in,memory,to,perform,the,sorting;public,void,set,eager,max,messages,per,poll,boolean,eager,max,messages,per,poll,this,eager,max,messages,per,poll,eager,max,messages,per,poll
GenericFileEndpoint -> public void setEagerMaxMessagesPerPoll(boolean eagerMaxMessagesPerPoll);1549345604;Allows for controlling whether the limit from maxMessagesPerPoll is eager or not._If eager then the limit is during the scanning of files. Where as false would scan all files, and then perform sorting._Setting this option to false allows for sorting all files first, and then limit the poll. Mind that this requires a_higher memory usage as all file details are in memory to perform the sorting.;public void setEagerMaxMessagesPerPoll(boolean eagerMaxMessagesPerPoll) {_        this.eagerMaxMessagesPerPoll = eagerMaxMessagesPerPoll__    };allows,for,controlling,whether,the,limit,from,max,messages,per,poll,is,eager,or,not,if,eager,then,the,limit,is,during,the,scanning,of,files,where,as,false,would,scan,all,files,and,then,perform,sorting,setting,this,option,to,false,allows,for,sorting,all,files,first,and,then,limit,the,poll,mind,that,this,requires,a,higher,memory,usage,as,all,file,details,are,in,memory,to,perform,the,sorting;public,void,set,eager,max,messages,per,poll,boolean,eager,max,messages,per,poll,this,eager,max,messages,per,poll,eager,max,messages,per,poll
GenericFileEndpoint -> public void setEagerMaxMessagesPerPoll(boolean eagerMaxMessagesPerPoll);1549879447;Allows for controlling whether the limit from maxMessagesPerPoll is eager or not._If eager then the limit is during the scanning of files. Where as false would scan all files, and then perform sorting._Setting this option to false allows for sorting all files first, and then limit the poll. Mind that this requires a_higher memory usage as all file details are in memory to perform the sorting.;public void setEagerMaxMessagesPerPoll(boolean eagerMaxMessagesPerPoll) {_        this.eagerMaxMessagesPerPoll = eagerMaxMessagesPerPoll__    };allows,for,controlling,whether,the,limit,from,max,messages,per,poll,is,eager,or,not,if,eager,then,the,limit,is,during,the,scanning,of,files,where,as,false,would,scan,all,files,and,then,perform,sorting,setting,this,option,to,false,allows,for,sorting,all,files,first,and,then,limit,the,poll,mind,that,this,requires,a,higher,memory,usage,as,all,file,details,are,in,memory,to,perform,the,sorting;public,void,set,eager,max,messages,per,poll,boolean,eager,max,messages,per,poll,this,eager,max,messages,per,poll,eager,max,messages,per,poll
GenericFileEndpoint -> public void setFileExist(GenericFileExist fileExist);1548250802;What to do if a file already exists with the same name.__Override, which is the default, replaces the existing file._<ul>_<li>Append - adds content to the existing file.</li>_<li>Fail - throws a GenericFileOperationException, indicating that there is already an existing file.</li>_<li>Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay.</li>_<li>Move - option requires to use the moveExisting option to be configured as well._The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file,_otherwise causing the move operation to fail._The Move option will move any existing files, before writing the target file.</li>_<li>TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name,_without doing any exists check. This check may be faster on some file systems and especially FTP servers.</li>_</ul>;public void setFileExist(GenericFileExist fileExist) {_        this.fileExist = fileExist__    };what,to,do,if,a,file,already,exists,with,the,same,name,override,which,is,the,default,replaces,the,existing,file,ul,li,append,adds,content,to,the,existing,file,li,li,fail,throws,a,generic,file,operation,exception,indicating,that,there,is,already,an,existing,file,li,li,ignore,silently,ignores,the,problem,and,does,not,override,the,existing,file,but,assumes,everything,is,okay,li,li,move,option,requires,to,use,the,move,existing,option,to,be,configured,as,well,the,option,eager,delete,target,file,can,be,used,to,control,what,to,do,if,an,moving,the,file,and,there,exists,already,an,existing,file,otherwise,causing,the,move,operation,to,fail,the,move,option,will,move,any,existing,files,before,writing,the,target,file,li,li,try,rename,is,only,applicable,if,temp,file,name,option,is,in,use,this,allows,to,try,renaming,the,file,from,the,temporary,name,to,the,actual,name,without,doing,any,exists,check,this,check,may,be,faster,on,some,file,systems,and,especially,ftp,servers,li,ul;public,void,set,file,exist,generic,file,exist,file,exist,this,file,exist,file,exist
GenericFileEndpoint -> public void setFileExist(GenericFileExist fileExist);1549345447;What to do if a file already exists with the same name.__Override, which is the default, replaces the existing file._<ul>_<li>Append - adds content to the existing file.</li>_<li>Fail - throws a GenericFileOperationException, indicating that there is already an existing file.</li>_<li>Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay.</li>_<li>Move - option requires to use the moveExisting option to be configured as well._The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file,_otherwise causing the move operation to fail._The Move option will move any existing files, before writing the target file.</li>_<li>TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name,_without doing any exists check. This check may be faster on some file systems and especially FTP servers.</li>_</ul>;public void setFileExist(GenericFileExist fileExist) {_        this.fileExist = fileExist__    };what,to,do,if,a,file,already,exists,with,the,same,name,override,which,is,the,default,replaces,the,existing,file,ul,li,append,adds,content,to,the,existing,file,li,li,fail,throws,a,generic,file,operation,exception,indicating,that,there,is,already,an,existing,file,li,li,ignore,silently,ignores,the,problem,and,does,not,override,the,existing,file,but,assumes,everything,is,okay,li,li,move,option,requires,to,use,the,move,existing,option,to,be,configured,as,well,the,option,eager,delete,target,file,can,be,used,to,control,what,to,do,if,an,moving,the,file,and,there,exists,already,an,existing,file,otherwise,causing,the,move,operation,to,fail,the,move,option,will,move,any,existing,files,before,writing,the,target,file,li,li,try,rename,is,only,applicable,if,temp,file,name,option,is,in,use,this,allows,to,try,renaming,the,file,from,the,temporary,name,to,the,actual,name,without,doing,any,exists,check,this,check,may,be,faster,on,some,file,systems,and,especially,ftp,servers,li,ul;public,void,set,file,exist,generic,file,exist,file,exist,this,file,exist,file,exist
GenericFileEndpoint -> public void setFileExist(GenericFileExist fileExist);1549345604;What to do if a file already exists with the same name.__Override, which is the default, replaces the existing file._<ul>_<li>Append - adds content to the existing file.</li>_<li>Fail - throws a GenericFileOperationException, indicating that there is already an existing file.</li>_<li>Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay.</li>_<li>Move - option requires to use the moveExisting option to be configured as well._The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file,_otherwise causing the move operation to fail._The Move option will move any existing files, before writing the target file.</li>_<li>TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name,_without doing any exists check. This check may be faster on some file systems and especially FTP servers.</li>_</ul>;public void setFileExist(GenericFileExist fileExist) {_        this.fileExist = fileExist__    };what,to,do,if,a,file,already,exists,with,the,same,name,override,which,is,the,default,replaces,the,existing,file,ul,li,append,adds,content,to,the,existing,file,li,li,fail,throws,a,generic,file,operation,exception,indicating,that,there,is,already,an,existing,file,li,li,ignore,silently,ignores,the,problem,and,does,not,override,the,existing,file,but,assumes,everything,is,okay,li,li,move,option,requires,to,use,the,move,existing,option,to,be,configured,as,well,the,option,eager,delete,target,file,can,be,used,to,control,what,to,do,if,an,moving,the,file,and,there,exists,already,an,existing,file,otherwise,causing,the,move,operation,to,fail,the,move,option,will,move,any,existing,files,before,writing,the,target,file,li,li,try,rename,is,only,applicable,if,temp,file,name,option,is,in,use,this,allows,to,try,renaming,the,file,from,the,temporary,name,to,the,actual,name,without,doing,any,exists,check,this,check,may,be,faster,on,some,file,systems,and,especially,ftp,servers,li,ul;public,void,set,file,exist,generic,file,exist,file,exist,this,file,exist,file,exist
GenericFileEndpoint -> public void setFileExist(GenericFileExist fileExist);1549879447;What to do if a file already exists with the same name.__Override, which is the default, replaces the existing file._<ul>_<li>Append - adds content to the existing file.</li>_<li>Fail - throws a GenericFileOperationException, indicating that there is already an existing file.</li>_<li>Ignore - silently ignores the problem and does not override the existing file, but assumes everything is okay.</li>_<li>Move - option requires to use the moveExisting option to be configured as well._The option eagerDeleteTargetFile can be used to control what to do if an moving the file, and there exists already an existing file,_otherwise causing the move operation to fail._The Move option will move any existing files, before writing the target file.</li>_<li>TryRename is only applicable if tempFileName option is in use. This allows to try renaming the file from the temporary name to the actual name,_without doing any exists check. This check may be faster on some file systems and especially FTP servers.</li>_</ul>;public void setFileExist(GenericFileExist fileExist) {_        this.fileExist = fileExist__    };what,to,do,if,a,file,already,exists,with,the,same,name,override,which,is,the,default,replaces,the,existing,file,ul,li,append,adds,content,to,the,existing,file,li,li,fail,throws,a,generic,file,operation,exception,indicating,that,there,is,already,an,existing,file,li,li,ignore,silently,ignores,the,problem,and,does,not,override,the,existing,file,but,assumes,everything,is,okay,li,li,move,option,requires,to,use,the,move,existing,option,to,be,configured,as,well,the,option,eager,delete,target,file,can,be,used,to,control,what,to,do,if,an,moving,the,file,and,there,exists,already,an,existing,file,otherwise,causing,the,move,operation,to,fail,the,move,option,will,move,any,existing,files,before,writing,the,target,file,li,li,try,rename,is,only,applicable,if,temp,file,name,option,is,in,use,this,allows,to,try,renaming,the,file,from,the,temporary,name,to,the,actual,name,without,doing,any,exists,check,this,check,may,be,faster,on,some,file,systems,and,especially,ftp,servers,li,ul;public,void,set,file,exist,generic,file,exist,file,exist,this,file,exist,file,exist
GenericFileEndpoint -> public void setAllowNullBody(boolean allowNullBody);1548250802;Used to specify if a null body is allowed during file writing._If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component,_a GenericFileWriteException of 'Cannot write null body to file.' will be thrown._If the `fileExist` option is set to 'Override', then the file will be truncated, and if set to `append` the file will remain unchanged.;public void setAllowNullBody(boolean allowNullBody) {_        this.allowNullBody = allowNullBody__    };used,to,specify,if,a,null,body,is,allowed,during,file,writing,if,set,to,true,then,an,empty,file,will,be,created,when,set,to,false,and,attempting,to,send,a,null,body,to,the,file,component,a,generic,file,write,exception,of,cannot,write,null,body,to,file,will,be,thrown,if,the,file,exist,option,is,set,to,override,then,the,file,will,be,truncated,and,if,set,to,append,the,file,will,remain,unchanged;public,void,set,allow,null,body,boolean,allow,null,body,this,allow,null,body,allow,null,body
GenericFileEndpoint -> public void setAllowNullBody(boolean allowNullBody);1549345447;Used to specify if a null body is allowed during file writing._If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component,_a GenericFileWriteException of 'Cannot write null body to file.' will be thrown._If the `fileExist` option is set to 'Override', then the file will be truncated, and if set to `append` the file will remain unchanged.;public void setAllowNullBody(boolean allowNullBody) {_        this.allowNullBody = allowNullBody__    };used,to,specify,if,a,null,body,is,allowed,during,file,writing,if,set,to,true,then,an,empty,file,will,be,created,when,set,to,false,and,attempting,to,send,a,null,body,to,the,file,component,a,generic,file,write,exception,of,cannot,write,null,body,to,file,will,be,thrown,if,the,file,exist,option,is,set,to,override,then,the,file,will,be,truncated,and,if,set,to,append,the,file,will,remain,unchanged;public,void,set,allow,null,body,boolean,allow,null,body,this,allow,null,body,allow,null,body
GenericFileEndpoint -> public void setAllowNullBody(boolean allowNullBody);1549345604;Used to specify if a null body is allowed during file writing._If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component,_a GenericFileWriteException of 'Cannot write null body to file.' will be thrown._If the `fileExist` option is set to 'Override', then the file will be truncated, and if set to `append` the file will remain unchanged.;public void setAllowNullBody(boolean allowNullBody) {_        this.allowNullBody = allowNullBody__    };used,to,specify,if,a,null,body,is,allowed,during,file,writing,if,set,to,true,then,an,empty,file,will,be,created,when,set,to,false,and,attempting,to,send,a,null,body,to,the,file,component,a,generic,file,write,exception,of,cannot,write,null,body,to,file,will,be,thrown,if,the,file,exist,option,is,set,to,override,then,the,file,will,be,truncated,and,if,set,to,append,the,file,will,remain,unchanged;public,void,set,allow,null,body,boolean,allow,null,body,this,allow,null,body,allow,null,body
GenericFileEndpoint -> public void setAllowNullBody(boolean allowNullBody);1549879447;Used to specify if a null body is allowed during file writing._If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component,_a GenericFileWriteException of 'Cannot write null body to file.' will be thrown._If the `fileExist` option is set to 'Override', then the file will be truncated, and if set to `append` the file will remain unchanged.;public void setAllowNullBody(boolean allowNullBody) {_        this.allowNullBody = allowNullBody__    };used,to,specify,if,a,null,body,is,allowed,during,file,writing,if,set,to,true,then,an,empty,file,will,be,created,when,set,to,false,and,attempting,to,send,a,null,body,to,the,file,component,a,generic,file,write,exception,of,cannot,write,null,body,to,file,will,be,thrown,if,the,file,exist,option,is,set,to,override,then,the,file,will,be,truncated,and,if,set,to,append,the,file,will,remain,unchanged;public,void,set,allow,null,body,boolean,allow,null,body,this,allow,null,body,allow,null,body
GenericFileEndpoint -> public void setReadLockCheckInterval(long readLockCheckInterval);1548250802;Interval in millis for the read-lock, if supported by the read lock._This interval is used for sleeping between attempts to acquire the read lock._For example when using the changed read lock, you can set a higher interval period to cater for slow writes._The default of 1 sec. may be too fast if the producer is very slow writing the file._<p/>_Notice: For FTP the default readLockCheckInterval is 5000._<p/>_The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout_that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble_time is allowed for the read lock process to try to grab the lock before the timeout was hit.;public void setReadLockCheckInterval(long readLockCheckInterval) {_        this.readLockCheckInterval = readLockCheckInterval__    };interval,in,millis,for,the,read,lock,if,supported,by,the,read,lock,this,interval,is,used,for,sleeping,between,attempts,to,acquire,the,read,lock,for,example,when,using,the,changed,read,lock,you,can,set,a,higher,interval,period,to,cater,for,slow,writes,the,default,of,1,sec,may,be,too,fast,if,the,producer,is,very,slow,writing,the,file,p,notice,for,ftp,the,default,read,lock,check,interval,is,5000,p,the,read,lock,timeout,value,must,be,higher,than,read,lock,check,interval,but,a,rule,of,thumb,is,to,have,a,timeout,that,is,at,least,2,or,more,times,higher,than,the,read,lock,check,interval,this,is,needed,to,ensure,that,amble,time,is,allowed,for,the,read,lock,process,to,try,to,grab,the,lock,before,the,timeout,was,hit;public,void,set,read,lock,check,interval,long,read,lock,check,interval,this,read,lock,check,interval,read,lock,check,interval
GenericFileEndpoint -> public void setReadLockCheckInterval(long readLockCheckInterval);1549345447;Interval in millis for the read-lock, if supported by the read lock._This interval is used for sleeping between attempts to acquire the read lock._For example when using the changed read lock, you can set a higher interval period to cater for slow writes._The default of 1 sec. may be too fast if the producer is very slow writing the file._<p/>_Notice: For FTP the default readLockCheckInterval is 5000._<p/>_The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout_that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble_time is allowed for the read lock process to try to grab the lock before the timeout was hit.;public void setReadLockCheckInterval(long readLockCheckInterval) {_        this.readLockCheckInterval = readLockCheckInterval__    };interval,in,millis,for,the,read,lock,if,supported,by,the,read,lock,this,interval,is,used,for,sleeping,between,attempts,to,acquire,the,read,lock,for,example,when,using,the,changed,read,lock,you,can,set,a,higher,interval,period,to,cater,for,slow,writes,the,default,of,1,sec,may,be,too,fast,if,the,producer,is,very,slow,writing,the,file,p,notice,for,ftp,the,default,read,lock,check,interval,is,5000,p,the,read,lock,timeout,value,must,be,higher,than,read,lock,check,interval,but,a,rule,of,thumb,is,to,have,a,timeout,that,is,at,least,2,or,more,times,higher,than,the,read,lock,check,interval,this,is,needed,to,ensure,that,amble,time,is,allowed,for,the,read,lock,process,to,try,to,grab,the,lock,before,the,timeout,was,hit;public,void,set,read,lock,check,interval,long,read,lock,check,interval,this,read,lock,check,interval,read,lock,check,interval
GenericFileEndpoint -> public void setReadLockCheckInterval(long readLockCheckInterval);1549345604;Interval in millis for the read-lock, if supported by the read lock._This interval is used for sleeping between attempts to acquire the read lock._For example when using the changed read lock, you can set a higher interval period to cater for slow writes._The default of 1 sec. may be too fast if the producer is very slow writing the file._<p/>_Notice: For FTP the default readLockCheckInterval is 5000._<p/>_The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout_that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble_time is allowed for the read lock process to try to grab the lock before the timeout was hit.;public void setReadLockCheckInterval(long readLockCheckInterval) {_        this.readLockCheckInterval = readLockCheckInterval__    };interval,in,millis,for,the,read,lock,if,supported,by,the,read,lock,this,interval,is,used,for,sleeping,between,attempts,to,acquire,the,read,lock,for,example,when,using,the,changed,read,lock,you,can,set,a,higher,interval,period,to,cater,for,slow,writes,the,default,of,1,sec,may,be,too,fast,if,the,producer,is,very,slow,writing,the,file,p,notice,for,ftp,the,default,read,lock,check,interval,is,5000,p,the,read,lock,timeout,value,must,be,higher,than,read,lock,check,interval,but,a,rule,of,thumb,is,to,have,a,timeout,that,is,at,least,2,or,more,times,higher,than,the,read,lock,check,interval,this,is,needed,to,ensure,that,amble,time,is,allowed,for,the,read,lock,process,to,try,to,grab,the,lock,before,the,timeout,was,hit;public,void,set,read,lock,check,interval,long,read,lock,check,interval,this,read,lock,check,interval,read,lock,check,interval
GenericFileEndpoint -> public void setReadLockCheckInterval(long readLockCheckInterval);1549879447;Interval in millis for the read-lock, if supported by the read lock._This interval is used for sleeping between attempts to acquire the read lock._For example when using the changed read lock, you can set a higher interval period to cater for slow writes._The default of 1 sec. may be too fast if the producer is very slow writing the file._<p/>_Notice: For FTP the default readLockCheckInterval is 5000._<p/>_The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout_that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble_time is allowed for the read lock process to try to grab the lock before the timeout was hit.;public void setReadLockCheckInterval(long readLockCheckInterval) {_        this.readLockCheckInterval = readLockCheckInterval__    };interval,in,millis,for,the,read,lock,if,supported,by,the,read,lock,this,interval,is,used,for,sleeping,between,attempts,to,acquire,the,read,lock,for,example,when,using,the,changed,read,lock,you,can,set,a,higher,interval,period,to,cater,for,slow,writes,the,default,of,1,sec,may,be,too,fast,if,the,producer,is,very,slow,writing,the,file,p,notice,for,ftp,the,default,read,lock,check,interval,is,5000,p,the,read,lock,timeout,value,must,be,higher,than,read,lock,check,interval,but,a,rule,of,thumb,is,to,have,a,timeout,that,is,at,least,2,or,more,times,higher,than,the,read,lock,check,interval,this,is,needed,to,ensure,that,amble,time,is,allowed,for,the,read,lock,process,to,try,to,grab,the,lock,before,the,timeout,was,hit;public,void,set,read,lock,check,interval,long,read,lock,check,interval,this,read,lock,check,interval,read,lock,check,interval
GenericFileEndpoint -> public void setFilterDirectory(String expression);1548250802;Filters the directory based on Simple language._For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd}_@see #setFilterDirectory(Predicate);public void setFilterDirectory(String expression) {_        this.filterDirectory = createFileLanguagePredicate(expression)__    };filters,the,directory,based,on,simple,language,for,example,to,filter,on,current,date,you,can,use,a,simple,date,pattern,such,as,date,now,yyy,mmdd,see,set,filter,directory,predicate;public,void,set,filter,directory,string,expression,this,filter,directory,create,file,language,predicate,expression
GenericFileEndpoint -> public void setFilterDirectory(String expression);1549345447;Filters the directory based on Simple language._For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd}_@see #setFilterDirectory(Predicate);public void setFilterDirectory(String expression) {_        this.filterDirectory = createFileLanguagePredicate(expression)__    };filters,the,directory,based,on,simple,language,for,example,to,filter,on,current,date,you,can,use,a,simple,date,pattern,such,as,date,now,yyy,mmdd,see,set,filter,directory,predicate;public,void,set,filter,directory,string,expression,this,filter,directory,create,file,language,predicate,expression
GenericFileEndpoint -> public void setFilterDirectory(String expression);1549345604;Filters the directory based on Simple language._For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd}_@see #setFilterDirectory(Predicate);public void setFilterDirectory(String expression) {_        this.filterDirectory = createFileLanguagePredicate(expression)__    };filters,the,directory,based,on,simple,language,for,example,to,filter,on,current,date,you,can,use,a,simple,date,pattern,such,as,date,now,yyy,mmdd,see,set,filter,directory,predicate;public,void,set,filter,directory,string,expression,this,filter,directory,create,file,language,predicate,expression
GenericFileEndpoint -> public void setFilterDirectory(String expression);1549879447;Filters the directory based on Simple language._For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd}_@see #setFilterDirectory(Predicate);public void setFilterDirectory(String expression) {_        this.filterDirectory = createFileLanguagePredicate(expression)__    };filters,the,directory,based,on,simple,language,for,example,to,filter,on,current,date,you,can,use,a,simple,date,pattern,such,as,date,now,yyy,mmdd,see,set,filter,directory,predicate;public,void,set,filter,directory,string,expression,this,filter,directory,create,file,language,predicate,expression
GenericFileEndpoint -> public void setFilterFile(String expression);1548250802;Filters the file based on Simple language._For example to filter on file size, you can use ${file:size} > 5000_@see #setFilterFile(Predicate);public void setFilterFile(String expression) {_        this.filterFile = createFileLanguagePredicate(expression)__    };filters,the,file,based,on,simple,language,for,example,to,filter,on,file,size,you,can,use,file,size,5000,see,set,filter,file,predicate;public,void,set,filter,file,string,expression,this,filter,file,create,file,language,predicate,expression
GenericFileEndpoint -> public void setFilterFile(String expression);1549345447;Filters the file based on Simple language._For example to filter on file size, you can use ${file:size} > 5000_@see #setFilterFile(Predicate);public void setFilterFile(String expression) {_        this.filterFile = createFileLanguagePredicate(expression)__    };filters,the,file,based,on,simple,language,for,example,to,filter,on,file,size,you,can,use,file,size,5000,see,set,filter,file,predicate;public,void,set,filter,file,string,expression,this,filter,file,create,file,language,predicate,expression
GenericFileEndpoint -> public void setFilterFile(String expression);1549345604;Filters the file based on Simple language._For example to filter on file size, you can use ${file:size} > 5000_@see #setFilterFile(Predicate);public void setFilterFile(String expression) {_        this.filterFile = createFileLanguagePredicate(expression)__    };filters,the,file,based,on,simple,language,for,example,to,filter,on,file,size,you,can,use,file,size,5000,see,set,filter,file,predicate;public,void,set,filter,file,string,expression,this,filter,file,create,file,language,predicate,expression
GenericFileEndpoint -> public void setFilterFile(String expression);1549879447;Filters the file based on Simple language._For example to filter on file size, you can use ${file:size} > 5000_@see #setFilterFile(Predicate);public void setFilterFile(String expression) {_        this.filterFile = createFileLanguagePredicate(expression)__    };filters,the,file,based,on,simple,language,for,example,to,filter,on,file,size,you,can,use,file,size,5000,see,set,filter,file,predicate;public,void,set,filter,file,string,expression,this,filter,file,create,file,language,predicate,expression
GenericFileEndpoint -> public void setLocalWorkDirectory(String localWorkDirectory);1548250802;When consuming, a local work directory can be used to store the remote file content directly in local files,_to avoid loading the content into memory. This is beneficial, if you consume a very big remote file and thus can conserve memory.;public void setLocalWorkDirectory(String localWorkDirectory) {_        this.localWorkDirectory = localWorkDirectory__    };when,consuming,a,local,work,directory,can,be,used,to,store,the,remote,file,content,directly,in,local,files,to,avoid,loading,the,content,into,memory,this,is,beneficial,if,you,consume,a,very,big,remote,file,and,thus,can,conserve,memory;public,void,set,local,work,directory,string,local,work,directory,this,local,work,directory,local,work,directory
GenericFileEndpoint -> public void setLocalWorkDirectory(String localWorkDirectory);1549345447;When consuming, a local work directory can be used to store the remote file content directly in local files,_to avoid loading the content into memory. This is beneficial, if you consume a very big remote file and thus can conserve memory.;public void setLocalWorkDirectory(String localWorkDirectory) {_        this.localWorkDirectory = localWorkDirectory__    };when,consuming,a,local,work,directory,can,be,used,to,store,the,remote,file,content,directly,in,local,files,to,avoid,loading,the,content,into,memory,this,is,beneficial,if,you,consume,a,very,big,remote,file,and,thus,can,conserve,memory;public,void,set,local,work,directory,string,local,work,directory,this,local,work,directory,local,work,directory
GenericFileEndpoint -> public void setLocalWorkDirectory(String localWorkDirectory);1549345604;When consuming, a local work directory can be used to store the remote file content directly in local files,_to avoid loading the content into memory. This is beneficial, if you consume a very big remote file and thus can conserve memory.;public void setLocalWorkDirectory(String localWorkDirectory) {_        this.localWorkDirectory = localWorkDirectory__    };when,consuming,a,local,work,directory,can,be,used,to,store,the,remote,file,content,directly,in,local,files,to,avoid,loading,the,content,into,memory,this,is,beneficial,if,you,consume,a,very,big,remote,file,and,thus,can,conserve,memory;public,void,set,local,work,directory,string,local,work,directory,this,local,work,directory,local,work,directory
GenericFileEndpoint -> public void setLocalWorkDirectory(String localWorkDirectory);1549879447;When consuming, a local work directory can be used to store the remote file content directly in local files,_to avoid loading the content into memory. This is beneficial, if you consume a very big remote file and thus can conserve memory.;public void setLocalWorkDirectory(String localWorkDirectory) {_        this.localWorkDirectory = localWorkDirectory__    };when,consuming,a,local,work,directory,can,be,used,to,store,the,remote,file,content,directly,in,local,files,to,avoid,loading,the,content,into,memory,this,is,beneficial,if,you,consume,a,very,big,remote,file,and,thus,can,conserve,memory;public,void,set,local,work,directory,string,local,work,directory,this,local,work,directory,local,work,directory
GenericFileEndpoint -> public void setPreSort(boolean preSort);1548250802;When pre-sort is enabled then the consumer will sort the file and directory names during polling,_that was retrieved from the file system. You may want to do this in case you need to operate on the files_in a sorted order. The pre-sort is executed before the consumer starts to filter, and accept files_to process by Camel. This option is default=false meaning disabled.;public void setPreSort(boolean preSort) {_        this.preSort = preSort__    };when,pre,sort,is,enabled,then,the,consumer,will,sort,the,file,and,directory,names,during,polling,that,was,retrieved,from,the,file,system,you,may,want,to,do,this,in,case,you,need,to,operate,on,the,files,in,a,sorted,order,the,pre,sort,is,executed,before,the,consumer,starts,to,filter,and,accept,files,to,process,by,camel,this,option,is,default,false,meaning,disabled;public,void,set,pre,sort,boolean,pre,sort,this,pre,sort,pre,sort
GenericFileEndpoint -> public void setPreSort(boolean preSort);1549345447;When pre-sort is enabled then the consumer will sort the file and directory names during polling,_that was retrieved from the file system. You may want to do this in case you need to operate on the files_in a sorted order. The pre-sort is executed before the consumer starts to filter, and accept files_to process by Camel. This option is default=false meaning disabled.;public void setPreSort(boolean preSort) {_        this.preSort = preSort__    };when,pre,sort,is,enabled,then,the,consumer,will,sort,the,file,and,directory,names,during,polling,that,was,retrieved,from,the,file,system,you,may,want,to,do,this,in,case,you,need,to,operate,on,the,files,in,a,sorted,order,the,pre,sort,is,executed,before,the,consumer,starts,to,filter,and,accept,files,to,process,by,camel,this,option,is,default,false,meaning,disabled;public,void,set,pre,sort,boolean,pre,sort,this,pre,sort,pre,sort
GenericFileEndpoint -> public void setPreSort(boolean preSort);1549345604;When pre-sort is enabled then the consumer will sort the file and directory names during polling,_that was retrieved from the file system. You may want to do this in case you need to operate on the files_in a sorted order. The pre-sort is executed before the consumer starts to filter, and accept files_to process by Camel. This option is default=false meaning disabled.;public void setPreSort(boolean preSort) {_        this.preSort = preSort__    };when,pre,sort,is,enabled,then,the,consumer,will,sort,the,file,and,directory,names,during,polling,that,was,retrieved,from,the,file,system,you,may,want,to,do,this,in,case,you,need,to,operate,on,the,files,in,a,sorted,order,the,pre,sort,is,executed,before,the,consumer,starts,to,filter,and,accept,files,to,process,by,camel,this,option,is,default,false,meaning,disabled;public,void,set,pre,sort,boolean,pre,sort,this,pre,sort,pre,sort
GenericFileEndpoint -> public void setPreSort(boolean preSort);1549879447;When pre-sort is enabled then the consumer will sort the file and directory names during polling,_that was retrieved from the file system. You may want to do this in case you need to operate on the files_in a sorted order. The pre-sort is executed before the consumer starts to filter, and accept files_to process by Camel. This option is default=false meaning disabled.;public void setPreSort(boolean preSort) {_        this.preSort = preSort__    };when,pre,sort,is,enabled,then,the,consumer,will,sort,the,file,and,directory,names,during,polling,that,was,retrieved,from,the,file,system,you,may,want,to,do,this,in,case,you,need,to,operate,on,the,files,in,a,sorted,order,the,pre,sort,is,executed,before,the,consumer,starts,to,filter,and,accept,files,to,process,by,camel,this,option,is,default,false,meaning,disabled;public,void,set,pre,sort,boolean,pre,sort,this,pre,sort,pre,sort
GenericFileEndpoint -> public void setShuffle(boolean shuffle);1548250802;To shuffle the list of files (sort in random order);public void setShuffle(boolean shuffle) {_        this.shuffle = shuffle__    };to,shuffle,the,list,of,files,sort,in,random,order;public,void,set,shuffle,boolean,shuffle,this,shuffle,shuffle
GenericFileEndpoint -> public void setShuffle(boolean shuffle);1549345447;To shuffle the list of files (sort in random order);public void setShuffle(boolean shuffle) {_        this.shuffle = shuffle__    };to,shuffle,the,list,of,files,sort,in,random,order;public,void,set,shuffle,boolean,shuffle,this,shuffle,shuffle
GenericFileEndpoint -> public void setShuffle(boolean shuffle);1549345604;To shuffle the list of files (sort in random order);public void setShuffle(boolean shuffle) {_        this.shuffle = shuffle__    };to,shuffle,the,list,of,files,sort,in,random,order;public,void,set,shuffle,boolean,shuffle,this,shuffle,shuffle
GenericFileEndpoint -> public void setShuffle(boolean shuffle);1549879447;To shuffle the list of files (sort in random order);public void setShuffle(boolean shuffle) {_        this.shuffle = shuffle__    };to,shuffle,the,list,of,files,sort,in,random,order;public,void,set,shuffle,boolean,shuffle,this,shuffle,shuffle
GenericFileEndpoint -> public void setSorter(Comparator<GenericFile<T>> sorter);1548250802;Pluggable sorter as a java.util.Comparator<org.apache.camel.component.file.GenericFile> class.;public void setSorter(Comparator<GenericFile<T>> sorter) {_        this.sorter = sorter__    };pluggable,sorter,as,a,java,util,comparator,org,apache,camel,component,file,generic,file,class;public,void,set,sorter,comparator,generic,file,t,sorter,this,sorter,sorter
GenericFileEndpoint -> public void setSorter(Comparator<GenericFile<T>> sorter);1549345447;Pluggable sorter as a java.util.Comparator<org.apache.camel.component.file.GenericFile> class.;public void setSorter(Comparator<GenericFile<T>> sorter) {_        this.sorter = sorter__    };pluggable,sorter,as,a,java,util,comparator,org,apache,camel,component,file,generic,file,class;public,void,set,sorter,comparator,generic,file,t,sorter,this,sorter,sorter
GenericFileEndpoint -> public void setSorter(Comparator<GenericFile<T>> sorter);1549345604;Pluggable sorter as a java.util.Comparator<org.apache.camel.component.file.GenericFile> class.;public void setSorter(Comparator<GenericFile<T>> sorter) {_        this.sorter = sorter__    };pluggable,sorter,as,a,java,util,comparator,org,apache,camel,component,file,generic,file,class;public,void,set,sorter,comparator,generic,file,t,sorter,this,sorter,sorter
GenericFileEndpoint -> public void setSorter(Comparator<GenericFile<T>> sorter);1549879447;Pluggable sorter as a java.util.Comparator<org.apache.camel.component.file.GenericFile> class.;public void setSorter(Comparator<GenericFile<T>> sorter) {_        this.sorter = sorter__    };pluggable,sorter,as,a,java,util,comparator,org,apache,camel,component,file,generic,file,class;public,void,set,sorter,comparator,generic,file,t,sorter,this,sorter,sorter
GenericFileEndpoint -> public void setMinDepth(int minDepth);1548250802;The minimum depth to start processing when recursively processing a directory._Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory.;public void setMinDepth(int minDepth) {_        this.minDepth = minDepth__    };the,minimum,depth,to,start,processing,when,recursively,processing,a,directory,using,min,depth,1,means,the,base,directory,using,min,depth,2,means,the,first,sub,directory;public,void,set,min,depth,int,min,depth,this,min,depth,min,depth
GenericFileEndpoint -> public void setMinDepth(int minDepth);1549345447;The minimum depth to start processing when recursively processing a directory._Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory.;public void setMinDepth(int minDepth) {_        this.minDepth = minDepth__    };the,minimum,depth,to,start,processing,when,recursively,processing,a,directory,using,min,depth,1,means,the,base,directory,using,min,depth,2,means,the,first,sub,directory;public,void,set,min,depth,int,min,depth,this,min,depth,min,depth
GenericFileEndpoint -> public void setMinDepth(int minDepth);1549345604;The minimum depth to start processing when recursively processing a directory._Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory.;public void setMinDepth(int minDepth) {_        this.minDepth = minDepth__    };the,minimum,depth,to,start,processing,when,recursively,processing,a,directory,using,min,depth,1,means,the,base,directory,using,min,depth,2,means,the,first,sub,directory;public,void,set,min,depth,int,min,depth,this,min,depth,min,depth
GenericFileEndpoint -> public void setMinDepth(int minDepth);1549879447;The minimum depth to start processing when recursively processing a directory._Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory.;public void setMinDepth(int minDepth) {_        this.minDepth = minDepth__    };the,minimum,depth,to,start,processing,when,recursively,processing,a,directory,using,min,depth,1,means,the,base,directory,using,min,depth,2,means,the,first,sub,directory;public,void,set,min,depth,int,min,depth,this,min,depth,min,depth
GenericFileEndpoint -> public void setReadLock(String readLock);1548250802;Used by consumer, to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written)._Camel will wait until the file lock is granted._<p/>_This option provides the build in strategies:_<ul>_<li>none - No read lock is in use_<li>markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component_<li>changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec_to determine this, so this option cannot consume files as fast as the others, but can be more reliable as the JDK IO API cannot_always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency.</li>_<li>fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing_a remote file system via a mount/share unless that file system supports distributed file locks.</li>_<li>rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock.</li>_<li>idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_<li>idempotent-changed - (only for file component) idempotent-changed is for using a idempotentRepository and changed as the combined read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_<li>idempotent-rename - (only for file component) idempotent-rename is for using a idempotentRepository and rename as the combined read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_</ul>_Notice: The various read locks is not all suited to work in clustered mode, where concurrent consumers on different nodes is competing_for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file,_but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks, and so on._Using the idempotent read lock can support clustering if the idempotent repository supports clustering, such as Hazelcast Component or Infinispan.;public void setReadLock(String readLock) {_        this.readLock = readLock__    };used,by,consumer,to,only,poll,the,files,if,it,has,exclusive,read,lock,on,the,file,i,e,the,file,is,not,in,progress,or,being,written,camel,will,wait,until,the,file,lock,is,granted,p,this,option,provides,the,build,in,strategies,ul,li,none,no,read,lock,is,in,use,li,marker,file,camel,creates,a,marker,file,file,name,camel,lock,and,then,holds,a,lock,on,it,this,option,is,not,available,for,the,ftp,component,li,changed,changed,is,using,file,length,modification,timestamp,to,detect,whether,the,file,is,currently,being,copied,or,not,will,at,least,use,1,sec,to,determine,this,so,this,option,cannot,consume,files,as,fast,as,the,others,but,can,be,more,reliable,as,the,jdk,io,api,cannot,always,determine,whether,a,file,is,currently,being,used,by,another,process,the,option,read,lock,check,interval,can,be,used,to,set,the,check,frequency,li,li,file,lock,is,for,using,java,nio,channels,file,lock,this,option,is,not,avail,for,the,ftp,component,this,approach,should,be,avoided,when,accessing,a,remote,file,system,via,a,mount,share,unless,that,file,system,supports,distributed,file,locks,li,li,rename,rename,is,for,using,a,try,to,rename,the,file,as,a,test,if,we,can,get,exclusive,read,lock,li,li,idempotent,only,for,file,component,idempotent,is,for,using,a,idempotent,repository,as,the,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,li,idempotent,changed,only,for,file,component,idempotent,changed,is,for,using,a,idempotent,repository,and,changed,as,the,combined,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,li,idempotent,rename,only,for,file,component,idempotent,rename,is,for,using,a,idempotent,repository,and,rename,as,the,combined,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,ul,notice,the,various,read,locks,is,not,all,suited,to,work,in,clustered,mode,where,concurrent,consumers,on,different,nodes,is,competing,for,the,same,files,on,a,shared,file,system,the,marker,file,using,a,close,to,atomic,operation,to,create,the,empty,marker,file,but,its,not,guaranteed,to,work,in,a,cluster,the,file,lock,may,work,better,but,then,the,file,system,need,to,support,distributed,file,locks,and,so,on,using,the,idempotent,read,lock,can,support,clustering,if,the,idempotent,repository,supports,clustering,such,as,hazelcast,component,or,infinispan;public,void,set,read,lock,string,read,lock,this,read,lock,read,lock
GenericFileEndpoint -> public void setReadLock(String readLock);1549345447;Used by consumer, to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written)._Camel will wait until the file lock is granted._<p/>_This option provides the build in strategies:_<ul>_<li>none - No read lock is in use_<li>markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component_<li>changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec_to determine this, so this option cannot consume files as fast as the others, but can be more reliable as the JDK IO API cannot_always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency.</li>_<li>fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing_a remote file system via a mount/share unless that file system supports distributed file locks.</li>_<li>rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock.</li>_<li>idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_<li>idempotent-changed - (only for file component) idempotent-changed is for using a idempotentRepository and changed as the combined read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_<li>idempotent-rename - (only for file component) idempotent-rename is for using a idempotentRepository and rename as the combined read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_</ul>_Notice: The various read locks is not all suited to work in clustered mode, where concurrent consumers on different nodes is competing_for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file,_but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks, and so on._Using the idempotent read lock can support clustering if the idempotent repository supports clustering, such as Hazelcast Component or Infinispan.;public void setReadLock(String readLock) {_        this.readLock = readLock__    };used,by,consumer,to,only,poll,the,files,if,it,has,exclusive,read,lock,on,the,file,i,e,the,file,is,not,in,progress,or,being,written,camel,will,wait,until,the,file,lock,is,granted,p,this,option,provides,the,build,in,strategies,ul,li,none,no,read,lock,is,in,use,li,marker,file,camel,creates,a,marker,file,file,name,camel,lock,and,then,holds,a,lock,on,it,this,option,is,not,available,for,the,ftp,component,li,changed,changed,is,using,file,length,modification,timestamp,to,detect,whether,the,file,is,currently,being,copied,or,not,will,at,least,use,1,sec,to,determine,this,so,this,option,cannot,consume,files,as,fast,as,the,others,but,can,be,more,reliable,as,the,jdk,io,api,cannot,always,determine,whether,a,file,is,currently,being,used,by,another,process,the,option,read,lock,check,interval,can,be,used,to,set,the,check,frequency,li,li,file,lock,is,for,using,java,nio,channels,file,lock,this,option,is,not,avail,for,the,ftp,component,this,approach,should,be,avoided,when,accessing,a,remote,file,system,via,a,mount,share,unless,that,file,system,supports,distributed,file,locks,li,li,rename,rename,is,for,using,a,try,to,rename,the,file,as,a,test,if,we,can,get,exclusive,read,lock,li,li,idempotent,only,for,file,component,idempotent,is,for,using,a,idempotent,repository,as,the,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,li,idempotent,changed,only,for,file,component,idempotent,changed,is,for,using,a,idempotent,repository,and,changed,as,the,combined,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,li,idempotent,rename,only,for,file,component,idempotent,rename,is,for,using,a,idempotent,repository,and,rename,as,the,combined,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,ul,notice,the,various,read,locks,is,not,all,suited,to,work,in,clustered,mode,where,concurrent,consumers,on,different,nodes,is,competing,for,the,same,files,on,a,shared,file,system,the,marker,file,using,a,close,to,atomic,operation,to,create,the,empty,marker,file,but,its,not,guaranteed,to,work,in,a,cluster,the,file,lock,may,work,better,but,then,the,file,system,need,to,support,distributed,file,locks,and,so,on,using,the,idempotent,read,lock,can,support,clustering,if,the,idempotent,repository,supports,clustering,such,as,hazelcast,component,or,infinispan;public,void,set,read,lock,string,read,lock,this,read,lock,read,lock
GenericFileEndpoint -> public void setReadLock(String readLock);1549345604;Used by consumer, to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written)._Camel will wait until the file lock is granted._<p/>_This option provides the build in strategies:_<ul>_<li>none - No read lock is in use_<li>markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component_<li>changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec_to determine this, so this option cannot consume files as fast as the others, but can be more reliable as the JDK IO API cannot_always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency.</li>_<li>fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing_a remote file system via a mount/share unless that file system supports distributed file locks.</li>_<li>rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock.</li>_<li>idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_<li>idempotent-changed - (only for file component) idempotent-changed is for using a idempotentRepository and changed as the combined read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_<li>idempotent-rename - (only for file component) idempotent-rename is for using a idempotentRepository and rename as the combined read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_</ul>_Notice: The various read locks is not all suited to work in clustered mode, where concurrent consumers on different nodes is competing_for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file,_but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks, and so on._Using the idempotent read lock can support clustering if the idempotent repository supports clustering, such as Hazelcast Component or Infinispan.;public void setReadLock(String readLock) {_        this.readLock = readLock__    };used,by,consumer,to,only,poll,the,files,if,it,has,exclusive,read,lock,on,the,file,i,e,the,file,is,not,in,progress,or,being,written,camel,will,wait,until,the,file,lock,is,granted,p,this,option,provides,the,build,in,strategies,ul,li,none,no,read,lock,is,in,use,li,marker,file,camel,creates,a,marker,file,file,name,camel,lock,and,then,holds,a,lock,on,it,this,option,is,not,available,for,the,ftp,component,li,changed,changed,is,using,file,length,modification,timestamp,to,detect,whether,the,file,is,currently,being,copied,or,not,will,at,least,use,1,sec,to,determine,this,so,this,option,cannot,consume,files,as,fast,as,the,others,but,can,be,more,reliable,as,the,jdk,io,api,cannot,always,determine,whether,a,file,is,currently,being,used,by,another,process,the,option,read,lock,check,interval,can,be,used,to,set,the,check,frequency,li,li,file,lock,is,for,using,java,nio,channels,file,lock,this,option,is,not,avail,for,the,ftp,component,this,approach,should,be,avoided,when,accessing,a,remote,file,system,via,a,mount,share,unless,that,file,system,supports,distributed,file,locks,li,li,rename,rename,is,for,using,a,try,to,rename,the,file,as,a,test,if,we,can,get,exclusive,read,lock,li,li,idempotent,only,for,file,component,idempotent,is,for,using,a,idempotent,repository,as,the,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,li,idempotent,changed,only,for,file,component,idempotent,changed,is,for,using,a,idempotent,repository,and,changed,as,the,combined,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,li,idempotent,rename,only,for,file,component,idempotent,rename,is,for,using,a,idempotent,repository,and,rename,as,the,combined,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,ul,notice,the,various,read,locks,is,not,all,suited,to,work,in,clustered,mode,where,concurrent,consumers,on,different,nodes,is,competing,for,the,same,files,on,a,shared,file,system,the,marker,file,using,a,close,to,atomic,operation,to,create,the,empty,marker,file,but,its,not,guaranteed,to,work,in,a,cluster,the,file,lock,may,work,better,but,then,the,file,system,need,to,support,distributed,file,locks,and,so,on,using,the,idempotent,read,lock,can,support,clustering,if,the,idempotent,repository,supports,clustering,such,as,hazelcast,component,or,infinispan;public,void,set,read,lock,string,read,lock,this,read,lock,read,lock
GenericFileEndpoint -> public void setReadLock(String readLock);1549879447;Used by consumer, to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written)._Camel will wait until the file lock is granted._<p/>_This option provides the build in strategies:_<ul>_<li>none - No read lock is in use_<li>markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component_<li>changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec_to determine this, so this option cannot consume files as fast as the others, but can be more reliable as the JDK IO API cannot_always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency.</li>_<li>fileLock - is for using java.nio.channels.FileLock. This option is not avail for the FTP component. This approach should be avoided when accessing_a remote file system via a mount/share unless that file system supports distributed file locks.</li>_<li>rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock.</li>_<li>idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_<li>idempotent-changed - (only for file component) idempotent-changed is for using a idempotentRepository and changed as the combined read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_<li>idempotent-rename - (only for file component) idempotent-rename is for using a idempotentRepository and rename as the combined read-lock._This allows to use read locks that supports clustering if the idempotent repository implementation supports that.</li>_</ul>_Notice: The various read locks is not all suited to work in clustered mode, where concurrent consumers on different nodes is competing_for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file,_but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks, and so on._Using the idempotent read lock can support clustering if the idempotent repository supports clustering, such as Hazelcast Component or Infinispan.;public void setReadLock(String readLock) {_        this.readLock = readLock__    };used,by,consumer,to,only,poll,the,files,if,it,has,exclusive,read,lock,on,the,file,i,e,the,file,is,not,in,progress,or,being,written,camel,will,wait,until,the,file,lock,is,granted,p,this,option,provides,the,build,in,strategies,ul,li,none,no,read,lock,is,in,use,li,marker,file,camel,creates,a,marker,file,file,name,camel,lock,and,then,holds,a,lock,on,it,this,option,is,not,available,for,the,ftp,component,li,changed,changed,is,using,file,length,modification,timestamp,to,detect,whether,the,file,is,currently,being,copied,or,not,will,at,least,use,1,sec,to,determine,this,so,this,option,cannot,consume,files,as,fast,as,the,others,but,can,be,more,reliable,as,the,jdk,io,api,cannot,always,determine,whether,a,file,is,currently,being,used,by,another,process,the,option,read,lock,check,interval,can,be,used,to,set,the,check,frequency,li,li,file,lock,is,for,using,java,nio,channels,file,lock,this,option,is,not,avail,for,the,ftp,component,this,approach,should,be,avoided,when,accessing,a,remote,file,system,via,a,mount,share,unless,that,file,system,supports,distributed,file,locks,li,li,rename,rename,is,for,using,a,try,to,rename,the,file,as,a,test,if,we,can,get,exclusive,read,lock,li,li,idempotent,only,for,file,component,idempotent,is,for,using,a,idempotent,repository,as,the,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,li,idempotent,changed,only,for,file,component,idempotent,changed,is,for,using,a,idempotent,repository,and,changed,as,the,combined,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,li,idempotent,rename,only,for,file,component,idempotent,rename,is,for,using,a,idempotent,repository,and,rename,as,the,combined,read,lock,this,allows,to,use,read,locks,that,supports,clustering,if,the,idempotent,repository,implementation,supports,that,li,ul,notice,the,various,read,locks,is,not,all,suited,to,work,in,clustered,mode,where,concurrent,consumers,on,different,nodes,is,competing,for,the,same,files,on,a,shared,file,system,the,marker,file,using,a,close,to,atomic,operation,to,create,the,empty,marker,file,but,its,not,guaranteed,to,work,in,a,cluster,the,file,lock,may,work,better,but,then,the,file,system,need,to,support,distributed,file,locks,and,so,on,using,the,idempotent,read,lock,can,support,clustering,if,the,idempotent,repository,supports,clustering,such,as,hazelcast,component,or,infinispan;public,void,set,read,lock,string,read,lock,this,read,lock,read,lock
GenericFileEndpoint -> public void setInclude(String include);1548250802;Is used to include files, if filename matches the regex pattern (matching is case in-sensitive)._<p/>_Notice if you use symbols such as plus sign and others you would need to configure_this using the RAW() syntax if configuring this as an endpoint uri._See more details at <a href="http://camel.apache.org/how-do-i-configure-endpoints.html">configuring endpoint uris</a>;public void setInclude(String include) {_        this.include = include__        this.includePattern = Pattern.compile(include, Pattern.CASE_INSENSITIVE)__    };is,used,to,include,files,if,filename,matches,the,regex,pattern,matching,is,case,in,sensitive,p,notice,if,you,use,symbols,such,as,plus,sign,and,others,you,would,need,to,configure,this,using,the,raw,syntax,if,configuring,this,as,an,endpoint,uri,see,more,details,at,a,href,http,camel,apache,org,how,do,i,configure,endpoints,html,configuring,endpoint,uris,a;public,void,set,include,string,include,this,include,include,this,include,pattern,pattern,compile,include,pattern
GenericFileEndpoint -> public void setInclude(String include);1549345447;Is used to include files, if filename matches the regex pattern (matching is case in-sensitive)._<p/>_Notice if you use symbols such as plus sign and others you would need to configure_this using the RAW() syntax if configuring this as an endpoint uri._See more details at <a href="http://camel.apache.org/how-do-i-configure-endpoints.html">configuring endpoint uris</a>;public void setInclude(String include) {_        this.include = include__        this.includePattern = Pattern.compile(include, Pattern.CASE_INSENSITIVE)__    };is,used,to,include,files,if,filename,matches,the,regex,pattern,matching,is,case,in,sensitive,p,notice,if,you,use,symbols,such,as,plus,sign,and,others,you,would,need,to,configure,this,using,the,raw,syntax,if,configuring,this,as,an,endpoint,uri,see,more,details,at,a,href,http,camel,apache,org,how,do,i,configure,endpoints,html,configuring,endpoint,uris,a;public,void,set,include,string,include,this,include,include,this,include,pattern,pattern,compile,include,pattern
GenericFileEndpoint -> public void setInclude(String include);1549345604;Is used to include files, if filename matches the regex pattern (matching is case in-sensitive)._<p/>_Notice if you use symbols such as plus sign and others you would need to configure_this using the RAW() syntax if configuring this as an endpoint uri._See more details at <a href="http://camel.apache.org/how-do-i-configure-endpoints.html">configuring endpoint uris</a>;public void setInclude(String include) {_        this.include = include__        this.includePattern = Pattern.compile(include, Pattern.CASE_INSENSITIVE)__    };is,used,to,include,files,if,filename,matches,the,regex,pattern,matching,is,case,in,sensitive,p,notice,if,you,use,symbols,such,as,plus,sign,and,others,you,would,need,to,configure,this,using,the,raw,syntax,if,configuring,this,as,an,endpoint,uri,see,more,details,at,a,href,http,camel,apache,org,how,do,i,configure,endpoints,html,configuring,endpoint,uris,a;public,void,set,include,string,include,this,include,include,this,include,pattern,pattern,compile,include,pattern
GenericFileEndpoint -> public void setInclude(String include);1549879447;Is used to include files, if filename matches the regex pattern (matching is case in-sensitive)._<p/>_Notice if you use symbols such as plus sign and others you would need to configure_this using the RAW() syntax if configuring this as an endpoint uri._See more details at <a href="http://camel.apache.org/how-do-i-configure-endpoints.html">configuring endpoint uris</a>;public void setInclude(String include) {_        this.include = include__        this.includePattern = Pattern.compile(include, Pattern.CASE_INSENSITIVE)__    };is,used,to,include,files,if,filename,matches,the,regex,pattern,matching,is,case,in,sensitive,p,notice,if,you,use,symbols,such,as,plus,sign,and,others,you,would,need,to,configure,this,using,the,raw,syntax,if,configuring,this,as,an,endpoint,uri,see,more,details,at,a,href,http,camel,apache,org,how,do,i,configure,endpoints,html,configuring,endpoint,uris,a;public,void,set,include,string,include,this,include,include,this,include,pattern,pattern,compile,include,pattern
GenericFileEndpoint -> public void setReadLockMarkerFile(boolean readLockMarkerFile);1548250802;Whether to use marker file with the changed, rename, or exclusive read lock types._By default a marker file is used as well to guard against other processes picking up the same files._This behavior can be turned off by setting this option to false._For example if you do not want to write marker files to the file systems by the Camel application.;public void setReadLockMarkerFile(boolean readLockMarkerFile) {_        this.readLockMarkerFile = readLockMarkerFile__    };whether,to,use,marker,file,with,the,changed,rename,or,exclusive,read,lock,types,by,default,a,marker,file,is,used,as,well,to,guard,against,other,processes,picking,up,the,same,files,this,behavior,can,be,turned,off,by,setting,this,option,to,false,for,example,if,you,do,not,want,to,write,marker,files,to,the,file,systems,by,the,camel,application;public,void,set,read,lock,marker,file,boolean,read,lock,marker,file,this,read,lock,marker,file,read,lock,marker,file
GenericFileEndpoint -> public void setReadLockMarkerFile(boolean readLockMarkerFile);1549345447;Whether to use marker file with the changed, rename, or exclusive read lock types._By default a marker file is used as well to guard against other processes picking up the same files._This behavior can be turned off by setting this option to false._For example if you do not want to write marker files to the file systems by the Camel application.;public void setReadLockMarkerFile(boolean readLockMarkerFile) {_        this.readLockMarkerFile = readLockMarkerFile__    };whether,to,use,marker,file,with,the,changed,rename,or,exclusive,read,lock,types,by,default,a,marker,file,is,used,as,well,to,guard,against,other,processes,picking,up,the,same,files,this,behavior,can,be,turned,off,by,setting,this,option,to,false,for,example,if,you,do,not,want,to,write,marker,files,to,the,file,systems,by,the,camel,application;public,void,set,read,lock,marker,file,boolean,read,lock,marker,file,this,read,lock,marker,file,read,lock,marker,file
GenericFileEndpoint -> public void setReadLockMarkerFile(boolean readLockMarkerFile);1549345604;Whether to use marker file with the changed, rename, or exclusive read lock types._By default a marker file is used as well to guard against other processes picking up the same files._This behavior can be turned off by setting this option to false._For example if you do not want to write marker files to the file systems by the Camel application.;public void setReadLockMarkerFile(boolean readLockMarkerFile) {_        this.readLockMarkerFile = readLockMarkerFile__    };whether,to,use,marker,file,with,the,changed,rename,or,exclusive,read,lock,types,by,default,a,marker,file,is,used,as,well,to,guard,against,other,processes,picking,up,the,same,files,this,behavior,can,be,turned,off,by,setting,this,option,to,false,for,example,if,you,do,not,want,to,write,marker,files,to,the,file,systems,by,the,camel,application;public,void,set,read,lock,marker,file,boolean,read,lock,marker,file,this,read,lock,marker,file,read,lock,marker,file
GenericFileEndpoint -> public void setReadLockMarkerFile(boolean readLockMarkerFile);1549879447;Whether to use marker file with the changed, rename, or exclusive read lock types._By default a marker file is used as well to guard against other processes picking up the same files._This behavior can be turned off by setting this option to false._For example if you do not want to write marker files to the file systems by the Camel application.;public void setReadLockMarkerFile(boolean readLockMarkerFile) {_        this.readLockMarkerFile = readLockMarkerFile__    };whether,to,use,marker,file,with,the,changed,rename,or,exclusive,read,lock,types,by,default,a,marker,file,is,used,as,well,to,guard,against,other,processes,picking,up,the,same,files,this,behavior,can,be,turned,off,by,setting,this,option,to,false,for,example,if,you,do,not,want,to,write,marker,files,to,the,file,systems,by,the,camel,application;public,void,set,read,lock,marker,file,boolean,read,lock,marker,file,this,read,lock,marker,file,read,lock,marker,file
GenericFileEndpoint -> public void configureMessage(GenericFile<T> file, Message message);1548250802;Configures the given message with the file which sets the body to the_file object.;public void configureMessage(GenericFile<T> file, Message message) {_        message.setBody(file)___        if (flatten) {_            _            message.setHeader(Exchange.FILE_NAME, file.getFileNameOnly())__        } else {_            _            String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath()___            _            String endpointPath = getConfiguration().getDirectory() + getFileSeparator()___            _            endpointPath = FileUtil.normalizePath(endpointPath)__            String copyOfName = FileUtil.normalizePath(name)__            if (org.apache.camel.util.ObjectHelper.isNotEmpty(endpointPath) && copyOfName.startsWith(endpointPath)) {_                name = name.substring(endpointPath.length())__            }__            _            message.setHeader(Exchange.FILE_NAME, name)__        }_    };configures,the,given,message,with,the,file,which,sets,the,body,to,the,file,object;public,void,configure,message,generic,file,t,file,message,message,message,set,body,file,if,flatten,message,set,header,exchange,file,get,file,name,only,else,string,name,file,is,absolute,file,get,absolute,file,path,file,get,relative,file,path,string,endpoint,path,get,configuration,get,directory,get,file,separator,endpoint,path,file,util,normalize,path,endpoint,path,string,copy,of,name,file,util,normalize,path,name,if,org,apache,camel,util,object,helper,is,not,empty,endpoint,path,copy,of,name,starts,with,endpoint,path,name,name,substring,endpoint,path,length,message,set,header,exchange,name
GenericFileEndpoint -> public void configureMessage(GenericFile<T> file, Message message);1549345447;Configures the given message with the file which sets the body to the_file object.;public void configureMessage(GenericFile<T> file, Message message) {_        message.setBody(file)___        if (flatten) {_            _            message.setHeader(Exchange.FILE_NAME, file.getFileNameOnly())__        } else {_            _            String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath()___            _            String endpointPath = getConfiguration().getDirectory() + getFileSeparator()___            _            endpointPath = FileUtil.normalizePath(endpointPath)__            String copyOfName = FileUtil.normalizePath(name)__            if (org.apache.camel.util.ObjectHelper.isNotEmpty(endpointPath) && copyOfName.startsWith(endpointPath)) {_                name = name.substring(endpointPath.length())__            }__            _            message.setHeader(Exchange.FILE_NAME, name)__        }_    };configures,the,given,message,with,the,file,which,sets,the,body,to,the,file,object;public,void,configure,message,generic,file,t,file,message,message,message,set,body,file,if,flatten,message,set,header,exchange,file,get,file,name,only,else,string,name,file,is,absolute,file,get,absolute,file,path,file,get,relative,file,path,string,endpoint,path,get,configuration,get,directory,get,file,separator,endpoint,path,file,util,normalize,path,endpoint,path,string,copy,of,name,file,util,normalize,path,name,if,org,apache,camel,util,object,helper,is,not,empty,endpoint,path,copy,of,name,starts,with,endpoint,path,name,name,substring,endpoint,path,length,message,set,header,exchange,name
GenericFileEndpoint -> public void configureMessage(GenericFile<T> file, Message message);1549345604;Configures the given message with the file which sets the body to the_file object.;public void configureMessage(GenericFile<T> file, Message message) {_        message.setBody(file)___        if (flatten) {_            _            message.setHeader(Exchange.FILE_NAME, file.getFileNameOnly())__        } else {_            _            String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath()___            _            String endpointPath = getConfiguration().getDirectory() + getFileSeparator()___            _            endpointPath = FileUtil.normalizePath(endpointPath)__            String copyOfName = FileUtil.normalizePath(name)__            if (org.apache.camel.util.ObjectHelper.isNotEmpty(endpointPath) && copyOfName.startsWith(endpointPath)) {_                name = name.substring(endpointPath.length())__            }__            _            message.setHeader(Exchange.FILE_NAME, name)__        }_    };configures,the,given,message,with,the,file,which,sets,the,body,to,the,file,object;public,void,configure,message,generic,file,t,file,message,message,message,set,body,file,if,flatten,message,set,header,exchange,file,get,file,name,only,else,string,name,file,is,absolute,file,get,absolute,file,path,file,get,relative,file,path,string,endpoint,path,get,configuration,get,directory,get,file,separator,endpoint,path,file,util,normalize,path,endpoint,path,string,copy,of,name,file,util,normalize,path,name,if,org,apache,camel,util,object,helper,is,not,empty,endpoint,path,copy,of,name,starts,with,endpoint,path,name,name,substring,endpoint,path,length,message,set,header,exchange,name
GenericFileEndpoint -> public void configureMessage(GenericFile<T> file, Message message);1549879447;Configures the given message with the file which sets the body to the_file object.;public void configureMessage(GenericFile<T> file, Message message) {_        message.setBody(file)___        if (flatten) {_            _            message.setHeader(Exchange.FILE_NAME, file.getFileNameOnly())__        } else {_            _            String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath()___            _            String endpointPath = getConfiguration().getDirectory() + getFileSeparator()___            _            endpointPath = FileUtil.normalizePath(endpointPath)__            String copyOfName = FileUtil.normalizePath(name)__            if (org.apache.camel.util.ObjectHelper.isNotEmpty(endpointPath) && copyOfName.startsWith(endpointPath)) {_                name = name.substring(endpointPath.length())__            }__            _            message.setHeader(Exchange.FILE_NAME, name)__        }_    };configures,the,given,message,with,the,file,which,sets,the,body,to,the,file,object;public,void,configure,message,generic,file,t,file,message,message,message,set,body,file,if,flatten,message,set,header,exchange,file,get,file,name,only,else,string,name,file,is,absolute,file,get,absolute,file,path,file,get,relative,file,path,string,endpoint,path,get,configuration,get,directory,get,file,separator,endpoint,path,file,util,normalize,path,endpoint,path,string,copy,of,name,file,util,normalize,path,name,if,org,apache,camel,util,object,helper,is,not,empty,endpoint,path,copy,of,name,starts,with,endpoint,path,name,name,substring,endpoint,path,length,message,set,header,exchange,name
GenericFileEndpoint -> public void setEagerDeleteTargetFile(boolean eagerDeleteTargetFile);1548250802;Whether or not to eagerly delete any existing target file._This option only applies when you use fileExists=Override and the tempFileName option as well._You can use this to disable (set it to false) deleting the target file before the temp file is written._For example you may write big files and want the target file to exists during the temp file is being written._This ensure the target file is only deleted until the very last moment, just before the temp file is being_renamed to the target filename. This option is also used to control whether to delete any existing files when_fileExist=Move is enabled, and an existing file exists._If this option copyAndDeleteOnRenameFails false, then an exception will be thrown if an existing file existed,_if its true, then the existing file is deleted before the move operation.;public void setEagerDeleteTargetFile(boolean eagerDeleteTargetFile) {_        this.eagerDeleteTargetFile = eagerDeleteTargetFile__    };whether,or,not,to,eagerly,delete,any,existing,target,file,this,option,only,applies,when,you,use,file,exists,override,and,the,temp,file,name,option,as,well,you,can,use,this,to,disable,set,it,to,false,deleting,the,target,file,before,the,temp,file,is,written,for,example,you,may,write,big,files,and,want,the,target,file,to,exists,during,the,temp,file,is,being,written,this,ensure,the,target,file,is,only,deleted,until,the,very,last,moment,just,before,the,temp,file,is,being,renamed,to,the,target,filename,this,option,is,also,used,to,control,whether,to,delete,any,existing,files,when,file,exist,move,is,enabled,and,an,existing,file,exists,if,this,option,copy,and,delete,on,rename,fails,false,then,an,exception,will,be,thrown,if,an,existing,file,existed,if,its,true,then,the,existing,file,is,deleted,before,the,move,operation;public,void,set,eager,delete,target,file,boolean,eager,delete,target,file,this,eager,delete,target,file,eager,delete,target,file
GenericFileEndpoint -> public void setEagerDeleteTargetFile(boolean eagerDeleteTargetFile);1549345447;Whether or not to eagerly delete any existing target file._This option only applies when you use fileExists=Override and the tempFileName option as well._You can use this to disable (set it to false) deleting the target file before the temp file is written._For example you may write big files and want the target file to exists during the temp file is being written._This ensure the target file is only deleted until the very last moment, just before the temp file is being_renamed to the target filename. This option is also used to control whether to delete any existing files when_fileExist=Move is enabled, and an existing file exists._If this option copyAndDeleteOnRenameFails false, then an exception will be thrown if an existing file existed,_if its true, then the existing file is deleted before the move operation.;public void setEagerDeleteTargetFile(boolean eagerDeleteTargetFile) {_        this.eagerDeleteTargetFile = eagerDeleteTargetFile__    };whether,or,not,to,eagerly,delete,any,existing,target,file,this,option,only,applies,when,you,use,file,exists,override,and,the,temp,file,name,option,as,well,you,can,use,this,to,disable,set,it,to,false,deleting,the,target,file,before,the,temp,file,is,written,for,example,you,may,write,big,files,and,want,the,target,file,to,exists,during,the,temp,file,is,being,written,this,ensure,the,target,file,is,only,deleted,until,the,very,last,moment,just,before,the,temp,file,is,being,renamed,to,the,target,filename,this,option,is,also,used,to,control,whether,to,delete,any,existing,files,when,file,exist,move,is,enabled,and,an,existing,file,exists,if,this,option,copy,and,delete,on,rename,fails,false,then,an,exception,will,be,thrown,if,an,existing,file,existed,if,its,true,then,the,existing,file,is,deleted,before,the,move,operation;public,void,set,eager,delete,target,file,boolean,eager,delete,target,file,this,eager,delete,target,file,eager,delete,target,file
GenericFileEndpoint -> public void setEagerDeleteTargetFile(boolean eagerDeleteTargetFile);1549345604;Whether or not to eagerly delete any existing target file._This option only applies when you use fileExists=Override and the tempFileName option as well._You can use this to disable (set it to false) deleting the target file before the temp file is written._For example you may write big files and want the target file to exists during the temp file is being written._This ensure the target file is only deleted until the very last moment, just before the temp file is being_renamed to the target filename. This option is also used to control whether to delete any existing files when_fileExist=Move is enabled, and an existing file exists._If this option copyAndDeleteOnRenameFails false, then an exception will be thrown if an existing file existed,_if its true, then the existing file is deleted before the move operation.;public void setEagerDeleteTargetFile(boolean eagerDeleteTargetFile) {_        this.eagerDeleteTargetFile = eagerDeleteTargetFile__    };whether,or,not,to,eagerly,delete,any,existing,target,file,this,option,only,applies,when,you,use,file,exists,override,and,the,temp,file,name,option,as,well,you,can,use,this,to,disable,set,it,to,false,deleting,the,target,file,before,the,temp,file,is,written,for,example,you,may,write,big,files,and,want,the,target,file,to,exists,during,the,temp,file,is,being,written,this,ensure,the,target,file,is,only,deleted,until,the,very,last,moment,just,before,the,temp,file,is,being,renamed,to,the,target,filename,this,option,is,also,used,to,control,whether,to,delete,any,existing,files,when,file,exist,move,is,enabled,and,an,existing,file,exists,if,this,option,copy,and,delete,on,rename,fails,false,then,an,exception,will,be,thrown,if,an,existing,file,existed,if,its,true,then,the,existing,file,is,deleted,before,the,move,operation;public,void,set,eager,delete,target,file,boolean,eager,delete,target,file,this,eager,delete,target,file,eager,delete,target,file
GenericFileEndpoint -> public void setEagerDeleteTargetFile(boolean eagerDeleteTargetFile);1549879447;Whether or not to eagerly delete any existing target file._This option only applies when you use fileExists=Override and the tempFileName option as well._You can use this to disable (set it to false) deleting the target file before the temp file is written._For example you may write big files and want the target file to exists during the temp file is being written._This ensure the target file is only deleted until the very last moment, just before the temp file is being_renamed to the target filename. This option is also used to control whether to delete any existing files when_fileExist=Move is enabled, and an existing file exists._If this option copyAndDeleteOnRenameFails false, then an exception will be thrown if an existing file existed,_if its true, then the existing file is deleted before the move operation.;public void setEagerDeleteTargetFile(boolean eagerDeleteTargetFile) {_        this.eagerDeleteTargetFile = eagerDeleteTargetFile__    };whether,or,not,to,eagerly,delete,any,existing,target,file,this,option,only,applies,when,you,use,file,exists,override,and,the,temp,file,name,option,as,well,you,can,use,this,to,disable,set,it,to,false,deleting,the,target,file,before,the,temp,file,is,written,for,example,you,may,write,big,files,and,want,the,target,file,to,exists,during,the,temp,file,is,being,written,this,ensure,the,target,file,is,only,deleted,until,the,very,last,moment,just,before,the,temp,file,is,being,renamed,to,the,target,filename,this,option,is,also,used,to,control,whether,to,delete,any,existing,files,when,file,exist,move,is,enabled,and,an,existing,file,exists,if,this,option,copy,and,delete,on,rename,fails,false,then,an,exception,will,be,thrown,if,an,existing,file,existed,if,its,true,then,the,existing,file,is,deleted,before,the,move,operation;public,void,set,eager,delete,target,file,boolean,eager,delete,target,file,this,eager,delete,target,file,eager,delete,target,file
GenericFileEndpoint -> public void setDelete(boolean delete);1548250802;If true, the file will be deleted after it is processed successfully.;public void setDelete(boolean delete) {_        this.delete = delete__    };if,true,the,file,will,be,deleted,after,it,is,processed,successfully;public,void,set,delete,boolean,delete,this,delete,delete
GenericFileEndpoint -> public void setDelete(boolean delete);1549345447;If true, the file will be deleted after it is processed successfully.;public void setDelete(boolean delete) {_        this.delete = delete__    };if,true,the,file,will,be,deleted,after,it,is,processed,successfully;public,void,set,delete,boolean,delete,this,delete,delete
GenericFileEndpoint -> public void setDelete(boolean delete);1549345604;If true, the file will be deleted after it is processed successfully.;public void setDelete(boolean delete) {_        this.delete = delete__    };if,true,the,file,will,be,deleted,after,it,is,processed,successfully;public,void,set,delete,boolean,delete,this,delete,delete
GenericFileEndpoint -> public void setDelete(boolean delete);1549879447;If true, the file will be deleted after it is processed successfully.;public void setDelete(boolean delete) {_        this.delete = delete__    };if,true,the,file,will,be,deleted,after,it,is,processed,successfully;public,void,set,delete,boolean,delete,this,delete,delete
GenericFileEndpoint -> public void setSortBy(Comparator<Exchange> sortBy);1548250802;Built-in sort by using the File Language._Supports nested sorts, so you can have a sort by file name and as a 2nd group sort by modified date.;public void setSortBy(Comparator<Exchange> sortBy) {_        this.sortBy = sortBy__    };built,in,sort,by,using,the,file,language,supports,nested,sorts,so,you,can,have,a,sort,by,file,name,and,as,a,2nd,group,sort,by,modified,date;public,void,set,sort,by,comparator,exchange,sort,by,this,sort,by,sort,by
GenericFileEndpoint -> public void setSortBy(Comparator<Exchange> sortBy);1549345447;Built-in sort by using the File Language._Supports nested sorts, so you can have a sort by file name and as a 2nd group sort by modified date.;public void setSortBy(Comparator<Exchange> sortBy) {_        this.sortBy = sortBy__    };built,in,sort,by,using,the,file,language,supports,nested,sorts,so,you,can,have,a,sort,by,file,name,and,as,a,2nd,group,sort,by,modified,date;public,void,set,sort,by,comparator,exchange,sort,by,this,sort,by,sort,by
GenericFileEndpoint -> public void setSortBy(Comparator<Exchange> sortBy);1549345604;Built-in sort by using the File Language._Supports nested sorts, so you can have a sort by file name and as a 2nd group sort by modified date.;public void setSortBy(Comparator<Exchange> sortBy) {_        this.sortBy = sortBy__    };built,in,sort,by,using,the,file,language,supports,nested,sorts,so,you,can,have,a,sort,by,file,name,and,as,a,2nd,group,sort,by,modified,date;public,void,set,sort,by,comparator,exchange,sort,by,this,sort,by,sort,by
GenericFileEndpoint -> public void setSortBy(Comparator<Exchange> sortBy);1549879447;Built-in sort by using the File Language._Supports nested sorts, so you can have a sort by file name and as a 2nd group sort by modified date.;public void setSortBy(Comparator<Exchange> sortBy) {_        this.sortBy = sortBy__    };built,in,sort,by,using,the,file,language,supports,nested,sorts,so,you,can,have,a,sort,by,file,name,and,as,a,2nd,group,sort,by,modified,date;public,void,set,sort,by,comparator,exchange,sort,by,this,sort,by,sort,by
GenericFileEndpoint -> public void setFileName(Expression fileName);1548250802;Use Expression such as File Language to dynamically set the filename._For consumers, it's used as a filename filter._For producers, it's used to evaluate the filename to write._If an expression is set, it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression)._The expression options support both String and Expression types._If the expression is a String type, it is always evaluated using the File Language._If the expression is an Expression type, the specified Expression type is used - this allows you,_for instance, to use OGNL expressions. For the consumer, you can use it to filter filenames,_so you can for instance consume today's file using the File Language syntax: mydata-${date:now:yyyyMMdd}.txt._The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header__the CamelOverruleFileName is a header that is used only once, and makes it easier as this avoids to temporary_store CamelFileName and have to restore it afterwards.;public void setFileName(Expression fileName) {_        this.fileName = fileName__    };use,expression,such,as,file,language,to,dynamically,set,the,filename,for,consumers,it,s,used,as,a,filename,filter,for,producers,it,s,used,to,evaluate,the,filename,to,write,if,an,expression,is,set,it,take,precedence,over,the,camel,file,name,header,note,the,header,itself,can,also,be,an,expression,the,expression,options,support,both,string,and,expression,types,if,the,expression,is,a,string,type,it,is,always,evaluated,using,the,file,language,if,the,expression,is,an,expression,type,the,specified,expression,type,is,used,this,allows,you,for,instance,to,use,ognl,expressions,for,the,consumer,you,can,use,it,to,filter,filenames,so,you,can,for,instance,consume,today,s,file,using,the,file,language,syntax,mydata,date,now,yyyy,mmdd,txt,the,producers,support,the,camel,overrule,file,name,header,which,takes,precedence,over,any,existing,camel,file,name,header,the,camel,overrule,file,name,is,a,header,that,is,used,only,once,and,makes,it,easier,as,this,avoids,to,temporary,store,camel,file,name,and,have,to,restore,it,afterwards;public,void,set,file,name,expression,file,name,this,file,name,file,name
GenericFileEndpoint -> public void setFileName(Expression fileName);1549345447;Use Expression such as File Language to dynamically set the filename._For consumers, it's used as a filename filter._For producers, it's used to evaluate the filename to write._If an expression is set, it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression)._The expression options support both String and Expression types._If the expression is a String type, it is always evaluated using the File Language._If the expression is an Expression type, the specified Expression type is used - this allows you,_for instance, to use OGNL expressions. For the consumer, you can use it to filter filenames,_so you can for instance consume today's file using the File Language syntax: mydata-${date:now:yyyyMMdd}.txt._The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header__the CamelOverruleFileName is a header that is used only once, and makes it easier as this avoids to temporary_store CamelFileName and have to restore it afterwards.;public void setFileName(Expression fileName) {_        this.fileName = fileName__    };use,expression,such,as,file,language,to,dynamically,set,the,filename,for,consumers,it,s,used,as,a,filename,filter,for,producers,it,s,used,to,evaluate,the,filename,to,write,if,an,expression,is,set,it,take,precedence,over,the,camel,file,name,header,note,the,header,itself,can,also,be,an,expression,the,expression,options,support,both,string,and,expression,types,if,the,expression,is,a,string,type,it,is,always,evaluated,using,the,file,language,if,the,expression,is,an,expression,type,the,specified,expression,type,is,used,this,allows,you,for,instance,to,use,ognl,expressions,for,the,consumer,you,can,use,it,to,filter,filenames,so,you,can,for,instance,consume,today,s,file,using,the,file,language,syntax,mydata,date,now,yyyy,mmdd,txt,the,producers,support,the,camel,overrule,file,name,header,which,takes,precedence,over,any,existing,camel,file,name,header,the,camel,overrule,file,name,is,a,header,that,is,used,only,once,and,makes,it,easier,as,this,avoids,to,temporary,store,camel,file,name,and,have,to,restore,it,afterwards;public,void,set,file,name,expression,file,name,this,file,name,file,name
GenericFileEndpoint -> public void setFileName(Expression fileName);1549345604;Use Expression such as File Language to dynamically set the filename._For consumers, it's used as a filename filter._For producers, it's used to evaluate the filename to write._If an expression is set, it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression)._The expression options support both String and Expression types._If the expression is a String type, it is always evaluated using the File Language._If the expression is an Expression type, the specified Expression type is used - this allows you,_for instance, to use OGNL expressions. For the consumer, you can use it to filter filenames,_so you can for instance consume today's file using the File Language syntax: mydata-${date:now:yyyyMMdd}.txt._The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header__the CamelOverruleFileName is a header that is used only once, and makes it easier as this avoids to temporary_store CamelFileName and have to restore it afterwards.;public void setFileName(Expression fileName) {_        this.fileName = fileName__    };use,expression,such,as,file,language,to,dynamically,set,the,filename,for,consumers,it,s,used,as,a,filename,filter,for,producers,it,s,used,to,evaluate,the,filename,to,write,if,an,expression,is,set,it,take,precedence,over,the,camel,file,name,header,note,the,header,itself,can,also,be,an,expression,the,expression,options,support,both,string,and,expression,types,if,the,expression,is,a,string,type,it,is,always,evaluated,using,the,file,language,if,the,expression,is,an,expression,type,the,specified,expression,type,is,used,this,allows,you,for,instance,to,use,ognl,expressions,for,the,consumer,you,can,use,it,to,filter,filenames,so,you,can,for,instance,consume,today,s,file,using,the,file,language,syntax,mydata,date,now,yyyy,mmdd,txt,the,producers,support,the,camel,overrule,file,name,header,which,takes,precedence,over,any,existing,camel,file,name,header,the,camel,overrule,file,name,is,a,header,that,is,used,only,once,and,makes,it,easier,as,this,avoids,to,temporary,store,camel,file,name,and,have,to,restore,it,afterwards;public,void,set,file,name,expression,file,name,this,file,name,file,name
GenericFileEndpoint -> public void setFileName(Expression fileName);1549879447;Use Expression such as File Language to dynamically set the filename._For consumers, it's used as a filename filter._For producers, it's used to evaluate the filename to write._If an expression is set, it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression)._The expression options support both String and Expression types._If the expression is a String type, it is always evaluated using the File Language._If the expression is an Expression type, the specified Expression type is used - this allows you,_for instance, to use OGNL expressions. For the consumer, you can use it to filter filenames,_so you can for instance consume today's file using the File Language syntax: mydata-${date:now:yyyyMMdd}.txt._The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header__the CamelOverruleFileName is a header that is used only once, and makes it easier as this avoids to temporary_store CamelFileName and have to restore it afterwards.;public void setFileName(Expression fileName) {_        this.fileName = fileName__    };use,expression,such,as,file,language,to,dynamically,set,the,filename,for,consumers,it,s,used,as,a,filename,filter,for,producers,it,s,used,to,evaluate,the,filename,to,write,if,an,expression,is,set,it,take,precedence,over,the,camel,file,name,header,note,the,header,itself,can,also,be,an,expression,the,expression,options,support,both,string,and,expression,types,if,the,expression,is,a,string,type,it,is,always,evaluated,using,the,file,language,if,the,expression,is,an,expression,type,the,specified,expression,type,is,used,this,allows,you,for,instance,to,use,ognl,expressions,for,the,consumer,you,can,use,it,to,filter,filenames,so,you,can,for,instance,consume,today,s,file,using,the,file,language,syntax,mydata,date,now,yyyy,mmdd,txt,the,producers,support,the,camel,overrule,file,name,header,which,takes,precedence,over,any,existing,camel,file,name,header,the,camel,overrule,file,name,is,a,header,that,is,used,only,once,and,makes,it,easier,as,this,avoids,to,temporary,store,camel,file,name,and,have,to,restore,it,afterwards;public,void,set,file,name,expression,file,name,this,file,name,file,name
GenericFileEndpoint -> public String getGeneratedFileName(Message message);1548250802;Return the file name that will be auto-generated for the given message if_none is provided;public String getGeneratedFileName(Message message) {_        return StringHelper.sanitize(message.getMessageId())__    };return,the,file,name,that,will,be,auto,generated,for,the,given,message,if,none,is,provided;public,string,get,generated,file,name,message,message,return,string,helper,sanitize,message,get,message,id
GenericFileEndpoint -> public String getGeneratedFileName(Message message);1549345447;Return the file name that will be auto-generated for the given message if_none is provided;public String getGeneratedFileName(Message message) {_        return StringHelper.sanitize(message.getMessageId())__    };return,the,file,name,that,will,be,auto,generated,for,the,given,message,if,none,is,provided;public,string,get,generated,file,name,message,message,return,string,helper,sanitize,message,get,message,id
GenericFileEndpoint -> public String getGeneratedFileName(Message message);1549345604;Return the file name that will be auto-generated for the given message if_none is provided;public String getGeneratedFileName(Message message) {_        return StringHelper.sanitize(message.getMessageId())__    };return,the,file,name,that,will,be,auto,generated,for,the,given,message,if,none,is,provided;public,string,get,generated,file,name,message,message,return,string,helper,sanitize,message,get,message,id
GenericFileEndpoint -> public String getGeneratedFileName(Message message);1549879447;Return the file name that will be auto-generated for the given message if_none is provided;public String getGeneratedFileName(Message message) {_        return StringHelper.sanitize(message.getMessageId())__    };return,the,file,name,that,will,be,auto,generated,for,the,given,message,if,none,is,provided;public,string,get,generated,file,name,message,message,return,string,helper,sanitize,message,get,message,id
GenericFileEndpoint -> public void setIdempotentRepository(IdempotentRepository idempotentRepository);1548250802;A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository_if none is specified and idempotent is true.;public void setIdempotentRepository(IdempotentRepository idempotentRepository) {_        this.idempotentRepository = idempotentRepository__    };a,pluggable,repository,org,apache,camel,spi,idempotent,repository,which,by,default,use,memory,message,id,repository,if,none,is,specified,and,idempotent,is,true;public,void,set,idempotent,repository,idempotent,repository,idempotent,repository,this,idempotent,repository,idempotent,repository
GenericFileEndpoint -> public void setIdempotentRepository(IdempotentRepository idempotentRepository);1549345447;A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository_if none is specified and idempotent is true.;public void setIdempotentRepository(IdempotentRepository idempotentRepository) {_        this.idempotentRepository = idempotentRepository__    };a,pluggable,repository,org,apache,camel,spi,idempotent,repository,which,by,default,use,memory,message,id,repository,if,none,is,specified,and,idempotent,is,true;public,void,set,idempotent,repository,idempotent,repository,idempotent,repository,this,idempotent,repository,idempotent,repository
GenericFileEndpoint -> public void setIdempotentRepository(IdempotentRepository idempotentRepository);1549345604;A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository_if none is specified and idempotent is true.;public void setIdempotentRepository(IdempotentRepository idempotentRepository) {_        this.idempotentRepository = idempotentRepository__    };a,pluggable,repository,org,apache,camel,spi,idempotent,repository,which,by,default,use,memory,message,id,repository,if,none,is,specified,and,idempotent,is,true;public,void,set,idempotent,repository,idempotent,repository,idempotent,repository,this,idempotent,repository,idempotent,repository
GenericFileEndpoint -> public void setIdempotentRepository(IdempotentRepository idempotentRepository);1549879447;A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository_if none is specified and idempotent is true.;public void setIdempotentRepository(IdempotentRepository idempotentRepository) {_        this.idempotentRepository = idempotentRepository__    };a,pluggable,repository,org,apache,camel,spi,idempotent,repository,which,by,default,use,memory,message,id,repository,if,none,is,specified,and,idempotent,is,true;public,void,set,idempotent,repository,idempotent,repository,idempotent,repository,this,idempotent,repository,idempotent,repository
GenericFileEndpoint -> public void setReadLockIdempotentReleaseAsync(boolean readLockIdempotentReleaseAsync);1548250802;Whether the delayed release task should be synchronous or asynchronous._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseAsync(boolean readLockIdempotentReleaseAsync) {_        this.readLockIdempotentReleaseAsync = readLockIdempotentReleaseAsync__    };whether,the,delayed,release,task,should,be,synchronous,or,asynchronous,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,async,boolean,read,lock,idempotent,release,async,this,read,lock,idempotent,release,async,read,lock,idempotent,release,async
GenericFileEndpoint -> public void setReadLockIdempotentReleaseAsync(boolean readLockIdempotentReleaseAsync);1549345447;Whether the delayed release task should be synchronous or asynchronous._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseAsync(boolean readLockIdempotentReleaseAsync) {_        this.readLockIdempotentReleaseAsync = readLockIdempotentReleaseAsync__    };whether,the,delayed,release,task,should,be,synchronous,or,asynchronous,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,async,boolean,read,lock,idempotent,release,async,this,read,lock,idempotent,release,async,read,lock,idempotent,release,async
GenericFileEndpoint -> public void setReadLockIdempotentReleaseAsync(boolean readLockIdempotentReleaseAsync);1549345604;Whether the delayed release task should be synchronous or asynchronous._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseAsync(boolean readLockIdempotentReleaseAsync) {_        this.readLockIdempotentReleaseAsync = readLockIdempotentReleaseAsync__    };whether,the,delayed,release,task,should,be,synchronous,or,asynchronous,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,async,boolean,read,lock,idempotent,release,async,this,read,lock,idempotent,release,async,read,lock,idempotent,release,async
GenericFileEndpoint -> public void setReadLockIdempotentReleaseAsync(boolean readLockIdempotentReleaseAsync);1549879447;Whether the delayed release task should be synchronous or asynchronous._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseAsync(boolean readLockIdempotentReleaseAsync) {_        this.readLockIdempotentReleaseAsync = readLockIdempotentReleaseAsync__    };whether,the,delayed,release,task,should,be,synchronous,or,asynchronous,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,async,boolean,read,lock,idempotent,release,async,this,read,lock,idempotent,release,async,read,lock,idempotent,release,async
GenericFileEndpoint -> public void setIdempotentKey(Expression idempotentKey);1548250802;To use a custom idempotent key. By default the absolute path of the file is used._You can use the File Language, for example to use the file name and file size, you can do:_idempotentKey=${file:name}-${file:size};public void setIdempotentKey(Expression idempotentKey) {_        this.idempotentKey = idempotentKey__    };to,use,a,custom,idempotent,key,by,default,the,absolute,path,of,the,file,is,used,you,can,use,the,file,language,for,example,to,use,the,file,name,and,file,size,you,can,do,idempotent,key,file,name,file,size;public,void,set,idempotent,key,expression,idempotent,key,this,idempotent,key,idempotent,key
GenericFileEndpoint -> public void setIdempotentKey(Expression idempotentKey);1549345447;To use a custom idempotent key. By default the absolute path of the file is used._You can use the File Language, for example to use the file name and file size, you can do:_idempotentKey=${file:name}-${file:size};public void setIdempotentKey(Expression idempotentKey) {_        this.idempotentKey = idempotentKey__    };to,use,a,custom,idempotent,key,by,default,the,absolute,path,of,the,file,is,used,you,can,use,the,file,language,for,example,to,use,the,file,name,and,file,size,you,can,do,idempotent,key,file,name,file,size;public,void,set,idempotent,key,expression,idempotent,key,this,idempotent,key,idempotent,key
GenericFileEndpoint -> public void setIdempotentKey(Expression idempotentKey);1549345604;To use a custom idempotent key. By default the absolute path of the file is used._You can use the File Language, for example to use the file name and file size, you can do:_idempotentKey=${file:name}-${file:size};public void setIdempotentKey(Expression idempotentKey) {_        this.idempotentKey = idempotentKey__    };to,use,a,custom,idempotent,key,by,default,the,absolute,path,of,the,file,is,used,you,can,use,the,file,language,for,example,to,use,the,file,name,and,file,size,you,can,do,idempotent,key,file,name,file,size;public,void,set,idempotent,key,expression,idempotent,key,this,idempotent,key,idempotent,key
GenericFileEndpoint -> public void setIdempotentKey(Expression idempotentKey);1549879447;To use a custom idempotent key. By default the absolute path of the file is used._You can use the File Language, for example to use the file name and file size, you can do:_idempotentKey=${file:name}-${file:size};public void setIdempotentKey(Expression idempotentKey) {_        this.idempotentKey = idempotentKey__    };to,use,a,custom,idempotent,key,by,default,the,absolute,path,of,the,file,is,used,you,can,use,the,file,language,for,example,to,use,the,file,name,and,file,size,you,can,do,idempotent,key,file,name,file,size;public,void,set,idempotent,key,expression,idempotent,key,this,idempotent,key,idempotent,key
GenericFileEndpoint -> public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel);1548250802;Logging level used when a read lock could not be acquired._By default a DEBUG is logged._You can change this level, for example to OFF to not have any logging._This option is only applicable for readLock of types: changed, fileLock, idempotent, idempotent-changed, idempotent-rename, rename.;public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel) {_        this.readLockLoggingLevel = readLockLoggingLevel__    };logging,level,used,when,a,read,lock,could,not,be,acquired,by,default,a,debug,is,logged,you,can,change,this,level,for,example,to,off,to,not,have,any,logging,this,option,is,only,applicable,for,read,lock,of,types,changed,file,lock,idempotent,idempotent,changed,idempotent,rename,rename;public,void,set,read,lock,logging,level,logging,level,read,lock,logging,level,this,read,lock,logging,level,read,lock,logging,level
GenericFileEndpoint -> public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel);1549345447;Logging level used when a read lock could not be acquired._By default a DEBUG is logged._You can change this level, for example to OFF to not have any logging._This option is only applicable for readLock of types: changed, fileLock, idempotent, idempotent-changed, idempotent-rename, rename.;public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel) {_        this.readLockLoggingLevel = readLockLoggingLevel__    };logging,level,used,when,a,read,lock,could,not,be,acquired,by,default,a,debug,is,logged,you,can,change,this,level,for,example,to,off,to,not,have,any,logging,this,option,is,only,applicable,for,read,lock,of,types,changed,file,lock,idempotent,idempotent,changed,idempotent,rename,rename;public,void,set,read,lock,logging,level,logging,level,read,lock,logging,level,this,read,lock,logging,level,read,lock,logging,level
GenericFileEndpoint -> public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel);1549345604;Logging level used when a read lock could not be acquired._By default a DEBUG is logged._You can change this level, for example to OFF to not have any logging._This option is only applicable for readLock of types: changed, fileLock, idempotent, idempotent-changed, idempotent-rename, rename.;public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel) {_        this.readLockLoggingLevel = readLockLoggingLevel__    };logging,level,used,when,a,read,lock,could,not,be,acquired,by,default,a,debug,is,logged,you,can,change,this,level,for,example,to,off,to,not,have,any,logging,this,option,is,only,applicable,for,read,lock,of,types,changed,file,lock,idempotent,idempotent,changed,idempotent,rename,rename;public,void,set,read,lock,logging,level,logging,level,read,lock,logging,level,this,read,lock,logging,level,read,lock,logging,level
GenericFileEndpoint -> public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel);1549879447;Logging level used when a read lock could not be acquired._By default a DEBUG is logged._You can change this level, for example to OFF to not have any logging._This option is only applicable for readLock of types: changed, fileLock, idempotent, idempotent-changed, idempotent-rename, rename.;public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel) {_        this.readLockLoggingLevel = readLockLoggingLevel__    };logging,level,used,when,a,read,lock,could,not,be,acquired,by,default,a,debug,is,logged,you,can,change,this,level,for,example,to,off,to,not,have,any,logging,this,option,is,only,applicable,for,read,lock,of,types,changed,file,lock,idempotent,idempotent,changed,idempotent,rename,rename;public,void,set,read,lock,logging,level,logging,level,read,lock,logging,level,this,read,lock,logging,level,read,lock,logging,level
GenericFileEndpoint -> public void setNoop(boolean noop);1548250802;If true, the file is not moved or deleted in any way._This option is good for readonly data, or for ETL type requirements._If noop=true, Camel will set idempotent=true as well, to avoid consuming the same files over and over again.;public void setNoop(boolean noop) {_        this.noop = noop__    };if,true,the,file,is,not,moved,or,deleted,in,any,way,this,option,is,good,for,readonly,data,or,for,etl,type,requirements,if,noop,true,camel,will,set,idempotent,true,as,well,to,avoid,consuming,the,same,files,over,and,over,again;public,void,set,noop,boolean,noop,this,noop,noop
GenericFileEndpoint -> public void setNoop(boolean noop);1549345447;If true, the file is not moved or deleted in any way._This option is good for readonly data, or for ETL type requirements._If noop=true, Camel will set idempotent=true as well, to avoid consuming the same files over and over again.;public void setNoop(boolean noop) {_        this.noop = noop__    };if,true,the,file,is,not,moved,or,deleted,in,any,way,this,option,is,good,for,readonly,data,or,for,etl,type,requirements,if,noop,true,camel,will,set,idempotent,true,as,well,to,avoid,consuming,the,same,files,over,and,over,again;public,void,set,noop,boolean,noop,this,noop,noop
GenericFileEndpoint -> public void setNoop(boolean noop);1549345604;If true, the file is not moved or deleted in any way._This option is good for readonly data, or for ETL type requirements._If noop=true, Camel will set idempotent=true as well, to avoid consuming the same files over and over again.;public void setNoop(boolean noop) {_        this.noop = noop__    };if,true,the,file,is,not,moved,or,deleted,in,any,way,this,option,is,good,for,readonly,data,or,for,etl,type,requirements,if,noop,true,camel,will,set,idempotent,true,as,well,to,avoid,consuming,the,same,files,over,and,over,again;public,void,set,noop,boolean,noop,this,noop,noop
GenericFileEndpoint -> public void setNoop(boolean noop);1549879447;If true, the file is not moved or deleted in any way._This option is good for readonly data, or for ETL type requirements._If noop=true, Camel will set idempotent=true as well, to avoid consuming the same files over and over again.;public void setNoop(boolean noop) {_        this.noop = noop__    };if,true,the,file,is,not,moved,or,deleted,in,any,way,this,option,is,good,for,readonly,data,or,for,etl,type,requirements,if,noop,true,camel,will,set,idempotent,true,as,well,to,avoid,consuming,the,same,files,over,and,over,again;public,void,set,noop,boolean,noop,this,noop,noop
GenericFileEndpoint -> public void setAntExclude(String antExclude);1548250802;Ant style filter exclusion. If both antInclude and antExclude are used, antExclude takes precedence over antInclude._Multiple exclusions may be specified in comma-delimited format.;public void setAntExclude(String antExclude) {_        this.antExclude = antExclude__    };ant,style,filter,exclusion,if,both,ant,include,and,ant,exclude,are,used,ant,exclude,takes,precedence,over,ant,include,multiple,exclusions,may,be,specified,in,comma,delimited,format;public,void,set,ant,exclude,string,ant,exclude,this,ant,exclude,ant,exclude
GenericFileEndpoint -> public void setAntExclude(String antExclude);1549345447;Ant style filter exclusion. If both antInclude and antExclude are used, antExclude takes precedence over antInclude._Multiple exclusions may be specified in comma-delimited format.;public void setAntExclude(String antExclude) {_        this.antExclude = antExclude__    };ant,style,filter,exclusion,if,both,ant,include,and,ant,exclude,are,used,ant,exclude,takes,precedence,over,ant,include,multiple,exclusions,may,be,specified,in,comma,delimited,format;public,void,set,ant,exclude,string,ant,exclude,this,ant,exclude,ant,exclude
GenericFileEndpoint -> public void setAntExclude(String antExclude);1549345604;Ant style filter exclusion. If both antInclude and antExclude are used, antExclude takes precedence over antInclude._Multiple exclusions may be specified in comma-delimited format.;public void setAntExclude(String antExclude) {_        this.antExclude = antExclude__    };ant,style,filter,exclusion,if,both,ant,include,and,ant,exclude,are,used,ant,exclude,takes,precedence,over,ant,include,multiple,exclusions,may,be,specified,in,comma,delimited,format;public,void,set,ant,exclude,string,ant,exclude,this,ant,exclude,ant,exclude
GenericFileEndpoint -> public void setAntExclude(String antExclude);1549879447;Ant style filter exclusion. If both antInclude and antExclude are used, antExclude takes precedence over antInclude._Multiple exclusions may be specified in comma-delimited format.;public void setAntExclude(String antExclude) {_        this.antExclude = antExclude__    };ant,style,filter,exclusion,if,both,ant,include,and,ant,exclude,are,used,ant,exclude,takes,precedence,over,ant,include,multiple,exclusions,may,be,specified,in,comma,delimited,format;public,void,set,ant,exclude,string,ant,exclude,this,ant,exclude,ant,exclude
GenericFileEndpoint -> public void setAntFilterCaseSensitive(boolean antFilterCaseSensitive);1548250802;Sets case sensitive flag on ant filter;public void setAntFilterCaseSensitive(boolean antFilterCaseSensitive) {_        this.antFilterCaseSensitive = antFilterCaseSensitive__    };sets,case,sensitive,flag,on,ant,filter;public,void,set,ant,filter,case,sensitive,boolean,ant,filter,case,sensitive,this,ant,filter,case,sensitive,ant,filter,case,sensitive
GenericFileEndpoint -> public void setAntFilterCaseSensitive(boolean antFilterCaseSensitive);1549345447;Sets case sensitive flag on ant filter;public void setAntFilterCaseSensitive(boolean antFilterCaseSensitive) {_        this.antFilterCaseSensitive = antFilterCaseSensitive__    };sets,case,sensitive,flag,on,ant,filter;public,void,set,ant,filter,case,sensitive,boolean,ant,filter,case,sensitive,this,ant,filter,case,sensitive,ant,filter,case,sensitive
GenericFileEndpoint -> public void setAntFilterCaseSensitive(boolean antFilterCaseSensitive);1549345604;Sets case sensitive flag on ant filter;public void setAntFilterCaseSensitive(boolean antFilterCaseSensitive) {_        this.antFilterCaseSensitive = antFilterCaseSensitive__    };sets,case,sensitive,flag,on,ant,filter;public,void,set,ant,filter,case,sensitive,boolean,ant,filter,case,sensitive,this,ant,filter,case,sensitive,ant,filter,case,sensitive
GenericFileEndpoint -> public void setAntFilterCaseSensitive(boolean antFilterCaseSensitive);1549879447;Sets case sensitive flag on ant filter;public void setAntFilterCaseSensitive(boolean antFilterCaseSensitive) {_        this.antFilterCaseSensitive = antFilterCaseSensitive__    };sets,case,sensitive,flag,on,ant,filter;public,void,set,ant,filter,case,sensitive,boolean,ant,filter,case,sensitive,this,ant,filter,case,sensitive,ant,filter,case,sensitive
GenericFileEndpoint -> public void setRecursive(boolean recursive);1548250802;If a directory, will look for files in all the sub-directories as well.;public void setRecursive(boolean recursive) {_        this.recursive = recursive__    };if,a,directory,will,look,for,files,in,all,the,sub,directories,as,well;public,void,set,recursive,boolean,recursive,this,recursive,recursive
GenericFileEndpoint -> public void setRecursive(boolean recursive);1549345447;If a directory, will look for files in all the sub-directories as well.;public void setRecursive(boolean recursive) {_        this.recursive = recursive__    };if,a,directory,will,look,for,files,in,all,the,sub,directories,as,well;public,void,set,recursive,boolean,recursive,this,recursive,recursive
GenericFileEndpoint -> public void setRecursive(boolean recursive);1549345604;If a directory, will look for files in all the sub-directories as well.;public void setRecursive(boolean recursive) {_        this.recursive = recursive__    };if,a,directory,will,look,for,files,in,all,the,sub,directories,as,well;public,void,set,recursive,boolean,recursive,this,recursive,recursive
GenericFileEndpoint -> public void setRecursive(boolean recursive);1549879447;If a directory, will look for files in all the sub-directories as well.;public void setRecursive(boolean recursive) {_        this.recursive = recursive__    };if,a,directory,will,look,for,files,in,all,the,sub,directories,as,well;public,void,set,recursive,boolean,recursive,this,recursive,recursive
GenericFileEndpoint -> public void setIdempotent(Boolean idempotent);1548250802;Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files._Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled_as well to avoid consuming the same files over and over again.;public void setIdempotent(Boolean idempotent) {_        this.idempotent = idempotent__    };option,to,use,the,idempotent,consumer,eip,pattern,to,let,camel,skip,already,processed,files,will,by,default,use,a,memory,based,lrucache,that,holds,1000,entries,if,noop,true,then,idempotent,will,be,enabled,as,well,to,avoid,consuming,the,same,files,over,and,over,again;public,void,set,idempotent,boolean,idempotent,this,idempotent,idempotent
GenericFileEndpoint -> public void setIdempotent(Boolean idempotent);1549345447;Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files._Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled_as well to avoid consuming the same files over and over again.;public void setIdempotent(Boolean idempotent) {_        this.idempotent = idempotent__    };option,to,use,the,idempotent,consumer,eip,pattern,to,let,camel,skip,already,processed,files,will,by,default,use,a,memory,based,lrucache,that,holds,1000,entries,if,noop,true,then,idempotent,will,be,enabled,as,well,to,avoid,consuming,the,same,files,over,and,over,again;public,void,set,idempotent,boolean,idempotent,this,idempotent,idempotent
GenericFileEndpoint -> public void setIdempotent(Boolean idempotent);1549345604;Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files._Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled_as well to avoid consuming the same files over and over again.;public void setIdempotent(Boolean idempotent) {_        this.idempotent = idempotent__    };option,to,use,the,idempotent,consumer,eip,pattern,to,let,camel,skip,already,processed,files,will,by,default,use,a,memory,based,lrucache,that,holds,1000,entries,if,noop,true,then,idempotent,will,be,enabled,as,well,to,avoid,consuming,the,same,files,over,and,over,again;public,void,set,idempotent,boolean,idempotent,this,idempotent,idempotent
GenericFileEndpoint -> public void setIdempotent(Boolean idempotent);1549879447;Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files._Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled_as well to avoid consuming the same files over and over again.;public void setIdempotent(Boolean idempotent) {_        this.idempotent = idempotent__    };option,to,use,the,idempotent,consumer,eip,pattern,to,let,camel,skip,already,processed,files,will,by,default,use,a,memory,based,lrucache,that,holds,1000,entries,if,noop,true,then,idempotent,will,be,enabled,as,well,to,avoid,consuming,the,same,files,over,and,over,again;public,void,set,idempotent,boolean,idempotent,this,idempotent,idempotent
GenericFileEndpoint -> public void setMove(Expression move);1548250802;Expression (such as Simple Language) used to dynamically set the filename when moving it after processing._To move files into a .done subdirectory just enter .done.;public void setMove(Expression move) {_        this.move = move__    };expression,such,as,simple,language,used,to,dynamically,set,the,filename,when,moving,it,after,processing,to,move,files,into,a,done,subdirectory,just,enter,done;public,void,set,move,expression,move,this,move,move
GenericFileEndpoint -> public void setMove(Expression move);1549345447;Expression (such as Simple Language) used to dynamically set the filename when moving it after processing._To move files into a .done subdirectory just enter .done.;public void setMove(Expression move) {_        this.move = move__    };expression,such,as,simple,language,used,to,dynamically,set,the,filename,when,moving,it,after,processing,to,move,files,into,a,done,subdirectory,just,enter,done;public,void,set,move,expression,move,this,move,move
GenericFileEndpoint -> public void setMove(Expression move);1549345604;Expression (such as Simple Language) used to dynamically set the filename when moving it after processing._To move files into a .done subdirectory just enter .done.;public void setMove(Expression move) {_        this.move = move__    };expression,such,as,simple,language,used,to,dynamically,set,the,filename,when,moving,it,after,processing,to,move,files,into,a,done,subdirectory,just,enter,done;public,void,set,move,expression,move,this,move,move
GenericFileEndpoint -> public void setMove(Expression move);1549879447;Expression (such as Simple Language) used to dynamically set the filename when moving it after processing._To move files into a .done subdirectory just enter .done.;public void setMove(Expression move) {_        this.move = move__    };expression,such,as,simple,language,used,to,dynamically,set,the,filename,when,moving,it,after,processing,to,move,files,into,a,done,subdirectory,just,enter,done;public,void,set,move,expression,move,this,move,move
GenericFileEndpoint -> public void setJailStartingDirectory(boolean jailStartingDirectory);1548250802;Used for jailing (restricting) writing files to the starting directory (and sub) only._This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box)._You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders.;public void setJailStartingDirectory(boolean jailStartingDirectory) {_        this.jailStartingDirectory = jailStartingDirectory__    };used,for,jailing,restricting,writing,files,to,the,starting,directory,and,sub,only,this,is,enabled,by,default,to,not,allow,camel,to,write,files,to,outside,directories,to,be,more,secured,out,of,the,box,you,can,turn,this,off,to,allow,writing,files,to,directories,outside,the,starting,directory,such,as,parent,or,root,folders;public,void,set,jail,starting,directory,boolean,jail,starting,directory,this,jail,starting,directory,jail,starting,directory
GenericFileEndpoint -> public void setJailStartingDirectory(boolean jailStartingDirectory);1549345447;Used for jailing (restricting) writing files to the starting directory (and sub) only._This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box)._You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders.;public void setJailStartingDirectory(boolean jailStartingDirectory) {_        this.jailStartingDirectory = jailStartingDirectory__    };used,for,jailing,restricting,writing,files,to,the,starting,directory,and,sub,only,this,is,enabled,by,default,to,not,allow,camel,to,write,files,to,outside,directories,to,be,more,secured,out,of,the,box,you,can,turn,this,off,to,allow,writing,files,to,directories,outside,the,starting,directory,such,as,parent,or,root,folders;public,void,set,jail,starting,directory,boolean,jail,starting,directory,this,jail,starting,directory,jail,starting,directory
GenericFileEndpoint -> public void setJailStartingDirectory(boolean jailStartingDirectory);1549345604;Used for jailing (restricting) writing files to the starting directory (and sub) only._This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box)._You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders.;public void setJailStartingDirectory(boolean jailStartingDirectory) {_        this.jailStartingDirectory = jailStartingDirectory__    };used,for,jailing,restricting,writing,files,to,the,starting,directory,and,sub,only,this,is,enabled,by,default,to,not,allow,camel,to,write,files,to,outside,directories,to,be,more,secured,out,of,the,box,you,can,turn,this,off,to,allow,writing,files,to,directories,outside,the,starting,directory,such,as,parent,or,root,folders;public,void,set,jail,starting,directory,boolean,jail,starting,directory,this,jail,starting,directory,jail,starting,directory
GenericFileEndpoint -> public void setJailStartingDirectory(boolean jailStartingDirectory);1549879447;Used for jailing (restricting) writing files to the starting directory (and sub) only._This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box)._You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders.;public void setJailStartingDirectory(boolean jailStartingDirectory) {_        this.jailStartingDirectory = jailStartingDirectory__    };used,for,jailing,restricting,writing,files,to,the,starting,directory,and,sub,only,this,is,enabled,by,default,to,not,allow,camel,to,write,files,to,outside,directories,to,be,more,secured,out,of,the,box,you,can,turn,this,off,to,allow,writing,files,to,directories,outside,the,starting,directory,such,as,parent,or,root,folders;public,void,set,jail,starting,directory,boolean,jail,starting,directory,this,jail,starting,directory,jail,starting,directory
GenericFileEndpoint -> public void setReadLockIdempotentReleaseAsyncPoolSize(int readLockIdempotentReleaseAsyncPoolSize);1548250802;The number of threads in the scheduled thread pool when using asynchronous release tasks._Using a default of 1 core threads should be sufficient in almost all use-cases, only set this to a higher value_if either updating the idempotent repository is slow, or there are a lot of files to process._This option is not in-use if you use a shared thread pool by configuring the readLockIdempotentReleaseExecutorService option._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseAsyncPoolSize(int readLockIdempotentReleaseAsyncPoolSize) {_        this.readLockIdempotentReleaseAsyncPoolSize = readLockIdempotentReleaseAsyncPoolSize__    };the,number,of,threads,in,the,scheduled,thread,pool,when,using,asynchronous,release,tasks,using,a,default,of,1,core,threads,should,be,sufficient,in,almost,all,use,cases,only,set,this,to,a,higher,value,if,either,updating,the,idempotent,repository,is,slow,or,there,are,a,lot,of,files,to,process,this,option,is,not,in,use,if,you,use,a,shared,thread,pool,by,configuring,the,read,lock,idempotent,release,executor,service,option,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,async,pool,size,int,read,lock,idempotent,release,async,pool,size,this,read,lock,idempotent,release,async,pool,size,read,lock,idempotent,release,async,pool,size
GenericFileEndpoint -> public void setReadLockIdempotentReleaseAsyncPoolSize(int readLockIdempotentReleaseAsyncPoolSize);1549345447;The number of threads in the scheduled thread pool when using asynchronous release tasks._Using a default of 1 core threads should be sufficient in almost all use-cases, only set this to a higher value_if either updating the idempotent repository is slow, or there are a lot of files to process._This option is not in-use if you use a shared thread pool by configuring the readLockIdempotentReleaseExecutorService option._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseAsyncPoolSize(int readLockIdempotentReleaseAsyncPoolSize) {_        this.readLockIdempotentReleaseAsyncPoolSize = readLockIdempotentReleaseAsyncPoolSize__    };the,number,of,threads,in,the,scheduled,thread,pool,when,using,asynchronous,release,tasks,using,a,default,of,1,core,threads,should,be,sufficient,in,almost,all,use,cases,only,set,this,to,a,higher,value,if,either,updating,the,idempotent,repository,is,slow,or,there,are,a,lot,of,files,to,process,this,option,is,not,in,use,if,you,use,a,shared,thread,pool,by,configuring,the,read,lock,idempotent,release,executor,service,option,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,async,pool,size,int,read,lock,idempotent,release,async,pool,size,this,read,lock,idempotent,release,async,pool,size,read,lock,idempotent,release,async,pool,size
GenericFileEndpoint -> public void setReadLockIdempotentReleaseAsyncPoolSize(int readLockIdempotentReleaseAsyncPoolSize);1549345604;The number of threads in the scheduled thread pool when using asynchronous release tasks._Using a default of 1 core threads should be sufficient in almost all use-cases, only set this to a higher value_if either updating the idempotent repository is slow, or there are a lot of files to process._This option is not in-use if you use a shared thread pool by configuring the readLockIdempotentReleaseExecutorService option._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseAsyncPoolSize(int readLockIdempotentReleaseAsyncPoolSize) {_        this.readLockIdempotentReleaseAsyncPoolSize = readLockIdempotentReleaseAsyncPoolSize__    };the,number,of,threads,in,the,scheduled,thread,pool,when,using,asynchronous,release,tasks,using,a,default,of,1,core,threads,should,be,sufficient,in,almost,all,use,cases,only,set,this,to,a,higher,value,if,either,updating,the,idempotent,repository,is,slow,or,there,are,a,lot,of,files,to,process,this,option,is,not,in,use,if,you,use,a,shared,thread,pool,by,configuring,the,read,lock,idempotent,release,executor,service,option,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,async,pool,size,int,read,lock,idempotent,release,async,pool,size,this,read,lock,idempotent,release,async,pool,size,read,lock,idempotent,release,async,pool,size
GenericFileEndpoint -> public void setReadLockIdempotentReleaseAsyncPoolSize(int readLockIdempotentReleaseAsyncPoolSize);1549879447;The number of threads in the scheduled thread pool when using asynchronous release tasks._Using a default of 1 core threads should be sufficient in almost all use-cases, only set this to a higher value_if either updating the idempotent repository is slow, or there are a lot of files to process._This option is not in-use if you use a shared thread pool by configuring the readLockIdempotentReleaseExecutorService option._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseAsyncPoolSize(int readLockIdempotentReleaseAsyncPoolSize) {_        this.readLockIdempotentReleaseAsyncPoolSize = readLockIdempotentReleaseAsyncPoolSize__    };the,number,of,threads,in,the,scheduled,thread,pool,when,using,asynchronous,release,tasks,using,a,default,of,1,core,threads,should,be,sufficient,in,almost,all,use,cases,only,set,this,to,a,higher,value,if,either,updating,the,idempotent,repository,is,slow,or,there,are,a,lot,of,files,to,process,this,option,is,not,in,use,if,you,use,a,shared,thread,pool,by,configuring,the,read,lock,idempotent,release,executor,service,option,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,async,pool,size,int,read,lock,idempotent,release,async,pool,size,this,read,lock,idempotent,release,async,pool,size,read,lock,idempotent,release,async,pool,size
GenericFileEndpoint -> public void setReadLockMinLength(long readLockMinLength);1548250802;This option is applied only for readLock=changed. It allows you to configure a minimum file length._By default Camel expects the file to contain data, and thus the default value is 1._You can set this option to zero, to allow consuming zero-length files.;public void setReadLockMinLength(long readLockMinLength) {_        this.readLockMinLength = readLockMinLength__    };this,option,is,applied,only,for,read,lock,changed,it,allows,you,to,configure,a,minimum,file,length,by,default,camel,expects,the,file,to,contain,data,and,thus,the,default,value,is,1,you,can,set,this,option,to,zero,to,allow,consuming,zero,length,files;public,void,set,read,lock,min,length,long,read,lock,min,length,this,read,lock,min,length,read,lock,min,length
GenericFileEndpoint -> public void setReadLockMinLength(long readLockMinLength);1549345447;This option is applied only for readLock=changed. It allows you to configure a minimum file length._By default Camel expects the file to contain data, and thus the default value is 1._You can set this option to zero, to allow consuming zero-length files.;public void setReadLockMinLength(long readLockMinLength) {_        this.readLockMinLength = readLockMinLength__    };this,option,is,applied,only,for,read,lock,changed,it,allows,you,to,configure,a,minimum,file,length,by,default,camel,expects,the,file,to,contain,data,and,thus,the,default,value,is,1,you,can,set,this,option,to,zero,to,allow,consuming,zero,length,files;public,void,set,read,lock,min,length,long,read,lock,min,length,this,read,lock,min,length,read,lock,min,length
GenericFileEndpoint -> public void setReadLockMinLength(long readLockMinLength);1549345604;This option is applied only for readLock=changed. It allows you to configure a minimum file length._By default Camel expects the file to contain data, and thus the default value is 1._You can set this option to zero, to allow consuming zero-length files.;public void setReadLockMinLength(long readLockMinLength) {_        this.readLockMinLength = readLockMinLength__    };this,option,is,applied,only,for,read,lock,changed,it,allows,you,to,configure,a,minimum,file,length,by,default,camel,expects,the,file,to,contain,data,and,thus,the,default,value,is,1,you,can,set,this,option,to,zero,to,allow,consuming,zero,length,files;public,void,set,read,lock,min,length,long,read,lock,min,length,this,read,lock,min,length,read,lock,min,length
GenericFileEndpoint -> public void setReadLockMinLength(long readLockMinLength);1549879447;This option is applied only for readLock=changed. It allows you to configure a minimum file length._By default Camel expects the file to contain data, and thus the default value is 1._You can set this option to zero, to allow consuming zero-length files.;public void setReadLockMinLength(long readLockMinLength) {_        this.readLockMinLength = readLockMinLength__    };this,option,is,applied,only,for,read,lock,changed,it,allows,you,to,configure,a,minimum,file,length,by,default,camel,expects,the,file,to,contain,data,and,thus,the,default,value,is,1,you,can,set,this,option,to,zero,to,allow,consuming,zero,length,files;public,void,set,read,lock,min,length,long,read,lock,min,length,this,read,lock,min,length,read,lock,min,length
GenericFileEndpoint -> public void setMove(String fileLanguageExpression);1548250802;@see #setMove(org.apache.camel.Expression);public void setMove(String fileLanguageExpression) {_        String expression = configureMoveOrPreMoveExpression(fileLanguageExpression)__        this.move = createFileLanguageExpression(expression)__    };see,set,move,org,apache,camel,expression;public,void,set,move,string,file,language,expression,string,expression,configure,move,or,pre,move,expression,file,language,expression,this,move,create,file,language,expression,expression
GenericFileEndpoint -> public void setMove(String fileLanguageExpression);1549345447;@see #setMove(org.apache.camel.Expression);public void setMove(String fileLanguageExpression) {_        String expression = configureMoveOrPreMoveExpression(fileLanguageExpression)__        this.move = createFileLanguageExpression(expression)__    };see,set,move,org,apache,camel,expression;public,void,set,move,string,file,language,expression,string,expression,configure,move,or,pre,move,expression,file,language,expression,this,move,create,file,language,expression,expression
GenericFileEndpoint -> public void setMove(String fileLanguageExpression);1549345604;@see #setMove(org.apache.camel.Expression);public void setMove(String fileLanguageExpression) {_        String expression = configureMoveOrPreMoveExpression(fileLanguageExpression)__        this.move = createFileLanguageExpression(expression)__    };see,set,move,org,apache,camel,expression;public,void,set,move,string,file,language,expression,string,expression,configure,move,or,pre,move,expression,file,language,expression,this,move,create,file,language,expression,expression
GenericFileEndpoint -> public void setMove(String fileLanguageExpression);1549879447;@see #setMove(org.apache.camel.Expression);public void setMove(String fileLanguageExpression) {_        String expression = configureMoveOrPreMoveExpression(fileLanguageExpression)__        this.move = createFileLanguageExpression(expression)__    };see,set,move,org,apache,camel,expression;public,void,set,move,string,file,language,expression,string,expression,configure,move,or,pre,move,expression,file,language,expression,this,move,create,file,language,expression,expression
GenericFileEndpoint -> public void setFilterFile(Predicate filterFile);1548250802;Filters the file based on Simple language._For example to filter on file size, you can use ${file:size} > 5000;public void setFilterFile(Predicate filterFile) {_        this.filterFile = filterFile__    };filters,the,file,based,on,simple,language,for,example,to,filter,on,file,size,you,can,use,file,size,5000;public,void,set,filter,file,predicate,filter,file,this,filter,file,filter,file
GenericFileEndpoint -> public void setFilterFile(Predicate filterFile);1549345447;Filters the file based on Simple language._For example to filter on file size, you can use ${file:size} > 5000;public void setFilterFile(Predicate filterFile) {_        this.filterFile = filterFile__    };filters,the,file,based,on,simple,language,for,example,to,filter,on,file,size,you,can,use,file,size,5000;public,void,set,filter,file,predicate,filter,file,this,filter,file,filter,file
GenericFileEndpoint -> public void setFilterFile(Predicate filterFile);1549345604;Filters the file based on Simple language._For example to filter on file size, you can use ${file:size} > 5000;public void setFilterFile(Predicate filterFile) {_        this.filterFile = filterFile__    };filters,the,file,based,on,simple,language,for,example,to,filter,on,file,size,you,can,use,file,size,5000;public,void,set,filter,file,predicate,filter,file,this,filter,file,filter,file
GenericFileEndpoint -> public void setFilterFile(Predicate filterFile);1549879447;Filters the file based on Simple language._For example to filter on file size, you can use ${file:size} > 5000;public void setFilterFile(Predicate filterFile) {_        this.filterFile = filterFile__    };filters,the,file,based,on,simple,language,for,example,to,filter,on,file,size,you,can,use,file,size,5000;public,void,set,filter,file,predicate,filter,file,this,filter,file,filter,file
GenericFileEndpoint -> public void setReadLockDeleteOrphanLockFiles(boolean readLockDeleteOrphanLockFiles);1548250802;Whether or not read lock with marker files should upon startup delete any orphan read lock files, which may_have been left on the file system, if Camel was not properly shutdown (such as a JVM crash)._<p/>_If turning this option to <tt>false</tt> then any orphaned lock file will cause Camel to not attempt to pickup_that file, this could also be due another node is concurrently reading files from the same shared directory.;public void setReadLockDeleteOrphanLockFiles(boolean readLockDeleteOrphanLockFiles) {_        this.readLockDeleteOrphanLockFiles = readLockDeleteOrphanLockFiles__    };whether,or,not,read,lock,with,marker,files,should,upon,startup,delete,any,orphan,read,lock,files,which,may,have,been,left,on,the,file,system,if,camel,was,not,properly,shutdown,such,as,a,jvm,crash,p,if,turning,this,option,to,tt,false,tt,then,any,orphaned,lock,file,will,cause,camel,to,not,attempt,to,pickup,that,file,this,could,also,be,due,another,node,is,concurrently,reading,files,from,the,same,shared,directory;public,void,set,read,lock,delete,orphan,lock,files,boolean,read,lock,delete,orphan,lock,files,this,read,lock,delete,orphan,lock,files,read,lock,delete,orphan,lock,files
GenericFileEndpoint -> public void setReadLockDeleteOrphanLockFiles(boolean readLockDeleteOrphanLockFiles);1549345447;Whether or not read lock with marker files should upon startup delete any orphan read lock files, which may_have been left on the file system, if Camel was not properly shutdown (such as a JVM crash)._<p/>_If turning this option to <tt>false</tt> then any orphaned lock file will cause Camel to not attempt to pickup_that file, this could also be due another node is concurrently reading files from the same shared directory.;public void setReadLockDeleteOrphanLockFiles(boolean readLockDeleteOrphanLockFiles) {_        this.readLockDeleteOrphanLockFiles = readLockDeleteOrphanLockFiles__    };whether,or,not,read,lock,with,marker,files,should,upon,startup,delete,any,orphan,read,lock,files,which,may,have,been,left,on,the,file,system,if,camel,was,not,properly,shutdown,such,as,a,jvm,crash,p,if,turning,this,option,to,tt,false,tt,then,any,orphaned,lock,file,will,cause,camel,to,not,attempt,to,pickup,that,file,this,could,also,be,due,another,node,is,concurrently,reading,files,from,the,same,shared,directory;public,void,set,read,lock,delete,orphan,lock,files,boolean,read,lock,delete,orphan,lock,files,this,read,lock,delete,orphan,lock,files,read,lock,delete,orphan,lock,files
GenericFileEndpoint -> public void setReadLockDeleteOrphanLockFiles(boolean readLockDeleteOrphanLockFiles);1549345604;Whether or not read lock with marker files should upon startup delete any orphan read lock files, which may_have been left on the file system, if Camel was not properly shutdown (such as a JVM crash)._<p/>_If turning this option to <tt>false</tt> then any orphaned lock file will cause Camel to not attempt to pickup_that file, this could also be due another node is concurrently reading files from the same shared directory.;public void setReadLockDeleteOrphanLockFiles(boolean readLockDeleteOrphanLockFiles) {_        this.readLockDeleteOrphanLockFiles = readLockDeleteOrphanLockFiles__    };whether,or,not,read,lock,with,marker,files,should,upon,startup,delete,any,orphan,read,lock,files,which,may,have,been,left,on,the,file,system,if,camel,was,not,properly,shutdown,such,as,a,jvm,crash,p,if,turning,this,option,to,tt,false,tt,then,any,orphaned,lock,file,will,cause,camel,to,not,attempt,to,pickup,that,file,this,could,also,be,due,another,node,is,concurrently,reading,files,from,the,same,shared,directory;public,void,set,read,lock,delete,orphan,lock,files,boolean,read,lock,delete,orphan,lock,files,this,read,lock,delete,orphan,lock,files,read,lock,delete,orphan,lock,files
GenericFileEndpoint -> public void setReadLockDeleteOrphanLockFiles(boolean readLockDeleteOrphanLockFiles);1549879447;Whether or not read lock with marker files should upon startup delete any orphan read lock files, which may_have been left on the file system, if Camel was not properly shutdown (such as a JVM crash)._<p/>_If turning this option to <tt>false</tt> then any orphaned lock file will cause Camel to not attempt to pickup_that file, this could also be due another node is concurrently reading files from the same shared directory.;public void setReadLockDeleteOrphanLockFiles(boolean readLockDeleteOrphanLockFiles) {_        this.readLockDeleteOrphanLockFiles = readLockDeleteOrphanLockFiles__    };whether,or,not,read,lock,with,marker,files,should,upon,startup,delete,any,orphan,read,lock,files,which,may,have,been,left,on,the,file,system,if,camel,was,not,properly,shutdown,such,as,a,jvm,crash,p,if,turning,this,option,to,tt,false,tt,then,any,orphaned,lock,file,will,cause,camel,to,not,attempt,to,pickup,that,file,this,could,also,be,due,another,node,is,concurrently,reading,files,from,the,same,shared,directory;public,void,set,read,lock,delete,orphan,lock,files,boolean,read,lock,delete,orphan,lock,files,this,read,lock,delete,orphan,lock,files,read,lock,delete,orphan,lock,files
GenericFileEndpoint -> public void setFlatten(boolean flatten);1548250802;Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name._This allows you to consume recursively into sub-directories, but when you eg write the files to another directory_they will be written in a single directory._Setting this to true on the producer enforces that any file name in CamelFileName header_will be stripped for any leading paths.;public void setFlatten(boolean flatten) {_        this.flatten = flatten__    };flatten,is,used,to,flatten,the,file,name,path,to,strip,any,leading,paths,so,it,s,just,the,file,name,this,allows,you,to,consume,recursively,into,sub,directories,but,when,you,eg,write,the,files,to,another,directory,they,will,be,written,in,a,single,directory,setting,this,to,true,on,the,producer,enforces,that,any,file,name,in,camel,file,name,header,will,be,stripped,for,any,leading,paths;public,void,set,flatten,boolean,flatten,this,flatten,flatten
GenericFileEndpoint -> public void setFlatten(boolean flatten);1549345447;Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name._This allows you to consume recursively into sub-directories, but when you eg write the files to another directory_they will be written in a single directory._Setting this to true on the producer enforces that any file name in CamelFileName header_will be stripped for any leading paths.;public void setFlatten(boolean flatten) {_        this.flatten = flatten__    };flatten,is,used,to,flatten,the,file,name,path,to,strip,any,leading,paths,so,it,s,just,the,file,name,this,allows,you,to,consume,recursively,into,sub,directories,but,when,you,eg,write,the,files,to,another,directory,they,will,be,written,in,a,single,directory,setting,this,to,true,on,the,producer,enforces,that,any,file,name,in,camel,file,name,header,will,be,stripped,for,any,leading,paths;public,void,set,flatten,boolean,flatten,this,flatten,flatten
GenericFileEndpoint -> public void setFlatten(boolean flatten);1549345604;Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name._This allows you to consume recursively into sub-directories, but when you eg write the files to another directory_they will be written in a single directory._Setting this to true on the producer enforces that any file name in CamelFileName header_will be stripped for any leading paths.;public void setFlatten(boolean flatten) {_        this.flatten = flatten__    };flatten,is,used,to,flatten,the,file,name,path,to,strip,any,leading,paths,so,it,s,just,the,file,name,this,allows,you,to,consume,recursively,into,sub,directories,but,when,you,eg,write,the,files,to,another,directory,they,will,be,written,in,a,single,directory,setting,this,to,true,on,the,producer,enforces,that,any,file,name,in,camel,file,name,header,will,be,stripped,for,any,leading,paths;public,void,set,flatten,boolean,flatten,this,flatten,flatten
GenericFileEndpoint -> public void setFlatten(boolean flatten);1549879447;Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name._This allows you to consume recursively into sub-directories, but when you eg write the files to another directory_they will be written in a single directory._Setting this to true on the producer enforces that any file name in CamelFileName header_will be stripped for any leading paths.;public void setFlatten(boolean flatten) {_        this.flatten = flatten__    };flatten,is,used,to,flatten,the,file,name,path,to,strip,any,leading,paths,so,it,s,just,the,file,name,this,allows,you,to,consume,recursively,into,sub,directories,but,when,you,eg,write,the,files,to,another,directory,they,will,be,written,in,a,single,directory,setting,this,to,true,on,the,producer,enforces,that,any,file,name,in,camel,file,name,header,will,be,stripped,for,any,leading,paths;public,void,set,flatten,boolean,flatten,this,flatten,flatten
GenericFileEndpoint -> public void setMoveFailed(Expression moveFailed);1548250802;Sets the move failure expression based on Simple language._For example, to move files into a .error subdirectory use: .error._Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again.;public void setMoveFailed(Expression moveFailed) {_        this.moveFailed = moveFailed__    };sets,the,move,failure,expression,based,on,simple,language,for,example,to,move,files,into,a,error,subdirectory,use,error,note,when,moving,the,files,to,the,fail,location,camel,will,handle,the,error,and,will,not,pick,up,the,file,again;public,void,set,move,failed,expression,move,failed,this,move,failed,move,failed
GenericFileEndpoint -> public void setMoveFailed(Expression moveFailed);1549345447;Sets the move failure expression based on Simple language._For example, to move files into a .error subdirectory use: .error._Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again.;public void setMoveFailed(Expression moveFailed) {_        this.moveFailed = moveFailed__    };sets,the,move,failure,expression,based,on,simple,language,for,example,to,move,files,into,a,error,subdirectory,use,error,note,when,moving,the,files,to,the,fail,location,camel,will,handle,the,error,and,will,not,pick,up,the,file,again;public,void,set,move,failed,expression,move,failed,this,move,failed,move,failed
GenericFileEndpoint -> public void setMoveFailed(Expression moveFailed);1549345604;Sets the move failure expression based on Simple language._For example, to move files into a .error subdirectory use: .error._Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again.;public void setMoveFailed(Expression moveFailed) {_        this.moveFailed = moveFailed__    };sets,the,move,failure,expression,based,on,simple,language,for,example,to,move,files,into,a,error,subdirectory,use,error,note,when,moving,the,files,to,the,fail,location,camel,will,handle,the,error,and,will,not,pick,up,the,file,again;public,void,set,move,failed,expression,move,failed,this,move,failed,move,failed
GenericFileEndpoint -> public void setMoveFailed(Expression moveFailed);1549879447;Sets the move failure expression based on Simple language._For example, to move files into a .error subdirectory use: .error._Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again.;public void setMoveFailed(Expression moveFailed) {_        this.moveFailed = moveFailed__    };sets,the,move,failure,expression,based,on,simple,language,for,example,to,move,files,into,a,error,subdirectory,use,error,note,when,moving,the,files,to,the,fail,location,camel,will,handle,the,error,and,will,not,pick,up,the,file,again;public,void,set,move,failed,expression,move,failed,this,move,failed,move,failed
GenericFileEndpoint -> public void setAutoCreate(boolean autoCreate);1548250802;Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory._For the file producer, it means the directory the files should be written to.;public void setAutoCreate(boolean autoCreate) {_        this.autoCreate = autoCreate__    };automatically,create,missing,directories,in,the,file,s,pathname,for,the,file,consumer,that,means,creating,the,starting,directory,for,the,file,producer,it,means,the,directory,the,files,should,be,written,to;public,void,set,auto,create,boolean,auto,create,this,auto,create,auto,create
GenericFileEndpoint -> public void setAutoCreate(boolean autoCreate);1549345447;Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory._For the file producer, it means the directory the files should be written to.;public void setAutoCreate(boolean autoCreate) {_        this.autoCreate = autoCreate__    };automatically,create,missing,directories,in,the,file,s,pathname,for,the,file,consumer,that,means,creating,the,starting,directory,for,the,file,producer,it,means,the,directory,the,files,should,be,written,to;public,void,set,auto,create,boolean,auto,create,this,auto,create,auto,create
GenericFileEndpoint -> public void setAutoCreate(boolean autoCreate);1549345604;Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory._For the file producer, it means the directory the files should be written to.;public void setAutoCreate(boolean autoCreate) {_        this.autoCreate = autoCreate__    };automatically,create,missing,directories,in,the,file,s,pathname,for,the,file,consumer,that,means,creating,the,starting,directory,for,the,file,producer,it,means,the,directory,the,files,should,be,written,to;public,void,set,auto,create,boolean,auto,create,this,auto,create,auto,create
GenericFileEndpoint -> public void setAutoCreate(boolean autoCreate);1549879447;Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory._For the file producer, it means the directory the files should be written to.;public void setAutoCreate(boolean autoCreate) {_        this.autoCreate = autoCreate__    };automatically,create,missing,directories,in,the,file,s,pathname,for,the,file,consumer,that,means,creating,the,starting,directory,for,the,file,producer,it,means,the,directory,the,files,should,be,written,to;public,void,set,auto,create,boolean,auto,create,this,auto,create,auto,create
GenericFileEndpoint -> public void setFilter(GenericFileFilter<T> filter);1548250802;Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class._Will skip files if filter returns false in its accept() method.;public void setFilter(GenericFileFilter<T> filter) {_        this.filter = filter__    };pluggable,filter,as,a,org,apache,camel,component,file,generic,file,filter,class,will,skip,files,if,filter,returns,false,in,its,accept,method;public,void,set,filter,generic,file,filter,t,filter,this,filter,filter
GenericFileEndpoint -> public void setFilter(GenericFileFilter<T> filter);1549345447;Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class._Will skip files if filter returns false in its accept() method.;public void setFilter(GenericFileFilter<T> filter) {_        this.filter = filter__    };pluggable,filter,as,a,org,apache,camel,component,file,generic,file,filter,class,will,skip,files,if,filter,returns,false,in,its,accept,method;public,void,set,filter,generic,file,filter,t,filter,this,filter,filter
GenericFileEndpoint -> public void setFilter(GenericFileFilter<T> filter);1549345604;Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class._Will skip files if filter returns false in its accept() method.;public void setFilter(GenericFileFilter<T> filter) {_        this.filter = filter__    };pluggable,filter,as,a,org,apache,camel,component,file,generic,file,filter,class,will,skip,files,if,filter,returns,false,in,its,accept,method;public,void,set,filter,generic,file,filter,t,filter,this,filter,filter
GenericFileEndpoint -> public void setFilter(GenericFileFilter<T> filter);1549879447;Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class._Will skip files if filter returns false in its accept() method.;public void setFilter(GenericFileFilter<T> filter) {_        this.filter = filter__    };pluggable,filter,as,a,org,apache,camel,component,file,generic,file,filter,class,will,skip,files,if,filter,returns,false,in,its,accept,method;public,void,set,filter,generic,file,filter,t,filter,this,filter,filter
GenericFileEndpoint -> public void setReadLockTimeout(long readLockTimeout);1548250802;Optional timeout in millis for the read-lock, if supported by the read-lock._If the read-lock could not be granted and the timeout triggered, then Camel will skip the file._At next poll Camel, will try the file again, and this time maybe the read-lock could be granted._Use a value of 0 or lower to indicate forever. Currently fileLock, changed and rename support the timeout._<p/>_Notice: For FTP the default readLockTimeout value is 20000 instead of 10000._<p/>_The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout_that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble_time is allowed for the read lock process to try to grab the lock before the timeout was hit.;public void setReadLockTimeout(long readLockTimeout) {_        this.readLockTimeout = readLockTimeout__    };optional,timeout,in,millis,for,the,read,lock,if,supported,by,the,read,lock,if,the,read,lock,could,not,be,granted,and,the,timeout,triggered,then,camel,will,skip,the,file,at,next,poll,camel,will,try,the,file,again,and,this,time,maybe,the,read,lock,could,be,granted,use,a,value,of,0,or,lower,to,indicate,forever,currently,file,lock,changed,and,rename,support,the,timeout,p,notice,for,ftp,the,default,read,lock,timeout,value,is,20000,instead,of,10000,p,the,read,lock,timeout,value,must,be,higher,than,read,lock,check,interval,but,a,rule,of,thumb,is,to,have,a,timeout,that,is,at,least,2,or,more,times,higher,than,the,read,lock,check,interval,this,is,needed,to,ensure,that,amble,time,is,allowed,for,the,read,lock,process,to,try,to,grab,the,lock,before,the,timeout,was,hit;public,void,set,read,lock,timeout,long,read,lock,timeout,this,read,lock,timeout,read,lock,timeout
GenericFileEndpoint -> public void setReadLockTimeout(long readLockTimeout);1549345447;Optional timeout in millis for the read-lock, if supported by the read-lock._If the read-lock could not be granted and the timeout triggered, then Camel will skip the file._At next poll Camel, will try the file again, and this time maybe the read-lock could be granted._Use a value of 0 or lower to indicate forever. Currently fileLock, changed and rename support the timeout._<p/>_Notice: For FTP the default readLockTimeout value is 20000 instead of 10000._<p/>_The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout_that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble_time is allowed for the read lock process to try to grab the lock before the timeout was hit.;public void setReadLockTimeout(long readLockTimeout) {_        this.readLockTimeout = readLockTimeout__    };optional,timeout,in,millis,for,the,read,lock,if,supported,by,the,read,lock,if,the,read,lock,could,not,be,granted,and,the,timeout,triggered,then,camel,will,skip,the,file,at,next,poll,camel,will,try,the,file,again,and,this,time,maybe,the,read,lock,could,be,granted,use,a,value,of,0,or,lower,to,indicate,forever,currently,file,lock,changed,and,rename,support,the,timeout,p,notice,for,ftp,the,default,read,lock,timeout,value,is,20000,instead,of,10000,p,the,read,lock,timeout,value,must,be,higher,than,read,lock,check,interval,but,a,rule,of,thumb,is,to,have,a,timeout,that,is,at,least,2,or,more,times,higher,than,the,read,lock,check,interval,this,is,needed,to,ensure,that,amble,time,is,allowed,for,the,read,lock,process,to,try,to,grab,the,lock,before,the,timeout,was,hit;public,void,set,read,lock,timeout,long,read,lock,timeout,this,read,lock,timeout,read,lock,timeout
GenericFileEndpoint -> public void setReadLockTimeout(long readLockTimeout);1549345604;Optional timeout in millis for the read-lock, if supported by the read-lock._If the read-lock could not be granted and the timeout triggered, then Camel will skip the file._At next poll Camel, will try the file again, and this time maybe the read-lock could be granted._Use a value of 0 or lower to indicate forever. Currently fileLock, changed and rename support the timeout._<p/>_Notice: For FTP the default readLockTimeout value is 20000 instead of 10000._<p/>_The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout_that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble_time is allowed for the read lock process to try to grab the lock before the timeout was hit.;public void setReadLockTimeout(long readLockTimeout) {_        this.readLockTimeout = readLockTimeout__    };optional,timeout,in,millis,for,the,read,lock,if,supported,by,the,read,lock,if,the,read,lock,could,not,be,granted,and,the,timeout,triggered,then,camel,will,skip,the,file,at,next,poll,camel,will,try,the,file,again,and,this,time,maybe,the,read,lock,could,be,granted,use,a,value,of,0,or,lower,to,indicate,forever,currently,file,lock,changed,and,rename,support,the,timeout,p,notice,for,ftp,the,default,read,lock,timeout,value,is,20000,instead,of,10000,p,the,read,lock,timeout,value,must,be,higher,than,read,lock,check,interval,but,a,rule,of,thumb,is,to,have,a,timeout,that,is,at,least,2,or,more,times,higher,than,the,read,lock,check,interval,this,is,needed,to,ensure,that,amble,time,is,allowed,for,the,read,lock,process,to,try,to,grab,the,lock,before,the,timeout,was,hit;public,void,set,read,lock,timeout,long,read,lock,timeout,this,read,lock,timeout,read,lock,timeout
GenericFileEndpoint -> public void setReadLockTimeout(long readLockTimeout);1549879447;Optional timeout in millis for the read-lock, if supported by the read-lock._If the read-lock could not be granted and the timeout triggered, then Camel will skip the file._At next poll Camel, will try the file again, and this time maybe the read-lock could be granted._Use a value of 0 or lower to indicate forever. Currently fileLock, changed and rename support the timeout._<p/>_Notice: For FTP the default readLockTimeout value is 20000 instead of 10000._<p/>_The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout_that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble_time is allowed for the read lock process to try to grab the lock before the timeout was hit.;public void setReadLockTimeout(long readLockTimeout) {_        this.readLockTimeout = readLockTimeout__    };optional,timeout,in,millis,for,the,read,lock,if,supported,by,the,read,lock,if,the,read,lock,could,not,be,granted,and,the,timeout,triggered,then,camel,will,skip,the,file,at,next,poll,camel,will,try,the,file,again,and,this,time,maybe,the,read,lock,could,be,granted,use,a,value,of,0,or,lower,to,indicate,forever,currently,file,lock,changed,and,rename,support,the,timeout,p,notice,for,ftp,the,default,read,lock,timeout,value,is,20000,instead,of,10000,p,the,read,lock,timeout,value,must,be,higher,than,read,lock,check,interval,but,a,rule,of,thumb,is,to,have,a,timeout,that,is,at,least,2,or,more,times,higher,than,the,read,lock,check,interval,this,is,needed,to,ensure,that,amble,time,is,allowed,for,the,read,lock,process,to,try,to,grab,the,lock,before,the,timeout,was,hit;public,void,set,read,lock,timeout,long,read,lock,timeout,this,read,lock,timeout,read,lock,timeout
GenericFileEndpoint -> public void setProcessStrategy(GenericFileProcessStrategy<T> processStrategy);1548250802;A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar._Can also be used when special conditions must be met before a file can be consumed, such as a special ready file exists._If this option is set then the readLock option does not apply.;public void setProcessStrategy(GenericFileProcessStrategy<T> processStrategy) {_        this.processStrategy = processStrategy__    };a,pluggable,org,apache,camel,component,file,generic,file,process,strategy,allowing,you,to,implement,your,own,read,lock,option,or,similar,can,also,be,used,when,special,conditions,must,be,met,before,a,file,can,be,consumed,such,as,a,special,ready,file,exists,if,this,option,is,set,then,the,read,lock,option,does,not,apply;public,void,set,process,strategy,generic,file,process,strategy,t,process,strategy,this,process,strategy,process,strategy
GenericFileEndpoint -> public void setProcessStrategy(GenericFileProcessStrategy<T> processStrategy);1549345447;A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar._Can also be used when special conditions must be met before a file can be consumed, such as a special ready file exists._If this option is set then the readLock option does not apply.;public void setProcessStrategy(GenericFileProcessStrategy<T> processStrategy) {_        this.processStrategy = processStrategy__    };a,pluggable,org,apache,camel,component,file,generic,file,process,strategy,allowing,you,to,implement,your,own,read,lock,option,or,similar,can,also,be,used,when,special,conditions,must,be,met,before,a,file,can,be,consumed,such,as,a,special,ready,file,exists,if,this,option,is,set,then,the,read,lock,option,does,not,apply;public,void,set,process,strategy,generic,file,process,strategy,t,process,strategy,this,process,strategy,process,strategy
GenericFileEndpoint -> public void setProcessStrategy(GenericFileProcessStrategy<T> processStrategy);1549345604;A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar._Can also be used when special conditions must be met before a file can be consumed, such as a special ready file exists._If this option is set then the readLock option does not apply.;public void setProcessStrategy(GenericFileProcessStrategy<T> processStrategy) {_        this.processStrategy = processStrategy__    };a,pluggable,org,apache,camel,component,file,generic,file,process,strategy,allowing,you,to,implement,your,own,read,lock,option,or,similar,can,also,be,used,when,special,conditions,must,be,met,before,a,file,can,be,consumed,such,as,a,special,ready,file,exists,if,this,option,is,set,then,the,read,lock,option,does,not,apply;public,void,set,process,strategy,generic,file,process,strategy,t,process,strategy,this,process,strategy,process,strategy
GenericFileEndpoint -> public void setProcessStrategy(GenericFileProcessStrategy<T> processStrategy);1549879447;A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar._Can also be used when special conditions must be met before a file can be consumed, such as a special ready file exists._If this option is set then the readLock option does not apply.;public void setProcessStrategy(GenericFileProcessStrategy<T> processStrategy) {_        this.processStrategy = processStrategy__    };a,pluggable,org,apache,camel,component,file,generic,file,process,strategy,allowing,you,to,implement,your,own,read,lock,option,or,similar,can,also,be,used,when,special,conditions,must,be,met,before,a,file,can,be,consumed,such,as,a,special,ready,file,exists,if,this,option,is,set,then,the,read,lock,option,does,not,apply;public,void,set,process,strategy,generic,file,process,strategy,t,process,strategy,this,process,strategy,process,strategy
GenericFileEndpoint -> public void setBufferSize(int bufferSize);1548250802;Write buffer sized in bytes.;public void setBufferSize(int bufferSize) {_        if (bufferSize <= 0) {_            throw new IllegalArgumentException("BufferSize must be a positive value, was " + bufferSize)__        }_        this.bufferSize = bufferSize__    };write,buffer,sized,in,bytes;public,void,set,buffer,size,int,buffer,size,if,buffer,size,0,throw,new,illegal,argument,exception,buffer,size,must,be,a,positive,value,was,buffer,size,this,buffer,size,buffer,size
GenericFileEndpoint -> public void setBufferSize(int bufferSize);1549345447;Write buffer sized in bytes.;public void setBufferSize(int bufferSize) {_        if (bufferSize <= 0) {_            throw new IllegalArgumentException("BufferSize must be a positive value, was " + bufferSize)__        }_        this.bufferSize = bufferSize__    };write,buffer,sized,in,bytes;public,void,set,buffer,size,int,buffer,size,if,buffer,size,0,throw,new,illegal,argument,exception,buffer,size,must,be,a,positive,value,was,buffer,size,this,buffer,size,buffer,size
GenericFileEndpoint -> public void setBufferSize(int bufferSize);1549345604;Write buffer sized in bytes.;public void setBufferSize(int bufferSize) {_        if (bufferSize <= 0) {_            throw new IllegalArgumentException("BufferSize must be a positive value, was " + bufferSize)__        }_        this.bufferSize = bufferSize__    };write,buffer,sized,in,bytes;public,void,set,buffer,size,int,buffer,size,if,buffer,size,0,throw,new,illegal,argument,exception,buffer,size,must,be,a,positive,value,was,buffer,size,this,buffer,size,buffer,size
GenericFileEndpoint -> public void setBufferSize(int bufferSize);1549879447;Write buffer sized in bytes.;public void setBufferSize(int bufferSize) {_        if (bufferSize <= 0) {_            throw new IllegalArgumentException("BufferSize must be a positive value, was " + bufferSize)__        }_        this.bufferSize = bufferSize__    };write,buffer,sized,in,bytes;public,void,set,buffer,size,int,buffer,size,if,buffer,size,0,throw,new,illegal,argument,exception,buffer,size,must,be,a,positive,value,was,buffer,size,this,buffer,size,buffer,size
GenericFileEndpoint -> protected String configureMoveOrPreMoveExpression(String expression);1548250802;Strategy to configure the move, preMove, or moveExisting option based on a String input.__@param expression the original string input_@return configured string or the original if no modifications is needed;protected String configureMoveOrPreMoveExpression(String expression) {_        _        if (StringHelper.hasStartToken(expression, "simple")) {_            return expression__        }__        _        expression = FileUtil.stripTrailingSeparator(expression)___        StringBuilder sb = new StringBuilder()___        _        if (!isAbsolute(expression)) {_            sb.append("${file:parent}")__            sb.append(getFileSeparator())__        }_        _        sb.append(expression)__        _        sb.append(getFileSeparator())__        sb.append("${file:onlyname}")___        return sb.toString()__    };strategy,to,configure,the,move,pre,move,or,move,existing,option,based,on,a,string,input,param,expression,the,original,string,input,return,configured,string,or,the,original,if,no,modifications,is,needed;protected,string,configure,move,or,pre,move,expression,string,expression,if,string,helper,has,start,token,expression,simple,return,expression,expression,file,util,strip,trailing,separator,expression,string,builder,sb,new,string,builder,if,is,absolute,expression,sb,append,file,parent,sb,append,get,file,separator,sb,append,expression,sb,append,get,file,separator,sb,append,file,onlyname,return,sb,to,string
GenericFileEndpoint -> protected String configureMoveOrPreMoveExpression(String expression);1549345447;Strategy to configure the move, preMove, or moveExisting option based on a String input.__@param expression the original string input_@return configured string or the original if no modifications is needed;protected String configureMoveOrPreMoveExpression(String expression) {_        _        if (StringHelper.hasStartToken(expression, "simple")) {_            return expression__        }__        _        expression = FileUtil.stripTrailingSeparator(expression)___        StringBuilder sb = new StringBuilder()___        _        if (!isAbsolute(expression)) {_            sb.append("${file:parent}")__            sb.append(getFileSeparator())__        }_        _        sb.append(expression)__        _        sb.append(getFileSeparator())__        sb.append("${file:onlyname}")___        return sb.toString()__    };strategy,to,configure,the,move,pre,move,or,move,existing,option,based,on,a,string,input,param,expression,the,original,string,input,return,configured,string,or,the,original,if,no,modifications,is,needed;protected,string,configure,move,or,pre,move,expression,string,expression,if,string,helper,has,start,token,expression,simple,return,expression,expression,file,util,strip,trailing,separator,expression,string,builder,sb,new,string,builder,if,is,absolute,expression,sb,append,file,parent,sb,append,get,file,separator,sb,append,expression,sb,append,get,file,separator,sb,append,file,onlyname,return,sb,to,string
GenericFileEndpoint -> protected String configureMoveOrPreMoveExpression(String expression);1549345604;Strategy to configure the move, preMove, or moveExisting option based on a String input.__@param expression the original string input_@return configured string or the original if no modifications is needed;protected String configureMoveOrPreMoveExpression(String expression) {_        _        if (StringHelper.hasStartToken(expression, "simple")) {_            return expression__        }__        _        expression = FileUtil.stripTrailingSeparator(expression)___        StringBuilder sb = new StringBuilder()___        _        if (!isAbsolute(expression)) {_            sb.append("${file:parent}")__            sb.append(getFileSeparator())__        }_        _        sb.append(expression)__        _        sb.append(getFileSeparator())__        sb.append("${file:onlyname}")___        return sb.toString()__    };strategy,to,configure,the,move,pre,move,or,move,existing,option,based,on,a,string,input,param,expression,the,original,string,input,return,configured,string,or,the,original,if,no,modifications,is,needed;protected,string,configure,move,or,pre,move,expression,string,expression,if,string,helper,has,start,token,expression,simple,return,expression,expression,file,util,strip,trailing,separator,expression,string,builder,sb,new,string,builder,if,is,absolute,expression,sb,append,file,parent,sb,append,get,file,separator,sb,append,expression,sb,append,get,file,separator,sb,append,file,onlyname,return,sb,to,string
GenericFileEndpoint -> protected String configureMoveOrPreMoveExpression(String expression);1549879447;Strategy to configure the move, preMove, or moveExisting option based on a String input.__@param expression the original string input_@return configured string or the original if no modifications is needed;protected String configureMoveOrPreMoveExpression(String expression) {_        _        if (StringHelper.hasStartToken(expression, "simple")) {_            return expression__        }__        _        expression = FileUtil.stripTrailingSeparator(expression)___        StringBuilder sb = new StringBuilder()___        _        if (!isAbsolute(expression)) {_            sb.append("${file:parent}")__            sb.append(getFileSeparator())__        }_        _        sb.append(expression)__        _        sb.append(getFileSeparator())__        sb.append("${file:onlyname}")___        return sb.toString()__    };strategy,to,configure,the,move,pre,move,or,move,existing,option,based,on,a,string,input,param,expression,the,original,string,input,return,configured,string,or,the,original,if,no,modifications,is,needed;protected,string,configure,move,or,pre,move,expression,string,expression,if,string,helper,has,start,token,expression,simple,return,expression,expression,file,util,strip,trailing,separator,expression,string,builder,sb,new,string,builder,if,is,absolute,expression,sb,append,file,parent,sb,append,get,file,separator,sb,append,expression,sb,append,get,file,separator,sb,append,file,onlyname,return,sb,to,string
GenericFileEndpoint -> public void setReadLockIdempotentReleaseDelay(int readLockIdempotentReleaseDelay);1548250802;Whether to delay the release task for a period of millis._<p/>_This can be used to delay the release tasks to expand the window when a file is regarded as read-locked,_in an active/active cluster scenario with a shared idempotent repository, to ensure other nodes cannot potentially scan and acquire_the same file, due to race-conditions. By expanding the time-window of the release tasks helps prevents these situations._Note delaying is only needed if you have configured readLockRemoveOnCommit to true.;public void setReadLockIdempotentReleaseDelay(int readLockIdempotentReleaseDelay) {_        this.readLockIdempotentReleaseDelay = readLockIdempotentReleaseDelay__    };whether,to,delay,the,release,task,for,a,period,of,millis,p,this,can,be,used,to,delay,the,release,tasks,to,expand,the,window,when,a,file,is,regarded,as,read,locked,in,an,active,active,cluster,scenario,with,a,shared,idempotent,repository,to,ensure,other,nodes,cannot,potentially,scan,and,acquire,the,same,file,due,to,race,conditions,by,expanding,the,time,window,of,the,release,tasks,helps,prevents,these,situations,note,delaying,is,only,needed,if,you,have,configured,read,lock,remove,on,commit,to,true;public,void,set,read,lock,idempotent,release,delay,int,read,lock,idempotent,release,delay,this,read,lock,idempotent,release,delay,read,lock,idempotent,release,delay
GenericFileEndpoint -> public void setReadLockIdempotentReleaseDelay(int readLockIdempotentReleaseDelay);1549345447;Whether to delay the release task for a period of millis._<p/>_This can be used to delay the release tasks to expand the window when a file is regarded as read-locked,_in an active/active cluster scenario with a shared idempotent repository, to ensure other nodes cannot potentially scan and acquire_the same file, due to race-conditions. By expanding the time-window of the release tasks helps prevents these situations._Note delaying is only needed if you have configured readLockRemoveOnCommit to true.;public void setReadLockIdempotentReleaseDelay(int readLockIdempotentReleaseDelay) {_        this.readLockIdempotentReleaseDelay = readLockIdempotentReleaseDelay__    };whether,to,delay,the,release,task,for,a,period,of,millis,p,this,can,be,used,to,delay,the,release,tasks,to,expand,the,window,when,a,file,is,regarded,as,read,locked,in,an,active,active,cluster,scenario,with,a,shared,idempotent,repository,to,ensure,other,nodes,cannot,potentially,scan,and,acquire,the,same,file,due,to,race,conditions,by,expanding,the,time,window,of,the,release,tasks,helps,prevents,these,situations,note,delaying,is,only,needed,if,you,have,configured,read,lock,remove,on,commit,to,true;public,void,set,read,lock,idempotent,release,delay,int,read,lock,idempotent,release,delay,this,read,lock,idempotent,release,delay,read,lock,idempotent,release,delay
GenericFileEndpoint -> public void setReadLockIdempotentReleaseDelay(int readLockIdempotentReleaseDelay);1549345604;Whether to delay the release task for a period of millis._<p/>_This can be used to delay the release tasks to expand the window when a file is regarded as read-locked,_in an active/active cluster scenario with a shared idempotent repository, to ensure other nodes cannot potentially scan and acquire_the same file, due to race-conditions. By expanding the time-window of the release tasks helps prevents these situations._Note delaying is only needed if you have configured readLockRemoveOnCommit to true.;public void setReadLockIdempotentReleaseDelay(int readLockIdempotentReleaseDelay) {_        this.readLockIdempotentReleaseDelay = readLockIdempotentReleaseDelay__    };whether,to,delay,the,release,task,for,a,period,of,millis,p,this,can,be,used,to,delay,the,release,tasks,to,expand,the,window,when,a,file,is,regarded,as,read,locked,in,an,active,active,cluster,scenario,with,a,shared,idempotent,repository,to,ensure,other,nodes,cannot,potentially,scan,and,acquire,the,same,file,due,to,race,conditions,by,expanding,the,time,window,of,the,release,tasks,helps,prevents,these,situations,note,delaying,is,only,needed,if,you,have,configured,read,lock,remove,on,commit,to,true;public,void,set,read,lock,idempotent,release,delay,int,read,lock,idempotent,release,delay,this,read,lock,idempotent,release,delay,read,lock,idempotent,release,delay
GenericFileEndpoint -> public void setReadLockIdempotentReleaseDelay(int readLockIdempotentReleaseDelay);1549879447;Whether to delay the release task for a period of millis._<p/>_This can be used to delay the release tasks to expand the window when a file is regarded as read-locked,_in an active/active cluster scenario with a shared idempotent repository, to ensure other nodes cannot potentially scan and acquire_the same file, due to race-conditions. By expanding the time-window of the release tasks helps prevents these situations._Note delaying is only needed if you have configured readLockRemoveOnCommit to true.;public void setReadLockIdempotentReleaseDelay(int readLockIdempotentReleaseDelay) {_        this.readLockIdempotentReleaseDelay = readLockIdempotentReleaseDelay__    };whether,to,delay,the,release,task,for,a,period,of,millis,p,this,can,be,used,to,delay,the,release,tasks,to,expand,the,window,when,a,file,is,regarded,as,read,locked,in,an,active,active,cluster,scenario,with,a,shared,idempotent,repository,to,ensure,other,nodes,cannot,potentially,scan,and,acquire,the,same,file,due,to,race,conditions,by,expanding,the,time,window,of,the,release,tasks,helps,prevents,these,situations,note,delaying,is,only,needed,if,you,have,configured,read,lock,remove,on,commit,to,true;public,void,set,read,lock,idempotent,release,delay,int,read,lock,idempotent,release,delay,this,read,lock,idempotent,release,delay,read,lock,idempotent,release,delay
GenericFileEndpoint -> public void setReadLockIdempotentReleaseExecutorService(ScheduledExecutorService readLockIdempotentReleaseExecutorService);1548250802;To use a custom and shared thread pool for asynchronous release tasks._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseExecutorService(ScheduledExecutorService readLockIdempotentReleaseExecutorService) {_        this.readLockIdempotentReleaseExecutorService = readLockIdempotentReleaseExecutorService__    };to,use,a,custom,and,shared,thread,pool,for,asynchronous,release,tasks,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,executor,service,scheduled,executor,service,read,lock,idempotent,release,executor,service,this,read,lock,idempotent,release,executor,service,read,lock,idempotent,release,executor,service
GenericFileEndpoint -> public void setReadLockIdempotentReleaseExecutorService(ScheduledExecutorService readLockIdempotentReleaseExecutorService);1549345447;To use a custom and shared thread pool for asynchronous release tasks._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseExecutorService(ScheduledExecutorService readLockIdempotentReleaseExecutorService) {_        this.readLockIdempotentReleaseExecutorService = readLockIdempotentReleaseExecutorService__    };to,use,a,custom,and,shared,thread,pool,for,asynchronous,release,tasks,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,executor,service,scheduled,executor,service,read,lock,idempotent,release,executor,service,this,read,lock,idempotent,release,executor,service,read,lock,idempotent,release,executor,service
GenericFileEndpoint -> public void setReadLockIdempotentReleaseExecutorService(ScheduledExecutorService readLockIdempotentReleaseExecutorService);1549345604;To use a custom and shared thread pool for asynchronous release tasks._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseExecutorService(ScheduledExecutorService readLockIdempotentReleaseExecutorService) {_        this.readLockIdempotentReleaseExecutorService = readLockIdempotentReleaseExecutorService__    };to,use,a,custom,and,shared,thread,pool,for,asynchronous,release,tasks,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,executor,service,scheduled,executor,service,read,lock,idempotent,release,executor,service,this,read,lock,idempotent,release,executor,service,read,lock,idempotent,release,executor,service
GenericFileEndpoint -> public void setReadLockIdempotentReleaseExecutorService(ScheduledExecutorService readLockIdempotentReleaseExecutorService);1549879447;To use a custom and shared thread pool for asynchronous release tasks._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockIdempotentReleaseExecutorService(ScheduledExecutorService readLockIdempotentReleaseExecutorService) {_        this.readLockIdempotentReleaseExecutorService = readLockIdempotentReleaseExecutorService__    };to,use,a,custom,and,shared,thread,pool,for,asynchronous,release,tasks,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,idempotent,release,executor,service,scheduled,executor,service,read,lock,idempotent,release,executor,service,this,read,lock,idempotent,release,executor,service,read,lock,idempotent,release,executor,service
GenericFileEndpoint -> public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy);1548250802;Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation.;public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy) {_        this.exclusiveReadLockStrategy = exclusiveReadLockStrategy__    };pluggable,read,lock,as,a,org,apache,camel,component,file,generic,file,exclusive,read,lock,strategy,implementation;public,void,set,exclusive,read,lock,strategy,generic,file,exclusive,read,lock,strategy,t,exclusive,read,lock,strategy,this,exclusive,read,lock,strategy,exclusive,read,lock,strategy
GenericFileEndpoint -> public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy);1549345447;Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation.;public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy) {_        this.exclusiveReadLockStrategy = exclusiveReadLockStrategy__    };pluggable,read,lock,as,a,org,apache,camel,component,file,generic,file,exclusive,read,lock,strategy,implementation;public,void,set,exclusive,read,lock,strategy,generic,file,exclusive,read,lock,strategy,t,exclusive,read,lock,strategy,this,exclusive,read,lock,strategy,exclusive,read,lock,strategy
GenericFileEndpoint -> public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy);1549345604;Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation.;public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy) {_        this.exclusiveReadLockStrategy = exclusiveReadLockStrategy__    };pluggable,read,lock,as,a,org,apache,camel,component,file,generic,file,exclusive,read,lock,strategy,implementation;public,void,set,exclusive,read,lock,strategy,generic,file,exclusive,read,lock,strategy,t,exclusive,read,lock,strategy,this,exclusive,read,lock,strategy,exclusive,read,lock,strategy
GenericFileEndpoint -> public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy);1549879447;Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation.;public void setExclusiveReadLockStrategy(GenericFileExclusiveReadLockStrategy<T> exclusiveReadLockStrategy) {_        this.exclusiveReadLockStrategy = exclusiveReadLockStrategy__    };pluggable,read,lock,as,a,org,apache,camel,component,file,generic,file,exclusive,read,lock,strategy,implementation;public,void,set,exclusive,read,lock,strategy,generic,file,exclusive,read,lock,strategy,t,exclusive,read,lock,strategy,this,exclusive,read,lock,strategy,exclusive,read,lock,strategy
GenericFileEndpoint -> public void setCharset(String charset);1548250802;This option is used to specify the encoding of the file._You can use this on the consumer, to specify the encodings of the files, which allow Camel to know the charset_it should load the file content in case the file content is being accessed._Likewise when writing a file, you can use this option to specify which charset to write the file as well._Do mind that when writing the file Camel may have to read the message content into memory to be able to_convert the data into the configured charset, so do not use this if you have big messages.;public void setCharset(String charset) {_        IOHelper.validateCharset(charset)__        this.charset = charset__    };this,option,is,used,to,specify,the,encoding,of,the,file,you,can,use,this,on,the,consumer,to,specify,the,encodings,of,the,files,which,allow,camel,to,know,the,charset,it,should,load,the,file,content,in,case,the,file,content,is,being,accessed,likewise,when,writing,a,file,you,can,use,this,option,to,specify,which,charset,to,write,the,file,as,well,do,mind,that,when,writing,the,file,camel,may,have,to,read,the,message,content,into,memory,to,be,able,to,convert,the,data,into,the,configured,charset,so,do,not,use,this,if,you,have,big,messages;public,void,set,charset,string,charset,iohelper,validate,charset,charset,this,charset,charset
GenericFileEndpoint -> public void setCharset(String charset);1549345447;This option is used to specify the encoding of the file._You can use this on the consumer, to specify the encodings of the files, which allow Camel to know the charset_it should load the file content in case the file content is being accessed._Likewise when writing a file, you can use this option to specify which charset to write the file as well._Do mind that when writing the file Camel may have to read the message content into memory to be able to_convert the data into the configured charset, so do not use this if you have big messages.;public void setCharset(String charset) {_        IOHelper.validateCharset(charset)__        this.charset = charset__    };this,option,is,used,to,specify,the,encoding,of,the,file,you,can,use,this,on,the,consumer,to,specify,the,encodings,of,the,files,which,allow,camel,to,know,the,charset,it,should,load,the,file,content,in,case,the,file,content,is,being,accessed,likewise,when,writing,a,file,you,can,use,this,option,to,specify,which,charset,to,write,the,file,as,well,do,mind,that,when,writing,the,file,camel,may,have,to,read,the,message,content,into,memory,to,be,able,to,convert,the,data,into,the,configured,charset,so,do,not,use,this,if,you,have,big,messages;public,void,set,charset,string,charset,iohelper,validate,charset,charset,this,charset,charset
GenericFileEndpoint -> public void setCharset(String charset);1549345604;This option is used to specify the encoding of the file._You can use this on the consumer, to specify the encodings of the files, which allow Camel to know the charset_it should load the file content in case the file content is being accessed._Likewise when writing a file, you can use this option to specify which charset to write the file as well._Do mind that when writing the file Camel may have to read the message content into memory to be able to_convert the data into the configured charset, so do not use this if you have big messages.;public void setCharset(String charset) {_        IOHelper.validateCharset(charset)__        this.charset = charset__    };this,option,is,used,to,specify,the,encoding,of,the,file,you,can,use,this,on,the,consumer,to,specify,the,encodings,of,the,files,which,allow,camel,to,know,the,charset,it,should,load,the,file,content,in,case,the,file,content,is,being,accessed,likewise,when,writing,a,file,you,can,use,this,option,to,specify,which,charset,to,write,the,file,as,well,do,mind,that,when,writing,the,file,camel,may,have,to,read,the,message,content,into,memory,to,be,able,to,convert,the,data,into,the,configured,charset,so,do,not,use,this,if,you,have,big,messages;public,void,set,charset,string,charset,iohelper,validate,charset,charset,this,charset,charset
GenericFileEndpoint -> public void setCharset(String charset);1549879447;This option is used to specify the encoding of the file._You can use this on the consumer, to specify the encodings of the files, which allow Camel to know the charset_it should load the file content in case the file content is being accessed._Likewise when writing a file, you can use this option to specify which charset to write the file as well._Do mind that when writing the file Camel may have to read the message content into memory to be able to_convert the data into the configured charset, so do not use this if you have big messages.;public void setCharset(String charset) {_        IOHelper.validateCharset(charset)__        this.charset = charset__    };this,option,is,used,to,specify,the,encoding,of,the,file,you,can,use,this,on,the,consumer,to,specify,the,encodings,of,the,files,which,allow,camel,to,know,the,charset,it,should,load,the,file,content,in,case,the,file,content,is,being,accessed,likewise,when,writing,a,file,you,can,use,this,option,to,specify,which,charset,to,write,the,file,as,well,do,mind,that,when,writing,the,file,camel,may,have,to,read,the,message,content,into,memory,to,be,able,to,convert,the,data,into,the,configured,charset,so,do,not,use,this,if,you,have,big,messages;public,void,set,charset,string,charset,iohelper,validate,charset,charset,this,charset,charset
GenericFileEndpoint -> public void setMaxDepth(int maxDepth);1548250802;The maximum depth to traverse when recursively processing a directory.;public void setMaxDepth(int maxDepth) {_        this.maxDepth = maxDepth__    };the,maximum,depth,to,traverse,when,recursively,processing,a,directory;public,void,set,max,depth,int,max,depth,this,max,depth,max,depth
GenericFileEndpoint -> public void setMaxDepth(int maxDepth);1549345447;The maximum depth to traverse when recursively processing a directory.;public void setMaxDepth(int maxDepth) {_        this.maxDepth = maxDepth__    };the,maximum,depth,to,traverse,when,recursively,processing,a,directory;public,void,set,max,depth,int,max,depth,this,max,depth,max,depth
GenericFileEndpoint -> public void setMaxDepth(int maxDepth);1549345604;The maximum depth to traverse when recursively processing a directory.;public void setMaxDepth(int maxDepth) {_        this.maxDepth = maxDepth__    };the,maximum,depth,to,traverse,when,recursively,processing,a,directory;public,void,set,max,depth,int,max,depth,this,max,depth,max,depth
GenericFileEndpoint -> public void setMaxDepth(int maxDepth);1549879447;The maximum depth to traverse when recursively processing a directory.;public void setMaxDepth(int maxDepth) {_        this.maxDepth = maxDepth__    };the,maximum,depth,to,traverse,when,recursively,processing,a,directory;public,void,set,max,depth,int,max,depth,this,max,depth,max,depth
GenericFileEndpoint -> public void setMoveExisting(Expression moveExisting);1548250802;Expression (such as File Language) used to compute file name to use when fileExist=Move is configured._To move files into a backup subdirectory just enter backup._This option only supports the following File Language tokens: "file:name", "file:name.ext", "file:name.noext", "file:onlyname",_"file:onlyname.noext", "file:ext", and "file:parent". Notice the "file:parent" is not supported by the FTP component,_as the FTP component can only move any existing files to a relative directory based on current dir as base.;public void setMoveExisting(Expression moveExisting) {_        this.moveExisting = moveExisting__    };expression,such,as,file,language,used,to,compute,file,name,to,use,when,file,exist,move,is,configured,to,move,files,into,a,backup,subdirectory,just,enter,backup,this,option,only,supports,the,following,file,language,tokens,file,name,file,name,ext,file,name,noext,file,onlyname,file,onlyname,noext,file,ext,and,file,parent,notice,the,file,parent,is,not,supported,by,the,ftp,component,as,the,ftp,component,can,only,move,any,existing,files,to,a,relative,directory,based,on,current,dir,as,base;public,void,set,move,existing,expression,move,existing,this,move,existing,move,existing
GenericFileEndpoint -> public void setMoveExisting(Expression moveExisting);1549345447;Expression (such as File Language) used to compute file name to use when fileExist=Move is configured._To move files into a backup subdirectory just enter backup._This option only supports the following File Language tokens: "file:name", "file:name.ext", "file:name.noext", "file:onlyname",_"file:onlyname.noext", "file:ext", and "file:parent". Notice the "file:parent" is not supported by the FTP component,_as the FTP component can only move any existing files to a relative directory based on current dir as base.;public void setMoveExisting(Expression moveExisting) {_        this.moveExisting = moveExisting__    };expression,such,as,file,language,used,to,compute,file,name,to,use,when,file,exist,move,is,configured,to,move,files,into,a,backup,subdirectory,just,enter,backup,this,option,only,supports,the,following,file,language,tokens,file,name,file,name,ext,file,name,noext,file,onlyname,file,onlyname,noext,file,ext,and,file,parent,notice,the,file,parent,is,not,supported,by,the,ftp,component,as,the,ftp,component,can,only,move,any,existing,files,to,a,relative,directory,based,on,current,dir,as,base;public,void,set,move,existing,expression,move,existing,this,move,existing,move,existing
GenericFileEndpoint -> public void setMoveExisting(Expression moveExisting);1549345604;Expression (such as File Language) used to compute file name to use when fileExist=Move is configured._To move files into a backup subdirectory just enter backup._This option only supports the following File Language tokens: "file:name", "file:name.ext", "file:name.noext", "file:onlyname",_"file:onlyname.noext", "file:ext", and "file:parent". Notice the "file:parent" is not supported by the FTP component,_as the FTP component can only move any existing files to a relative directory based on current dir as base.;public void setMoveExisting(Expression moveExisting) {_        this.moveExisting = moveExisting__    };expression,such,as,file,language,used,to,compute,file,name,to,use,when,file,exist,move,is,configured,to,move,files,into,a,backup,subdirectory,just,enter,backup,this,option,only,supports,the,following,file,language,tokens,file,name,file,name,ext,file,name,noext,file,onlyname,file,onlyname,noext,file,ext,and,file,parent,notice,the,file,parent,is,not,supported,by,the,ftp,component,as,the,ftp,component,can,only,move,any,existing,files,to,a,relative,directory,based,on,current,dir,as,base;public,void,set,move,existing,expression,move,existing,this,move,existing,move,existing
GenericFileEndpoint -> public void setMoveExisting(Expression moveExisting);1549879447;Expression (such as File Language) used to compute file name to use when fileExist=Move is configured._To move files into a backup subdirectory just enter backup._This option only supports the following File Language tokens: "file:name", "file:name.ext", "file:name.noext", "file:onlyname",_"file:onlyname.noext", "file:ext", and "file:parent". Notice the "file:parent" is not supported by the FTP component,_as the FTP component can only move any existing files to a relative directory based on current dir as base.;public void setMoveExisting(Expression moveExisting) {_        this.moveExisting = moveExisting__    };expression,such,as,file,language,used,to,compute,file,name,to,use,when,file,exist,move,is,configured,to,move,files,into,a,backup,subdirectory,just,enter,backup,this,option,only,supports,the,following,file,language,tokens,file,name,file,name,ext,file,name,noext,file,onlyname,file,onlyname,noext,file,ext,and,file,parent,notice,the,file,parent,is,not,supported,by,the,ftp,component,as,the,ftp,component,can,only,move,any,existing,files,to,a,relative,directory,based,on,current,dir,as,base;public,void,set,move,existing,expression,move,existing,this,move,existing,move,existing
GenericFileEndpoint -> @Override     public List<Exchange> getExchanges();1548250802;This implementation will <b>not</b> load the file content._Any file locking is neither in use by this implementation..;@Override_    public List<Exchange> getExchanges() {_        final List<Exchange> answer = new ArrayList<>()___        GenericFileConsumer<?> consumer = null__        try {_            _            _            consumer = createConsumer(null)__            consumer.setCustomProcessor(new Processor() {_                @Override_                public void process(Exchange exchange) throws Exception {_                    answer.add(exchange)__                }_            })__            _            consumer.setStartScheduler(false)__            _            ServiceHelper.startService(consumer)__            _            consumer.poll()__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        } finally {_            try {_                ServiceHelper.stopService(consumer)__            } catch (Exception e) {_                log.debug("Error stopping consumer used for browsing exchanges. This exception will be ignored", e)__            }_        }__        return answer__    };this,implementation,will,b,not,b,load,the,file,content,any,file,locking,is,neither,in,use,by,this,implementation;override,public,list,exchange,get,exchanges,final,list,exchange,answer,new,array,list,generic,file,consumer,consumer,null,try,consumer,create,consumer,null,consumer,set,custom,processor,new,processor,override,public,void,process,exchange,exchange,throws,exception,answer,add,exchange,consumer,set,start,scheduler,false,service,helper,start,service,consumer,consumer,poll,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,finally,try,service,helper,stop,service,consumer,catch,exception,e,log,debug,error,stopping,consumer,used,for,browsing,exchanges,this,exception,will,be,ignored,e,return,answer
GenericFileEndpoint -> @Override     public List<Exchange> getExchanges();1549345447;This implementation will <b>not</b> load the file content._Any file locking is neither in use by this implementation..;@Override_    public List<Exchange> getExchanges() {_        final List<Exchange> answer = new ArrayList<>()___        GenericFileConsumer<?> consumer = null__        try {_            _            _            consumer = createConsumer(null)__            consumer.setCustomProcessor(new Processor() {_                @Override_                public void process(Exchange exchange) throws Exception {_                    answer.add(exchange)__                }_            })__            _            consumer.setStartScheduler(false)__            _            ServiceHelper.startService(consumer)__            _            consumer.poll()__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        } finally {_            try {_                ServiceHelper.stopService(consumer)__            } catch (Exception e) {_                log.debug("Error stopping consumer used for browsing exchanges. This exception will be ignored", e)__            }_        }__        return answer__    };this,implementation,will,b,not,b,load,the,file,content,any,file,locking,is,neither,in,use,by,this,implementation;override,public,list,exchange,get,exchanges,final,list,exchange,answer,new,array,list,generic,file,consumer,consumer,null,try,consumer,create,consumer,null,consumer,set,custom,processor,new,processor,override,public,void,process,exchange,exchange,throws,exception,answer,add,exchange,consumer,set,start,scheduler,false,service,helper,start,service,consumer,consumer,poll,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,finally,try,service,helper,stop,service,consumer,catch,exception,e,log,debug,error,stopping,consumer,used,for,browsing,exchanges,this,exception,will,be,ignored,e,return,answer
GenericFileEndpoint -> @Override     public List<Exchange> getExchanges();1549345604;This implementation will <b>not</b> load the file content._Any file locking is neither in use by this implementation..;@Override_    public List<Exchange> getExchanges() {_        final List<Exchange> answer = new ArrayList<>()___        GenericFileConsumer<?> consumer = null__        try {_            _            _            consumer = createConsumer(null)__            consumer.setCustomProcessor(new Processor() {_                @Override_                public void process(Exchange exchange) throws Exception {_                    answer.add(exchange)__                }_            })__            _            consumer.setStartScheduler(false)__            _            ServiceHelper.startService(consumer)__            _            consumer.poll()__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        } finally {_            try {_                ServiceHelper.stopService(consumer)__            } catch (Exception e) {_                log.debug("Error stopping consumer used for browsing exchanges. This exception will be ignored", e)__            }_        }__        return answer__    };this,implementation,will,b,not,b,load,the,file,content,any,file,locking,is,neither,in,use,by,this,implementation;override,public,list,exchange,get,exchanges,final,list,exchange,answer,new,array,list,generic,file,consumer,consumer,null,try,consumer,create,consumer,null,consumer,set,custom,processor,new,processor,override,public,void,process,exchange,exchange,throws,exception,answer,add,exchange,consumer,set,start,scheduler,false,service,helper,start,service,consumer,consumer,poll,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,finally,try,service,helper,stop,service,consumer,catch,exception,e,log,debug,error,stopping,consumer,used,for,browsing,exchanges,this,exception,will,be,ignored,e,return,answer
GenericFileEndpoint -> @Override     public List<Exchange> getExchanges();1549879447;This implementation will <b>not</b> load the file content._Any file locking is neither in use by this implementation..;@Override_    public List<Exchange> getExchanges() {_        final List<Exchange> answer = new ArrayList<>()___        GenericFileConsumer<?> consumer = null__        try {_            _            _            consumer = createConsumer(null)__            consumer.setCustomProcessor(new Processor() {_                @Override_                public void process(Exchange exchange) throws Exception {_                    answer.add(exchange)__                }_            })__            _            consumer.setStartScheduler(false)__            _            ServiceHelper.startService(consumer)__            _            consumer.poll()__        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        } finally {_            try {_                ServiceHelper.stopService(consumer)__            } catch (Exception e) {_                log.debug("Error stopping consumer used for browsing exchanges. This exception will be ignored", e)__            }_        }__        return answer__    };this,implementation,will,b,not,b,load,the,file,content,any,file,locking,is,neither,in,use,by,this,implementation;override,public,list,exchange,get,exchanges,final,list,exchange,answer,new,array,list,generic,file,consumer,consumer,null,try,consumer,create,consumer,null,consumer,set,custom,processor,new,processor,override,public,void,process,exchange,exchange,throws,exception,answer,add,exchange,consumer,set,start,scheduler,false,service,helper,start,service,consumer,consumer,poll,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,finally,try,service,helper,stop,service,consumer,catch,exception,e,log,debug,error,stopping,consumer,used,for,browsing,exchanges,this,exception,will,be,ignored,e,return,answer
GenericFileEndpoint -> @SuppressWarnings("unchecked")     protected GenericFileProcessStrategy<T> createGenericFileStrategy();1548250802;A strategy method to lazily create the file strategy;@SuppressWarnings("unchecked")_    protected GenericFileProcessStrategy<T> createGenericFileStrategy() {_        Class<?> factory = null__        try {_            FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/")__            log.trace("Using FactoryFinder: {}", finder)__            factory = finder.findClass(getScheme(), "strategy.factory.", CamelContext.class)__        } catch (ClassNotFoundException e) {_            log.trace("'strategy.factory.class' not found", e)__        } catch (IOException e) {_            log.trace("No strategy factory defined in 'META-INF/services/org/apache/camel/component/'", e)__        }__        if (factory == null) {_            _            try {_                log.trace("Using ClassResolver to resolve class: {}", DEFAULT_STRATEGYFACTORY_CLASS)__                factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS)__            } catch (Exception e) {_                log.trace("Cannot load class: {}", DEFAULT_STRATEGYFACTORY_CLASS, e)__            }_            _            try {_                if (log.isTraceEnabled()) {_                    log.trace("Using classloader: {} to resolve class: {}", this.getClass().getClassLoader(), DEFAULT_STRATEGYFACTORY_CLASS)__                }_                factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS, this.getClass().getClassLoader())__            } catch (Exception e) {_                if (log.isTraceEnabled()) {_                    log.trace("Cannot load class: {} using classloader: " + this.getClass().getClassLoader(), DEFAULT_STRATEGYFACTORY_CLASS, e)__                }_            }__            if (factory == null) {_                throw new TypeNotPresentException(DEFAULT_STRATEGYFACTORY_CLASS + " class not found", null)__            }_        }__        try {_            Method factoryMethod = factory.getMethod("createGenericFileProcessStrategy", CamelContext.class, Map.class)__            Map<String, Object> params = getParamsAsMap()__            log.debug("Parameters for Generic file process strategy {}", params)__            return (GenericFileProcessStrategy<T>) ObjectHelper.invokeMethod(factoryMethod, null, getCamelContext(), params)__        } catch (NoSuchMethodException e) {_            throw new TypeNotPresentException(factory.getSimpleName() + ".createGenericFileProcessStrategy method not found", e)__        }_    };a,strategy,method,to,lazily,create,the,file,strategy;suppress,warnings,unchecked,protected,generic,file,process,strategy,t,create,generic,file,strategy,class,factory,null,try,factory,finder,finder,get,camel,context,get,factory,finder,meta,inf,services,org,apache,camel,component,log,trace,using,factory,finder,finder,factory,finder,find,class,get,scheme,strategy,factory,camel,context,class,catch,class,not,found,exception,e,log,trace,strategy,factory,class,not,found,e,catch,ioexception,e,log,trace,no,strategy,factory,defined,in,meta,inf,services,org,apache,camel,component,e,if,factory,null,try,log,trace,using,class,resolver,to,resolve,class,factory,this,get,camel,context,get,class,resolver,resolve,class,catch,exception,e,log,trace,cannot,load,class,e,try,if,log,is,trace,enabled,log,trace,using,classloader,to,resolve,class,this,get,class,get,class,loader,factory,this,get,camel,context,get,class,resolver,resolve,class,this,get,class,get,class,loader,catch,exception,e,if,log,is,trace,enabled,log,trace,cannot,load,class,using,classloader,this,get,class,get,class,loader,e,if,factory,null,throw,new,type,not,present,exception,class,not,found,null,try,method,factory,method,factory,get,method,create,generic,file,process,strategy,camel,context,class,map,class,map,string,object,params,get,params,as,map,log,debug,parameters,for,generic,file,process,strategy,params,return,generic,file,process,strategy,t,object,helper,invoke,method,factory,method,null,get,camel,context,params,catch,no,such,method,exception,e,throw,new,type,not,present,exception,factory,get,simple,name,create,generic,file,process,strategy,method,not,found,e
GenericFileEndpoint -> @SuppressWarnings("unchecked")     protected GenericFileProcessStrategy<T> createGenericFileStrategy();1549345447;A strategy method to lazily create the file strategy;@SuppressWarnings("unchecked")_    protected GenericFileProcessStrategy<T> createGenericFileStrategy() {_        Class<?> factory = null__        try {_            FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/")__            log.trace("Using FactoryFinder: {}", finder)__            factory = finder.findClass(getScheme(), "strategy.factory.", CamelContext.class)__        } catch (ClassNotFoundException e) {_            log.trace("'strategy.factory.class' not found", e)__        } catch (IOException e) {_            log.trace("No strategy factory defined in 'META-INF/services/org/apache/camel/component/'", e)__        }__        if (factory == null) {_            _            try {_                log.trace("Using ClassResolver to resolve class: {}", DEFAULT_STRATEGYFACTORY_CLASS)__                factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS)__            } catch (Exception e) {_                log.trace("Cannot load class: {}", DEFAULT_STRATEGYFACTORY_CLASS, e)__            }_            _            try {_                if (log.isTraceEnabled()) {_                    log.trace("Using classloader: {} to resolve class: {}", this.getClass().getClassLoader(), DEFAULT_STRATEGYFACTORY_CLASS)__                }_                factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS, this.getClass().getClassLoader())__            } catch (Exception e) {_                if (log.isTraceEnabled()) {_                    log.trace("Cannot load class: {} using classloader: " + this.getClass().getClassLoader(), DEFAULT_STRATEGYFACTORY_CLASS, e)__                }_            }__            if (factory == null) {_                throw new TypeNotPresentException(DEFAULT_STRATEGYFACTORY_CLASS + " class not found", null)__            }_        }__        try {_            Method factoryMethod = factory.getMethod("createGenericFileProcessStrategy", CamelContext.class, Map.class)__            Map<String, Object> params = getParamsAsMap()__            log.debug("Parameters for Generic file process strategy {}", params)__            return (GenericFileProcessStrategy<T>) ObjectHelper.invokeMethod(factoryMethod, null, getCamelContext(), params)__        } catch (NoSuchMethodException e) {_            throw new TypeNotPresentException(factory.getSimpleName() + ".createGenericFileProcessStrategy method not found", e)__        }_    };a,strategy,method,to,lazily,create,the,file,strategy;suppress,warnings,unchecked,protected,generic,file,process,strategy,t,create,generic,file,strategy,class,factory,null,try,factory,finder,finder,get,camel,context,get,factory,finder,meta,inf,services,org,apache,camel,component,log,trace,using,factory,finder,finder,factory,finder,find,class,get,scheme,strategy,factory,camel,context,class,catch,class,not,found,exception,e,log,trace,strategy,factory,class,not,found,e,catch,ioexception,e,log,trace,no,strategy,factory,defined,in,meta,inf,services,org,apache,camel,component,e,if,factory,null,try,log,trace,using,class,resolver,to,resolve,class,factory,this,get,camel,context,get,class,resolver,resolve,class,catch,exception,e,log,trace,cannot,load,class,e,try,if,log,is,trace,enabled,log,trace,using,classloader,to,resolve,class,this,get,class,get,class,loader,factory,this,get,camel,context,get,class,resolver,resolve,class,this,get,class,get,class,loader,catch,exception,e,if,log,is,trace,enabled,log,trace,cannot,load,class,using,classloader,this,get,class,get,class,loader,e,if,factory,null,throw,new,type,not,present,exception,class,not,found,null,try,method,factory,method,factory,get,method,create,generic,file,process,strategy,camel,context,class,map,class,map,string,object,params,get,params,as,map,log,debug,parameters,for,generic,file,process,strategy,params,return,generic,file,process,strategy,t,object,helper,invoke,method,factory,method,null,get,camel,context,params,catch,no,such,method,exception,e,throw,new,type,not,present,exception,factory,get,simple,name,create,generic,file,process,strategy,method,not,found,e
GenericFileEndpoint -> @SuppressWarnings("unchecked")     protected GenericFileProcessStrategy<T> createGenericFileStrategy();1549345604;A strategy method to lazily create the file strategy;@SuppressWarnings("unchecked")_    protected GenericFileProcessStrategy<T> createGenericFileStrategy() {_        Class<?> factory = null__        try {_            FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/")__            log.trace("Using FactoryFinder: {}", finder)__            factory = finder.findClass(getScheme(), "strategy.factory.", CamelContext.class)__        } catch (ClassNotFoundException e) {_            log.trace("'strategy.factory.class' not found", e)__        } catch (IOException e) {_            log.trace("No strategy factory defined in 'META-INF/services/org/apache/camel/component/'", e)__        }__        if (factory == null) {_            _            try {_                log.trace("Using ClassResolver to resolve class: {}", DEFAULT_STRATEGYFACTORY_CLASS)__                factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS)__            } catch (Exception e) {_                log.trace("Cannot load class: {}", DEFAULT_STRATEGYFACTORY_CLASS, e)__            }_            _            try {_                if (log.isTraceEnabled()) {_                    log.trace("Using classloader: {} to resolve class: {}", this.getClass().getClassLoader(), DEFAULT_STRATEGYFACTORY_CLASS)__                }_                factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS, this.getClass().getClassLoader())__            } catch (Exception e) {_                if (log.isTraceEnabled()) {_                    log.trace("Cannot load class: {} using classloader: " + this.getClass().getClassLoader(), DEFAULT_STRATEGYFACTORY_CLASS, e)__                }_            }__            if (factory == null) {_                throw new TypeNotPresentException(DEFAULT_STRATEGYFACTORY_CLASS + " class not found", null)__            }_        }__        try {_            Method factoryMethod = factory.getMethod("createGenericFileProcessStrategy", CamelContext.class, Map.class)__            Map<String, Object> params = getParamsAsMap()__            log.debug("Parameters for Generic file process strategy {}", params)__            return (GenericFileProcessStrategy<T>) ObjectHelper.invokeMethod(factoryMethod, null, getCamelContext(), params)__        } catch (NoSuchMethodException e) {_            throw new TypeNotPresentException(factory.getSimpleName() + ".createGenericFileProcessStrategy method not found", e)__        }_    };a,strategy,method,to,lazily,create,the,file,strategy;suppress,warnings,unchecked,protected,generic,file,process,strategy,t,create,generic,file,strategy,class,factory,null,try,factory,finder,finder,get,camel,context,get,factory,finder,meta,inf,services,org,apache,camel,component,log,trace,using,factory,finder,finder,factory,finder,find,class,get,scheme,strategy,factory,camel,context,class,catch,class,not,found,exception,e,log,trace,strategy,factory,class,not,found,e,catch,ioexception,e,log,trace,no,strategy,factory,defined,in,meta,inf,services,org,apache,camel,component,e,if,factory,null,try,log,trace,using,class,resolver,to,resolve,class,factory,this,get,camel,context,get,class,resolver,resolve,class,catch,exception,e,log,trace,cannot,load,class,e,try,if,log,is,trace,enabled,log,trace,using,classloader,to,resolve,class,this,get,class,get,class,loader,factory,this,get,camel,context,get,class,resolver,resolve,class,this,get,class,get,class,loader,catch,exception,e,if,log,is,trace,enabled,log,trace,cannot,load,class,using,classloader,this,get,class,get,class,loader,e,if,factory,null,throw,new,type,not,present,exception,class,not,found,null,try,method,factory,method,factory,get,method,create,generic,file,process,strategy,camel,context,class,map,class,map,string,object,params,get,params,as,map,log,debug,parameters,for,generic,file,process,strategy,params,return,generic,file,process,strategy,t,object,helper,invoke,method,factory,method,null,get,camel,context,params,catch,no,such,method,exception,e,throw,new,type,not,present,exception,factory,get,simple,name,create,generic,file,process,strategy,method,not,found,e
GenericFileEndpoint -> @SuppressWarnings("unchecked")     protected GenericFileProcessStrategy<T> createGenericFileStrategy();1549879447;A strategy method to lazily create the file strategy;@SuppressWarnings("unchecked")_    protected GenericFileProcessStrategy<T> createGenericFileStrategy() {_        Class<?> factory = null__        try {_            FactoryFinder finder = getCamelContext().getFactoryFinder("META-INF/services/org/apache/camel/component/")__            log.trace("Using FactoryFinder: {}", finder)__            factory = finder.findClass(getScheme(), "strategy.factory.", CamelContext.class)__        } catch (ClassNotFoundException e) {_            log.trace("'strategy.factory.class' not found", e)__        } catch (IOException e) {_            log.trace("No strategy factory defined in 'META-INF/services/org/apache/camel/component/'", e)__        }__        if (factory == null) {_            _            try {_                log.trace("Using ClassResolver to resolve class: {}", DEFAULT_STRATEGYFACTORY_CLASS)__                factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS)__            } catch (Exception e) {_                log.trace("Cannot load class: {}", DEFAULT_STRATEGYFACTORY_CLASS, e)__            }_            _            try {_                if (log.isTraceEnabled()) {_                    log.trace("Using classloader: {} to resolve class: {}", this.getClass().getClassLoader(), DEFAULT_STRATEGYFACTORY_CLASS)__                }_                factory = this.getCamelContext().getClassResolver().resolveClass(DEFAULT_STRATEGYFACTORY_CLASS, this.getClass().getClassLoader())__            } catch (Exception e) {_                if (log.isTraceEnabled()) {_                    log.trace("Cannot load class: {} using classloader: " + this.getClass().getClassLoader(), DEFAULT_STRATEGYFACTORY_CLASS, e)__                }_            }__            if (factory == null) {_                throw new TypeNotPresentException(DEFAULT_STRATEGYFACTORY_CLASS + " class not found", null)__            }_        }__        try {_            Method factoryMethod = factory.getMethod("createGenericFileProcessStrategy", CamelContext.class, Map.class)__            Map<String, Object> params = getParamsAsMap()__            log.debug("Parameters for Generic file process strategy {}", params)__            return (GenericFileProcessStrategy<T>) ObjectHelper.invokeMethod(factoryMethod, null, getCamelContext(), params)__        } catch (NoSuchMethodException e) {_            throw new TypeNotPresentException(factory.getSimpleName() + ".createGenericFileProcessStrategy method not found", e)__        }_    };a,strategy,method,to,lazily,create,the,file,strategy;suppress,warnings,unchecked,protected,generic,file,process,strategy,t,create,generic,file,strategy,class,factory,null,try,factory,finder,finder,get,camel,context,get,factory,finder,meta,inf,services,org,apache,camel,component,log,trace,using,factory,finder,finder,factory,finder,find,class,get,scheme,strategy,factory,camel,context,class,catch,class,not,found,exception,e,log,trace,strategy,factory,class,not,found,e,catch,ioexception,e,log,trace,no,strategy,factory,defined,in,meta,inf,services,org,apache,camel,component,e,if,factory,null,try,log,trace,using,class,resolver,to,resolve,class,factory,this,get,camel,context,get,class,resolver,resolve,class,catch,exception,e,log,trace,cannot,load,class,e,try,if,log,is,trace,enabled,log,trace,using,classloader,to,resolve,class,this,get,class,get,class,loader,factory,this,get,camel,context,get,class,resolver,resolve,class,this,get,class,get,class,loader,catch,exception,e,if,log,is,trace,enabled,log,trace,cannot,load,class,using,classloader,this,get,class,get,class,loader,e,if,factory,null,throw,new,type,not,present,exception,class,not,found,null,try,method,factory,method,factory,get,method,create,generic,file,process,strategy,camel,context,class,map,class,map,string,object,params,get,params,as,map,log,debug,parameters,for,generic,file,process,strategy,params,return,generic,file,process,strategy,t,object,helper,invoke,method,factory,method,null,get,camel,context,params,catch,no,such,method,exception,e,throw,new,type,not,present,exception,factory,get,simple,name,create,generic,file,process,strategy,method,not,found,e
GenericFileEndpoint -> public void setReadLockRemoveOnCommit(boolean readLockRemoveOnCommit);1548250802;This option is applied only for readLock=idempotent._It allows to specify whether to remove the file name entry from the idempotent repository_when processing the file is succeeded and a commit happens._<p/>_By default the file is not removed which ensures that any race-condition do not occur so another active_node may attempt to grab the file. Instead the idempotent repository may support eviction strategies_that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockRemoveOnCommit(boolean readLockRemoveOnCommit) {_        this.readLockRemoveOnCommit = readLockRemoveOnCommit__    };this,option,is,applied,only,for,read,lock,idempotent,it,allows,to,specify,whether,to,remove,the,file,name,entry,from,the,idempotent,repository,when,processing,the,file,is,succeeded,and,a,commit,happens,p,by,default,the,file,is,not,removed,which,ensures,that,any,race,condition,do,not,occur,so,another,active,node,may,attempt,to,grab,the,file,instead,the,idempotent,repository,may,support,eviction,strategies,that,you,can,configure,to,evict,the,file,name,entry,after,x,minutes,this,ensures,no,problems,with,race,conditions,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,remove,on,commit,boolean,read,lock,remove,on,commit,this,read,lock,remove,on,commit,read,lock,remove,on,commit
GenericFileEndpoint -> public void setReadLockRemoveOnCommit(boolean readLockRemoveOnCommit);1549345447;This option is applied only for readLock=idempotent._It allows to specify whether to remove the file name entry from the idempotent repository_when processing the file is succeeded and a commit happens._<p/>_By default the file is not removed which ensures that any race-condition do not occur so another active_node may attempt to grab the file. Instead the idempotent repository may support eviction strategies_that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockRemoveOnCommit(boolean readLockRemoveOnCommit) {_        this.readLockRemoveOnCommit = readLockRemoveOnCommit__    };this,option,is,applied,only,for,read,lock,idempotent,it,allows,to,specify,whether,to,remove,the,file,name,entry,from,the,idempotent,repository,when,processing,the,file,is,succeeded,and,a,commit,happens,p,by,default,the,file,is,not,removed,which,ensures,that,any,race,condition,do,not,occur,so,another,active,node,may,attempt,to,grab,the,file,instead,the,idempotent,repository,may,support,eviction,strategies,that,you,can,configure,to,evict,the,file,name,entry,after,x,minutes,this,ensures,no,problems,with,race,conditions,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,remove,on,commit,boolean,read,lock,remove,on,commit,this,read,lock,remove,on,commit,read,lock,remove,on,commit
GenericFileEndpoint -> public void setReadLockRemoveOnCommit(boolean readLockRemoveOnCommit);1549345604;This option is applied only for readLock=idempotent._It allows to specify whether to remove the file name entry from the idempotent repository_when processing the file is succeeded and a commit happens._<p/>_By default the file is not removed which ensures that any race-condition do not occur so another active_node may attempt to grab the file. Instead the idempotent repository may support eviction strategies_that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockRemoveOnCommit(boolean readLockRemoveOnCommit) {_        this.readLockRemoveOnCommit = readLockRemoveOnCommit__    };this,option,is,applied,only,for,read,lock,idempotent,it,allows,to,specify,whether,to,remove,the,file,name,entry,from,the,idempotent,repository,when,processing,the,file,is,succeeded,and,a,commit,happens,p,by,default,the,file,is,not,removed,which,ensures,that,any,race,condition,do,not,occur,so,another,active,node,may,attempt,to,grab,the,file,instead,the,idempotent,repository,may,support,eviction,strategies,that,you,can,configure,to,evict,the,file,name,entry,after,x,minutes,this,ensures,no,problems,with,race,conditions,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,remove,on,commit,boolean,read,lock,remove,on,commit,this,read,lock,remove,on,commit,read,lock,remove,on,commit
GenericFileEndpoint -> public void setReadLockRemoveOnCommit(boolean readLockRemoveOnCommit);1549879447;This option is applied only for readLock=idempotent._It allows to specify whether to remove the file name entry from the idempotent repository_when processing the file is succeeded and a commit happens._<p/>_By default the file is not removed which ensures that any race-condition do not occur so another active_node may attempt to grab the file. Instead the idempotent repository may support eviction strategies_that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions._<p/>_See more details at the readLockIdempotentReleaseDelay option.;public void setReadLockRemoveOnCommit(boolean readLockRemoveOnCommit) {_        this.readLockRemoveOnCommit = readLockRemoveOnCommit__    };this,option,is,applied,only,for,read,lock,idempotent,it,allows,to,specify,whether,to,remove,the,file,name,entry,from,the,idempotent,repository,when,processing,the,file,is,succeeded,and,a,commit,happens,p,by,default,the,file,is,not,removed,which,ensures,that,any,race,condition,do,not,occur,so,another,active,node,may,attempt,to,grab,the,file,instead,the,idempotent,repository,may,support,eviction,strategies,that,you,can,configure,to,evict,the,file,name,entry,after,x,minutes,this,ensures,no,problems,with,race,conditions,p,see,more,details,at,the,read,lock,idempotent,release,delay,option;public,void,set,read,lock,remove,on,commit,boolean,read,lock,remove,on,commit,this,read,lock,remove,on,commit,read,lock,remove,on,commit
GenericFileEndpoint -> public void configureExchange(Exchange exchange);1548250802;Set up the exchange properties with the options of the file endpoint;public void configureExchange(Exchange exchange) {_        _        if (getCharset() != null) {_            exchange.setProperty(Exchange.CHARSET_NAME, getCharset())__        }_    };set,up,the,exchange,properties,with,the,options,of,the,file,endpoint;public,void,configure,exchange,exchange,exchange,if,get,charset,null,exchange,set,property,exchange,get,charset
GenericFileEndpoint -> public void configureExchange(Exchange exchange);1549345447;Set up the exchange properties with the options of the file endpoint;public void configureExchange(Exchange exchange) {_        _        if (getCharset() != null) {_            exchange.setProperty(Exchange.CHARSET_NAME, getCharset())__        }_    };set,up,the,exchange,properties,with,the,options,of,the,file,endpoint;public,void,configure,exchange,exchange,exchange,if,get,charset,null,exchange,set,property,exchange,get,charset
GenericFileEndpoint -> public void configureExchange(Exchange exchange);1549345604;Set up the exchange properties with the options of the file endpoint;public void configureExchange(Exchange exchange) {_        _        if (getCharset() != null) {_            exchange.setProperty(Exchange.CHARSET_NAME, getCharset())__        }_    };set,up,the,exchange,properties,with,the,options,of,the,file,endpoint;public,void,configure,exchange,exchange,exchange,if,get,charset,null,exchange,set,property,exchange,get,charset
GenericFileEndpoint -> public void configureExchange(Exchange exchange);1549879447;Set up the exchange properties with the options of the file endpoint;public void configureExchange(Exchange exchange) {_        _        if (getCharset() != null) {_            exchange.setProperty(Exchange.CHARSET_NAME, getCharset())__        }_    };set,up,the,exchange,properties,with,the,options,of,the,file,endpoint;public,void,configure,exchange,exchange,exchange,if,get,charset,null,exchange,set,property,exchange,get,charset
GenericFileEndpoint -> public void setReadLockMinAge(long readLockMinAge);1548250802;This option is applied only for readLock=changed._It allows to specify a minimum age the file must be before attempting to acquire the read lock._For example use readLockMinAge=300s to require the file is at last 5 minutes old._This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age.;public void setReadLockMinAge(long readLockMinAge) {_        this.readLockMinAge = readLockMinAge__    };this,option,is,applied,only,for,read,lock,changed,it,allows,to,specify,a,minimum,age,the,file,must,be,before,attempting,to,acquire,the,read,lock,for,example,use,read,lock,min,age,300s,to,require,the,file,is,at,last,5,minutes,old,this,can,speedup,the,changed,read,lock,as,it,will,only,attempt,to,acquire,files,which,are,at,least,that,given,age;public,void,set,read,lock,min,age,long,read,lock,min,age,this,read,lock,min,age,read,lock,min,age
GenericFileEndpoint -> public void setReadLockMinAge(long readLockMinAge);1549345447;This option is applied only for readLock=changed._It allows to specify a minimum age the file must be before attempting to acquire the read lock._For example use readLockMinAge=300s to require the file is at last 5 minutes old._This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age.;public void setReadLockMinAge(long readLockMinAge) {_        this.readLockMinAge = readLockMinAge__    };this,option,is,applied,only,for,read,lock,changed,it,allows,to,specify,a,minimum,age,the,file,must,be,before,attempting,to,acquire,the,read,lock,for,example,use,read,lock,min,age,300s,to,require,the,file,is,at,last,5,minutes,old,this,can,speedup,the,changed,read,lock,as,it,will,only,attempt,to,acquire,files,which,are,at,least,that,given,age;public,void,set,read,lock,min,age,long,read,lock,min,age,this,read,lock,min,age,read,lock,min,age
GenericFileEndpoint -> public void setReadLockMinAge(long readLockMinAge);1549345604;This option is applied only for readLock=changed._It allows to specify a minimum age the file must be before attempting to acquire the read lock._For example use readLockMinAge=300s to require the file is at last 5 minutes old._This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age.;public void setReadLockMinAge(long readLockMinAge) {_        this.readLockMinAge = readLockMinAge__    };this,option,is,applied,only,for,read,lock,changed,it,allows,to,specify,a,minimum,age,the,file,must,be,before,attempting,to,acquire,the,read,lock,for,example,use,read,lock,min,age,300s,to,require,the,file,is,at,last,5,minutes,old,this,can,speedup,the,changed,read,lock,as,it,will,only,attempt,to,acquire,files,which,are,at,least,that,given,age;public,void,set,read,lock,min,age,long,read,lock,min,age,this,read,lock,min,age,read,lock,min,age
GenericFileEndpoint -> public void setReadLockMinAge(long readLockMinAge);1549879447;This option is applied only for readLock=changed._It allows to specify a minimum age the file must be before attempting to acquire the read lock._For example use readLockMinAge=300s to require the file is at last 5 minutes old._This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age.;public void setReadLockMinAge(long readLockMinAge) {_        this.readLockMinAge = readLockMinAge__    };this,option,is,applied,only,for,read,lock,changed,it,allows,to,specify,a,minimum,age,the,file,must,be,before,attempting,to,acquire,the,read,lock,for,example,use,read,lock,min,age,300s,to,require,the,file,is,at,last,5,minutes,old,this,can,speedup,the,changed,read,lock,as,it,will,only,attempt,to,acquire,files,which,are,at,least,that,given,age;public,void,set,read,lock,min,age,long,read,lock,min,age,this,read,lock,min,age,read,lock,min,age
GenericFileEndpoint -> public void setReadLockRemoveOnRollback(boolean readLockRemoveOnRollback);1548250802;This option is applied only for readLock=idempotent._It allows to specify whether to remove the file name entry from the idempotent repository_when processing the file failed and a rollback happens._If this option is false, then the file name entry is confirmed (as if the file did a commit).;public void setReadLockRemoveOnRollback(boolean readLockRemoveOnRollback) {_        this.readLockRemoveOnRollback = readLockRemoveOnRollback__    };this,option,is,applied,only,for,read,lock,idempotent,it,allows,to,specify,whether,to,remove,the,file,name,entry,from,the,idempotent,repository,when,processing,the,file,failed,and,a,rollback,happens,if,this,option,is,false,then,the,file,name,entry,is,confirmed,as,if,the,file,did,a,commit;public,void,set,read,lock,remove,on,rollback,boolean,read,lock,remove,on,rollback,this,read,lock,remove,on,rollback,read,lock,remove,on,rollback
GenericFileEndpoint -> public void setReadLockRemoveOnRollback(boolean readLockRemoveOnRollback);1549345447;This option is applied only for readLock=idempotent._It allows to specify whether to remove the file name entry from the idempotent repository_when processing the file failed and a rollback happens._If this option is false, then the file name entry is confirmed (as if the file did a commit).;public void setReadLockRemoveOnRollback(boolean readLockRemoveOnRollback) {_        this.readLockRemoveOnRollback = readLockRemoveOnRollback__    };this,option,is,applied,only,for,read,lock,idempotent,it,allows,to,specify,whether,to,remove,the,file,name,entry,from,the,idempotent,repository,when,processing,the,file,failed,and,a,rollback,happens,if,this,option,is,false,then,the,file,name,entry,is,confirmed,as,if,the,file,did,a,commit;public,void,set,read,lock,remove,on,rollback,boolean,read,lock,remove,on,rollback,this,read,lock,remove,on,rollback,read,lock,remove,on,rollback
GenericFileEndpoint -> public void setReadLockRemoveOnRollback(boolean readLockRemoveOnRollback);1549345604;This option is applied only for readLock=idempotent._It allows to specify whether to remove the file name entry from the idempotent repository_when processing the file failed and a rollback happens._If this option is false, then the file name entry is confirmed (as if the file did a commit).;public void setReadLockRemoveOnRollback(boolean readLockRemoveOnRollback) {_        this.readLockRemoveOnRollback = readLockRemoveOnRollback__    };this,option,is,applied,only,for,read,lock,idempotent,it,allows,to,specify,whether,to,remove,the,file,name,entry,from,the,idempotent,repository,when,processing,the,file,failed,and,a,rollback,happens,if,this,option,is,false,then,the,file,name,entry,is,confirmed,as,if,the,file,did,a,commit;public,void,set,read,lock,remove,on,rollback,boolean,read,lock,remove,on,rollback,this,read,lock,remove,on,rollback,read,lock,remove,on,rollback
GenericFileEndpoint -> public void setReadLockRemoveOnRollback(boolean readLockRemoveOnRollback);1549879447;This option is applied only for readLock=idempotent._It allows to specify whether to remove the file name entry from the idempotent repository_when processing the file failed and a rollback happens._If this option is false, then the file name entry is confirmed (as if the file did a commit).;public void setReadLockRemoveOnRollback(boolean readLockRemoveOnRollback) {_        this.readLockRemoveOnRollback = readLockRemoveOnRollback__    };this,option,is,applied,only,for,read,lock,idempotent,it,allows,to,specify,whether,to,remove,the,file,name,entry,from,the,idempotent,repository,when,processing,the,file,failed,and,a,rollback,happens,if,this,option,is,false,then,the,file,name,entry,is,confirmed,as,if,the,file,did,a,commit;public,void,set,read,lock,remove,on,rollback,boolean,read,lock,remove,on,rollback,this,read,lock,remove,on,rollback,read,lock,remove,on,rollback
GenericFileEndpoint -> public void setExclude(String exclude);1548250802;Is used to exclude files, if filename matches the regex pattern (matching is case in-senstive)._<p/>_Notice if you use symbols such as plus sign and others you would need to configure_this using the RAW() syntax if configuring this as an endpoint uri._See more details at <a href="http://camel.apache.org/how-do-i-configure-endpoints.html">configuring endpoint uris</a>;public void setExclude(String exclude) {_        this.exclude = exclude__        this.excludePattern = Pattern.compile(exclude, Pattern.CASE_INSENSITIVE)__    };is,used,to,exclude,files,if,filename,matches,the,regex,pattern,matching,is,case,in,senstive,p,notice,if,you,use,symbols,such,as,plus,sign,and,others,you,would,need,to,configure,this,using,the,raw,syntax,if,configuring,this,as,an,endpoint,uri,see,more,details,at,a,href,http,camel,apache,org,how,do,i,configure,endpoints,html,configuring,endpoint,uris,a;public,void,set,exclude,string,exclude,this,exclude,exclude,this,exclude,pattern,pattern,compile,exclude,pattern
GenericFileEndpoint -> public void setExclude(String exclude);1549345447;Is used to exclude files, if filename matches the regex pattern (matching is case in-senstive)._<p/>_Notice if you use symbols such as plus sign and others you would need to configure_this using the RAW() syntax if configuring this as an endpoint uri._See more details at <a href="http://camel.apache.org/how-do-i-configure-endpoints.html">configuring endpoint uris</a>;public void setExclude(String exclude) {_        this.exclude = exclude__        this.excludePattern = Pattern.compile(exclude, Pattern.CASE_INSENSITIVE)__    };is,used,to,exclude,files,if,filename,matches,the,regex,pattern,matching,is,case,in,senstive,p,notice,if,you,use,symbols,such,as,plus,sign,and,others,you,would,need,to,configure,this,using,the,raw,syntax,if,configuring,this,as,an,endpoint,uri,see,more,details,at,a,href,http,camel,apache,org,how,do,i,configure,endpoints,html,configuring,endpoint,uris,a;public,void,set,exclude,string,exclude,this,exclude,exclude,this,exclude,pattern,pattern,compile,exclude,pattern
GenericFileEndpoint -> public void setExclude(String exclude);1549345604;Is used to exclude files, if filename matches the regex pattern (matching is case in-senstive)._<p/>_Notice if you use symbols such as plus sign and others you would need to configure_this using the RAW() syntax if configuring this as an endpoint uri._See more details at <a href="http://camel.apache.org/how-do-i-configure-endpoints.html">configuring endpoint uris</a>;public void setExclude(String exclude) {_        this.exclude = exclude__        this.excludePattern = Pattern.compile(exclude, Pattern.CASE_INSENSITIVE)__    };is,used,to,exclude,files,if,filename,matches,the,regex,pattern,matching,is,case,in,senstive,p,notice,if,you,use,symbols,such,as,plus,sign,and,others,you,would,need,to,configure,this,using,the,raw,syntax,if,configuring,this,as,an,endpoint,uri,see,more,details,at,a,href,http,camel,apache,org,how,do,i,configure,endpoints,html,configuring,endpoint,uris,a;public,void,set,exclude,string,exclude,this,exclude,exclude,this,exclude,pattern,pattern,compile,exclude,pattern
GenericFileEndpoint -> public void setExclude(String exclude);1549879447;Is used to exclude files, if filename matches the regex pattern (matching is case in-senstive)._<p/>_Notice if you use symbols such as plus sign and others you would need to configure_this using the RAW() syntax if configuring this as an endpoint uri._See more details at <a href="http://camel.apache.org/how-do-i-configure-endpoints.html">configuring endpoint uris</a>;public void setExclude(String exclude) {_        this.exclude = exclude__        this.excludePattern = Pattern.compile(exclude, Pattern.CASE_INSENSITIVE)__    };is,used,to,exclude,files,if,filename,matches,the,regex,pattern,matching,is,case,in,senstive,p,notice,if,you,use,symbols,such,as,plus,sign,and,others,you,would,need,to,configure,this,using,the,raw,syntax,if,configuring,this,as,an,endpoint,uri,see,more,details,at,a,href,http,camel,apache,org,how,do,i,configure,endpoints,html,configuring,endpoint,uris,a;public,void,set,exclude,string,exclude,this,exclude,exclude,this,exclude,pattern,pattern,compile,exclude,pattern
GenericFileEndpoint -> public void setPreMove(Expression preMove);1548250802;Expression (such as File Language) used to dynamically set the filename when moving it before processing._For example to move in-progress files into the order directory set this value to order.;public void setPreMove(Expression preMove) {_        this.preMove = preMove__    };expression,such,as,file,language,used,to,dynamically,set,the,filename,when,moving,it,before,processing,for,example,to,move,in,progress,files,into,the,order,directory,set,this,value,to,order;public,void,set,pre,move,expression,pre,move,this,pre,move,pre,move
GenericFileEndpoint -> public void setPreMove(Expression preMove);1549345447;Expression (such as File Language) used to dynamically set the filename when moving it before processing._For example to move in-progress files into the order directory set this value to order.;public void setPreMove(Expression preMove) {_        this.preMove = preMove__    };expression,such,as,file,language,used,to,dynamically,set,the,filename,when,moving,it,before,processing,for,example,to,move,in,progress,files,into,the,order,directory,set,this,value,to,order;public,void,set,pre,move,expression,pre,move,this,pre,move,pre,move
GenericFileEndpoint -> public void setPreMove(Expression preMove);1549345604;Expression (such as File Language) used to dynamically set the filename when moving it before processing._For example to move in-progress files into the order directory set this value to order.;public void setPreMove(Expression preMove) {_        this.preMove = preMove__    };expression,such,as,file,language,used,to,dynamically,set,the,filename,when,moving,it,before,processing,for,example,to,move,in,progress,files,into,the,order,directory,set,this,value,to,order;public,void,set,pre,move,expression,pre,move,this,pre,move,pre,move
GenericFileEndpoint -> public void setPreMove(Expression preMove);1549879447;Expression (such as File Language) used to dynamically set the filename when moving it before processing._For example to move in-progress files into the order directory set this value to order.;public void setPreMove(Expression preMove) {_        this.preMove = preMove__    };expression,such,as,file,language,used,to,dynamically,set,the,filename,when,moving,it,before,processing,for,example,to,move,in,progress,files,into,the,order,directory,set,this,value,to,order;public,void,set,pre,move,expression,pre,move,this,pre,move,pre,move
GenericFileEndpoint -> public void setStartingDirectoryMustExist(boolean startingDirectoryMustExist);1548250802;Whether the starting directory must exist. Mind that the autoCreate option is default enabled,_which means the starting directory is normally auto created if it doesn't exist._You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn't exist.;public void setStartingDirectoryMustExist(boolean startingDirectoryMustExist) {_        this.startingDirectoryMustExist = startingDirectoryMustExist__    };whether,the,starting,directory,must,exist,mind,that,the,auto,create,option,is,default,enabled,which,means,the,starting,directory,is,normally,auto,created,if,it,doesn,t,exist,you,can,disable,auto,create,and,enable,this,to,ensure,the,starting,directory,must,exist,will,thrown,an,exception,if,the,directory,doesn,t,exist;public,void,set,starting,directory,must,exist,boolean,starting,directory,must,exist,this,starting,directory,must,exist,starting,directory,must,exist
GenericFileEndpoint -> public void setStartingDirectoryMustExist(boolean startingDirectoryMustExist);1549345447;Whether the starting directory must exist. Mind that the autoCreate option is default enabled,_which means the starting directory is normally auto created if it doesn't exist._You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn't exist.;public void setStartingDirectoryMustExist(boolean startingDirectoryMustExist) {_        this.startingDirectoryMustExist = startingDirectoryMustExist__    };whether,the,starting,directory,must,exist,mind,that,the,auto,create,option,is,default,enabled,which,means,the,starting,directory,is,normally,auto,created,if,it,doesn,t,exist,you,can,disable,auto,create,and,enable,this,to,ensure,the,starting,directory,must,exist,will,thrown,an,exception,if,the,directory,doesn,t,exist;public,void,set,starting,directory,must,exist,boolean,starting,directory,must,exist,this,starting,directory,must,exist,starting,directory,must,exist
GenericFileEndpoint -> public void setStartingDirectoryMustExist(boolean startingDirectoryMustExist);1549345604;Whether the starting directory must exist. Mind that the autoCreate option is default enabled,_which means the starting directory is normally auto created if it doesn't exist._You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn't exist.;public void setStartingDirectoryMustExist(boolean startingDirectoryMustExist) {_        this.startingDirectoryMustExist = startingDirectoryMustExist__    };whether,the,starting,directory,must,exist,mind,that,the,auto,create,option,is,default,enabled,which,means,the,starting,directory,is,normally,auto,created,if,it,doesn,t,exist,you,can,disable,auto,create,and,enable,this,to,ensure,the,starting,directory,must,exist,will,thrown,an,exception,if,the,directory,doesn,t,exist;public,void,set,starting,directory,must,exist,boolean,starting,directory,must,exist,this,starting,directory,must,exist,starting,directory,must,exist
GenericFileEndpoint -> public void setStartingDirectoryMustExist(boolean startingDirectoryMustExist);1549879447;Whether the starting directory must exist. Mind that the autoCreate option is default enabled,_which means the starting directory is normally auto created if it doesn't exist._You can disable autoCreate and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn't exist.;public void setStartingDirectoryMustExist(boolean startingDirectoryMustExist) {_        this.startingDirectoryMustExist = startingDirectoryMustExist__    };whether,the,starting,directory,must,exist,mind,that,the,auto,create,option,is,default,enabled,which,means,the,starting,directory,is,normally,auto,created,if,it,doesn,t,exist,you,can,disable,auto,create,and,enable,this,to,ensure,the,starting,directory,must,exist,will,thrown,an,exception,if,the,directory,doesn,t,exist;public,void,set,starting,directory,must,exist,boolean,starting,directory,must,exist,this,starting,directory,must,exist,starting,directory,must,exist
GenericFileEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1548250802;To define a maximum messages to gather per poll._By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files._Set a value of 0 or negative to disabled it._Notice: If this option is in use then the File and FTP components will limit before any sorting._For example if you have 100000 files and use maxMessagesPerPoll=500, then only the first 500 files will be picked up, and then sorted._You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };to,define,a,maximum,messages,to,gather,per,poll,by,default,no,maximum,is,set,can,be,used,to,set,a,limit,of,e,g,1000,to,avoid,when,starting,up,the,server,that,there,are,thousands,of,files,set,a,value,of,0,or,negative,to,disabled,it,notice,if,this,option,is,in,use,then,the,file,and,ftp,components,will,limit,before,any,sorting,for,example,if,you,have,100000,files,and,use,max,messages,per,poll,500,then,only,the,first,500,files,will,be,picked,up,and,then,sorted,you,can,use,the,eager,max,messages,per,poll,option,and,set,this,to,false,to,allow,to,scan,all,files,first,and,then,sort,afterwards;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
GenericFileEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1549345447;To define a maximum messages to gather per poll._By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files._Set a value of 0 or negative to disabled it._Notice: If this option is in use then the File and FTP components will limit before any sorting._For example if you have 100000 files and use maxMessagesPerPoll=500, then only the first 500 files will be picked up, and then sorted._You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };to,define,a,maximum,messages,to,gather,per,poll,by,default,no,maximum,is,set,can,be,used,to,set,a,limit,of,e,g,1000,to,avoid,when,starting,up,the,server,that,there,are,thousands,of,files,set,a,value,of,0,or,negative,to,disabled,it,notice,if,this,option,is,in,use,then,the,file,and,ftp,components,will,limit,before,any,sorting,for,example,if,you,have,100000,files,and,use,max,messages,per,poll,500,then,only,the,first,500,files,will,be,picked,up,and,then,sorted,you,can,use,the,eager,max,messages,per,poll,option,and,set,this,to,false,to,allow,to,scan,all,files,first,and,then,sort,afterwards;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
GenericFileEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1549345604;To define a maximum messages to gather per poll._By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files._Set a value of 0 or negative to disabled it._Notice: If this option is in use then the File and FTP components will limit before any sorting._For example if you have 100000 files and use maxMessagesPerPoll=500, then only the first 500 files will be picked up, and then sorted._You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };to,define,a,maximum,messages,to,gather,per,poll,by,default,no,maximum,is,set,can,be,used,to,set,a,limit,of,e,g,1000,to,avoid,when,starting,up,the,server,that,there,are,thousands,of,files,set,a,value,of,0,or,negative,to,disabled,it,notice,if,this,option,is,in,use,then,the,file,and,ftp,components,will,limit,before,any,sorting,for,example,if,you,have,100000,files,and,use,max,messages,per,poll,500,then,only,the,first,500,files,will,be,picked,up,and,then,sorted,you,can,use,the,eager,max,messages,per,poll,option,and,set,this,to,false,to,allow,to,scan,all,files,first,and,then,sort,afterwards;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
GenericFileEndpoint -> public void setMaxMessagesPerPoll(int maxMessagesPerPoll);1549879447;To define a maximum messages to gather per poll._By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files._Set a value of 0 or negative to disabled it._Notice: If this option is in use then the File and FTP components will limit before any sorting._For example if you have 100000 files and use maxMessagesPerPoll=500, then only the first 500 files will be picked up, and then sorted._You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards.;public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {_        this.maxMessagesPerPoll = maxMessagesPerPoll__    };to,define,a,maximum,messages,to,gather,per,poll,by,default,no,maximum,is,set,can,be,used,to,set,a,limit,of,e,g,1000,to,avoid,when,starting,up,the,server,that,there,are,thousands,of,files,set,a,value,of,0,or,negative,to,disabled,it,notice,if,this,option,is,in,use,then,the,file,and,ftp,components,will,limit,before,any,sorting,for,example,if,you,have,100000,files,and,use,max,messages,per,poll,500,then,only,the,first,500,files,will,be,picked,up,and,then,sorted,you,can,use,the,eager,max,messages,per,poll,option,and,set,this,to,false,to,allow,to,scan,all,files,first,and,then,sort,afterwards;public,void,set,max,messages,per,poll,int,max,messages,per,poll,this,max,messages,per,poll,max,messages,per,poll
GenericFileEndpoint -> public void setInProgressRepository(IdempotentRepository inProgressRepository);1548250802;A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository._The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used.;public void setInProgressRepository(IdempotentRepository inProgressRepository) {_        this.inProgressRepository = inProgressRepository__    };a,pluggable,in,progress,repository,org,apache,camel,spi,idempotent,repository,the,in,progress,repository,is,used,to,account,the,current,in,progress,files,being,consumed,by,default,a,memory,based,repository,is,used;public,void,set,in,progress,repository,idempotent,repository,in,progress,repository,this,in,progress,repository,in,progress,repository
GenericFileEndpoint -> public void setInProgressRepository(IdempotentRepository inProgressRepository);1549345447;A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository._The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used.;public void setInProgressRepository(IdempotentRepository inProgressRepository) {_        this.inProgressRepository = inProgressRepository__    };a,pluggable,in,progress,repository,org,apache,camel,spi,idempotent,repository,the,in,progress,repository,is,used,to,account,the,current,in,progress,files,being,consumed,by,default,a,memory,based,repository,is,used;public,void,set,in,progress,repository,idempotent,repository,in,progress,repository,this,in,progress,repository,in,progress,repository
GenericFileEndpoint -> public void setInProgressRepository(IdempotentRepository inProgressRepository);1549345604;A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository._The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used.;public void setInProgressRepository(IdempotentRepository inProgressRepository) {_        this.inProgressRepository = inProgressRepository__    };a,pluggable,in,progress,repository,org,apache,camel,spi,idempotent,repository,the,in,progress,repository,is,used,to,account,the,current,in,progress,files,being,consumed,by,default,a,memory,based,repository,is,used;public,void,set,in,progress,repository,idempotent,repository,in,progress,repository,this,in,progress,repository,in,progress,repository
GenericFileEndpoint -> public void setInProgressRepository(IdempotentRepository inProgressRepository);1549879447;A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository._The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used.;public void setInProgressRepository(IdempotentRepository inProgressRepository) {_        this.inProgressRepository = inProgressRepository__    };a,pluggable,in,progress,repository,org,apache,camel,spi,idempotent,repository,the,in,progress,repository,is,used,to,account,the,current,in,progress,files,being,consumed,by,default,a,memory,based,repository,is,used;public,void,set,in,progress,repository,idempotent,repository,in,progress,repository,this,in,progress,repository,in,progress,repository
GenericFileEndpoint -> public void setTempPrefix(String tempPrefix);1548250802;This option is used to write the file using a temporary name and then, after the write is complete,_rename it to the real name. Can be used to identify files being written and also avoid consumers_(not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files.;public void setTempPrefix(String tempPrefix) {_        this.tempPrefix = tempPrefix__        _        setTempFileName(tempPrefix + "${file:onlyname}")__    };this,option,is,used,to,write,the,file,using,a,temporary,name,and,then,after,the,write,is,complete,rename,it,to,the,real,name,can,be,used,to,identify,files,being,written,and,also,avoid,consumers,not,using,exclusive,read,locks,reading,in,progress,files,is,often,used,by,ftp,when,uploading,big,files;public,void,set,temp,prefix,string,temp,prefix,this,temp,prefix,temp,prefix,set,temp,file,name,temp,prefix,file,onlyname
GenericFileEndpoint -> public void setTempPrefix(String tempPrefix);1549345447;This option is used to write the file using a temporary name and then, after the write is complete,_rename it to the real name. Can be used to identify files being written and also avoid consumers_(not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files.;public void setTempPrefix(String tempPrefix) {_        this.tempPrefix = tempPrefix__        _        setTempFileName(tempPrefix + "${file:onlyname}")__    };this,option,is,used,to,write,the,file,using,a,temporary,name,and,then,after,the,write,is,complete,rename,it,to,the,real,name,can,be,used,to,identify,files,being,written,and,also,avoid,consumers,not,using,exclusive,read,locks,reading,in,progress,files,is,often,used,by,ftp,when,uploading,big,files;public,void,set,temp,prefix,string,temp,prefix,this,temp,prefix,temp,prefix,set,temp,file,name,temp,prefix,file,onlyname
GenericFileEndpoint -> public void setTempPrefix(String tempPrefix);1549345604;This option is used to write the file using a temporary name and then, after the write is complete,_rename it to the real name. Can be used to identify files being written and also avoid consumers_(not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files.;public void setTempPrefix(String tempPrefix) {_        this.tempPrefix = tempPrefix__        _        setTempFileName(tempPrefix + "${file:onlyname}")__    };this,option,is,used,to,write,the,file,using,a,temporary,name,and,then,after,the,write,is,complete,rename,it,to,the,real,name,can,be,used,to,identify,files,being,written,and,also,avoid,consumers,not,using,exclusive,read,locks,reading,in,progress,files,is,often,used,by,ftp,when,uploading,big,files;public,void,set,temp,prefix,string,temp,prefix,this,temp,prefix,temp,prefix,set,temp,file,name,temp,prefix,file,onlyname
GenericFileEndpoint -> public void setTempPrefix(String tempPrefix);1549879447;This option is used to write the file using a temporary name and then, after the write is complete,_rename it to the real name. Can be used to identify files being written and also avoid consumers_(not using exclusive read locks) reading in progress files. Is often used by FTP when uploading big files.;public void setTempPrefix(String tempPrefix) {_        this.tempPrefix = tempPrefix__        _        setTempFileName(tempPrefix + "${file:onlyname}")__    };this,option,is,used,to,write,the,file,using,a,temporary,name,and,then,after,the,write,is,complete,rename,it,to,the,real,name,can,be,used,to,identify,files,being,written,and,also,avoid,consumers,not,using,exclusive,read,locks,reading,in,progress,files,is,often,used,by,ftp,when,uploading,big,files;public,void,set,temp,prefix,string,temp,prefix,this,temp,prefix,temp,prefix,set,temp,file,name,temp,prefix,file,onlyname
