commented;modifiers;parameterAmount;loc;comment;code
false;public;4;28;;@Override public boolean begin(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {     // must invoke super     boolean result = super.begin(operations, endpoint, exchange, file).     if (!result) {         return false.     }     // okay we got the file then execute the begin renamer     if (beginRenamer != null) {         GenericFile<T> newName = beginRenamer.renameFile(exchange, file).         GenericFile<T> to = renameFile(operations, file, newName).         FileEndpoint fe = null.         if (endpoint instanceof FileEndpoint) {             fe = (FileEndpoint) endpoint.             if (to != null) {                 to.bindToExchange(exchange, fe.isProbeContentType()).             }         } else {             if (to != null) {                 to.bindToExchange(exchange).             }         }     }     return true. }
false;public;4;29;;@Override public void rollback(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {     try {         operations.releaseRetrievedFileResources(exchange).         if (failureRenamer != null) {             // create a copy and bind the file to the exchange to be used by the renamer to evaluate the file name             Exchange copy = ExchangeHelper.createCopy(exchange, true).             FileEndpoint fe = null.             if (endpoint instanceof FileEndpoint) {                 fe = (FileEndpoint) endpoint.                 file.bindToExchange(copy, fe.isProbeContentType()).             } else {                 file.bindToExchange(copy).             }             // must preserve message id             copy.getIn().setMessageId(exchange.getIn().getMessageId()).             copy.setExchangeId(exchange.getExchangeId()).             GenericFile<T> newName = failureRenamer.renameFile(copy, file).             renameFile(operations, file, newName).         }     } finally {         if (exclusiveReadLockStrategy != null) {             exclusiveReadLockStrategy.releaseExclusiveReadLockOnRollback(operations, file, exchange).         }         deleteLocalWorkFile(exchange).     } }
false;public;4;25;;@Override public void commit(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {     try {         if (commitRenamer != null) {             // create a copy and bind the file to the exchange to be used by the renamer to evaluate the file name             Exchange copy = ExchangeHelper.createCopy(exchange, true).             FileEndpoint fe = null.             if (endpoint instanceof FileEndpoint) {                 fe = (FileEndpoint) endpoint.                 file.bindToExchange(copy, fe.isProbeContentType()).             } else {                 file.bindToExchange(copy).             }             // must preserve message id             copy.getIn().setMessageId(exchange.getIn().getMessageId()).             copy.setExchangeId(exchange.getExchangeId()).             GenericFile<T> newName = commitRenamer.renameFile(copy, file).             renameFile(operations, file, newName).         }     } finally {         // must invoke super         super.commit(operations, endpoint, exchange, file).     } }
false;public;0;3;;public GenericFileRenamer<T> getBeginRenamer() {     return beginRenamer. }
false;public;1;3;;public void setBeginRenamer(GenericFileRenamer<T> beginRenamer) {     this.beginRenamer = beginRenamer. }
false;public;0;3;;public GenericFileRenamer<T> getCommitRenamer() {     return commitRenamer. }
false;public;1;3;;public void setCommitRenamer(GenericFileRenamer<T> commitRenamer) {     this.commitRenamer = commitRenamer. }
false;public;0;3;;public GenericFileRenamer<T> getFailureRenamer() {     return failureRenamer. }
false;public;1;3;;public void setFailureRenamer(GenericFileRenamer<T> failureRenamer) {     this.failureRenamer = failureRenamer. }
