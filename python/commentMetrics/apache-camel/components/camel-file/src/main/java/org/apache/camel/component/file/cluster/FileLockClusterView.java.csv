commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public Optional<CamelClusterMember> getLeader() {     return this.localMember.isLeader() ? Optional.of(this.localMember) : Optional.empty(). }
false;public;0;4;;@Override public CamelClusterMember getLocalMember() {     return this.localMember. }
false;public;0;8;;@Override public List<CamelClusterMember> getMembers() {     // purpose may also contains the lock holder.     return Collections.emptyList(). }
false;protected;0;25;;@Override protected void doStart() throws Exception {     if (file != null) {         close().         fireLeadershipChangedEvent(Optional.empty()).     }     if (!Files.exists(path.getParent())) {         Files.createDirectories(path.getParent()).     }     file = new RandomAccessFile(path.toFile(), "rw").     channel = file.getChannel().     FileLockClusterService service = getClusterService().unwrap(FileLockClusterService.class).     ScheduledExecutorService executor = service.getExecutor().     task = executor.scheduleAtFixedRate(this::tryLock, TimeUnit.MILLISECONDS.convert(service.getAcquireLockDelay(), service.getAcquireLockDelayUnit()), TimeUnit.MILLISECONDS.convert(service.getAcquireLockInterval(), service.getAcquireLockIntervalUnit()), TimeUnit.MILLISECONDS). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     close(). }
false;private;0;17;;// ********************************* //  // ********************************* private void close() throws Exception {     if (task != null) {         task.cancel(true).     }     if (lock != null) {         lock.release().     }     if (file != null) {         IOHelper.close(channel).         IOHelper.close(file).         channel = null.         file = null.     } }
false;private;0;33;;private void tryLock() {     if (isStarting() || isStarted()) {         try {             if (localMember.isLeader()) {                 LOGGER.trace("Holding the lock on file {} (lock={})", path, lock).                 return.             }             synchronized (FileLockClusterView.this) {                 if (lock != null) {                     LOGGER.info("Lock on file {} lost (lock={})", path, lock).                     fireLeadershipChangedEvent(Optional.empty()).                 }                 LOGGER.debug("Try to acquire a lock on {}", path).                 lock = null.                 lock = channel.tryLock().                 if (lock != null) {                     LOGGER.info("Lock on file {} acquired (lock={})", path, lock).                     fireLeadershipChangedEvent(Optional.of(localMember)).                 } else {                     LOGGER.debug("Lock on file {} not acquired ", path).                 }             }         } catch (OverlappingFileLockException e) {             LOGGER.debug("Lock on file {} not acquired ", path).         } catch (Exception e) {             throw new RuntimeException(e).         }     } }
false;public;0;6;;@Override public boolean isLeader() {     synchronized (FileLockClusterView.this) {         return lock != null && lock.isValid().     } }
false;public;0;4;;@Override public boolean isLocal() {     return true. }
false;public;0;4;;@Override public String getId() {     return getClusterService().getId(). }
