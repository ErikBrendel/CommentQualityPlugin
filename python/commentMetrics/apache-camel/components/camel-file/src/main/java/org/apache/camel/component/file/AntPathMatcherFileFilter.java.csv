commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public boolean accept(File pathname) {     return acceptPathName(pathname.getPath()). }
true;public;1;35;/**  * Accepts the given file by the path name  *  * @param path the path  * @return <tt>true</tt> if accepted, <tt>false</tt> if not  */ ;/**  * Accepts the given file by the path name  *  * @param path the path  * @return <tt>true</tt> if accepted, <tt>false</tt> if not  */ public boolean acceptPathName(String path) {     // must use single / as path separators     path = path.replace(File.separatorChar, '/').     LOG.trace("Filtering file: {}", path).     // excludes take precedence     if (excludes != null) {         for (String exclude : excludes) {             if (matcher.match(exclude, path, caseSensitive)) {                 // something to exclude so we cant accept it                 LOG.trace("File is excluded: {}", path).                 return false.             }         }     }     if (includes != null) {         for (String include : includes) {             if (matcher.match(include, path, caseSensitive)) {                 // something to include so we accept it                 LOG.trace("File is included: {}", path).                 return true.             }         }     }     if (excludes != null && includes == null) {         // if the user specified excludes but no includes, presumably we should include by default         return true.     }     // nothing to include so we can't accept it     return false. }
true;public;0;3;/**  * @return <tt>true</tt> if case sensitive pattern matching is on,  * <tt>false</tt> if case sensitive pattern matching is off.  */ ;/**  * @return <tt>true</tt> if case sensitive pattern matching is on,  * <tt>false</tt> if case sensitive pattern matching is off.  */ public boolean isCaseSensitive() {     return caseSensitive. }
true;public;1;3;/**  * Sets Whether or not pattern matching should be case sensitive  * <p/>  * Is by default turned on <tt>true</tt>.  * @param caseSensitive <tt>false</tt> to disable case sensitive pattern matching  */ ;/**  * Sets Whether or not pattern matching should be case sensitive  * <p/>  * Is by default turned on <tt>true</tt>.  * @param caseSensitive <tt>false</tt> to disable case sensitive pattern matching  */ public void setCaseSensitive(boolean caseSensitive) {     this.caseSensitive = caseSensitive. }
false;public;0;3;;public String[] getExcludes() {     return excludes. }
false;public;1;3;;public void setExcludes(String[] excludes) {     this.excludes = excludes. }
false;public;0;3;;public String[] getIncludes() {     return includes. }
false;public;1;3;;public void setIncludes(String[] includes) {     this.includes = includes. }
true;public;1;3;/**  * Sets excludes using a single string where each element can be separated with comma  */ ;/**  * Sets excludes using a single string where each element can be separated with comma  */ public void setExcludes(String excludes) {     setExcludes(excludes.split(",")). }
true;public;1;3;/**  * Sets includes using a single string where each element can be separated with comma  */ ;/**  * Sets includes using a single string where each element can be separated with comma  */ public void setIncludes(String includes) {     setIncludes(includes.split(",")). }
