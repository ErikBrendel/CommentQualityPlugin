commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Sets the endpoint as some implementations need access to the endpoint and how its configured.  *  * @param endpoint the endpoint  */ ;/**  * Sets the endpoint as some implementations need access to the endpoint and how its configured.  *  * @param endpoint the endpoint  */ void setEndpoint(GenericFileEndpoint<T> endpoint).
true;;1;1;/**  * Deletes the file name by name, relative to the current directory  *  * @param name name of the file  * @return true if deleted, false if not  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Deletes the file name by name, relative to the current directory  *  * @param name name of the file  * @return true if deleted, false if not  * @throws GenericFileOperationFailedException can be thrown  */ boolean deleteFile(String name) throws GenericFileOperationFailedException.
true;;1;1;/**  * Determines whether the files exists or not  *  * @param name name of the file  * @return true if exists, false if not  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Determines whether the files exists or not  *  * @param name name of the file  * @return true if exists, false if not  * @throws GenericFileOperationFailedException can be thrown  */ boolean existsFile(String name) throws GenericFileOperationFailedException.
true;;2;1;/**  * Renames the file  *  * @param from original name  * @param to   the new name  * @return true if renamed, false if not  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Renames the file  *  * @param from original name  * @param to   the new name  * @return true if renamed, false if not  * @throws GenericFileOperationFailedException can be thrown  */ boolean renameFile(String from, String to) throws GenericFileOperationFailedException.
true;;2;1;/**  * Builds the directory structure. Will test if the  * folder already exists.  *  * @param directory the directory path to build as a relative string name  * @param absolute whether the directory is an absolute or relative path  * @return true if build or already exists, false if not possible (could be lack of permissions)  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Builds the directory structure. Will test if the  * folder already exists.  *  * @param directory the directory path to build as a relative string name  * @param absolute whether the directory is an absolute or relative path  * @return true if build or already exists, false if not possible (could be lack of permissions)  * @throws GenericFileOperationFailedException can be thrown  */ boolean buildDirectory(String directory, boolean absolute) throws GenericFileOperationFailedException.
true;;3;1;/**  * Retrieves the file  *  * @param name     name of the file  * @param exchange stream to write the content of the file into  * @param size     the total file size to retrieve, if possible to determine  * @return true if file has been retrieved, false if not  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Retrieves the file  *  * @param name     name of the file  * @param exchange stream to write the content of the file into  * @param size     the total file size to retrieve, if possible to determine  * @return true if file has been retrieved, false if not  * @throws GenericFileOperationFailedException can be thrown  */ boolean retrieveFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException.
true;;1;1;/**  * Releases the resources consumed by a retrieved file  *  * @param exchange exchange with the content of the file  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Releases the resources consumed by a retrieved file  *  * @param exchange exchange with the content of the file  * @throws GenericFileOperationFailedException can be thrown  */ void releaseRetrievedFileResources(Exchange exchange) throws GenericFileOperationFailedException.
true;;3;1;/**  * Stores the content as a new remote file (upload)  *  * @param name     name of new file  * @param exchange with the content content of the file  * @param size     the total file size to store, if possible to determine  * @return true if the file was stored, false if not  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Stores the content as a new remote file (upload)  *  * @param name     name of new file  * @param exchange with the content content of the file  * @param size     the total file size to store, if possible to determine  * @return true if the file was stored, false if not  * @throws GenericFileOperationFailedException can be thrown  */ boolean storeFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException.
true;;0;1;/**  * Gets the current remote directory  *  * @return the current directory path  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Gets the current remote directory  *  * @return the current directory path  * @throws GenericFileOperationFailedException can be thrown  */ String getCurrentDirectory() throws GenericFileOperationFailedException.
true;;1;1;/**  * Change the current remote directory  *  * @param path the path to change to  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Change the current remote directory  *  * @param path the path to change to  * @throws GenericFileOperationFailedException can be thrown  */ void changeCurrentDirectory(String path) throws GenericFileOperationFailedException.
true;;0;1;/**  * Change the current remote directory to the parent  *  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * Change the current remote directory to the parent  *  * @throws GenericFileOperationFailedException can be thrown  */ void changeToParentDirectory() throws GenericFileOperationFailedException.
true;;0;1;/**  * List the files in the current directory  *  * @return a list of backing objects representing the files  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * List the files in the current directory  *  * @return a list of backing objects representing the files  * @throws GenericFileOperationFailedException can be thrown  */ List<T> listFiles() throws GenericFileOperationFailedException.
true;;1;1;/**  * List the files in the given remote directory  *  * @param path the remote directory  * @return a list of backing objects representing the files  * @throws GenericFileOperationFailedException can be thrown  */ ;/**  * List the files in the given remote directory  *  * @param path the remote directory  * @return a list of backing objects representing the files  * @throws GenericFileOperationFailedException can be thrown  */ List<T> listFiles(String path) throws GenericFileOperationFailedException.
