commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setScheme(String scheme) {     this.scheme = scheme. }
false;public;0;4;;@Override public String getScheme() {     return scheme. }
false;public;3;7;;@Override public DynamicAwareEntry prepare(Exchange exchange, String uri, String originalUri) throws Exception {     RuntimeCamelCatalog catalog = exchange.getContext().getExtension(RuntimeCamelCatalog.class).     Map<String, String> properties = catalog.endpointProperties(uri).     Map<String, String> lenient = catalog.endpointLenientProperties(uri).     return new DynamicAwareEntry(uri, originalUri, properties, lenient). }
false;public;2;64;;@Override public String resolveStaticUri(Exchange exchange, DynamicAwareEntry entry) throws Exception {     boolean fileName = entry.getProperties().containsKey("fileName").     boolean tempFileName = entry.getProperties().containsKey("tempFileName").     boolean idempotentKey = entry.getProperties().containsKey("idempotentKey").     boolean move = entry.getProperties().containsKey("move").     boolean moveFailed = entry.getProperties().containsKey("moveFailed").     boolean preMove = entry.getProperties().containsKey("preMove").     boolean moveExisting = entry.getProperties().containsKey("moveExisting").     // and we need to rebuild a new uri with them as-is     if (fileName || tempFileName || idempotentKey || move || moveFailed || preMove || moveExisting) {         Map<String, String> params = new LinkedHashMap<>(entry.getProperties()).         Map<String, Object> originalParams = URISupport.parseQuery(entry.getOriginalUri()).         if (fileName) {             Object val = originalParams.get("fileName").             if (val != null) {                 params.put("fileName", val.toString()).             }         }         if (tempFileName) {             Object val = originalParams.get("tempFileName").             if (val != null) {                 params.put("tempFileName", val.toString()).             }         }         if (idempotentKey) {             Object val = originalParams.get("idempotentKey").             if (val != null) {                 params.put("idempotentKey", val.toString()).             }         }         if (move) {             Object val = originalParams.get("move").             if (val != null) {                 params.put("move", val.toString()).             }         }         if (moveFailed) {             Object val = originalParams.get("moveFailed").             if (val != null) {                 params.put("moveFailed", val.toString()).             }         }         if (preMove) {             Object val = originalParams.get("preMove").             if (val != null) {                 params.put("preMove", val.toString()).             }         }         if (moveExisting) {             Object val = originalParams.get("moveExisting").             if (val != null) {                 params.put("moveExisting", val.toString()).             }         }         RuntimeCamelCatalog catalog = exchange.getContext().getExtension(RuntimeCamelCatalog.class).         return catalog.asEndpointUri(scheme, params, false).     } else {         return entry.getUri().     } }
false;public;2;4;;@Override public Processor createPreProcessor(Exchange exchange, DynamicAwareEntry entry) throws Exception {     return null. }
false;public;2;4;;@Override public Processor createPostProcessor(Exchange exchange, DynamicAwareEntry entry) throws Exception {     return null. }
