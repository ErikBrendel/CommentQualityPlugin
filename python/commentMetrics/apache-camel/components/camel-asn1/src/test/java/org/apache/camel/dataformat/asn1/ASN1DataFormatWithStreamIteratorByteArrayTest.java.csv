commented;modifiers;parameterAmount;loc;comment;code
false;private;2;19;;private void baseASN1DataFormatWithStreamIteratorByteArrayTest(String mockEnpointName, String directEndpointName) throws Exception {     getMockEndpoint(mockEnpointName).expectedMessageCount(1).     File testFile = new File(fileName).     ByteArrayInputStream bais = ASN1DataFormatTestHelper.reteriveByteArrayInputStream(testFile).     template.sendBody(directEndpointName, bais).     List<Exchange> exchanges = getMockEndpoint(mockEnpointName).getExchanges().     assertTrue(exchanges.size() == 1).     for (Exchange exchange : exchanges) {         assertTrue(exchange.getIn().getBody() instanceof byte[]).         assertTrue(Arrays.equals(FileUtils.readFileToByteArray(testFile), exchange.getIn().getBody(byte[].class))).         assertTrue(ASN1Primitive.fromByteArray(exchange.getIn().getBody(byte[].class)) instanceof ASN1Primitive).     }     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Test public void testUnmarshalReturnByteArray() throws Exception {     baseASN1DataFormatWithStreamIteratorByteArrayTest("mock:unmarshal", "direct:unmarshal"). }
false;public;0;4;;@Test public void testUnmarshalReturnByteArrayDsl() throws Exception {     baseASN1DataFormatWithStreamIteratorByteArrayTest("mock:unmarshaldsl", "direct:unmarshaldsl"). }
false;public;0;4;;@Test public void testUnmarshalMarshalReturnOutputStream() throws Exception {     baseASN1DataFormatWithStreamIteratorByteArrayTest("mock:marshal", "direct:unmarshalthenmarshal"). }
false;public;0;4;;@Test public void testUnmarshalMarshalReturnOutputStreamDsl() throws Exception {     baseASN1DataFormatWithStreamIteratorByteArrayTest("mock:marshaldsl", "direct:unmarshalthenmarshaldsl"). }
false;public;0;12;;@Override public void configure() throws Exception {     asn1 = new ASN1DataFormat().     asn1.setUsingIterator(true).     from("direct:unmarshal").unmarshal(asn1).split(bodyAs(Iterator.class)).streaming().to("mock:unmarshal").     from("direct:unmarshalthenmarshal").unmarshal(asn1).split(bodyAs(Iterator.class)).streaming().marshal(asn1).to("mock:marshal").     from("direct:unmarshaldsl").unmarshal().asn1(true).split(bodyAs(Iterator.class)).streaming().to("mock:unmarshaldsl").     from("direct:unmarshalthenmarshaldsl").unmarshal().asn1(true).split(bodyAs(Iterator.class)).streaming().marshal().asn1(true).to("mock:marshaldsl"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             asn1 = new ASN1DataFormat().             asn1.setUsingIterator(true).             from("direct:unmarshal").unmarshal(asn1).split(bodyAs(Iterator.class)).streaming().to("mock:unmarshal").             from("direct:unmarshalthenmarshal").unmarshal(asn1).split(bodyAs(Iterator.class)).streaming().marshal(asn1).to("mock:marshal").             from("direct:unmarshaldsl").unmarshal().asn1(true).split(bodyAs(Iterator.class)).streaming().to("mock:unmarshaldsl").             from("direct:unmarshalthenmarshaldsl").unmarshal().asn1(true).split(bodyAs(Iterator.class)).streaming().marshal().asn1(true).to("mock:marshaldsl").         }     }. }
