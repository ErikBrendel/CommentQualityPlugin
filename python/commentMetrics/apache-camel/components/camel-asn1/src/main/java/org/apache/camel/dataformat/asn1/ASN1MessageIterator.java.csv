commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Override public boolean hasNext() {     try {         if (asn1InputStream == null) {             return false.         }         boolean availableDataInCurrentEntry = asn1InputStream.available() > 0.         if (!availableDataInCurrentEntry) {             // advance to the next entry.             parent = getNextElement().             if (parent == null) {                 asn1InputStream.close().                 availableDataInCurrentEntry = false.             } else {                 availableDataInCurrentEntry = true.             }         }         return availableDataInCurrentEntry.     } catch (IOException exception) {         throw new RuntimeCamelException(exception).     } }
false;private;0;21;;private Message getNextElement() {     if (asn1InputStream == null) {         return null.     }     try {         ASN1Primitive current = getNextEntry().         if (current != null) {             Message answer = new DefaultMessage(exchange.getContext()).             answer.getHeaders().putAll(exchange.getIn().getHeaders()).             answer.setBody(current.getEncoded()).             return answer.         } else {             LOGGER.trace("close asn1InputStream").             return null.         }     } catch (IOException exception) {         throw new RuntimeCamelException(exception).     } }
false;private;0;3;;private ASN1Primitive getNextEntry() throws IOException {     return asn1InputStream.readObject(). }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException(). }
false;public;0;11;;@Override public Message next() {     if (parent == null) {         parent = getNextElement().     }     Message answer = parent.     parent = null.     checkNullAnswer(answer).     return answer. }
false;private;1;6;;private void checkNullAnswer(Message answer) {     if (answer == null && asn1InputStream != null) {         IOHelper.close(asn1InputStream).         asn1InputStream = null.     } }
false;public;0;5;;@Override public void close() throws IOException {     IOHelper.close(asn1InputStream).     asn1InputStream = null. }
