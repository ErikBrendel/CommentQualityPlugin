commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public IPFSEndpoint getEndpoint() {     return (IPFSEndpoint) super.getEndpoint(). }
false;public;1;38;;@Override public void process(Exchange exchange) throws Exception {     IPFSEndpoint endpoint = getEndpoint().     IPFSCommand cmd = endpoint.getCommand().     if (IPFSCommand.version == cmd) {         String resp = endpoint.ipfsVersion().         exchange.getMessage().setBody(resp).     } else if (IPFSCommand.add == cmd) {         Path path = pathFromBody(exchange).         List<String> cids = endpoint.ipfsAdd(path).         Object resp = cids.         if (path.toFile().isFile()) {             resp = cids.size() > 0 ? cids.get(0) : null.         }         exchange.getMessage().setBody(resp).     } else if (IPFSCommand.cat == cmd) {         String cid = exchange.getMessage().getBody(String.class).         InputStream resp = endpoint.ipfsCat(cid).         exchange.getMessage().setBody(resp).     } else if (IPFSCommand.get == cmd) {         Path outdir = endpoint.getConfiguration().getOutdir().         String cid = exchange.getMessage().getBody(String.class).         Path resp = endpoint.ipfsGet(cid, outdir).         exchange.getMessage().setBody(resp).     } else {         throw new UnsupportedOperationException(cmd.toString()).     } }
false;private;1;13;;private Path pathFromBody(Exchange exchange) {     Object body = exchange.getMessage().getBody().     if (body instanceof Path) {         return (Path) body.     }     if (body instanceof String) {         return Paths.get((String) body).     }     if (body instanceof File) {         return ((File) body).toPath().     }     throw new IllegalArgumentException("Invalid path: " + body). }
