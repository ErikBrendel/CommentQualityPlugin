commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void main(String[] args) throws Exception {     new RequestReplyExample().run(). }
false;public;0;20;;@Override public void configure() throws Exception {     // Synchronize the logon so we don't start sending status requests too early     from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET").filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogon)).bean(new CountDownLatchDecrementer("logon", logonLatch)).     // Incoming status requests are passed to the order status service and afterwards we print out that     // order status being delivered using the json printer.     from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER&exchangePattern=InOut").filter(header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.ORDER_STATUS_REQUEST)).to("log://OrderStatusRequestLog?showAll=true&showOut=true&multiline=true").bean(new MarketOrderStatusService()).bean(new QuickfixjMessageJsonPrinter()).     from("jetty:" + orderStatusServiceUrl).bean(new OrderStatusRequestTransformer()).routingSlip(method(FixSessionRouter.class, "route")).bean(new QuickfixjMessageJsonTransformer(), "transform(${body})"). }
false;public;0;62;;public void run() throws Exception {     final CamelContext context = new DefaultCamelContext().     final CountDownLatch logonLatch = new CountDownLatch(1).     final String orderStatusServiceUrl = "http://localhost:9123/order/status".     RouteBuilder routes = new RouteBuilder() {          @Override         public void configure() throws Exception {             // Synchronize the logon so we don't start sending status requests too early             from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET").filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogon)).bean(new CountDownLatchDecrementer("logon", logonLatch)).             // Incoming status requests are passed to the order status service and afterwards we print out that             // order status being delivered using the json printer.             from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER&exchangePattern=InOut").filter(header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.ORDER_STATUS_REQUEST)).to("log://OrderStatusRequestLog?showAll=true&showOut=true&multiline=true").bean(new MarketOrderStatusService()).bean(new QuickfixjMessageJsonPrinter()).             from("jetty:" + orderStatusServiceUrl).bean(new OrderStatusRequestTransformer()).routingSlip(method(FixSessionRouter.class, "route")).bean(new QuickfixjMessageJsonTransformer(), "transform(${body})").         }     }.     context.addRoutes(routes).     LOG.info("Starting Camel context").     context.start().     if (!logonLatch.await(5L, TimeUnit.SECONDS)) {         throw new IllegalStateException("Logon did not succeed").     }     // Send a request to the order status web service.     // Verify that the response is a JSON response.     URL orderStatusUrl = new URL(orderStatusServiceUrl + "?sessionID=FIX.4.2:TRADER->MARKET&orderID=abc").     URLConnection connection = orderStatusUrl.openConnection().     BufferedReader orderStatusReply = IOHelper.buffered(new InputStreamReader(connection.getInputStream())).     String line = orderStatusReply.readLine().     if (!line.equals("\"message\": {")) {         throw new Exception("Don't appear to be a JSON response").     } else {         StringBuilder sb = new StringBuilder().         while (line != null) {             sb.append(line).             sb.append('\n').             line = orderStatusReply.readLine().         }         LOG.info("Web reply:\n" + sb).     }     orderStatusReply.close().     LOG.info("Shutting down Camel context").     context.stop().     LOG.info("Example complete"). }
false;public;1;19;;public void transform(Exchange exchange) throws FieldNotFound {     // For the reply take the reverse sessionID into the account, see org.apache.camel.component.quickfixj.MessagePredicate     String requestSessionID = exchange.getIn().getHeader("sessionID", String.class).     String replySessionID = "FIX.4.2:MARKET->TRADER".     LOG.info("Given the requestSessionID '{}' calculated the replySessionID as '{}'", requestSessionID, replySessionID).     String orderID = exchange.getIn().getHeader("orderID", String.class).     OrderStatusRequest request = new OrderStatusRequest(new ClOrdID("XYZ"), new Symbol("GOOG"), new Side(Side.BUY)).     request.set(new OrderID(orderID)).     // Look for a reply execution report back to the requester session     // and having the requested OrderID. This is a loose correlation but the best     // we can do with FIX 4.2. Newer versions of FIX have an optional explicit correlation field.     exchange.setProperty(QuickfixjProducer.CORRELATION_CRITERIA_KEY, new MessagePredicate(new SessionID(replySessionID), MsgType.EXECUTION_REPORT).withField(OrderID.FIELD, request.getString(OrderID.FIELD))).     exchange.getIn().setBody(request). }
false;public;1;13;;public ExecutionReport getOrderStatus(OrderStatusRequest request) throws FieldNotFound {     LOG.info("Received order status request for orderId=" + request.getOrderID().getValue()).     return new ExecutionReport(request.getOrderID(), new ExecID(UUID.randomUUID().toString()), new ExecTransType(ExecTransType.STATUS), new ExecType(ExecType.REJECTED), new OrdStatus(OrdStatus.REJECTED), new Symbol("GOOG"), new Side(Side.BUY), new LeavesQty(100), new CumQty(0), new AvgPx(0)). }
false;public;1;3;;public String route(@Header("sessionID") String sessionID) {     return String.format("quickfix:examples/inprocess.cfg?sessionID=%s", sessionID). }
