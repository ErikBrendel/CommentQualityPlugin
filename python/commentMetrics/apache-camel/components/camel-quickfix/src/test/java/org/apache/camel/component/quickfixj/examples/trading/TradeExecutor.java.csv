commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setAlwaysFillLimitOrders(boolean alwaysFillLimitOrders) {     this.alwaysFillLimitOrders = alwaysFillLimitOrders. }
false;public;1;3;;public void setMarketQuoteProvider(MarketQuoteProvider marketQuoteProvider) {     this.marketQuoteProvider = marketQuoteProvider. }
false;public;1;3;;public void setValidOrderTypes(String validOrderTypes) {     setValidOrderTypes(new HashSet<>(Arrays.asList(validOrderTypes.split("\\s*,\\s*")))). }
false;public;1;3;;public void setValidOrderTypes(Set<String> validOrderTypes) {     this.validOrderTypes = validOrderTypes. }
false;public;1;3;;public void addListener(QuickfixjMessageListener listener) {     listeners.add(listener). }
false;public;1;3;;public void removeListener(QuickfixjMessageListener listener) {     listeners.remove(listener). }
false;public;1;21;;public void execute(final Message message) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {     final SessionID sessionID = MessageUtils.getSessionID(message).     try {         if (message instanceof quickfix.fix40.NewOrderSingle) {             onMessage((quickfix.fix40.NewOrderSingle) message, sessionID).         } else if (message instanceof quickfix.fix41.NewOrderSingle) {             onMessage((quickfix.fix41.NewOrderSingle) message, sessionID).         } else if (message instanceof quickfix.fix42.NewOrderSingle) {             onMessage((quickfix.fix42.NewOrderSingle) message, sessionID).         } else if (message instanceof quickfix.fix43.NewOrderSingle) {             onMessage((quickfix.fix43.NewOrderSingle) message, sessionID).         } else if (message instanceof quickfix.fix44.NewOrderSingle) {             onMessage((quickfix.fix44.NewOrderSingle) message, sessionID).         } else if (message instanceof quickfix.fix50.NewOrderSingle) {             onMessage((quickfix.fix50.NewOrderSingle) message, sessionID).         }     } catch (Exception e) {         LOG.error("Error submitting execution task", e).     } }
false;private;2;29;;private void onMessage(quickfix.fix40.NewOrderSingle order, SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {     try {         validateOrder(order).         OrderQty orderQty = order.getOrderQty().         Price price = getPrice(order).         quickfix.fix40.ExecutionReport accept = new quickfix.fix40.ExecutionReport(genOrderID(), genExecID(), new ExecTransType(ExecTransType.NEW), new OrdStatus(OrdStatus.NEW), order.getSymbol(), order.getSide(), orderQty, new LastShares(0), new LastPx(0), new CumQty(0), new AvgPx(0)).         accept.set(order.getClOrdID()).         sendMessage(sessionID, accept).         if (isOrderExecutable(order, price)) {             quickfix.fix40.ExecutionReport fill = new quickfix.fix40.ExecutionReport(genOrderID(), genExecID(), new ExecTransType(ExecTransType.NEW), new OrdStatus(OrdStatus.FILLED), order.getSymbol(), order.getSide(), orderQty, new LastShares(orderQty.getValue()), new LastPx(price.getValue()), new CumQty(orderQty.getValue()), new AvgPx(price.getValue())).             fill.set(order.getClOrdID()).             sendMessage(sessionID, fill).         }     } catch (RuntimeException e) {         LogUtil.logThrowable(sessionID, e.getMessage(), e).     } }
false;private;2;11;;private boolean isOrderExecutable(Message order, Price price) throws FieldNotFound {     if (order.getChar(OrdType.FIELD) == OrdType.LIMIT) {         BigDecimal limitPrice = new BigDecimal(order.getString(Price.FIELD)).         char side = order.getChar(Side.FIELD).         BigDecimal thePrice = new BigDecimal(price.getValue()).         return (side == Side.BUY && thePrice.compareTo(limitPrice) <= 0) || ((side == Side.SELL || side == Side.SELL_SHORT) && thePrice.compareTo(limitPrice) >= 0).     }     return true. }
false;private;1;19;;private Price getPrice(Message message) throws FieldNotFound {     Price price.     if (message.getChar(OrdType.FIELD) == OrdType.LIMIT && alwaysFillLimitOrders) {         price = new Price(message.getDouble(Price.FIELD)).     } else {         if (marketQuoteProvider == null) {             throw new RuntimeException("No market data provider specified for market order").         }         char side = message.getChar(Side.FIELD).         if (side == Side.BUY) {             price = new Price(marketQuoteProvider.getAsk(message.getString(Symbol.FIELD))).         } else if (side == Side.SELL || side == Side.SELL_SHORT) {             price = new Price(marketQuoteProvider.getBid(message.getString(Symbol.FIELD))).         } else {             throw new RuntimeException("Invalid order side: " + side).         }     }     return price. }
false;private;2;32;;private void sendMessage(SessionID sessionID, Message message) {     try {         Session session = Session.lookupSession(sessionID).         if (session == null) {             throw new SessionNotFound(sessionID.toString()).         }         DataDictionaryProvider provider = session.getDataDictionaryProvider().         if (provider != null) {             try {                 ApplVerID applVerID = getApplVerID(session, message).                 DataDictionary appDataDictionary = provider.getApplicationDataDictionary(applVerID).                 appDataDictionary.validate(message, true).             } catch (Exception e) {                 LogUtil.logThrowable(sessionID, "Outgoing message failed validation: " + e.getMessage(), e).                 return.             }         }         for (QuickfixjMessageListener listener : listeners) {             try {                 listener.onMessage(sessionID, message).             } catch (Throwable e) {                 LogUtil.logThrowable(sessionID, "Error while dispatching message", e).             }         }     } catch (SessionNotFound e) {         LOG.error(e.getMessage(), e).     } }
false;private;2;8;;private ApplVerID getApplVerID(Session session, Message message) {     String beginString = session.getSessionID().getBeginString().     if (FixVersions.BEGINSTRING_FIXT11.equals(beginString)) {         return new ApplVerID(ApplVerID.FIX50).     } else {         return MessageUtils.toApplVerID(beginString).     } }
false;private;2;30;;private void onMessage(quickfix.fix41.NewOrderSingle order, SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {     try {         validateOrder(order).         OrderQty orderQty = order.getOrderQty().         Price price = getPrice(order).         quickfix.fix41.ExecutionReport accept = new quickfix.fix41.ExecutionReport(genOrderID(), genExecID(), new ExecTransType(ExecTransType.NEW), new ExecType(ExecType.NEW), new OrdStatus(OrdStatus.NEW), order.getSymbol(), order.getSide(), orderQty, new LastShares(0), new LastPx(0), new LeavesQty(0), new CumQty(0), new AvgPx(0)).         accept.set(order.getClOrdID()).         sendMessage(sessionID, accept).         if (isOrderExecutable(order, price)) {             quickfix.fix41.ExecutionReport executionReport = new quickfix.fix41.ExecutionReport(genOrderID(), genExecID(), new ExecTransType(ExecTransType.NEW), new ExecType(ExecType.FILL), new OrdStatus(OrdStatus.FILLED), order.getSymbol(), order.getSide(), orderQty, new LastShares(orderQty.getValue()), new LastPx(price.getValue()), new LeavesQty(0), new CumQty(orderQty.getValue()), new AvgPx(price.getValue())).             executionReport.set(order.getClOrdID()).             sendMessage(sessionID, executionReport).         }     } catch (RuntimeException e) {         LogUtil.logThrowable(sessionID, e.getMessage(), e).     } }
false;private;2;31;;private void onMessage(quickfix.fix42.NewOrderSingle order, SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {     try {         validateOrder(order).         OrderQty orderQty = order.getOrderQty().         Price price = getPrice(order).         quickfix.fix42.ExecutionReport accept = new quickfix.fix42.ExecutionReport(genOrderID(), genExecID(), new ExecTransType(ExecTransType.NEW), new ExecType(ExecType.NEW), new OrdStatus(OrdStatus.NEW), order.getSymbol(), order.getSide(), new LeavesQty(0), new CumQty(0), new AvgPx(0)).         accept.set(order.getClOrdID()).         sendMessage(sessionID, accept).         if (isOrderExecutable(order, price)) {             quickfix.fix42.ExecutionReport executionReport = new quickfix.fix42.ExecutionReport(genOrderID(), genExecID(), new ExecTransType(ExecTransType.NEW), new ExecType(ExecType.FILL), new OrdStatus(OrdStatus.FILLED), order.getSymbol(), order.getSide(), new LeavesQty(0), new CumQty(orderQty.getValue()), new AvgPx(price.getValue())).             executionReport.set(order.getClOrdID()).             executionReport.set(orderQty).             executionReport.set(new LastShares(orderQty.getValue())).             executionReport.set(new LastPx(price.getValue())).             sendMessage(sessionID, executionReport).         }     } catch (RuntimeException e) {         LogUtil.logThrowable(sessionID, e.getMessage(), e).     } }
false;private;1;11;;private void validateOrder(Message order) throws IncorrectTagValue, FieldNotFound {     OrdType ordType = new OrdType(order.getChar(OrdType.FIELD)).     if (!validOrderTypes.contains(Character.toString(ordType.getValue()))) {         LOG.error("Order type not in ValidOrderTypes setting").         throw new IncorrectTagValue(ordType.getField()).     }     if (ordType.getValue() == OrdType.MARKET && marketQuoteProvider == null) {         LOG.error("DefaultMarketPrice setting not specified for market order").         throw new IncorrectTagValue(ordType.getField()).     } }
false;private;2;32;;private void onMessage(quickfix.fix43.NewOrderSingle order, SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {     try {         validateOrder(order).         OrderQty orderQty = order.getOrderQty().         Price price = getPrice(order).         quickfix.fix43.ExecutionReport accept = new quickfix.fix43.ExecutionReport(genOrderID(), genExecID(), new ExecType(ExecType.NEW), new OrdStatus(OrdStatus.NEW), order.getSide(), new LeavesQty(order.getOrderQty().getValue()), new CumQty(0), new AvgPx(0)).         accept.set(order.getClOrdID()).         accept.set(order.getSymbol()).         sendMessage(sessionID, accept).         if (isOrderExecutable(order, price)) {             quickfix.fix43.ExecutionReport executionReport = new quickfix.fix43.ExecutionReport(genOrderID(), genExecID(), new ExecType(ExecType.FILL), new OrdStatus(OrdStatus.FILLED), order.getSide(), new LeavesQty(0), new CumQty(orderQty.getValue()), new AvgPx(price.getValue())).             executionReport.set(order.getClOrdID()).             executionReport.set(order.getSymbol()).             executionReport.set(orderQty).             executionReport.set(new LastQty(orderQty.getValue())).             executionReport.set(new LastPx(price.getValue())).             sendMessage(sessionID, executionReport).         }     } catch (RuntimeException e) {         LogUtil.logThrowable(sessionID, e.getMessage(), e).     } }
false;private;2;32;;private void onMessage(quickfix.fix44.NewOrderSingle order, SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {     try {         validateOrder(order).         OrderQty orderQty = order.getOrderQty().         Price price = getPrice(order).         quickfix.fix44.ExecutionReport accept = new quickfix.fix44.ExecutionReport(genOrderID(), genExecID(), new ExecType(ExecType.NEW), new OrdStatus(OrdStatus.NEW), order.getSide(), new LeavesQty(order.getOrderQty().getValue()), new CumQty(0), new AvgPx(0)).         accept.set(order.getClOrdID()).         accept.set(order.getSymbol()).         sendMessage(sessionID, accept).         if (isOrderExecutable(order, price)) {             quickfix.fix44.ExecutionReport executionReport = new quickfix.fix44.ExecutionReport(genOrderID(), genExecID(), new ExecType(ExecType.FILL), new OrdStatus(OrdStatus.FILLED), order.getSide(), new LeavesQty(0), new CumQty(orderQty.getValue()), new AvgPx(price.getValue())).             executionReport.set(order.getClOrdID()).             executionReport.set(order.getSymbol()).             executionReport.set(orderQty).             executionReport.set(new LastQty(orderQty.getValue())).             executionReport.set(new LastPx(price.getValue())).             sendMessage(sessionID, executionReport).         }     } catch (RuntimeException e) {         LogUtil.logThrowable(sessionID, e.getMessage(), e).     } }
false;private;2;33;;private void onMessage(quickfix.fix50.NewOrderSingle order, SessionID sessionID) throws FieldNotFound, UnsupportedMessageType, IncorrectTagValue {     try {         validateOrder(order).         OrderQty orderQty = order.getOrderQty().         Price price = getPrice(order).         quickfix.fix50.ExecutionReport accept = new quickfix.fix50.ExecutionReport(genOrderID(), genExecID(), new ExecType(ExecType.NEW), new OrdStatus(OrdStatus.NEW), order.getSide(), new LeavesQty(order.getOrderQty().getValue()), new CumQty(0)).         accept.set(order.getClOrdID()).         accept.set(order.getSymbol()).         sendMessage(sessionID, accept).         if (isOrderExecutable(order, price)) {             quickfix.fix50.ExecutionReport executionReport = new quickfix.fix50.ExecutionReport(genOrderID(), genExecID(), new ExecType(ExecType.FILL), new OrdStatus(OrdStatus.FILLED), order.getSide(), new LeavesQty(0), new CumQty(orderQty.getValue())).             executionReport.set(order.getClOrdID()).             executionReport.set(order.getSymbol()).             executionReport.set(orderQty).             executionReport.set(new LastQty(orderQty.getValue())).             executionReport.set(new LastPx(price.getValue())).             executionReport.set(new AvgPx(price.getValue())).             sendMessage(sessionID, executionReport).         }     } catch (RuntimeException e) {         LogUtil.logThrowable(sessionID, e.getMessage(), e).     } }
false;public;0;3;;public OrderID genOrderID() {     return new OrderID(Integer.valueOf(++orderID).toString()). }
false;public;0;3;;public ExecID genExecID() {     return new ExecID(Integer.valueOf(++execID).toString()). }
false;public;1;4;;@Override public double getAsk(String symbol) {     return defaultMarketPrice. }
false;public;1;4;;@Override public double getBid(String symbol) {     return defaultMarketPrice. }
