commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before public void setUp() throws Exception {     settingsFile = File.createTempFile("quickfixj_test_", ".cfg").     tempdir = settingsFile.getParentFile().     URL[] urls = new URL[] { tempdir.toURI().toURL() }.     contextClassLoader = Thread.currentThread().getContextClassLoader().     ClassLoader testClassLoader = new URLClassLoader(urls, contextClassLoader).     Thread.currentThread().setContextClassLoader(testClassLoader).     sessionID = new SessionID(FixVersions.BEGINSTRING_FIX44, "FOO", "BAR").     settings = new SessionSettings().     settings.setString(Acceptor.SETTING_SOCKET_ACCEPT_PROTOCOL, ProtocolFactory.getTypeString(ProtocolFactory.VM_PIPE)).     settings.setString(Initiator.SETTING_SOCKET_CONNECT_PROTOCOL, ProtocolFactory.getTypeString(ProtocolFactory.VM_PIPE)).     settings.setBool(Session.SETTING_USE_DATA_DICTIONARY, false).     settings.setBool(QuickfixjEngine.SETTING_USE_JMX, false).     TestSupport.setSessionID(settings, sessionID). }
false;public;0;7;;@After public void tearDown() throws Exception {     Thread.currentThread().setContextClassLoader(contextClassLoader).     if (quickfixjEngine != null) {         quickfixjEngine.stop().     } }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void missingSettingsResource() throws Exception {     new QuickfixjEngine("quickfix:test", "bogus.cfg"). }
false;public;0;12;;@Test public void defaultInitiator() throws Exception {     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), instanceOf(SocketInitiator.class)).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertDefaultConfiguration(quickfixjEngine). }
false;public;0;13;;@Test public void threadPerSessionInitiator() throws Exception {     settings.setString(QuickfixjEngine.SETTING_THREAD_MODEL, QuickfixjEngine.ThreadModel.ThreadPerSession.toString()).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), instanceOf(ThreadedSocketInitiator.class)).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertDefaultConfiguration(quickfixjEngine). }
false;public;0;13;;@Test public void defaultAcceptor() throws Exception {     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.ACCEPTOR_CONNECTION_TYPE).     settings.setLong(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PORT, 1234).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), nullValue()).     assertThat(quickfixjEngine.getAcceptor(), instanceOf(SocketAcceptor.class)).     assertDefaultConfiguration(quickfixjEngine). }
false;public;0;14;;@Test public void threadPerSessionAcceptor() throws Exception {     settings.setString(QuickfixjEngine.SETTING_THREAD_MODEL, QuickfixjEngine.ThreadModel.ThreadPerSession.toString()).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.ACCEPTOR_CONNECTION_TYPE).     settings.setLong(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PORT, 1234).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), nullValue()).     assertThat(quickfixjEngine.getAcceptor(), instanceOf(ThreadedSocketAcceptor.class)).     assertDefaultConfiguration(quickfixjEngine). }
false;public;0;17;;@Test public void minimalInitiatorAndAcceptor() throws Exception {     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.ACCEPTOR_CONNECTION_TYPE).     settings.setLong(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PORT, 1234).     SessionID initiatorSessionID = new SessionID(FixVersions.BEGINSTRING_FIX44, "FARGLE", "BARGLE").     settings.setString(initiatorSessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     TestSupport.setSessionID(settings, initiatorSessionID).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), notNullValue()).     assertThat(quickfixjEngine.getAcceptor(), notNullValue()).     assertDefaultConfiguration(quickfixjEngine). }
false;public;0;16;;@Test public void inferFileStore() throws Exception {     settings.setString(FileStoreFactory.SETTING_FILE_STORE_PATH, tempdir.toString()).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), notNullValue()).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertThat(quickfixjEngine.getUri(), is("quickfix:test")).     assertThat(quickfixjEngine.getMessageStoreFactory(), instanceOf(FileStoreFactory.class)).     assertThat(quickfixjEngine.getLogFactory(), instanceOf(ScreenLogFactory.class)).     assertThat(quickfixjEngine.getMessageFactory(), instanceOf(DefaultMessageFactory.class)). }
false;public;0;18;;// NOTE This is a little strange. If the JDBC driver is set and no log settings are found, // then we use JDBC for both the message store and the log. @Test public void inferJdbcStoreAndLog() throws Exception {     // If there is a setting of the LOG_EVENT_TABLE, we should create a jdbcLogFactory for it     settings.setString(JdbcSetting.SETTING_JDBC_DRIVER, "driver").     settings.setString(JdbcSetting.SETTING_LOG_EVENT_TABLE, "table").     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), notNullValue()).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertThat(quickfixjEngine.getMessageStoreFactory(), instanceOf(JdbcStoreFactory.class)).     assertThat(quickfixjEngine.getLogFactory(), instanceOf(JdbcLogFactory.class)).     assertThat(quickfixjEngine.getMessageFactory(), instanceOf(DefaultMessageFactory.class)). }
false;public;0;18;;@Test public void inferJdbcStoreViaJNDI() throws Exception {     // If there is a setting of the LOG_EVENT_TABLE, we should create a jdbcLogFactory for it     settings.setString(JdbcSetting.SETTING_JDBC_DS_NAME, "ds_name").     settings.setString(JdbcSetting.SETTING_LOG_EVENT_TABLE, "table").     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), notNullValue()).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertThat(quickfixjEngine.getMessageStoreFactory(), instanceOf(JdbcStoreFactory.class)).     assertThat(quickfixjEngine.getLogFactory(), instanceOf(JdbcLogFactory.class)).     assertThat(quickfixjEngine.getMessageFactory(), instanceOf(DefaultMessageFactory.class)). }
false;public;0;10;;@Test public void ambiguousMessageStore() throws Exception {     settings.setString(FileStoreFactory.SETTING_FILE_STORE_PATH, tempdir.toString()).     settings.setString(JdbcSetting.SETTING_JDBC_DRIVER, "driver").     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     doAmbiguityTest("Ambiguous message store"). }
false;public;0;16;;@Test public void inferJdbcStoreWithInferredLog() throws Exception {     settings.setString(JdbcSetting.SETTING_JDBC_DRIVER, "driver").     settings.setBool(ScreenLogFactory.SETTING_LOG_EVENTS, true).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), notNullValue()).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertThat(quickfixjEngine.getMessageStoreFactory(), instanceOf(JdbcStoreFactory.class)).     assertThat(quickfixjEngine.getLogFactory(), instanceOf(ScreenLogFactory.class)).     assertThat(quickfixjEngine.getMessageFactory(), instanceOf(DefaultMessageFactory.class)). }
false;public;0;15;;@Test public void inferSleepycatStore() throws Exception {     settings.setString(SleepycatStoreFactory.SETTING_SLEEPYCAT_DATABASE_DIR, tempdir.toString()).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), notNullValue()).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertThat(quickfixjEngine.getMessageStoreFactory(), instanceOf(SleepycatStoreFactory.class)).     assertThat(quickfixjEngine.getLogFactory(), instanceOf(ScreenLogFactory.class)).     assertThat(quickfixjEngine.getMessageFactory(), instanceOf(DefaultMessageFactory.class)). }
false;public;0;15;;@Test public void inferFileLog() throws Exception {     settings.setString(FileLogFactory.SETTING_FILE_LOG_PATH, tempdir.toString()).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), notNullValue()).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertThat(quickfixjEngine.getMessageStoreFactory(), instanceOf(MemoryStoreFactory.class)).     assertThat(quickfixjEngine.getLogFactory(), instanceOf(FileLogFactory.class)).     assertThat(quickfixjEngine.getMessageFactory(), instanceOf(DefaultMessageFactory.class)). }
false;public;0;15;;@Test public void inferSlf4jLog() throws Exception {     settings.setString(SLF4JLogFactory.SETTING_EVENT_CATEGORY, "Events").     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     assertThat(quickfixjEngine.getInitiator(), notNullValue()).     assertThat(quickfixjEngine.getAcceptor(), nullValue()).     assertThat(quickfixjEngine.getMessageStoreFactory(), instanceOf(MemoryStoreFactory.class)).     assertThat(quickfixjEngine.getLogFactory(), instanceOf(SLF4JLogFactory.class)).     assertThat(quickfixjEngine.getMessageFactory(), instanceOf(DefaultMessageFactory.class)). }
false;public;0;10;;@Test public void ambiguousLog() throws Exception {     settings.setString(FileLogFactory.SETTING_FILE_LOG_PATH, tempdir.toString()).     settings.setBool(ScreenLogFactory.SETTING_LOG_EVENTS, true).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     doAmbiguityTest("Ambiguous log"). }
false;private;1;8;;private void doAmbiguityTest(String exceptionText) throws FieldConvertError, IOException, JMException {     try {         quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).         fail("Expected exception, but none raised").     } catch (ConfigError e) {         assertTrue(e.getMessage().contains(exceptionText)).     } }
false;public;0;17;;@Test public void useExplicitComponentImplementations() throws Exception {     settings.setString(SLF4JLogFactory.SETTING_EVENT_CATEGORY, "Events").     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     writeSettings().     MessageStoreFactory messageStoreFactory = Mockito.mock(MessageStoreFactory.class).     LogFactory logFactory = Mockito.mock(LogFactory.class).     MessageFactory messageFactory = Mockito.mock(MessageFactory.class).     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName(), messageStoreFactory, logFactory, messageFactory).     assertThat(quickfixjEngine.getMessageStoreFactory(), is(messageStoreFactory)).     assertThat(quickfixjEngine.getLogFactory(), is(logFactory)).     assertThat(quickfixjEngine.getMessageFactory(), is(messageFactory)). }
false;public;0;15;;@Test public void enableJmxForInitiator() throws Exception {     settings.setBool(QuickfixjEngine.SETTING_USE_JMX, true).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.INITIATOR_CONNECTION_TYPE).     settings.setLong(sessionID, Initiator.SETTING_SOCKET_CONNECT_PORT, 1234).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     quickfixjEngine.start().     MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer().     Set<ObjectName> n = mbeanServer.queryNames(new ObjectName("org.quickfixj:type=Connector,role=Initiator,*"), null).     assertFalse("QFJ mbean not registered", n.isEmpty()). }
false;public;0;15;;@Test public void enableJmxForAcceptor() throws Exception {     settings.setBool(QuickfixjEngine.SETTING_USE_JMX, true).     settings.setString(sessionID, SessionFactory.SETTING_CONNECTION_TYPE, SessionFactory.ACCEPTOR_CONNECTION_TYPE).     settings.setLong(sessionID, Acceptor.SETTING_SOCKET_ACCEPT_PORT, 1234).     writeSettings().     quickfixjEngine = new QuickfixjEngine("quickfix:test", settingsFile.getName()).     quickfixjEngine.start().     MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer().     Set<ObjectName> n = mbeanServer.queryNames(new ObjectName("org.quickfixj:type=Connector,role=Acceptor,*"), null).     assertFalse("QFJ mbean not registered", n.isEmpty()). }
false;public;0;13;;@Test public void sessionEvents() throws Exception {     SessionID acceptorSessionID = new SessionID(FixVersions.BEGINSTRING_FIX42, "MARKET", "TRADER").     SessionID initiatorSessionID = new SessionID(FixVersions.BEGINSTRING_FIX42, "TRADER", "MARKET").     quickfixjEngine = new QuickfixjEngine("quickfix:test", "examples/inprocess.cfg").     doLogonEventsTest(acceptorSessionID, initiatorSessionID, quickfixjEngine).     doApplicationMessageEventsTest(acceptorSessionID, initiatorSessionID, quickfixjEngine).     doLogoffEventsTest(acceptorSessionID, initiatorSessionID, quickfixjEngine). }
false;public,synchronized;3;7;;@Override public synchronized void onEvent(QuickfixjEventCategory eventCategory, SessionID sessionID, Message message) {     events.add(new EventRecord(eventCategory, sessionID, message)).     if (eventCategory == QuickfixjEventCategory.SessionLogon) {         logonLatch.countDown().     } }
false;private;3;36;;private void doLogonEventsTest(SessionID acceptorSessionID, SessionID initiatorSessionID, QuickfixjEngine quickfixjEngine) throws Exception {     final List<EventRecord> events = new ArrayList<>().     final CountDownLatch logonLatch = new CountDownLatch(2).     QuickfixjEventListener logonListener = new QuickfixjEventListener() {          @Override         public synchronized void onEvent(QuickfixjEventCategory eventCategory, SessionID sessionID, Message message) {             events.add(new EventRecord(eventCategory, sessionID, message)).             if (eventCategory == QuickfixjEventCategory.SessionLogon) {                 logonLatch.countDown().             }         }     }.     quickfixjEngine.addEventListener(logonListener).     quickfixjEngine.start().     assertTrue("Logons not completed", logonLatch.await(5000, TimeUnit.MILLISECONDS)).     quickfixjEngine.removeEventListener(logonListener).     assertThat(events.size(), is(8)).     // The session events will arrive out of order as the event callbacks happen in the context of different threads so that the asserts     // below must cater for that, that's do not assert on the order of the arrived events but just do assert on their existence. for this     // to work we have've defined a relaxed comparison about the messages being sent, see the EventRecord.equals() method     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.SessionCreated, acceptorSessionID, null))).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.SessionCreated, initiatorSessionID, null))).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.AdminMessageSent, initiatorSessionID, new Message()))).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.AdminMessageReceived, acceptorSessionID, new Message()))).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.AdminMessageSent, acceptorSessionID, new Message()))).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.AdminMessageReceived, initiatorSessionID, new Message()))).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.SessionLogon, initiatorSessionID, null))).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.SessionLogon, acceptorSessionID, null))). }
false;public,synchronized;3;8;;@Override public synchronized void onEvent(QuickfixjEventCategory eventCategory, SessionID sessionID, Message message) {     EventRecord event = new EventRecord(eventCategory, sessionID, message).     events.add(event).     if (eventCategory == QuickfixjEventCategory.AppMessageReceived) {         messageLatch.countDown().     } }
false;private;3;36;;private void doApplicationMessageEventsTest(SessionID acceptorSessionID, SessionID initiatorSessionID, QuickfixjEngine quickfixjEngine) throws SessionNotFound, InterruptedException, FieldNotFound {     final List<EventRecord> events = new ArrayList<>().     final CountDownLatch messageLatch = new CountDownLatch(1).     QuickfixjEventListener messageListener = new QuickfixjEventListener() {          @Override         public synchronized void onEvent(QuickfixjEventCategory eventCategory, SessionID sessionID, Message message) {             EventRecord event = new EventRecord(eventCategory, sessionID, message).             events.add(event).             if (eventCategory == QuickfixjEventCategory.AppMessageReceived) {                 messageLatch.countDown().             }         }     }.     quickfixjEngine.addEventListener(messageListener).     Email email = TestSupport.createEmailMessage("Test").     Session.sendToTarget(email, initiatorSessionID).     assertTrue("Application message not received", messageLatch.await(5000, TimeUnit.MILLISECONDS)).     quickfixjEngine.removeEventListener(messageListener).     assertThat(events.size(), is(2)).     EventRecord sendEvent = new EventRecord(QuickfixjEventCategory.AppMessageSent, initiatorSessionID, new Message()).     assertTrue(events.contains(sendEvent)).     int sendEventIndex = events.indexOf(sendEvent).     assertThat(events.get(sendEventIndex).message.getHeader().getString(MsgType.FIELD), is(MsgType.EMAIL)).     EventRecord receiveEvent = new EventRecord(QuickfixjEventCategory.AppMessageReceived, acceptorSessionID, new Message()).     assertTrue(events.contains(receiveEvent)).     int receiveEventIndex = events.indexOf(receiveEvent).     assertThat(events.get(receiveEventIndex).message.getHeader().getString(MsgType.FIELD), is(MsgType.EMAIL)). }
false;public,synchronized;3;8;;@Override public synchronized void onEvent(QuickfixjEventCategory eventCategory, SessionID sessionID, Message message) {     EventRecord event = new EventRecord(eventCategory, sessionID, message).     events.add(event).     if (eventCategory == QuickfixjEventCategory.SessionLogoff) {         logoffLatch.countDown().     } }
false;private;3;28;;private void doLogoffEventsTest(SessionID acceptorSessionID, SessionID initiatorSessionID, QuickfixjEngine quickfixjEngine) throws Exception {     final List<EventRecord> events = new ArrayList<>().     final CountDownLatch logoffLatch = new CountDownLatch(2).     QuickfixjEventListener logoffListener = new QuickfixjEventListener() {          @Override         public synchronized void onEvent(QuickfixjEventCategory eventCategory, SessionID sessionID, Message message) {             EventRecord event = new EventRecord(eventCategory, sessionID, message).             events.add(event).             if (eventCategory == QuickfixjEventCategory.SessionLogoff) {                 logoffLatch.countDown().             }         }     }.     quickfixjEngine.addEventListener(logoffListener).     quickfixjEngine.stop().     assertTrue("Logoffs not received", logoffLatch.await(5000, TimeUnit.MILLISECONDS)).     quickfixjEngine.removeEventListener(logoffListener).     assertThat(events.size(), is(6)).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.SessionLogoff, acceptorSessionID, null))).     assertTrue(events.contains(new EventRecord(QuickfixjEventCategory.SessionLogoff, initiatorSessionID, null))). }
false;public;0;10;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + (eventCategory == null ? 0 : eventCategory.hashCode()).     result = prime * result + (sessionID == null ? 0 : sessionID.hashCode()).     result = prime * result + (message == null ? 1231 : 1237).     return result. }
false;public;1;19;;@Override public boolean equals(Object obj) {     if (!(obj instanceof EventRecord)) {         return false.     }     EventRecord other = (EventRecord) obj.     boolean answer = equal(eventCategory, other.eventCategory) && equal(sessionID, other.sessionID).     // this is required so that we can properly assert on the events being fired     if (message == null) {         answer &= other.message == null.     } else {         answer &= other.message != null.     }     return answer. }
false;public;0;4;;@Override public String toString() {     return "EventRecord [eventCategory=" + eventCategory + ", sessionID=" + sessionID + ", message=" + message + "]". }
false;private;1;9;;private void assertDefaultConfiguration(QuickfixjEngine quickfixjEngine) throws Exception {     assertThat(quickfixjEngine.getMessageStoreFactory(), instanceOf(MemoryStoreFactory.class)).     assertThat(quickfixjEngine.getLogFactory(), instanceOf(ScreenLogFactory.class)).     assertThat(quickfixjEngine.getMessageFactory(), instanceOf(DefaultMessageFactory.class)).     MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer().     Set<ObjectName> names = mbeanServer.queryNames(new ObjectName("org.quickfixj:*"), null).     assertTrue("QFJ Connector/Initiator mbeans should not have been registered", names.isEmpty()). }
false;private;0;3;;private void writeSettings() throws IOException {     TestSupport.writeSettings(settings, settingsFile). }
