commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public Thread newThread(Runnable r) {     Thread thread = new Thread(r, "Trade Executor").     thread.setDaemon(true).     return thread. }
false;protected;3;12;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     synchronized (endpoints) {         Endpoint endpoint = endpoints.get(uri).         if (endpoint == null) {             endpoint = new TradeExecutorEndpoint(uri, new TradeExecutor()).             endpoints.put(uri, (TradeExecutorEndpoint) endpoint).             LOG.info("Created trade executor: " + uri).         }         return endpoint.     } }
false;public;2;19;;@Override public void onMessage(SessionID sessionID, Message message) throws Exception {     // Inject session ID into message so producer will know where to send it     Header header = message.getHeader().     setOptionalField(header, sessionID, SenderCompID.FIELD, sessionID.getTargetCompID()).     setOptionalField(header, sessionID, SenderSubID.FIELD, sessionID.getTargetSubID()).     setOptionalField(header, sessionID, SenderLocationID.FIELD, sessionID.getTargetLocationID()).     setOptionalField(header, sessionID, TargetCompID.FIELD, sessionID.getSenderCompID()).     setOptionalField(header, sessionID, TargetSubID.FIELD, sessionID.getSenderSubID()).     setOptionalField(header, sessionID, TargetLocationID.FIELD, sessionID.getSenderLocationID()).     Exchange exchange = QuickfixjConverters.toExchange(TradeExecutorEndpoint.this, sessionID, message, QuickfixjEventCategory.AppMessageReceived).     for (Processor processor : processors) {         processor.process(exchange).     } }
false;private;4;5;;private void setOptionalField(Header header, SessionID sessionID, int tag, String value) {     if (!ObjectHelper.isEmpty(value)) {         header.setString(tag, value).     } }
false;public;0;8;;@Override public void run() {     try {         tradeExecutor.execute(exchange.getIn().getMandatoryBody(Message.class)).     } catch (Exception e) {         log.error("Error during trade execution", e).     } }
false;public;1;13;;@Override public void process(final Exchange exchange) throws Exception {     executor.execute(new Runnable() {          @Override         public void run() {             try {                 tradeExecutor.execute(exchange.getIn().getMandatoryBody(Message.class)).             } catch (Exception e) {                 log.error("Error during trade execution", e).             }         }     }). }
false;public;0;18;;@Override public Producer createProducer() throws Exception {     return new DefaultProducer(this) {          @Override         public void process(final Exchange exchange) throws Exception {             executor.execute(new Runnable() {                  @Override                 public void run() {                     try {                         tradeExecutor.execute(exchange.getIn().getMandatoryBody(Message.class)).                     } catch (Exception e) {                         log.error("Error during trade execution", e).                     }                 }             }).         }     }. }
false;protected;0;4;;@Override protected void doStart() throws Exception {     processors.add(getProcessor()). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     processors.remove(getProcessor()). }
false;public;1;14;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return new DefaultConsumer(this, processor) {          @Override         protected void doStart() throws Exception {             processors.add(getProcessor()).         }          @Override         protected void doStop() throws Exception {             processors.remove(getProcessor()).         }     }. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
