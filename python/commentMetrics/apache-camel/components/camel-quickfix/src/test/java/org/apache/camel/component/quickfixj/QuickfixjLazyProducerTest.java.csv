commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Before public void setUp() throws Exception {     mockExchange = Mockito.mock(Exchange.class).     mockCamelMessage = Mockito.mock(org.apache.camel.Message.class).     Mockito.when(mockExchange.getIn()).thenReturn(mockCamelMessage).     Mockito.when(mockExchange.getPattern()).thenReturn(ExchangePattern.InOnly).     quickfixjEngine = TestSupport.createEngine(true).     endpoint = Mockito.spy(new QuickfixjEndpoint(quickfixjEngine, "", new QuickfixjComponent())).     inboundFixMessage = new Message().     inboundFixMessage.getHeader().setString(BeginString.FIELD, FixVersions.BEGINSTRING_FIX44).     inboundFixMessage.getHeader().setString(SenderCompID.FIELD, "SENDER").     inboundFixMessage.getHeader().setString(TargetCompID.FIELD, "TARGET").     sessionID = MessageUtils.getSessionID(inboundFixMessage).     Mockito.when(mockCamelMessage.getBody(Message.class)).thenReturn(inboundFixMessage).     Mockito.when(endpoint.getSessionID()).thenReturn(sessionID).     producer = Mockito.spy(new QuickfixjProducer(endpoint)). }
false;public;0;17;;@Test public void processWithLazyEngine() throws Exception {     QuickfixjEngine engine = (QuickfixjEngine) ReflectionTestUtils.getField(endpoint, "engine").     assertThat(engine.isInitialized(), is(false)).     assertThat(engine.isStarted(), is(false)).     // Session mockSession = Mockito.spy(TestSupport.createSession(sessionID)).     // Mockito.doReturn(mockSession).when(producer).getSession(MessageUtils.getSessionID(inboundFixMessage)).     // Mockito.doReturn(true).when(mockSession).send(Matchers.isA(Message.class)).     producer.process(mockExchange).     assertThat(engine.isInitialized(), is(true)).     assertThat(engine.isStarted(), is(true)). //  // Mockito.verify(mockExchange, Mockito.never()).setException(Matchers.isA(IllegalStateException.class)). // Mockito.verify(mockSession).send(inboundFixMessage). }
