commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void main(String[] args) throws Exception {     new AuthenticationExample().run(). }
false;public;0;23;;@Override public void configure() throws Exception {     // Modify the outgoing logon message to add a password     // The modified message will be sent from the FIX engine when the message exchange completes     from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET").filter(PredicateBuilder.and(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageSent), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))).bean(new CredentialInjector("PASSWORD")).     // Release latch when the trader received a logout message     from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET").filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogoff)).bean(new CountDownLatchDecrementer("logout", logoutLatch)).     // Reject all logons on market side     // Demonstrates how to validate logons     from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER").filter(PredicateBuilder.and(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageReceived), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))).bean(new LogonAuthenticator()). }
false;public;0;44;;public void run() throws Exception {     DefaultCamelContext context = new DefaultCamelContext().     final CountDownLatch logoutLatch = new CountDownLatch(1).     RouteBuilder routes = new RouteBuilder() {          @Override         public void configure() throws Exception {             // Modify the outgoing logon message to add a password             // The modified message will be sent from the FIX engine when the message exchange completes             from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET").filter(PredicateBuilder.and(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageSent), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))).bean(new CredentialInjector("PASSWORD")).             // Release latch when the trader received a logout message             from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET").filter(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.SessionLogoff)).bean(new CountDownLatchDecrementer("logout", logoutLatch)).             // Reject all logons on market side             // Demonstrates how to validate logons             from("quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER").filter(PredicateBuilder.and(header(QuickfixjEndpoint.EVENT_CATEGORY_KEY).isEqualTo(QuickfixjEventCategory.AdminMessageReceived), header(QuickfixjEndpoint.MESSAGE_TYPE_KEY).isEqualTo(MsgType.LOGON))).bean(new LogonAuthenticator()).         }     }.     context.addRoutes(routes).     LOG.info("Starting Camel context").     context.start().     if (!logoutLatch.await(5L, TimeUnit.SECONDS)) {         throw new IllegalStateException("Logout was not received").     }     context.stop().     LOG.info("Example complete"). }
false;public;1;8;;public void authenticate(Exchange exchange) throws RejectLogon, CamelExchangeException, FieldNotFound {     LOG.info("Acceptor is rejecting logon for " + exchange.getIn().getHeader(QuickfixjEndpoint.SESSION_ID_KEY)).     Message message = exchange.getIn().getMandatoryBody(Message.class).     if (message.isSetField(RawData.FIELD)) {         LOG.info("Invalid password: " + message.getString(RawData.FIELD)).     }     throw new RejectLogon("Rejecting logon for test purposes"). }
false;public;1;6;;public void inject(Exchange exchange) throws CamelExchangeException {     LOG.info("Injecting password into outgoing logon message").     Message message = exchange.getIn().getMandatoryBody(Message.class).     message.setString(RawData.FIELD, password).     message.setInt(RawDataLength.FIELD, password.length()). }
