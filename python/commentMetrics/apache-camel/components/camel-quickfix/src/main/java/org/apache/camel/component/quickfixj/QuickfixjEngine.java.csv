commented;modifiers;parameterAmount;loc;comment;code
true;;0;66;/**  * Initializes the engine on demand. May be called immediately in constructor or when needed.  * If initializing later, it should be started afterwards.  */ ;/**  * Initializes the engine on demand. May be called immediately in constructor or when needed.  * If initializing later, it should be started afterwards.  */ void initializeEngine() throws ConfigError, FieldConvertError, JMException {     if (messageFactory == null) {         messageFactory = new DefaultMessageFactory().     }     if (sessionLogFactory == null) {         sessionLogFactory = inferLogFactory(settings).     }     if (messageStoreFactory == null) {         messageStoreFactory = inferMessageStoreFactory(settings).     }     // Set default session schedule if not specified in configuration     if (!settings.isSetting(Session.SETTING_START_TIME)) {         settings.setString(Session.SETTING_START_TIME, DEFAULT_START_TIME).     }     if (!settings.isSetting(Session.SETTING_END_TIME)) {         settings.setString(Session.SETTING_END_TIME, DEFAULT_END_TIME).     }     // Default heartbeat interval     if (!settings.isSetting(Session.SETTING_HEARTBTINT)) {         settings.setLong(Session.SETTING_HEARTBTINT, DEFAULT_HEARTBTINT).     }     // Allow specification of the QFJ threading model     ThreadModel threadModel = ThreadModel.ThreadPerConnector.     if (settings.isSetting(SETTING_THREAD_MODEL)) {         threadModel = ThreadModel.valueOf(settings.getString(SETTING_THREAD_MODEL)).     }     if (settings.isSetting(SETTING_USE_JMX) && settings.getBool(SETTING_USE_JMX)) {         log.info("Enabling JMX for QuickFIX/J").         jmxExporter = new JmxExporter().     } else {         jmxExporter = null.     }     // From original component implementation...     // To avoid this exception in OSGi platform     // java.lang.NoClassDefFoundError: quickfix/fix41/MessageFactory     ClassLoader ccl = Thread.currentThread().getContextClassLoader().     try {         Thread.currentThread().setContextClassLoader(getClass().getClassLoader()).         if (isConnectorRole(settings, SessionFactory.ACCEPTOR_CONNECTION_TYPE)) {             acceptor = createAcceptor(new Dispatcher(), settings, messageStoreFactory, sessionLogFactory, messageFactory, threadModel).         } else {             acceptor = null.         }         if (isConnectorRole(settings, SessionFactory.INITIATOR_CONNECTION_TYPE)) {             initiator = createInitiator(new Dispatcher(), settings, messageStoreFactory, sessionLogFactory, messageFactory, threadModel).         } else {             initiator = null.         }         if (acceptor == null && initiator == null) {             throw new ConfigError("No connector role").         }     } finally {         Thread.currentThread().setContextClassLoader(ccl).     }     initialized.set(true). }
false;static;1;7;;static SessionSettings loadSettings(String settingsResourceName) throws ConfigError {     InputStream inputStream = ObjectHelper.loadResourceAsStream(settingsResourceName).     if (inputStream == null) {         throw new IllegalArgumentException("Could not load " + settingsResourceName).     }     return new SessionSettings(inputStream). }
false;protected;0;15;;@Override protected void doStart() throws Exception {     if (acceptor != null) {         acceptor.start().         if (jmxExporter != null) {             acceptorObjectName = jmxExporter.register(acceptor).         }     }     if (initiator != null) {         initiator.start().         if (jmxExporter != null) {             initiatorObjectName = jmxExporter.register(initiator).         }     } }
false;protected;0;17;;@Override protected void doStop() throws Exception {     if (acceptor != null) {         acceptor.stop().         if (jmxExporter != null && acceptorObjectName != null) {             jmxExporter.getMBeanServer().unregisterMBean(acceptorObjectName).         }     }     if (initiator != null) {         initiator.stop().         if (jmxExporter != null && initiatorObjectName != null) {             jmxExporter.getMBeanServer().unregisterMBean(initiatorObjectName).         }     } }
false;protected;0;5;;@Override protected void doShutdown() throws Exception {     // also clear event listeners     eventListeners.clear(). }
false;private;6;14;;private Initiator createInitiator(Application application, SessionSettings settings, MessageStoreFactory messageStoreFactory, LogFactory sessionLogFactory, MessageFactory messageFactory, ThreadModel threadModel) throws ConfigError {     Initiator initiator.     if (threadModel == ThreadModel.ThreadPerSession) {         initiator = new ThreadedSocketInitiator(application, messageStoreFactory, settings, sessionLogFactory, messageFactory).     } else if (threadModel == ThreadModel.ThreadPerConnector) {         initiator = new SocketInitiator(application, messageStoreFactory, settings, sessionLogFactory, messageFactory).     } else {         throw new ConfigError("Unknown thread mode: " + threadModel).     }     return initiator. }
false;private;6;14;;private Acceptor createAcceptor(Application application, SessionSettings settings, MessageStoreFactory messageStoreFactory, LogFactory sessionLogFactory, MessageFactory messageFactory, ThreadModel threadModel) throws ConfigError {     Acceptor acceptor.     if (threadModel == ThreadModel.ThreadPerSession) {         acceptor = new ThreadedSocketAcceptor(application, messageStoreFactory, settings, sessionLogFactory, messageFactory).     } else if (threadModel == ThreadModel.ThreadPerConnector) {         acceptor = new SocketAcceptor(application, messageStoreFactory, settings, sessionLogFactory, messageFactory).     } else {         throw new ConfigError("Unknown thread mode: " + threadModel).     }     return acceptor. }
false;private;1;17;;private MessageStoreFactory inferMessageStoreFactory(SessionSettings settings) throws ConfigError {     Set<MessageStoreFactory> impliedMessageStoreFactories = new HashSet<>().     isJdbcStore(settings, impliedMessageStoreFactories).     isFileStore(settings, impliedMessageStoreFactories).     isSleepycatStore(settings, impliedMessageStoreFactories).     if (impliedMessageStoreFactories.size() > 1) {         throw new ConfigError("Ambiguous message store implied in configuration.").     }     MessageStoreFactory messageStoreFactory.     if (impliedMessageStoreFactories.size() == 1) {         messageStoreFactory = impliedMessageStoreFactories.iterator().next().     } else {         messageStoreFactory = new MemoryStoreFactory().     }     log.info("Inferring message store factory: {}", messageStoreFactory.getClass().getName()).     return messageStoreFactory. }
false;private;2;5;;private void isSleepycatStore(SessionSettings settings, Set<MessageStoreFactory> impliedMessageStoreFactories) {     if (settings.isSetting(SleepycatStoreFactory.SETTING_SLEEPYCAT_DATABASE_DIR)) {         impliedMessageStoreFactories.add(new SleepycatStoreFactory(settings)).     } }
false;private;2;5;;private void isFileStore(SessionSettings settings, Set<MessageStoreFactory> impliedMessageStoreFactories) {     if (settings.isSetting(FileStoreFactory.SETTING_FILE_STORE_PATH)) {         impliedMessageStoreFactories.add(new FileStoreFactory(settings)).     } }
false;private;2;5;;private void isJdbcStore(SessionSettings settings, Set<MessageStoreFactory> impliedMessageStoreFactories) {     if (settings.isSetting(JdbcSetting.SETTING_JDBC_DRIVER) || settings.isSetting(JdbcSetting.SETTING_JDBC_DS_NAME)) {         impliedMessageStoreFactories.add(new JdbcStoreFactory(settings)).     } }
false;private;1;19;;private LogFactory inferLogFactory(SessionSettings settings) throws ConfigError {     Set<LogFactory> impliedLogFactories = new HashSet<>().     isFileLog(settings, impliedLogFactories).     isScreenLog(settings, impliedLogFactories).     isSL4JLog(settings, impliedLogFactories).     isJdbcLog(settings, impliedLogFactories).     if (impliedLogFactories.size() > 1) {         throw new ConfigError("Ambiguous log factory implied in configuration").     }     LogFactory sessionLogFactory.     if (impliedLogFactories.size() == 1) {         sessionLogFactory = impliedLogFactories.iterator().next().     } else {         // Default         sessionLogFactory = new ScreenLogFactory(settings).     }     log.info("Inferring log factory: {}", sessionLogFactory.getClass().getName()).     return sessionLogFactory. }
false;private;2;7;;private void isScreenLog(SessionSettings settings, Set<LogFactory> impliedLogFactories) {     if (settings.isSetting(ScreenLogFactory.SETTING_LOG_EVENTS) || settings.isSetting(ScreenLogFactory.SETTING_LOG_INCOMING) || settings.isSetting(ScreenLogFactory.SETTING_LOG_OUTGOING)) {         impliedLogFactories.add(new ScreenLogFactory(settings)).     } }
false;private;2;5;;private void isFileLog(SessionSettings settings, Set<LogFactory> impliedLogFactories) {     if (settings.isSetting(FileLogFactory.SETTING_FILE_LOG_PATH)) {         impliedLogFactories.add(new FileLogFactory(settings)).     } }
false;private;2;6;;private void isJdbcLog(SessionSettings settings, Set<LogFactory> impliedLogFactories) {     if ((settings.isSetting(JdbcSetting.SETTING_JDBC_DRIVER) || settings.isSetting(JdbcSetting.SETTING_JDBC_DS_NAME)) && settings.isSetting(JdbcSetting.SETTING_LOG_EVENT_TABLE)) {         impliedLogFactories.add(new JdbcLogFactory(settings)).     } }
false;private;2;8;;private void isSL4JLog(SessionSettings settings, Set<LogFactory> impliedLogFactories) {     for (Object key : settings.getDefaultProperties().keySet()) {         if (key.toString().startsWith("SLF4J")) {             impliedLogFactories.add(new SLF4JLogFactory(settings)).             return.         }     } }
false;private;2;11;;private boolean isConnectorRole(SessionSettings settings, String connectorRole) throws ConfigError {     boolean hasRole = false.     Iterator<SessionID> sessionIdItr = settings.sectionIterator().     while (sessionIdItr.hasNext()) {         if (connectorRole.equals(settings.getString(sessionIdItr.next(), SessionFactory.SETTING_CONNECTION_TYPE))) {             hasRole = true.             break.         }     }     return hasRole. }
false;public;1;3;;public void addEventListener(QuickfixjEventListener listener) {     eventListeners.add(listener). }
false;public;1;3;;public void removeEventListener(QuickfixjEventListener listener) {     eventListeners.remove(listener). }
false;public;2;14;;@Override public void fromAdmin(Message message, SessionID sessionID) throws FieldNotFound, IncorrectDataFormat, IncorrectTagValue, RejectLogon {     try {         dispatch(QuickfixjEventCategory.AdminMessageReceived, sessionID, message).     } catch (RuntimeException e) {         throw e.     } catch (Exception e) {         rethrowIfType(e, FieldNotFound.class).         rethrowIfType(e, IncorrectDataFormat.class).         rethrowIfType(e, IncorrectTagValue.class).         rethrowIfType(e, RejectLogon.class).         throw new DispatcherException(e).     } }
false;public;2;14;;@Override public void fromApp(Message message, SessionID sessionID) throws FieldNotFound, IncorrectDataFormat, IncorrectTagValue, UnsupportedMessageType {     try {         dispatch(QuickfixjEventCategory.AppMessageReceived, sessionID, message).     } catch (RuntimeException e) {         throw e.     } catch (Exception e) {         rethrowIfType(e, FieldNotFound.class).         rethrowIfType(e, IncorrectDataFormat.class).         rethrowIfType(e, IncorrectTagValue.class).         rethrowIfType(e, UnsupportedMessageType.class).         throw new DispatcherException(e).     } }
false;public;1;8;;@Override public void onCreate(SessionID sessionID) {     try {         dispatch(QuickfixjEventCategory.SessionCreated, sessionID, null).     } catch (Exception e) {         throw new DispatcherException(e).     } }
false;public;1;8;;@Override public void onLogon(SessionID sessionID) {     try {         dispatch(QuickfixjEventCategory.SessionLogon, sessionID, null).     } catch (Exception e) {         throw new DispatcherException(e).     } }
false;public;1;8;;@Override public void onLogout(SessionID sessionID) {     try {         dispatch(QuickfixjEventCategory.SessionLogoff, sessionID, null).     } catch (Exception e) {         throw new DispatcherException(e).     } }
false;public;2;8;;@Override public void toAdmin(Message message, SessionID sessionID) {     try {         dispatch(QuickfixjEventCategory.AdminMessageSent, sessionID, message).     } catch (Exception e) {         throw new DispatcherException(e).     } }
false;public;2;8;;@Override public void toApp(Message message, SessionID sessionID) throws DoNotSend {     try {         dispatch(QuickfixjEventCategory.AppMessageSent, sessionID, message).     } catch (Exception e) {         throw new DispatcherException(e).     } }
false;private;2;5;;private <T extends Exception> void rethrowIfType(Exception e, Class<T> exceptionClass) throws T {     if (e.getClass() == exceptionClass) {         throw exceptionClass.cast(e).     } }
false;private;3;7;;private void dispatch(QuickfixjEventCategory quickfixjEventCategory, SessionID sessionID, Message message) throws Exception {     log.debug("FIX event dispatched: {} {}", quickfixjEventCategory, message != null ? message : "").     for (QuickfixjEventListener listener : eventListeners) {         // Exceptions propagate back to the FIX engine so sequence numbers can be adjusted         listener.onEvent(quickfixjEventCategory, sessionID, message).     } }
false;public;0;3;;public String getUri() {     return uri. }
false;public;0;3;;public MessageCorrelator getMessageCorrelator() {     return messageCorrelator. }
false;public;0;3;;public boolean isInitialized() {     return this.initialized.get(). }
false;public;0;3;;public boolean isLazy() {     return this.lazy. }
true;;0;3;// For Testing ;// For Testing Initiator getInitiator() {     return initiator. }
true;;0;3;// For Testing ;// For Testing Acceptor getAcceptor() {     return acceptor. }
true;;0;3;// For Testing ;// For Testing MessageStoreFactory getMessageStoreFactory() {     return messageStoreFactory. }
true;;0;3;// For Testing ;// For Testing LogFactory getLogFactory() {     return sessionLogFactory. }
true;;0;3;// For Testing ;// For Testing MessageFactory getMessageFactory() {     return messageFactory. }
