commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public Message call() throws Exception {     if (!correlationRule.getLatch().await(timeout, TimeUnit.MILLISECONDS)) {         throw new ExchangeTimedOutException(correlationRule.getExchange(), timeout).     }     return correlationRule.getReplyMessage(). }
false;public;2;21;;public Callable<Message> getReply(SessionID sessionID, Exchange exchange) throws InterruptedException, ExchangeTimedOutException {     MessagePredicate messageCriteria = (MessagePredicate) exchange.getProperty(QuickfixjProducer.CORRELATION_CRITERIA_KEY).     final MessageCorrelationRule correlationRule = new MessageCorrelationRule(exchange, sessionID, messageCriteria).     rules.add(correlationRule).     final long timeout = exchange.getProperty(QuickfixjProducer.CORRELATION_TIMEOUT_KEY, DEFAULT_CORRELATION_TIMEOUT, Long.class).     return new Callable<Message>() {          @Override         public Message call() throws Exception {             if (!correlationRule.getLatch().await(timeout, TimeUnit.MILLISECONDS)) {                 throw new ExchangeTimedOutException(correlationRule.getExchange(), timeout).             }             return correlationRule.getReplyMessage().         }     }. }
false;public;3;12;;@Override public void onEvent(QuickfixjEventCategory eventCategory, SessionID sessionID, Message message) throws Exception {     if (message != null) {         for (MessageCorrelationRule rule : rules) {             if (rule.getMessageCriteria().evaluate(message)) {                 rule.setReplyMessage(message).                 rules.remove(rule).                 rule.getLatch().countDown().             }         }     } }
false;public;1;3;;public void setReplyMessage(Message message) {     this.replyMessage = message. }
false;public;0;3;;public Message getReplyMessage() {     return replyMessage. }
false;public;0;3;;public CountDownLatch getLatch() {     return latch. }
false;public;0;3;;public Exchange getExchange() {     return exchange. }
false;public;0;3;;public MessagePredicate getMessageCriteria() {     return messageCriteria. }
