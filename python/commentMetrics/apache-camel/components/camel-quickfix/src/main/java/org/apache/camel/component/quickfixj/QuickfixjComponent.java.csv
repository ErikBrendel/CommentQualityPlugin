commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;48;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // Look up the engine instance based on the settings file ("remaining")     QuickfixjEngine engine.     synchronized (engineInstancesLock) {         QuickfixjEndpoint endpoint = endpoints.get(uri).         if (endpoint == null) {             engine = engines.get(remaining).             if (engine == null) {                 engine = provisionalEngines.get(remaining).             }             if (engine == null) {                 QuickfixjConfiguration configuration = configurations.get(remaining).                 SessionSettings settings.                 if (configuration != null) {                     settings = configuration.createSessionSettings().                 } else {                     settings = QuickfixjEngine.loadSettings(remaining).                 }                 Boolean lazyCreateEngineForEndpoint = super.getAndRemoveParameter(parameters, PARAMETER_LAZY_CREATE_ENGINE, Boolean.TYPE).                 if (lazyCreateEngineForEndpoint == null) {                     lazyCreateEngineForEndpoint = isLazyCreateEngines().                 }                 engine = new QuickfixjEngine(uri, settings, messageStoreFactory, logFactory, messageFactory, lazyCreateEngineForEndpoint).                 // automatic later when CamelContext has been started using the StartupListener                 if (getCamelContext().getStatus().isStarted()) {                     startQuickfixjEngine(engine).                     engines.put(remaining, engine).                 } else {                     // engines to be started later                     provisionalEngines.put(remaining, engine).                 }             }             endpoint = new QuickfixjEndpoint(engine, uri, this).             endpoint.setConfigurationName(remaining).             endpoint.setLazyCreateEngine(engine.isLazy()).             engine.addEventListener(endpoint).             endpoints.put(uri, endpoint).         }         return endpoint.     } }
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart(). // we defer starting quickfix engines till the onCamelContextStarted callback }
false;protected;0;10;;@Override protected void doStop() throws Exception {     // stop engines when stopping component     synchronized (engineInstancesLock) {         for (QuickfixjEngine engine : engines.values()) {             engine.stop().         }     }     super.doStop(). }
false;protected;0;8;;@Override protected void doShutdown() throws Exception {     // cleanup when shutting down     engines.clear().     provisionalEngines.clear().     endpoints.clear().     super.doShutdown(). }
false;private;1;8;;private void startQuickfixjEngine(QuickfixjEngine engine) throws Exception {     if (!engine.isLazy()) {         log.info("Starting QuickFIX/J engine: {}", engine.getUri()).         engine.start().     } else {         log.info("QuickFIX/J engine: {} will start lazily", engine.getUri()).     } }
true;;0;3;// Test Support ;// Test Support Map<String, QuickfixjEngine> getEngines() {     return Collections.unmodifiableMap(engines). }
true;;0;3;// Test Support ;// Test Support Map<String, QuickfixjEngine> getProvisionalEngines() {     return Collections.unmodifiableMap(provisionalEngines). }
true;public;1;3;/**  * To use the given MessageFactory  */ ;/**  * To use the given MessageFactory  */ public void setMessageFactory(MessageFactory messageFactory) {     this.messageFactory = messageFactory. }
true;public;1;3;/**  * To use the given LogFactory  */ ;/**  * To use the given LogFactory  */ public void setLogFactory(LogFactory logFactory) {     this.logFactory = logFactory. }
true;public;1;3;/**  * To use the given MessageStoreFactory  */ ;/**  * To use the given MessageStoreFactory  */ public void setMessageStoreFactory(MessageStoreFactory messageStoreFactory) {     this.messageStoreFactory = messageStoreFactory. }
false;public;0;3;;public Map<String, QuickfixjConfiguration> getConfigurations() {     return configurations. }
true;public;1;3;/**  * To use the given map of pre configured QuickFix configurations mapped to the key  */ ;/**  * To use the given map of pre configured QuickFix configurations mapped to the key  */ public void setConfigurations(Map<String, QuickfixjConfiguration> configurations) {     this.configurations = configurations. }
false;public;0;3;;public boolean isLazyCreateEngines() {     return this.lazyCreateEngines. }
true;public;1;3;/**  * If set to <code>true</code>, the engines will be created and started when needed (when first message  * is send)  */ ;/**  * If set to <code>true</code>, the engines will be created and started when needed (when first message  * is send)  */ public void setLazyCreateEngines(boolean lazyCreateEngines) {     this.lazyCreateEngines = lazyCreateEngines. }
false;public;2;14;;@Override public void onCamelContextStarted(CamelContext camelContext, boolean alreadyStarted) throws Exception {     // only start quickfix engines when CamelContext have finished starting     synchronized (engineInstancesLock) {         for (QuickfixjEngine engine : engines.values()) {             startQuickfixjEngine(engine).         }         for (Map.Entry<String, QuickfixjEngine> entry : provisionalEngines.entrySet()) {             startQuickfixjEngine(entry.getValue()).             engines.put(entry.getKey(), entry.getValue()).         }         provisionalEngines.clear().     } }
