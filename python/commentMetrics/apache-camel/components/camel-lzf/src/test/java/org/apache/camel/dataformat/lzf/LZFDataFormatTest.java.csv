commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testMarshalTextToLzf() throws Exception {     byte[] output = sendText("direct:textToLzf").     InputStream stream = new LZFInputStream(new ByteArrayInputStream(output)).     String result = IOConverter.toString(stream, null).     assertEquals("Uncompressed something different than compressed", TEXT, result). }
false;public;0;9;;@Test public void testUnMarshalTextToLzf() throws Exception {     MockEndpoint result = context.getEndpoint("mock:unMarshalTextToLzf", MockEndpoint.class).     result.expectedBodiesReceived(TEXT.getBytes("UTF-8")).     sendText("direct:unMarshalTextToLzf").     result.assertIsSatisfied(). }
false;public;0;9;;@Test public void testParallelUnMarshalTextToLzf() throws Exception {     MockEndpoint result = context.getEndpoint("mock:parallelUnMarshalTextToLzf", MockEndpoint.class).     result.expectedBodiesReceived(TEXT.getBytes("UTF-8")).     sendText("direct:parallelUnMarshalTextToLzf").     result.assertIsSatisfied(). }
false;public;0;16;;@Override public void configure() {     LZFDataFormat dataFormat = new LZFDataFormat().     dataFormat.setUsingParallelCompression(true).     from("direct:textToLzf").marshal().lzf().     from("direct:unMarshalTextToLzf").marshal().lzf().unmarshal().lzf().to("mock:unMarshalTextToLzf").     from("direct:parallelUnMarshalTextToLzf").marshal(dataFormat).unmarshal(dataFormat).to("mock:parallelUnMarshalTextToLzf"). }
false;protected;0;20;;protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             LZFDataFormat dataFormat = new LZFDataFormat().             dataFormat.setUsingParallelCompression(true).             from("direct:textToLzf").marshal().lzf().             from("direct:unMarshalTextToLzf").marshal().lzf().unmarshal().lzf().to("mock:unMarshalTextToLzf").             from("direct:parallelUnMarshalTextToLzf").marshal(dataFormat).unmarshal(dataFormat).to("mock:parallelUnMarshalTextToLzf").         }     }. }
false;private;1;3;;private byte[] sendText(String destination) throws Exception {     return (byte[]) template.requestBody(destination, TEXT.getBytes("UTF-8")). }
