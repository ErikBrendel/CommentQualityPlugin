commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testSynchronousProblemSolving() throws Exception {     CloudBalancingGenerator generator = new CloudBalancingGenerator(true).     final CloudBalance planningProblem = generator.createCloudBalance(4, 12).     assertNull(planningProblem.getScore()).     assertNull(planningProblem.getProcessList().get(0).getComputer()).     CloudBalance bestSolution = (CloudBalance) template.requestBody("direct:in", planningProblem).     assertEquals(4, bestSolution.getComputerList().size()).     assertEquals(12, bestSolution.getProcessList().size()).     assertNotNull(bestSolution.getScore()).     assertTrue(bestSolution.getScore().isFeasible()).     assertNotNull(bestSolution.getProcessList().get(0).getComputer()). }
false;public;0;8;;public void configure() {     from("direct:in").to("optaplanner:org/apache/camel/component/optaplanner/solverConfig.xml").     from("optaplanner:org/apache/camel/component/optaplanner/solverConfig.xml").to("log:com.mycompany.order?showAll=true&multiline=true").to("mock:result"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:in").to("optaplanner:org/apache/camel/component/optaplanner/solverConfig.xml").             from("optaplanner:org/apache/camel/component/optaplanner/solverConfig.xml").to("log:com.mycompany.order?showAll=true&multiline=true").to("mock:result").         }     }. }
