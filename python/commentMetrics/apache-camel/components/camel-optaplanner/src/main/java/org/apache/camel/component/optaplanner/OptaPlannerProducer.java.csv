commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() throws Exception {     if (configuration.isAsync()) {         executor = endpoint.getCamelContext().getExecutorServiceManager().newFixedThreadPool(this, endpoint.getEndpointUri(), configuration.getThreadPoolSize()).     }     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     if (executor != null) {         endpoint.getCamelContext().getExecutorServiceManager().shutdown(executor).         executor = null.     }     super.doStop(). }
false;public;0;8;;@Override public void run() {     try {         solver.solve(body).     } catch (Throwable e) {         LOGGER.error("Asynchronously solving failed for solverId ({})", solverId, e).     } }
false;public,synchronized;1;53;;@SuppressWarnings("unchecked") @Override public synchronized void process(Exchange exchange) throws Exception {     final Object body = exchange.getIn().getMandatoryBody().     final String solverId = getSolverId(exchange).     /*          * Keep for backward compatibility untill optaplanner version 8.0.0 not          * released After that the code '|| body instanceof Solution' need to be          * removed          */     if (body.getClass().isAnnotationPresent(PlanningSolution.class) || body instanceof Solution) {         if (isAsync(exchange)) {             LOGGER.debug("Asynchronously solving problem: [{}] with id [{}]", body, solverId).             final Solver<Object> solver = endpoint.getOrCreateSolver(solverId).             executor.submit(new Runnable() {                  @Override                 public void run() {                     try {                         solver.solve(body).                     } catch (Throwable e) {                         LOGGER.error("Asynchronously solving failed for solverId ({})", solverId, e).                     }                 }             }).         } else {             LOGGER.debug("Synchronously solving problem: [{}] with id [{}]", body, solverId).             Solver<Object> solver = endpoint.getSolver(solverId).             if (solver == null) {                 solver = endpoint.createSolver().             }             solver.solve(body).             populateResult(exchange, solver).         }     } else if (body instanceof ProblemFactChange) {         LOGGER.debug("Adding ProblemFactChange to solver: [{}] with id [{}]", body, solverId).         Solver<Object> solver = endpoint.getOrCreateSolver(solverId).         solver.addProblemFactChange((ProblemFactChange<Object>) body).         if (!isAsync(exchange)) {             while (!solver.isEveryProblemFactChangeProcessed()) {                 Thread.sleep(OptaPlannerConstants.IS_EVERY_PROBLEM_FACT_CHANGE_DELAY).             }         }         populateResult(exchange, solver).     } else {         LOGGER.debug("Retrieving best score for solver: [{}]", solverId).         Solver<Object> solver = endpoint.getSolver(solverId).         if (solver == null) {             throw new RuntimeException("Solver not found: " + solverId).         }         populateResult(exchange, solver).     } }
false;private;2;7;;private void populateResult(Exchange exchange, Solver<Object> solver) {     exchange.getIn().setBody(solver.getBestSolution()).     exchange.getIn().setHeader(OptaPlannerConstants.TIME_SPENT, solver.getTimeMillisSpent()).     exchange.getIn().setHeader(OptaPlannerConstants.IS_EVERY_PROBLEM_FACT_CHANGE_PROCESSED, solver.isEveryProblemFactChangeProcessed()).     exchange.getIn().setHeader(OptaPlannerConstants.IS_TERMINATE_EARLY, solver.isTerminateEarly()).     exchange.getIn().setHeader(OptaPlannerConstants.IS_SOLVING, solver.isSolving()). }
false;private;1;8;;private String getSolverId(Exchange exchange) throws Exception {     String solverId = exchange.getIn().getHeader(OptaPlannerConstants.SOLVER_ID, String.class).     if (solverId == null) {         solverId = configuration.getSolverId().     }     LOGGER.debug("SolverId: [{}]", solverId).     return solverId. }
false;private;1;4;;private boolean isAsync(Exchange exchange) {     Boolean isAsync = exchange.getIn().getHeader(OptaPlannerConstants.IS_ASYNC, Boolean.class).     return isAsync != null ? isAsync : configuration.isAsync(). }
