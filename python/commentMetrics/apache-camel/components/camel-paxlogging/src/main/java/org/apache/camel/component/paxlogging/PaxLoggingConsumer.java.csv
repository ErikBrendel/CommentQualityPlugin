commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void doAppend(final PaxLoggingEvent paxLoggingEvent) {     // in order to "force" the copy of properties (especially the MDC ones) in the local thread     paxLoggingEvent.getProperties().     sendExchange(paxLoggingEvent). }
false;protected;1;18;;protected void sendExchange(final PaxLoggingEvent paxLoggingEvent) {     Exchange exchange = endpoint.createExchange().     // TODO: populate exchange headers     exchange.getIn().setBody(paxLoggingEvent).     if (log.isTraceEnabled()) {         log.trace("PaxLogging {} is firing", endpoint.getAppender()).     }     try {         getProcessor().process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     // log exception if an exception occurred and was not handled     if (exchange.getException() != null) {         getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).     } }
false;protected;0;11;;@Override protected void doStart() throws Exception {     super.doStart().     // start the executor before the registration     executor = endpoint.getCamelContext().getExecutorServiceManager().newSingleThreadExecutor(this, "PaxLoggingEventTask").     Dictionary<String, String> props = new Hashtable<>().     props.put("org.ops4j.pax.logging.appender.name", endpoint.getAppender()).     registration = endpoint.getComponent().getBundleContext().registerService(PaxAppender.class.getName(), this, props). }
false;protected;0;11;;@Override protected void doStop() throws Exception {     if (registration != null) {         registration.unregister().     }     if (executor != null) {         endpoint.getCamelContext().getExecutorServiceManager().shutdownNow(executor).         executor = null.     }     super.doStop(). }
