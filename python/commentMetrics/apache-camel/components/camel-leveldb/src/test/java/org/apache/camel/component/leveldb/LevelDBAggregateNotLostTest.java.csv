commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data").     repo = new LevelDBAggregationRepository("repo1", "target/data/leveldb.dat").     super.setUp(). }
false;public;0;35;;@Test public void testLevelDBAggregateNotLost() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("ABCDE").     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "D", "id", 123).     template.sendBodyAndHeader("direct:start", "E", "id", 123).     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS).     Thread.sleep(1000).     String exchangeId = getMockEndpoint("mock:aggregated").getReceivedExchanges().get(0).getExchangeId().     // the exchange should be in the completed repo where we should be able to find it     final LevelDBFile levelDBFile = repo.getLevelDBFile().     final LevelDBCamelCodec codec = new LevelDBCamelCodec().     byte[] bf = levelDBFile.getDb().get(keyBuilder("repo1-completed", exchangeId)).     // assert the exchange was not lost and we got all the information still     assertNotNull(bf).     Exchange completed = codec.unmarshallExchange(context, new Buffer(bf)).     assertNotNull(completed).     // should retain the exchange id     assertEquals(exchangeId, completed.getExchangeId()).     assertEquals("ABCDE", completed.getIn().getBody()).     assertEquals(123, completed.getIn().getHeader("id")).     assertEquals("size", completed.getProperty(Exchange.AGGREGATED_COMPLETED_BY)).     assertEquals(5, completed.getProperty(Exchange.AGGREGATED_SIZE)).     // will store correlation keys as String     assertEquals("123", completed.getProperty(Exchange.AGGREGATED_CORRELATION_KEY)). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end(). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end().         }     }. }
false;public;2;10;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     return oldExchange. }
