commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data").     repo = new LevelDBAggregationRepository("repo1", "target/data/leveldb.dat").     super.setUp(). }
false;public;0;23;;@Test public void testLevelDBAggregateNotLostRemovedWhenConfirmed() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("ABCDE").     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "D", "id", 123).     template.sendBodyAndHeader("direct:start", "E", "id", 123).     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS).     Thread.sleep(1000).     String exchangeId = getMockEndpoint("mock:result").getReceivedExchanges().get(0).getExchangeId().     // the exchange should NOT be in the completed repo as it was confirmed     final LevelDBFile levelDBFile = repo.getLevelDBFile().     byte[] bf = levelDBFile.getDb().get(keyBuilder("repo1-completed", exchangeId)).     // assert the exchange was deleted     assertNull(bf). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:result").end(). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:result").end().         }     }. }
false;public;2;10;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     return oldExchange. }
