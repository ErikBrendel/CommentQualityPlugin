commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before @Override public void setUp() throws Exception {     deleteDirectory("target/data").     repo = new LevelDBAggregationRepository("repo1", "target/data/leveldb.dat").     super.setUp(). }
false;public;0;14;;@Test public void testBigPayload() throws Exception {     log.info("Running test for " + TIME + " millis.").     Thread.sleep(60 * 1000).     // assert the file size of the repo is not big < 32mb     File file = new File("target/data/leveldb.dat").     assertTrue(file + " should exists", file.exists()).     long size = file.length().     log.info(file + " size is " + size).     // should be about 32mb, so we say 34 just in case     assertTrue(file + " should not be so big in size, was: " + size, size < 34 * 1024 * 1024). }
false;public;0;9;;@Override public void configure() throws Exception {     from("timer:foo").bean(BigPayload.class).aggregate(method(LevelDBBigPayloadTest.class, "number"), new UseLatestAggregationStrategy()).aggregationRepository(repo).completionSize(2).completionTimeout(5000).log("Aggregated key ${header.CamelAggregatedCorrelationKey}"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:foo").bean(BigPayload.class).aggregate(method(LevelDBBigPayloadTest.class, "number"), new UseLatestAggregationStrategy()).aggregationRepository(repo).completionSize(2).completionTimeout(5000).log("Aggregated key ${header.CamelAggregatedCorrelationKey}").         }     }. }
false;public,static;0;4;;public static long number() {     // return 123. (will not cause leveldb to grow in size)     return NUMBER.incrementAndGet(). }
