commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data").     super.setUp(). }
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(2, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;4;;@Test public void testMoreConcurrentProducers() throws Exception {     doSendMessages(50, 10). }
false;public;0;7;;public Object call() throws Exception {     String id = index % 2 == 0 ? "A" : "B".     template.sendBodyAndHeader("direct:start", index, "id", id).     // simulate a little delay     Thread.sleep(3).     return null. }
false;private;2;22;;private void doSendMessages(int files, int poolSize) throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregated").     mock.expectedMessageCount(2).     mock.setResultWaitTime(30 * 1000L).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     for (int i = 0. i < files. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 String id = index % 2 == 0 ? "A" : "B".                 template.sendBodyAndHeader("direct:start", index, "id", id).                 // simulate a little delay                 Thread.sleep(3).                 return null.             }         }).     }     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;public;0;8;;public void configure() throws Exception {     LevelDBAggregationRepository repo = new LevelDBAggregationRepository("repo1", "target/data/leveldb.dat").     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionTimeout(1000).aggregationRepository(repo).to("mock:aggregated"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             LevelDBAggregationRepository repo = new LevelDBAggregationRepository("repo1", "target/data/leveldb.dat").             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionTimeout(1000).aggregationRepository(repo).to("mock:aggregated").         }     }. }
false;public;2;10;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     return oldExchange. }
