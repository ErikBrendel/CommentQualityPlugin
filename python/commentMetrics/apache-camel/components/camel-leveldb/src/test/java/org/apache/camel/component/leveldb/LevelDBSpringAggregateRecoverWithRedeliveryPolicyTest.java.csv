commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/leveldb/LevelDBSpringAggregateRecoverWithRedeliveryPolicyTest.xml"). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data").     super.setUp(). }
false;public;0;21;;@Test public void testLevelDBAggregateRecover() throws Exception {     getMockEndpoint("mock:aggregated").setResultWaitTime(20000).     getMockEndpoint("mock:result").setResultWaitTime(20000).     // should fail the first 3 times and then recover     getMockEndpoint("mock:aggregated").expectedMessageCount(4).     getMockEndpoint("mock:result").expectedBodiesReceived("ABCDE").     // should be marked as redelivered     getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE).     // on the 2nd redelivery attempt we success     getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(3).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "D", "id", 123).     template.sendBodyAndHeader("direct:start", "E", "id", 123).     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     int count = counter.incrementAndGet().     if (count <= 3) {         throw new IllegalArgumentException("Damn").     } }
false;public;2;10;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     return oldExchange. }
