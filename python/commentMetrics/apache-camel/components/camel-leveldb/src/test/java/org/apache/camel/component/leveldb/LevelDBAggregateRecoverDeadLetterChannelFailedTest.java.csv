commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data").     repo = new LevelDBAggregationRepository("repo1", "target/data/leveldb.dat").     // enable recovery     repo.setUseRecovery(true).     // exhaust after at most 2 attempts     repo.setMaximumRedeliveries(2).     // and move to this dead letter channel     repo.setDeadLetterUri("direct:dead").     // check faster     repo.setRecoveryInterval(1000, TimeUnit.MILLISECONDS).     super.setUp(). }
false;public;0;30;;@Test public void testLevelDBAggregateRecoverDeadLetterChannelFailed() throws Exception {     // should fail all times     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:aggregated").expectedMessageCount(3).     // it should keep sending to DLC if it failed, so test for min 2 attempts     getMockEndpoint("mock:dead").expectedMinimumMessageCount(2).     // all the details should be the same about redelivered and redelivered 2 times     getMockEndpoint("mock:dead").message(0).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE).     getMockEndpoint("mock:dead").message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(2).     getMockEndpoint("mock:dead").message(1).header(Exchange.REDELIVERY_COUNTER).isEqualTo(2).     getMockEndpoint("mock:dead").message(1).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "D", "id", 123).     template.sendBodyAndHeader("direct:start", "E", "id", 123).     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS).     // all the details should be the same about redelivered and redelivered 2 times     Exchange first = getMockEndpoint("mock:dead").getReceivedExchanges().get(0).     assertEquals(true, first.getIn().getHeader(Exchange.REDELIVERED)).     assertEquals(2, first.getIn().getHeader(Exchange.REDELIVERY_COUNTER)).     Exchange second = getMockEndpoint("mock:dead").getReceivedExchanges().get(1).     assertEquals(true, second.getIn().getHeader(Exchange.REDELIVERED)).     assertEquals(2, first.getIn().getHeader(Exchange.REDELIVERY_COUNTER)). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end().     from("direct:dead").to("mock:dead").throwException(new IllegalArgumentException("We are dead")). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").throwException(new IllegalArgumentException("Damn")).to("mock:result").end().             from("direct:dead").to("mock:dead").throwException(new IllegalArgumentException("We are dead")).         }     }. }
false;public;2;10;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     return oldExchange. }
