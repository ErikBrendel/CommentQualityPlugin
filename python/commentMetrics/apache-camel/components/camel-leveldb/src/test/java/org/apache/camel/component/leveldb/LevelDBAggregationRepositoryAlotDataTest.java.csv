commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override @Before public void setUp() throws Exception {     super.setUp().     deleteDirectory("target/data").     File file = new File("target/data/leveldb.dat").     levelDBFile = new LevelDBFile().     levelDBFile.setFile(file).     levelDBFile.start(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     levelDBFile.stop().     super.tearDown(). }
false;public;0;16;;@Test public void testWithAlotOfDataSameKey() {     LevelDBAggregationRepository repo = new LevelDBAggregationRepository().     repo.setLevelDBFile(levelDBFile).     repo.setRepositoryName("repo1").     for (int i = 0. i < 100. i++) {         Exchange exchange1 = new DefaultExchange(context).         exchange1.getIn().setBody("counter:" + i).         repo.add(context, "foo", exchange1).     }     // Get it back..     Exchange actual = repo.get(context, "foo").     assertEquals("counter:99", actual.getIn().getBody()). }
false;public;0;20;;@Test public void testWithAlotOfDataTwoKesy() {     LevelDBAggregationRepository repo = new LevelDBAggregationRepository().     repo.setLevelDBFile(levelDBFile).     repo.setRepositoryName("repo1").     for (int i = 0. i < 100. i++) {         Exchange exchange1 = new DefaultExchange(context).         exchange1.getIn().setBody("counter:" + i).         String key = i % 2 == 0 ? "foo" : "bar".         repo.add(context, key, exchange1).     }     // Get it back..     Exchange actual = repo.get(context, "foo").     assertEquals("counter:98", actual.getIn().getBody()).     actual = repo.get(context, "bar").     assertEquals("counter:99", actual.getIn().getBody()). }
false;public;0;19;;@Test public void testWithAlotOfDataWithDifferentKesy() {     LevelDBAggregationRepository repo = new LevelDBAggregationRepository().     repo.setLevelDBFile(levelDBFile).     repo.setRepositoryName("repo1").     for (int i = 0. i < 100. i++) {         Exchange exchange1 = new DefaultExchange(context).         exchange1.getIn().setBody("counter:" + i).         String key = "key" + i.         repo.add(context, key, exchange1).     }     // Get it back..     for (int i = 0. i < 100. i++) {         Exchange actual = repo.get(context, "key" + i).         assertEquals("counter:" + i, actual.getIn().getBody()).     } }
