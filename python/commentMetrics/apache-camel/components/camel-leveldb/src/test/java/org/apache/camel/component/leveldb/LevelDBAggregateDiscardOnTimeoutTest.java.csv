commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data").     repo = new LevelDBAggregationRepository("repo1", "target/data/leveldb.dat").     // enable recovery     repo.setUseRecovery(true).     // check faster     repo.setRecoveryInterval(500, TimeUnit.MILLISECONDS).     super.setUp(). }
false;public;0;24;;@Test public void testAggregateDiscardOnTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregated").     mock.expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     // wait 3 seconds     Thread.sleep(3000).     mock.assertIsSatisfied().     // now send 3 which does not timeout     mock.reset().     mock.expectedBodiesReceived("C+D+E").     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     // should complete before timeout     mock.await(1500, TimeUnit.MILLISECONDS). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(3).aggregationRepository(repo).completionTimeout(2000).discardOnCompletionTimeout().to("mock:aggregated"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(3).aggregationRepository(repo).completionTimeout(2000).discardOnCompletionTimeout().to("mock:aggregated").         }     }. }
false;public;2;10;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     return oldExchange. }
