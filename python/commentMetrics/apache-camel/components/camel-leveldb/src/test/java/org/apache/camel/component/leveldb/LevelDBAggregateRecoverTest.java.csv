commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data").     repo = new LevelDBAggregationRepository("repo1", "target/data/leveldb.dat").     // enable recovery     repo.setUseRecovery(true).     // check faster     repo.setRecoveryInterval(500, TimeUnit.MILLISECONDS).     super.setUp(). }
false;public;0;18;;@Test public void testLevelDBAggregateRecover() throws Exception {     // should fail the first 2 times and then recover     getMockEndpoint("mock:aggregated").expectedMessageCount(3).     getMockEndpoint("mock:result").expectedBodiesReceived("ABCDE").     // should be marked as redelivered     getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE).     // on the 2nd redelivery attempt we success     getMockEndpoint("mock:result").message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(2).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "D", "id", 123).     template.sendBodyAndHeader("direct:start", "E", "id", 123).     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     int count = counter.incrementAndGet().     if (count <= 2) {         throw new IllegalArgumentException("Damn").     } }
false;public;0;20;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").delay(1000).process(new Processor() {          public void process(Exchange exchange) throws Exception {             int count = counter.incrementAndGet().             if (count <= 2) {                 throw new IllegalArgumentException("Damn").             }         }     }).to("mock:result").end(). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionSize(5).aggregationRepository(repo).log("aggregated exchange id ${exchangeId} with ${body}").to("mock:aggregated").delay(1000).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     int count = counter.incrementAndGet().                     if (count <= 2) {                         throw new IllegalArgumentException("Damn").                     }                 }             }).to("mock:result").end().         }     }. }
false;public;2;10;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     return oldExchange. }
