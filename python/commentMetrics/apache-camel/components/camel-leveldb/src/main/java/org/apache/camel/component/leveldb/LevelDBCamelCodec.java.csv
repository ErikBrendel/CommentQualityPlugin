commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public Buffer marshallKey(String key) throws IOException {     DataByteArrayOutputStream baos = new DataByteArrayOutputStream().     keyCodec.encode(key, baos).     return baos.toBuffer(). }
false;public;1;5;;public String unmarshallKey(Buffer buffer) throws IOException {     DataByteArrayInputStream bais = new DataByteArrayInputStream(buffer).     String key = keyCodec.decode(bais).     return key. }
false;public;3;20;;public Buffer marshallExchange(CamelContext camelContext, Exchange exchange, boolean allowSerializedHeaders) throws IOException {     DataByteArrayOutputStream baos = new DataByteArrayOutputStream().     // use DefaultExchangeHolder to marshal to a serialized object     DefaultExchangeHolder pe = DefaultExchangeHolder.marshal(exchange, false, allowSerializedHeaders).     // add the aggregated size and timeout property as the only properties we want to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_SIZE, exchange.getProperty(Exchange.AGGREGATED_SIZE, Integer.class)).     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_TIMEOUT, exchange.getProperty(Exchange.AGGREGATED_TIMEOUT, Long.class)).     // add the aggregated completed by property to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_COMPLETED_BY, exchange.getProperty(Exchange.AGGREGATED_COMPLETED_BY, String.class)).     // add the aggregated correlation key property to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_CORRELATION_KEY, exchange.getProperty(Exchange.AGGREGATED_CORRELATION_KEY, String.class)).     // and a guard property if using the flexible toolbox aggregator     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_COLLECTION_GUARD, exchange.getProperty(Exchange.AGGREGATED_COLLECTION_GUARD, String.class)).     // persist the from endpoint as well     if (exchange.getFromEndpoint() != null) {         DefaultExchangeHolder.addProperty(pe, "CamelAggregatedFromEndpoint", exchange.getFromEndpoint().getEndpointUri()).     }     exchangeCodec.encode(pe, baos).     return baos.toBuffer(). }
false;public;2;15;;public Exchange unmarshallExchange(CamelContext camelContext, Buffer buffer) throws IOException {     DataByteArrayInputStream bais = new DataByteArrayInputStream(buffer).     DefaultExchangeHolder pe = exchangeCodec.decode(bais).     Exchange answer = new DefaultExchange(camelContext).     DefaultExchangeHolder.unmarshal(answer, pe).     // restore the from endpoint     String fromEndpointUri = (String) answer.removeProperty("CamelAggregatedFromEndpoint").     if (fromEndpointUri != null) {         Endpoint fromEndpoint = camelContext.hasEndpoint(fromEndpointUri).         if (fromEndpoint != null) {             answer.setFromEndpoint(fromEndpoint).         }     }     return answer. }
