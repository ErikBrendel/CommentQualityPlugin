commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public DB getDb() {     return db. }
false;public;1;3;;public void setFile(File file) throws IOException {     this.file = file. }
false;public;0;3;;public File getFile() {     return file. }
false;public;1;3;;public void setFileName(String fileName) {     this.file = new File(fileName). }
false;public;0;3;;public String getFileName() throws IOException {     return file.getCanonicalPath(). }
false;public;0;3;;public int getWriteBufferSize() {     return writeBufferSize. }
false;public;1;3;;public void setWriteBufferSize(int writeBufferSize) {     this.writeBufferSize = writeBufferSize. }
false;public;0;3;;public int getMaxOpenFiles() {     return maxOpenFiles. }
false;public;1;3;;public void setMaxOpenFiles(int maxOpenFiles) {     this.maxOpenFiles = maxOpenFiles. }
false;public;0;3;;public int getBlockRestartInterval() {     return blockRestartInterval. }
false;public;1;3;;public void setBlockRestartInterval(int blockRestartInterval) {     this.blockRestartInterval = blockRestartInterval. }
false;public;0;3;;public int getBlockSize() {     return blockSize. }
false;public;1;3;;public void setBlockSize(int blockSize) {     this.blockSize = blockSize. }
false;public;0;3;;public String getCompressionType() {     return compressionType. }
false;public;1;3;;public void setCompressionType(String compressionType) {     this.compressionType = compressionType. }
false;public;0;3;;public boolean isVerifyChecksums() {     return verifyChecksums. }
false;public;1;3;;public void setVerifyChecksums(boolean verifyChecksums) {     this.verifyChecksums = verifyChecksums. }
false;public;0;3;;public boolean isParanoidChecks() {     return paranoidChecks. }
false;public;1;3;;public void setParanoidChecks(boolean paranoidChecks) {     this.paranoidChecks = paranoidChecks. }
false;public;0;3;;public long getCacheSize() {     return cacheSize. }
false;public;1;3;;public void setCacheSize(long cacheSize) {     this.cacheSize = cacheSize. }
false;public;0;3;;public boolean isSync() {     return sync. }
false;public;1;3;;public void setSync(boolean sync) {     this.sync = sync. }
false;public;0;5;;public WriteOptions getWriteOptions() {     WriteOptions options = new WriteOptions().     options.sync(sync).     return options. }
false;public;0;28;;public void start() {     if (getFile() == null) {         throw new IllegalArgumentException("A file must be configured").     }     if (LOG.isDebugEnabled()) {         LOG.debug("Starting LevelDB using file: {}", getFile()).     }     Options options = new Options().writeBufferSize(writeBufferSize).maxOpenFiles(maxOpenFiles).blockRestartInterval(blockRestartInterval).blockSize(blockSize).verifyChecksums(verifyChecksums).paranoidChecks(paranoidChecks).cacheSize(cacheSize).     if ("snappy".equals(compressionType)) {         options.compressionType(CompressionType.SNAPPY).     } else {         options.compressionType(CompressionType.NONE).     }     options.createIfMissing(true).     try {         getFile().getParentFile().mkdirs().         DBFactory factory = getFactory().         db = factory.open(getFile(), options).     } catch (IOException ioe) {         throw new RuntimeException("Error opening LevelDB with file " + getFile(), ioe).     } }
false;private;0;18;;private DBFactory getFactory() {     String[] classNames = new String[] { "org.fusesource.leveldbjni.JniDBFactory", "org.iq80.leveldb.impl.Iq80DBFactory" }.     for (String cn : classNames) {         try {             Class<?> clz = getClass().getClassLoader().loadClass(cn).             DBFactory factory = (DBFactory) clz.newInstance().             if (LOG.isDebugEnabled()) {                 LOG.debug("Using {} implementation of org.iq80.leveldb.DBFactory", factory.getClass().getName()).             }             return factory.         } catch (Throwable ignored) {         }     }     throw new IllegalStateException("Can't find implementation of org.iq80.leveldb.DBFactory"). }
false;public;0;9;;public void stop() {     File file = getFile().     LOG.debug("Stopping LevelDB using file: {}", file).     if (db != null) {         IOHelper.close(db).         db = null.     } }
