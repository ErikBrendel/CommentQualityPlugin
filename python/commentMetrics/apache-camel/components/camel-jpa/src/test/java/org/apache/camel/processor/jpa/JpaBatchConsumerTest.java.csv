commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBatchConsumer() throws Exception {     // first create two records     template.sendBody("jpa://" + SendEmail.class.getName(), new SendEmail("foo@beer.org")).     template.sendBody("jpa://" + SendEmail.class.getName(), new SendEmail("bar@beer.org")).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     mock.message(0).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(0).     mock.message(0).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(false).     mock.message(1).exchangeProperty(Exchange.BATCH_INDEX).isEqualTo(1).     mock.message(1).exchangeProperty(Exchange.BATCH_COMPLETE).isEqualTo(true).     mock.expectedPropertyReceived(Exchange.BATCH_SIZE, 2).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("jpa://" + SendEmail.class.getName() + "?delay=2000").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jpa://" + SendEmail.class.getName() + "?delay=2000").to("mock:result").         }     }. }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/springJpaRouteTest.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
