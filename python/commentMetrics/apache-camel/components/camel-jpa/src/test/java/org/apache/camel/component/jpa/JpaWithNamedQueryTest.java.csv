commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;public Object doInTransaction(TransactionStatus status) {     entityManager.joinTransaction().     // lets delete any exiting records before the test     entityManager.createQuery("delete from " + entityName).executeUpdate().     // now lets create a dummy entry     MultiSteps dummy = new MultiSteps("cheese").     dummy.setStep(4).     entityManager.persist(dummy).     return null. }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody(new MultiSteps("foo@bar.com")). }
false;public;1;5;;public void process(Exchange e) {     LOG.info("Received exchange: " + e.getIn()).     receivedExchange = e.     latch.countDown(). }
false;public;1;29;;public Object doInTransaction(TransactionStatus status) {     // make use of the EntityManager having the relevant persistence-context     EntityManager entityManager2 = receivedExchange.getIn().getHeader(JpaConstants.ENTITY_MANAGER, EntityManager.class).     if (!entityManager2.isOpen()) {         entityManager2 = endpoint.getEntityManagerFactory().createEntityManager().     }     entityManager2.joinTransaction().     // now lets assert that there are still 2 entities left     List<?> rows = entityManager2.createQuery("select x from MultiSteps x").getResultList().     assertEquals("Number of entities: " + rows, 2, rows.size()).     int counter = 1.     for (Object rowObj : rows) {         assertTrue("Rows are not instances of MultiSteps", rowObj instanceof MultiSteps).         final MultiSteps row = (MultiSteps) rowObj.         LOG.info("entity: " + counter++ + " = " + row).         if (row.getAddress().equals("foo@bar.com")) {             LOG.info("Found updated row: " + row).             assertEquals("Updated row step for: " + row, getUpdatedStepValue(), row.getStep()).         } else {             // dummy row             assertEquals("dummy row step for: " + row, 4, row.getStep()).             assertEquals("Not the expected row: " + row, "cheese", row.getAddress()).         }     }     return null. }
false;public;0;86;;@Test public void testProducerInsertsIntoDatabaseThenConsumerFiresMessageExchange() throws Exception {     transactionTemplate.execute(new TransactionCallback<Object>() {          public Object doInTransaction(TransactionStatus status) {             entityManager.joinTransaction().             // lets delete any exiting records before the test             entityManager.createQuery("delete from " + entityName).executeUpdate().             // now lets create a dummy entry             MultiSteps dummy = new MultiSteps("cheese").             dummy.setStep(4).             entityManager.persist(dummy).             return null.         }     }).     List<?> results = entityManager.createQuery(queryText).getResultList().     assertEquals("Should have no results: " + results, 0, results.size()).     // lets produce some objects     template.send(endpoint, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody(new MultiSteps("foo@bar.com")).         }     }).     // now lets assert that there is a result     results = entityManager.createQuery(queryText).getResultList().     assertEquals("Should have results: " + results, 1, results.size()).     MultiSteps mail = (MultiSteps) results.get(0).     assertEquals("address property", "foo@bar.com", mail.getAddress()).     // now lets create a consumer to consume it     consumer = endpoint.createConsumer(new Processor() {          public void process(Exchange e) {             LOG.info("Received exchange: " + e.getIn()).             receivedExchange = e.             latch.countDown().         }     }).     consumer.start().     assertTrue(latch.await(50, TimeUnit.SECONDS)).     assertReceivedResult(receivedExchange).     // lets now test that the database is updated     // we need to sleep as we will be invoked from inside the transaction!     // org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.     Thread.sleep(2000).     transactionTemplate.execute(new TransactionCallback<Object>() {          public Object doInTransaction(TransactionStatus status) {             // make use of the EntityManager having the relevant persistence-context             EntityManager entityManager2 = receivedExchange.getIn().getHeader(JpaConstants.ENTITY_MANAGER, EntityManager.class).             if (!entityManager2.isOpen()) {                 entityManager2 = endpoint.getEntityManagerFactory().createEntityManager().             }             entityManager2.joinTransaction().             // now lets assert that there are still 2 entities left             List<?> rows = entityManager2.createQuery("select x from MultiSteps x").getResultList().             assertEquals("Number of entities: " + rows, 2, rows.size()).             int counter = 1.             for (Object rowObj : rows) {                 assertTrue("Rows are not instances of MultiSteps", rowObj instanceof MultiSteps).                 final MultiSteps row = (MultiSteps) rowObj.                 LOG.info("entity: " + counter++ + " = " + row).                 if (row.getAddress().equals("foo@bar.com")) {                     LOG.info("Found updated row: " + row).                     assertEquals("Updated row step for: " + row, getUpdatedStepValue(), row.getStep()).                 } else {                     // dummy row                     assertEquals("dummy row step for: " + row, 4, row.getStep()).                     assertEquals("Not the expected row: " + row, "cheese", row.getAddress()).                 }             }             return null.         }     }).     JpaConsumer jpaConsumer = (JpaConsumer) consumer.     assertURIQueryOption(jpaConsumer). }
false;protected;1;6;;protected void assertReceivedResult(Exchange exchange) {     assertNotNull(exchange).     MultiSteps result = exchange.getIn().getBody(MultiSteps.class).     assertNotNull("Received a POJO", result).     assertEquals("address property", "foo@bar.com", result.getAddress()). }
false;protected;0;3;;protected int getUpdatedStepValue() {     return 2. }
false;protected;1;3;;protected void assertURIQueryOption(JpaConsumer jpaConsumer) {     assertEquals("step1", jpaConsumer.getNamedQuery()). }
false;public;0;13;;@Before public void setUp() throws Exception {     template = camelContext.createProducerTemplate().     ServiceHelper.startService(template, camelContext).     Endpoint value = camelContext.getEndpoint(getEndpointUri()).     assertNotNull("Could not find endpoint!", value).     assertTrue("Should be a JPA endpoint but was: " + value, value instanceof JpaEndpoint).     endpoint = (JpaEndpoint) value.     transactionTemplate = endpoint.createTransactionTemplate().     entityManager = endpoint.getEntityManagerFactory().createEntityManager(). }
false;protected;0;3;;protected String getEndpointUri() {     return "jpa://" + MultiSteps.class.getName() + "?consumer.namedQuery=step1". }
false;public;0;4;;@After public void tearDown() throws Exception {     ServiceHelper.stopService(consumer, template, camelContext). }
