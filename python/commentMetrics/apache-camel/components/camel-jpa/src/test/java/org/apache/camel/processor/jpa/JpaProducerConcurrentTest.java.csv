commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;3;;public SendEmail call() throws Exception {     return template.requestBody("direct:start", new SendEmail("user" + index + "@somewhere.org"), SendEmail.class). }
false;private;2;33;;private void doSendMessages(int files, int poolSize) throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:result").assertNoDuplicates(body()).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     // we access the responses Map below only inside the main thread,     // so no need for a thread-safe Map implementation     Map<Integer, Future<SendEmail>> responses = new HashMap<>().     for (int i = 0. i < files. i++) {         final int index = i.         Future<SendEmail> out = executor.submit(new Callable<SendEmail>() {              public SendEmail call() throws Exception {                 return template.requestBody("direct:start", new SendEmail("user" + index + "@somewhere.org"), SendEmail.class).             }         }).         responses.put(index, out).     }     assertMockEndpointsSatisfied(30, TimeUnit.SECONDS).     assertEquals(files, responses.size()).     // get them so they are complete     for (Future<SendEmail> future : responses.values()) {         SendEmail sendEmail = future.get().         assertNotNull(sendEmail).         log.info("Persisted the SendEmail entity with the id {} and the address {}", sendEmail.getId(), sendEmail.getAddress()).     }     // assert in the database     assertEntityInDB(files).     executor.shutdownNow(). }
false;public;0;3;;public void configure() {     from("direct:start").to("jpa://" + SendEmail.class.getName() + "?usePersist=true").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new SpringRouteBuilder() {          public void configure() {             from("direct:start").to("jpa://" + SendEmail.class.getName() + "?usePersist=true").to("mock:result").         }     }. }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/springJpaRouteTest.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
