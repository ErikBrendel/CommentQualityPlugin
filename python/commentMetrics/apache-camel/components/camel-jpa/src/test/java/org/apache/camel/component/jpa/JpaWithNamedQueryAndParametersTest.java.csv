commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;public Object doInTransaction(TransactionStatus status) {     entityManager.joinTransaction().     // lets delete any exiting records before the test     entityManager.createQuery("delete from " + entityName).executeUpdate().     // now lets create a dummy entry     Customer dummy = new Customer().     dummy.setName("Test").     entityManager.persist(dummy).     return null. }
false;public;1;5;;public void process(Exchange exchange) {     Customer customer = new Customer().     customer.setName("Willem").     exchange.getIn().setBody(customer). }
false;public;1;5;;public void process(Exchange e) {     LOG.info("Received exchange: " + e.getIn()).     receivedExchange = e.     latch.countDown(). }
false;public;0;50;;@Test public void testProducerInsertsIntoDatabaseThenConsumerFiresMessageExchange() throws Exception {     transactionTemplate.execute(new TransactionCallback<Object>() {          public Object doInTransaction(TransactionStatus status) {             entityManager.joinTransaction().             // lets delete any exiting records before the test             entityManager.createQuery("delete from " + entityName).executeUpdate().             // now lets create a dummy entry             Customer dummy = new Customer().             dummy.setName("Test").             entityManager.persist(dummy).             return null.         }     }).     List<?> results = entityManager.createQuery(queryText).getResultList().     assertEquals("Should have no results: " + results, 0, results.size()).     // lets produce some objects     template.send(endpoint, new Processor() {          public void process(Exchange exchange) {             Customer customer = new Customer().             customer.setName("Willem").             exchange.getIn().setBody(customer).         }     }).     // now lets assert that there is a result     results = entityManager.createQuery(queryText).getResultList().     assertEquals("Should have results: " + results, 1, results.size()).     Customer customer = (Customer) results.get(0).     assertEquals("name property", "Willem", customer.getName()).     // now lets create a consumer to consume it     consumer = endpoint.createConsumer(new Processor() {          public void process(Exchange e) {             LOG.info("Received exchange: " + e.getIn()).             receivedExchange = e.             latch.countDown().         }     }).     consumer.start().     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertReceivedResult(receivedExchange).     JpaConsumer jpaConsumer = (JpaConsumer) consumer.     assertURIQueryOption(jpaConsumer). }
false;protected;1;6;;protected void assertReceivedResult(Exchange exchange) {     assertNotNull(exchange).     Customer result = exchange.getIn().getBody(Customer.class).     assertNotNull("Received a POJO", result).     assertEquals("name property", "Willem", result.getName()). }
false;protected;1;3;;protected void assertURIQueryOption(JpaConsumer jpaConsumer) {     assertEquals("findAllCustomersWithName", jpaConsumer.getNamedQuery()). }
false;public;0;21;;@Before public void setUp() throws Exception {     camelContext = new DefaultCamelContext().     SimpleRegistry registry = new SimpleRegistry().     Map<String, Object> params = new HashMap<>().     params.put("custName", "Willem").     // bind the params     registry.put("params", params).     camelContext.setRegistry(registry).     template = camelContext.createProducerTemplate().     ServiceHelper.startService(template, camelContext).     Endpoint value = camelContext.getEndpoint(getEndpointUri()).     assertNotNull("Could not find endpoint!", value).     assertTrue("Should be a JPA endpoint but was: " + value, value instanceof JpaEndpoint).     endpoint = (JpaEndpoint) value.     transactionTemplate = endpoint.createTransactionTemplate().     entityManager = endpoint.createEntityManager(). }
false;protected;0;3;;protected String getEndpointUri() {     return "jpa://" + Customer.class.getName() + "?consumer.namedQuery=findAllCustomersWithName&consumer.parameters=#params". }
false;public;0;4;;@After public void tearDown() throws Exception {     ServiceHelper.stopService(consumer, template, camelContext). }
