commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;protected void assertEntitiesInDatabase(int count, String entity) {     List<?> results = entityManager.createQuery("select o from " + entity + " o").getResultList().     assertEquals(count, results.size()). }
false;public;0;18;;@Test public void testPollingConsumer() throws Exception {     Customer customer = new Customer().     customer.setName("Donald Duck").     saveEntityInDB(customer).     Customer customer2 = new Customer().     customer2.setName("Goofy").     saveEntityInDB(customer2).     assertEntitiesInDatabase(2, Customer.class.getName()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Donald Duck how are you today?").     template.sendBodyAndHeader("direct:start", "Hello NAME how are you today?", "name", "Donald%").     assertMockEndpointsSatisfied(). }
false;public;0;11;;public void configure() {     from("direct:start").pollEnrich().simple("jpa://" + Customer.class.getName() + "?query=select c from Customer c where c.name like '${header.name}'").aggregationStrategy((a, b) -> {         String name = b.getIn().getBody(Customer.class).getName().         String phrase = a.getIn().getBody(String.class).replace("NAME", name).         a.getIn().setBody(phrase).         return a.     }).to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() {     return new SpringRouteBuilder() {          public void configure() {             from("direct:start").pollEnrich().simple("jpa://" + Customer.class.getName() + "?query=select c from Customer c where c.name like '${header.name}'").aggregationStrategy((a, b) -> {                 String name = b.getIn().getBody(Customer.class).getName().                 String phrase = a.getIn().getBody(String.class).replace("NAME", name).                 a.getIn().setBody(phrase).                 return a.             }).to("mock:result").         }     }. }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/springJpaRouteTest.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
