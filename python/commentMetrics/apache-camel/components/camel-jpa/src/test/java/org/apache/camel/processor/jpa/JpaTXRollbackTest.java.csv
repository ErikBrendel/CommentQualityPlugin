commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testTXRollback() throws Exception {     // first create three records     template.sendBody("jpa://" + SendEmail.class.getName(), new SendEmail("foo@beer.org")).     template.sendBody("jpa://" + SendEmail.class.getName(), new SendEmail("bar@beer.org")).     template.sendBody("jpa://" + SendEmail.class.getName(), new SendEmail("kaboom@beer.org")).     // should rollback the entire     MockEndpoint mock = getMockEndpoint("mock:result").     // we should retry and try again     mock.expectedMinimumMessageCount(4).     // start route     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     assertTrue("Should be >= 2, was: " + foo.intValue(), foo.intValue() >= 2).     assertTrue("Should be >= 2, was: " + bar.intValue(), bar.intValue() >= 2). }
false;public;1;13;;@Override public void process(Exchange exchange) throws Exception {     SendEmail send = exchange.getIn().getBody(SendEmail.class).     if ("kaboom@beer.org".equals(send.getAddress())) {         throw new IllegalArgumentException("Forced").     }     if ("foo@beer.org".equals(send.getAddress())) {         foo.incrementAndGet().     } else if ("bar@beer.org".equals(send.getAddress())) {         bar.incrementAndGet().     } }
false;public;0;20;;@Override public void configure() throws Exception {     from("jpa://" + SendEmail.class.getName() + "?consumer.transacted=true&delay=1000").routeId("foo").noAutoStartup().process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             SendEmail send = exchange.getIn().getBody(SendEmail.class).             if ("kaboom@beer.org".equals(send.getAddress())) {                 throw new IllegalArgumentException("Forced").             }             if ("foo@beer.org".equals(send.getAddress())) {                 foo.incrementAndGet().             } else if ("bar@beer.org".equals(send.getAddress())) {                 bar.incrementAndGet().             }         }     }).to("mock:result"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jpa://" + SendEmail.class.getName() + "?consumer.transacted=true&delay=1000").routeId("foo").noAutoStartup().process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     SendEmail send = exchange.getIn().getBody(SendEmail.class).                     if ("kaboom@beer.org".equals(send.getAddress())) {                         throw new IllegalArgumentException("Forced").                     }                     if ("foo@beer.org".equals(send.getAddress())) {                         foo.incrementAndGet().                     } else if ("bar@beer.org".equals(send.getAddress())) {                         bar.incrementAndGet().                     }                 }             }).to("mock:result").         }     }. }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/springJpaRouteTest.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
