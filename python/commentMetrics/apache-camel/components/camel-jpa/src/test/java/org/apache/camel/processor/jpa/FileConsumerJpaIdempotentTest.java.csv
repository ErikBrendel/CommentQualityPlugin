commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     deleteDirectory("target/idempotent").     super.setUp().     template.sendBodyAndHeader("file://target/idempotent/", "Hello World", Exchange.FILE_NAME, "report.txt"). }
false;public;0;4;;public void configure() throws Exception {     from("file://target/idempotent/?idempotent=true&idempotentRepository=#jpaStore&move=done/${file:name}").routeId("foo").autoStartup(false).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/idempotent/?idempotent=true&idempotentRepository=#jpaStore&move=done/${file:name}").routeId("foo").autoStartup(false).to("mock:result").         }     }. }
false;public;1;11;;public Object doInTransaction(TransactionStatus arg0) {     entityManager.joinTransaction().     Query query = entityManager.createQuery(SELECT_ALL_STRING).     query.setParameter(1, PROCESSOR_NAME).     List<?> list = query.getResultList().     for (Object item : list) {         entityManager.remove(item).     }     entityManager.flush().     return Boolean.TRUE. }
false;protected;0;16;;@Override protected void cleanupRepository() {     transactionTemplate.execute(new TransactionCallback<Object>() {          public Object doInTransaction(TransactionStatus arg0) {             entityManager.joinTransaction().             Query query = entityManager.createQuery(SELECT_ALL_STRING).             query.setParameter(1, PROCESSOR_NAME).             List<?> list = query.getResultList().             for (Object item : list) {                 entityManager.remove(item).             }             entityManager.flush().             return Boolean.TRUE.         }     }). }
false;public;0;26;;@Test public void testFileConsumerJpaIdempotent() throws Exception {     // consume the file the first time     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedMessageCount(1).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     Thread.sleep(1000).     // reset mock and set new expectations     mock.reset().     mock.expectedMessageCount(0).     // move file back     File file = new File("target/idempotent/done/report.txt").     File renamed = new File("target/idempotent/report.txt").     file.renameTo(renamed).     // should NOT consume the file again, let 2 secs pass to let the consumer try to consume it but it should not     Thread.sleep(2000).     assertMockEndpointsSatisfied(). }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/fileConsumerJpaIdempotentTest-config.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
