commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testRouteJpa() throws Exception {     MockEndpoint mock1 = getMockEndpoint("mock:result1").     mock1.expectedMessageCount(2).     MockEndpoint mock2 = getMockEndpoint("mock:result2").     mock2.expectedMessageCount(2).     template.sendBody("jpa://" + VersionedItem.class.getName(), new VersionedItem("one")).     template.sendBody("jpa://" + VersionedItem.class.getName(), new VersionedItem("two")).     template.sendBody("jpa://" + VersionedItem.class.getName(), new VersionedItem("three")).     template.sendBody("jpa://" + VersionedItem.class.getName(), new VersionedItem("four")).     this.context.getRouteController().startRoute("second").     this.context.getRouteController().startRoute("first").     assertMockEndpointsSatisfied().     // force test to wait till finished     this.context.getRouteController().stopRoute("first").     this.context.getRouteController().stopRoute("second").     setLockTimeout(60).     List<?> list = entityManager.createQuery(selectAllString()).getResultList().     assertEquals(0, list.size()). }
false;public;0;6;;@Override public void configure() {     // &consumer.lockModeType=PESSIMISTIC_FORCE_INCREMENT".     String options = "?consumer.skipLockedEntity=true".     from("jpa://" + VersionedItem.class.getName() + options).routeId("first").autoStartup(false).bean(new WaitLatch()).log("route1: ${body}").to("mock:result1").     from("jpa2://select" + options + "&consumer.query=select s from VersionedItem s").routeId("second").autoStartup(false).bean(new WaitLatch()).log("route2: ${body}").to("mock:result2"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() {     return new SpringRouteBuilder() {          @Override         public void configure() {             // &consumer.lockModeType=PESSIMISTIC_FORCE_INCREMENT".             String options = "?consumer.skipLockedEntity=true".             from("jpa://" + VersionedItem.class.getName() + options).routeId("first").autoStartup(false).bean(new WaitLatch()).log("route1: ${body}").to("mock:result1").             from("jpa2://select" + options + "&consumer.query=select s from VersionedItem s").routeId("second").autoStartup(false).bean(new WaitLatch()).log("route2: ${body}").to("mock:result2").         }     }. }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/springJpaRouteSkipLockedTest.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
false;public;1;17;;public void onMessage(VersionedItem body) throws Exception {     lock.lock().     try {         count++.         // if (count != 1) {         cond1.signal().         // if not last         if (count != 4) {             cond1.await().         }     } finally {         lock.unlock().     } }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     setLockTimeout(0). }
false;public;1;6;;public void setLockTimeout(int timeout) throws SQLException {     entityManager.getTransaction().begin().     Connection connection = entityManager.unwrap(java.sql.Connection.class).     connection.createStatement().execute("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.locks.waitTimeout', '" + timeout + "')").     entityManager.getTransaction().commit(). }
