commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testRouteJpa() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", new SendEmail("someone@somewhere.org")).     assertMockEndpointsSatisfied().     assertEntityInDB(). }
false;public;0;3;;public void configure() {     from("direct:start").to("jpa://" + SendEmail.class.getName() + "?flushOnSend=true").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new SpringRouteBuilder() {          public void configure() {             from("direct:start").to("jpa://" + SendEmail.class.getName() + "?flushOnSend=true").to("mock:result").         }     }. }
false;private;0;6;;private void assertEntityInDB() throws Exception {     List<?> list = entityManager.createQuery(SELECT_ALL_STRING).getResultList().     assertEquals(1, list.size()).     assertIsInstanceOf(SendEmail.class, list.get(0)). }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/springJpaRouteTest.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
