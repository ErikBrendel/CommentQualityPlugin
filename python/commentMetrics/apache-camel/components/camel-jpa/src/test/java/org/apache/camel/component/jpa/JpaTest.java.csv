commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public Object doInTransaction(TransactionStatus status) {     entityManager.joinTransaction().     // lets delete any exiting records before the test     entityManager.createQuery("delete from " + entityName).executeUpdate().     return null. }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody(new SendEmail("foo@bar.com")). }
false;public;1;8;;public void process(Exchange e) {     LOG.info("Received exchange: " + e.getIn()).     receivedExchange = e.     // should have a EntityManager     EntityManager entityManager = e.getIn().getHeader(JpaConstants.ENTITY_MANAGER, EntityManager.class).     assertNotNull("Should have a EntityManager as header", entityManager).     latch.countDown(). }
false;public;0;47;;@Test public void testProducerInsertsIntoDatabaseThenConsumerFiresMessageExchange() throws Exception {     transactionTemplate.execute(new TransactionCallback<Object>() {          public Object doInTransaction(TransactionStatus status) {             entityManager.joinTransaction().             // lets delete any exiting records before the test             entityManager.createQuery("delete from " + entityName).executeUpdate().             return null.         }     }).     List<?> results = entityManager.createQuery(queryText).getResultList().     assertEquals("Should have no results: " + results, 0, results.size()).     // lets produce some objects     template.send(endpoint, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody(new SendEmail("foo@bar.com")).         }     }).     // now lets assert that there is a result     results = entityManager.createQuery(queryText).getResultList().     assertEquals("Should have results: " + results, 1, results.size()).     SendEmail mail = (SendEmail) results.get(0).     assertEquals("address property", "foo@bar.com", mail.getAddress()).     // now lets create a consumer to consume it     consumer = endpoint.createConsumer(new Processor() {          public void process(Exchange e) {             LOG.info("Received exchange: " + e.getIn()).             receivedExchange = e.             // should have a EntityManager             EntityManager entityManager = e.getIn().getHeader(JpaConstants.ENTITY_MANAGER, EntityManager.class).             assertNotNull("Should have a EntityManager as header", entityManager).             latch.countDown().         }     }).     consumer.start().     assertTrue(latch.await(50, TimeUnit.SECONDS)).     assertNotNull(receivedExchange).     SendEmail result = receivedExchange.getIn().getBody(SendEmail.class).     assertNotNull("Received a POJO", result).     assertEquals("address property", "foo@bar.com", result.getAddress()). }
false;public;0;13;;@Before public void setUp() throws Exception {     template = camelContext.createProducerTemplate().     ServiceHelper.startService(template, camelContext).     Endpoint value = camelContext.getEndpoint(getEndpointUri()).     assertNotNull("Could not find endpoint!", value).     assertTrue("Should be a JPA endpoint but was: " + value, value instanceof JpaEndpoint).     endpoint = (JpaEndpoint) value.     transactionTemplate = endpoint.createTransactionTemplate().     entityManager = endpoint.createEntityManager(). }
false;protected;0;3;;protected String getEndpointUri() {     return "jpa://" + SendEmail.class.getName(). }
false;public;0;4;;@After public void tearDown() throws Exception {     ServiceHelper.stopService(consumer, template, camelContext). }
