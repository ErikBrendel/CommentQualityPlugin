commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     // Don't run on Hibernate     Assume.assumeTrue(ObjectHelper.loadClass("org.hibernate.Hibernate") == null).     super.setUp(). }
false;public;0;20;;@Test public void testRouteJpaShared() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     int countStart = getBrokerCount().     assertThat("brokerCount", countStart, equalTo(1)).     template.sendBody("direct:startShared", new SendEmail("one@somewhere.org")).     // start route     context.getRouteController().startRoute("jpaShared").     // not the cleanest way to check the number of open connections     int countEnd = getBrokerCount().     assertThat("brokerCount", countEnd, equalTo(1)).     latch.countDown().     assertMockEndpointsSatisfied(). }
false;private;0;12;;private int getBrokerCount() {     LocalEntityManagerFactoryBean entityManagerFactory = applicationContext.getBean("&entityManagerFactory", LocalEntityManagerFactoryBean.class).     // uses Spring EL so we don't need to reference the classes     StandardEvaluationContext context = new StandardEvaluationContext(entityManagerFactory).     context.setBeanResolver(new BeanFactoryResolver(applicationContext)).     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("nativeEntityManagerFactory.brokerFactory.openBrokers").     List<?> brokers = expression.getValue(context, List.class).     return brokers.size(). }
false;public;0;21;;@Test public void testRouteJpaNotShared() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:startNotshared", new SendEmail("one@somewhere.org")).     int countStart = getBrokerCount().     assertThat("brokerCount", countStart, equalTo(1)).     // start route     context.getRouteController().startRoute("jpaOwn").     // not the cleanest way to check the number of open connections     int countEnd = getBrokerCount().     assertThat("brokerCount", countEnd, equalTo(2)).     latch.countDown().     assertMockEndpointsSatisfied(). }
false;public;0;6;;public void configure() {     from("direct:startNotshared").to("jpa://" + SendEmail.class.getName() + "?").     from("direct:startShared").to("jpa://" + SendEmail.class.getName() + "?sharedEntityManager=true&joinTransaction=false").     from("jpa://" + SendEmail.class.getName() + "?sharedEntityManager=true&joinTransaction=false").routeId("jpaShared").autoStartup(false).process(new LatchProcessor()).to("mock:result").     from("jpa://" + SendEmail.class.getName() + "?sharedEntityManager=false").routeId("jpaOwn").autoStartup(false).process(new LatchProcessor()).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() {     return new SpringRouteBuilder() {          public void configure() {             from("direct:startNotshared").to("jpa://" + SendEmail.class.getName() + "?").             from("direct:startShared").to("jpa://" + SendEmail.class.getName() + "?sharedEntityManager=true&joinTransaction=false").             from("jpa://" + SendEmail.class.getName() + "?sharedEntityManager=true&joinTransaction=false").routeId("jpaShared").autoStartup(false).process(new LatchProcessor()).to("mock:result").             from("jpa://" + SendEmail.class.getName() + "?sharedEntityManager=false").routeId("jpaOwn").autoStartup(false).process(new LatchProcessor()).to("mock:result").         }     }. }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/springJpaRouteTest.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     latch.await(2, TimeUnit.SECONDS). }
