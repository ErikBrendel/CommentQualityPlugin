commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() throws Exception {     super.setUp().     EntityManagerFactory entityManagerFactory = applicationContext.getBean("entityManagerFactory", EntityManagerFactory.class).     transactionTemplate = applicationContext.getBean("transactionTemplate", TransactionTemplate.class).     entityManager = entityManagerFactory.createEntityManager().     cleanupRepository(). }
false;public;0;7;;@After public void tearDown() throws Exception {     super.tearDown().     if (entityManager != null) {         entityManager.close().     } }
false;protected;0;5;;@Override protected CamelContext createCamelContext() throws Exception {     applicationContext = new ClassPathXmlApplicationContext(routeXml()).     return SpringCamelContext.springCamelContext(applicationContext, true). }
false;public;1;9;;public Object doInTransaction(TransactionStatus arg0) {     entityManager.joinTransaction().     List<?> list = entityManager.createQuery(selectAllString()).getResultList().     for (Object item : list) {         entityManager.remove(item).     }     entityManager.flush().     return Boolean.TRUE. }
false;protected;0;13;;protected void cleanupRepository() {     transactionTemplate.execute(new TransactionCallback<Object>() {          public Object doInTransaction(TransactionStatus arg0) {             entityManager.joinTransaction().             List<?> list = entityManager.createQuery(selectAllString()).getResultList().             for (Object item : list) {                 entityManager.remove(item).             }             entityManager.flush().             return Boolean.TRUE.         }     }). }
false;protected;1;3;;protected void assertEntityInDB(int size) throws Exception {     assertEntityInDB(size, SendEmail.class). }
false;protected;2;6;;protected void assertEntityInDB(int size, Class entityType) {     List<?> results = entityManager.createQuery("select o from " + entityType.getName() + " o").getResultList().     assertEquals(size, results.size()).     assertIsInstanceOf(entityType, results.get(0)). }
false;public;1;6;;public Object doInTransaction(TransactionStatus status) {     entityManager.joinTransaction().     entityManager.persist(entity).     entityManager.flush().     return null. }
false;protected;1;10;;protected void saveEntityInDB(final Object entity) {     transactionTemplate.execute(new TransactionCallback<Object>() {          public Object doInTransaction(TransactionStatus status) {             entityManager.joinTransaction().             entityManager.persist(entity).             entityManager.flush().             return null.         }     }). }
false;protected,abstract;0;1;;protected abstract String routeXml().
false;protected,abstract;0;1;;protected abstract String selectAllString().
