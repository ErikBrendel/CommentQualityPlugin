commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;11;;public Object doInTransaction(TransactionStatus arg0) {     entityManager.joinTransaction().     Query query = entityManager.createQuery(SELECT_ALL_STRING).     query.setParameter(1, PROCESSOR_NAME).     List<?> list = query.getResultList().     for (Object item : list) {         entityManager.remove(item).     }     entityManager.flush().     return Boolean.TRUE. }
false;protected;0;16;;@Override protected void cleanupRepository() {     transactionTemplate.execute(new TransactionCallback<Object>() {          public Object doInTransaction(TransactionStatus arg0) {             entityManager.joinTransaction().             Query query = entityManager.createQuery(SELECT_ALL_STRING).             query.setParameter(1, PROCESSOR_NAME).             List<?> list = query.getResultList().             for (Object item : list) {                 entityManager.remove(item).             }             entityManager.flush().             return Boolean.TRUE.         }     }). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: idempotent     from("direct:start").idempotentConsumer(header("messageId"), jpaMessageIdRepository(lookup(EntityManagerFactory.class), PROCESSOR_NAME)).to("mock:result"). // END SNIPPET: idempotent }
false;public;0;41;;@SuppressWarnings("unchecked") @Test public void testDuplicateMessagesAreFilteredOut() throws Exception {     context.addRoutes(new SpringRouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: idempotent             from("direct:start").idempotentConsumer(header("messageId"), jpaMessageIdRepository(lookup(EntityManagerFactory.class), PROCESSOR_NAME)).to("mock:result").         // END SNIPPET: idempotent         }     }).     context.start().     resultEndpoint.expectedBodiesReceived("one", "two", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied().     // all 3 messages should be in jpa repo     Set<String> ids = new HashSet<>().     Query query = entityManager.createQuery(SELECT_ALL_STRING).     query.setParameter(1, PROCESSOR_NAME).     List<MessageProcessed> list = query.getResultList().     for (MessageProcessed item : list) {         ids.add(item.getMessageId()).     }     assertEquals(3, ids.size()).     assertTrue("Should contain message 1", ids.contains("1")).     assertTrue("Should contain message 2", ids.contains("2")).     assertTrue("Should contain message 3", ids.contains("3")). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("messageId", String.class).     if (id.equals("2")) {         throw new IllegalArgumentException("Damn I cannot handle id 2").     } }
false;public;0;16;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0).redeliveryDelay(0).logStackTrace(false)).     from("direct:start").idempotentConsumer(header("messageId"), jpaMessageIdRepository(lookup(EntityManagerFactory.class), PROCESSOR_NAME)).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("messageId", String.class).             if (id.equals("2")) {                 throw new IllegalArgumentException("Damn I cannot handle id 2").             }         }     }).to("mock:result"). }
false;public;0;49;;@SuppressWarnings("unchecked") @Test public void testFailedExchangesNotAdded() throws Exception {     context.addRoutes(new SpringRouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0).redeliveryDelay(0).logStackTrace(false)).             from("direct:start").idempotentConsumer(header("messageId"), jpaMessageIdRepository(lookup(EntityManagerFactory.class), PROCESSOR_NAME)).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("messageId", String.class).                     if (id.equals("2")) {                         throw new IllegalArgumentException("Damn I cannot handle id 2").                     }                 }             }).to("mock:result").         }     }).     context.start().     // we send in 2 messages with id 2 that fails     getMockEndpoint("mock:error").expectedMessageCount(2).     resultEndpoint.expectedBodiesReceived("one", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied().     // only message 1 and 3 should be in jpa repo     Set<String> ids = new HashSet<>().     Query query = entityManager.createQuery(SELECT_ALL_STRING).     query.setParameter(1, PROCESSOR_NAME).     List<MessageProcessed> list = query.getResultList().     for (MessageProcessed item : list) {         ids.add(item.getMessageId()).     }     assertEquals(2, ids.size()).     assertTrue("Should contain message 1", ids.contains("1")).     assertTrue("Should contain message 3", ids.contains("3")). }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("messageId", messageId). }
false;protected;2;10;;protected void sendMessage(final Object messageId, final Object body) {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("messageId", messageId).         }     }). }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/spring.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
