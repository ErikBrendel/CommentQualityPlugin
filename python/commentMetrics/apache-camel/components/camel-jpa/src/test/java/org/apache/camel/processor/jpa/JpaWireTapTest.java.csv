commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testRouteJpa() throws Exception {     // should auto setup transaction manager and entity factory     JpaComponent jpa = context.getComponent("jpa", JpaComponent.class).     assertNotNull("Should have been auto assigned", jpa.getEntityManagerFactory()).     assertNotNull("Should have been auto assigned", jpa.getTransactionManager()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     template.sendBody("direct:start", new SendEmail("someone@somewhere.org")).     assertMockEndpointsSatisfied().     assertEntityInDB(2). }
false;public;0;13;;public void configure() {     from("direct:start").to("jpa://" + SendEmail.class.getName()).wireTap("direct:tap").to("mock:result").     from("direct:tap").delay(constant("1000")).setBody(constant(new SendEmail("me@you.org"))).to("jpa://" + SendEmail.class.getName()).to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() {     return new SpringRouteBuilder() {          public void configure() {             from("direct:start").to("jpa://" + SendEmail.class.getName()).wireTap("direct:tap").to("mock:result").             from("direct:tap").delay(constant("1000")).setBody(constant(new SendEmail("me@you.org"))).to("jpa://" + SendEmail.class.getName()).to("mock:result").         }     }. }
false;protected;0;4;;@Override protected String routeXml() {     return "org/apache/camel/processor/jpa/springJpaRouteTest.xml". }
false;protected;0;4;;@Override protected String selectAllString() {     return SELECT_ALL_STRING. }
