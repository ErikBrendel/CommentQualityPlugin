commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- public EntityManagerFactory getEntityManagerFactory() {     return entityManagerFactory. }
true;public;1;3;/**  * To use the {@link EntityManagerFactory}. This is strongly recommended to configure.  */ ;/**  * To use the {@link EntityManagerFactory}. This is strongly recommended to configure.  */ public void setEntityManagerFactory(EntityManagerFactory entityManagerFactory) {     this.entityManagerFactory = entityManagerFactory. }
false;public;0;3;;public PlatformTransactionManager getTransactionManager() {     return transactionManager. }
true;public;1;3;/**  * To use the {@link PlatformTransactionManager} for managing transactions.  */ ;/**  * To use the {@link PlatformTransactionManager} for managing transactions.  */ public void setTransactionManager(PlatformTransactionManager transactionManager) {     this.transactionManager = transactionManager. }
false;public;0;3;;public boolean isJoinTransaction() {     return joinTransaction. }
true;public;1;3;/**  * The camel-jpa component will join transaction by default.  * You can use this option to turn this off, for example if you use LOCAL_RESOURCE and join transaction  * doesn't work with your JPA provider. This option can also be set globally on the JpaComponent,  * instead of having to set it on all endpoints.  */ ;/**  * The camel-jpa component will join transaction by default.  * You can use this option to turn this off, for example if you use LOCAL_RESOURCE and join transaction  * doesn't work with your JPA provider. This option can also be set globally on the JpaComponent,  * instead of having to set it on all endpoints.  */ public void setJoinTransaction(boolean joinTransaction) {     this.joinTransaction = joinTransaction. }
false;public;0;3;;public boolean isSharedEntityManager() {     return sharedEntityManager. }
true;public;1;3;/**  * Whether to use Spring's SharedEntityManager for the consumer/producer.  * Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager.  */ ;/**  * Whether to use Spring's SharedEntityManager for the consumer/producer.  * Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager.  */ public void setSharedEntityManager(boolean sharedEntityManager) {     this.sharedEntityManager = sharedEntityManager. }
false;synchronized;0;7;;synchronized ExecutorService getOrCreatePollingConsumerExecutorService() {     if (pollingConsumerExecutorService == null) {         log.debug("Creating thread pool for JpaPollingConsumer to support polling using timeout").         pollingConsumerExecutorService = getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this, "JpaPollingConsumer").     }     return pollingConsumerExecutorService. }
false;protected;3;17;;// Implementation methods // ------------------------------------------------------------------------- @Override protected Endpoint createEndpoint(String uri, String path, Map<String, Object> options) throws Exception {     JpaEndpoint endpoint = new JpaEndpoint(uri, this).     endpoint.setJoinTransaction(isJoinTransaction()).     endpoint.setSharedEntityManager(isSharedEntityManager()).     // lets interpret the next string as a class     if (ObjectHelper.isNotEmpty(path)) {         // provide the class loader of this component to work in OSGi environments as camel-jpa must be able         // to resolve the entity classes         Class<?> type = getCamelContext().getClassResolver().resolveClass(path, JpaComponent.class.getClassLoader()).         if (type != null) {             endpoint.setEntityType(type).         }     }     return endpoint. }
false;protected;0;58;;@Override protected void doStart() throws Exception {     super.doStart().     // lookup entity manager factory and use it if only one provided     if (entityManagerFactory == null) {         Map<String, EntityManagerFactory> map = getCamelContext().getRegistry().findByTypeWithName(EntityManagerFactory.class).         if (map != null) {             if (map.size() == 1) {                 entityManagerFactory = map.values().iterator().next().                 log.info("Using EntityManagerFactory found in registry with id [" + map.keySet().iterator().next() + "] " + entityManagerFactory).             } else {                 log.debug("Could not find a single EntityManagerFactory in registry as there was {} instances.", map.size()).             }         }     } else {         log.info("Using EntityManagerFactory configured: {}", entityManagerFactory).     }     // lookup transaction manager and use it if only one provided     if (transactionManager == null) {         Map<String, PlatformTransactionManager> map = getCamelContext().getRegistry().findByTypeWithName(PlatformTransactionManager.class).         if (map != null) {             if (map.size() == 1) {                 transactionManager = map.values().iterator().next().                 log.info("Using TransactionManager found in registry with id [" + map.keySet().iterator().next() + "] " + transactionManager).             } else {                 log.debug("Could not find a single TransactionManager in registry as there was {} instances.", map.size()).             }         }     } else {         log.info("Using TransactionManager configured on this component: {}", transactionManager).     }     // transaction manager could also be hidden in a template     if (transactionManager == null) {         Map<String, TransactionTemplate> map = getCamelContext().getRegistry().findByTypeWithName(TransactionTemplate.class).         if (map != null) {             if (map.size() == 1) {                 transactionManager = map.values().iterator().next().getTransactionManager().                 log.info("Using TransactionManager found in registry with id [" + map.keySet().iterator().next() + "] " + transactionManager).             } else {                 log.debug("Could not find a single TransactionTemplate in registry as there was {} instances.", map.size()).             }         }     }     // warn about missing configuration     if (entityManagerFactory == null) {         log.warn("No EntityManagerFactory has been configured on this JpaComponent. Each JpaEndpoint will auto create their own EntityManagerFactory.").     }     if (transactionManager == null) {         log.warn("No TransactionManager has been configured on this JpaComponent. Each JpaEndpoint will auto create their own JpaTransactionManager.").     } }
false;protected;0;9;;@Override protected void doStop() throws Exception {     super.doStop().     if (pollingConsumerExecutorService != null) {         getCamelContext().getExecutorServiceManager().shutdown(pollingConsumerExecutorService).         pollingConsumerExecutorService = null.     } }
