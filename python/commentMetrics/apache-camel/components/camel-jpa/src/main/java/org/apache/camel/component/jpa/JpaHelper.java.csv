commented;modifiers;parameterAmount;loc;comment;code
true;public,static;5;40;/**  * Gets or creates an {@link javax.persistence.EntityManager} to use.  *  * @param exchange                 the current exchange, or <tt>null</tt> if no exchange  * @param entityManagerFactory     the entity manager factory (mandatory)  * @param usePassedInEntityManager whether to use an existing {@link javax.persistence.EntityManager} which has been stored  *                                 on the exchange in the header with key {@link org.apache.camel.component.jpa.JpaConstants#ENTITY_MANAGER}  * @param useSharedEntityManager   whether to use SharedEntityManagerCreator if not already passed in  * @return the entity manager (is never null)  */ ;/**  * Gets or creates an {@link javax.persistence.EntityManager} to use.  *  * @param exchange                 the current exchange, or <tt>null</tt> if no exchange  * @param entityManagerFactory     the entity manager factory (mandatory)  * @param usePassedInEntityManager whether to use an existing {@link javax.persistence.EntityManager} which has been stored  *                                 on the exchange in the header with key {@link org.apache.camel.component.jpa.JpaConstants#ENTITY_MANAGER}  * @param useSharedEntityManager   whether to use SharedEntityManagerCreator if not already passed in  * @return the entity manager (is never null)  */ public static EntityManager getTargetEntityManager(Exchange exchange, EntityManagerFactory entityManagerFactory, boolean usePassedInEntityManager, boolean useSharedEntityManager, boolean allowRecreate) {     EntityManager em = null.     // favor using entity manager provided as a header from the end user     if (exchange != null && usePassedInEntityManager) {         em = exchange.getIn().getHeader(JpaConstants.ENTITY_MANAGER, EntityManager.class).     }     // then try reuse any entity manager which has been previously created and stored on the exchange     if (em == null && exchange != null) {         em = exchange.getProperty(JpaConstants.ENTITY_MANAGER, EntityManager.class).     }     if (em == null && useSharedEntityManager) {         em = SharedEntityManagerCreator.createSharedEntityManager(entityManagerFactory).     }     if (em == null) {         // create a new entity manager         em = entityManagerFactory.createEntityManager().         if (exchange != null) {             // we want to reuse the EM so store as property and make sure we close it when done with the exchange             exchange.setProperty(JpaConstants.ENTITY_MANAGER, em).             exchange.addOnCompletion(new JpaCloseEntityManagerOnCompletion(em)).         }     }     if (allowRecreate && em == null || !em.isOpen()) {         // create a new entity manager         em = entityManagerFactory.createEntityManager().         if (exchange != null) {             // we want to reuse the EM so store as property and make sure we close it when done with the exchange             exchange.setProperty(JpaConstants.ENTITY_MANAGER, em).             exchange.addOnCompletion(new JpaCloseEntityManagerOnCompletion(em)).         }     }     return em. }
