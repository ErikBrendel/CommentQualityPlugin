commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static JpaMessageIdRepository jpaMessageIdRepository(String persistenceUnit, String processorName) {     return jpaMessageIdRepository(Persistence.createEntityManagerFactory(persistenceUnit), processorName). }
false;public,static;2;3;;public static JpaMessageIdRepository jpaMessageIdRepository(EntityManagerFactory entityManagerFactory, String processorName) {     return new JpaMessageIdRepository(entityManagerFactory, processorName). }
false;private,static;1;6;;private static TransactionTemplate createTransactionTemplate(EntityManagerFactory entityManagerFactory) {     TransactionTemplate transactionTemplate = new TransactionTemplate().     transactionTemplate.setTransactionManager(new JpaTransactionManager(entityManagerFactory)).     transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED).     return transactionTemplate. }
false;public;1;4;;@ManagedOperation(description = "Adds the key to the store") public boolean add(String messageId) {     return add(null, messageId). }
false;public;1;32;;public Boolean doInTransaction(TransactionStatus status) {     if (isJoinTransaction()) {         entityManager.joinTransaction().     }     try {         List<?> list = query(entityManager, messageId).         if (list.isEmpty()) {             MessageProcessed processed = new MessageProcessed().             processed.setProcessorName(processorName).             processed.setMessageId(messageId).             processed.setCreatedAt(new Date()).             entityManager.persist(processed).             entityManager.flush().             entityManager.close().             return Boolean.TRUE.         } else {             return Boolean.FALSE.         }     } catch (Exception ex) {         log.error("Something went wrong trying to add message to repository {}", ex).         throw new PersistenceException(ex).     } finally {         try {             if (entityManager.isOpen()) {                 entityManager.close().             }         } catch (Exception e) {         // ignore         }     } }
false;public;2;42;;@Override public boolean add(final Exchange exchange, final String messageId) {     final EntityManager entityManager = getTargetEntityManager(exchange, entityManagerFactory, true, sharedEntityManager, true).     // Run this in single transaction.     Boolean rc = transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             if (isJoinTransaction()) {                 entityManager.joinTransaction().             }             try {                 List<?> list = query(entityManager, messageId).                 if (list.isEmpty()) {                     MessageProcessed processed = new MessageProcessed().                     processed.setProcessorName(processorName).                     processed.setMessageId(messageId).                     processed.setCreatedAt(new Date()).                     entityManager.persist(processed).                     entityManager.flush().                     entityManager.close().                     return Boolean.TRUE.                 } else {                     return Boolean.FALSE.                 }             } catch (Exception ex) {                 log.error("Something went wrong trying to add message to repository {}", ex).                 throw new PersistenceException(ex).             } finally {                 try {                     if (entityManager.isOpen()) {                         entityManager.close().                     }                 } catch (Exception e) {                 // ignore                 }             }         }     }).     log.debug("add {} -> {}", messageId, rc).     return rc. }
false;public;1;4;;@ManagedOperation(description = "Does the store contain the given key") public boolean contains(String messageId) {     return contains(null, messageId). }
false;public;1;12;;public Boolean doInTransaction(TransactionStatus status) {     if (isJoinTransaction()) {         entityManager.joinTransaction().     }     List<?> list = query(entityManager, messageId).     if (list.isEmpty()) {         return Boolean.FALSE.     } else {         return Boolean.TRUE.     } }
false;public;2;23;;@Override public boolean contains(final Exchange exchange, final String messageId) {     final EntityManager entityManager = getTargetEntityManager(exchange, entityManagerFactory, true, sharedEntityManager, true).     // Run this in single transaction.     Boolean rc = transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             if (isJoinTransaction()) {                 entityManager.joinTransaction().             }             List<?> list = query(entityManager, messageId).             if (list.isEmpty()) {                 return Boolean.FALSE.             } else {                 return Boolean.TRUE.             }         }     }).     log.debug("contains {} -> {}", messageId, rc).     return rc. }
false;public;1;4;;@ManagedOperation(description = "Remove the key from the store") public boolean remove(String messageId) {     return remove(null, messageId). }
false;public;1;28;;public Boolean doInTransaction(TransactionStatus status) {     if (isJoinTransaction()) {         entityManager.joinTransaction().     }     try {         List<?> list = query(entityManager, messageId).         if (list.isEmpty()) {             return Boolean.FALSE.         } else {             MessageProcessed processed = (MessageProcessed) list.get(0).             entityManager.remove(processed).             entityManager.flush().             entityManager.close().             return Boolean.TRUE.         }     } catch (Exception ex) {         log.error("Something went wrong trying to remove message to repository {}", ex).         throw new PersistenceException(ex).     } finally {         try {             if (entityManager.isOpen()) {                 entityManager.close().             }         } catch (Exception e) {         // ignore         }     } }
false;public;2;38;;@Override public boolean remove(final Exchange exchange, final String messageId) {     final EntityManager entityManager = getTargetEntityManager(exchange, entityManagerFactory, true, sharedEntityManager, true).     Boolean rc = transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             if (isJoinTransaction()) {                 entityManager.joinTransaction().             }             try {                 List<?> list = query(entityManager, messageId).                 if (list.isEmpty()) {                     return Boolean.FALSE.                 } else {                     MessageProcessed processed = (MessageProcessed) list.get(0).                     entityManager.remove(processed).                     entityManager.flush().                     entityManager.close().                     return Boolean.TRUE.                 }             } catch (Exception ex) {                 log.error("Something went wrong trying to remove message to repository {}", ex).                 throw new PersistenceException(ex).             } finally {                 try {                     if (entityManager.isOpen()) {                         entityManager.close().                     }                 } catch (Exception e) {                 // ignore                 }             }         }     }).     log.debug("remove {}", messageId).     return rc. }
false;public;1;4;;@Override public boolean confirm(String messageId) {     return confirm(null, messageId). }
false;public;2;5;;@Override public boolean confirm(final Exchange exchange, String messageId) {     log.debug("confirm {} -> true", messageId).     return true. }
false;public;1;29;;public Boolean doInTransaction(TransactionStatus status) {     if (isJoinTransaction()) {         entityManager.joinTransaction().     }     try {         List<?> list = queryClear(entityManager).         if (!list.isEmpty()) {             Iterator it = list.iterator().             while (it.hasNext()) {                 Object item = it.next().                 entityManager.remove(item).             }             entityManager.flush().             entityManager.close().         }         return Boolean.TRUE.     } catch (Exception ex) {         log.error("Something went wrong trying to clear the repository {}", ex).         throw new PersistenceException(ex).     } finally {         try {             if (entityManager.isOpen()) {                 entityManager.close().             }         } catch (Exception e) {         // ignore         }     } }
false;public;0;38;;@ManagedOperation(description = "Clear the store") public void clear() {     final EntityManager entityManager = getTargetEntityManager(null, entityManagerFactory, true, sharedEntityManager, true).     transactionTemplate.execute(new TransactionCallback<Boolean>() {          public Boolean doInTransaction(TransactionStatus status) {             if (isJoinTransaction()) {                 entityManager.joinTransaction().             }             try {                 List<?> list = queryClear(entityManager).                 if (!list.isEmpty()) {                     Iterator it = list.iterator().                     while (it.hasNext()) {                         Object item = it.next().                         entityManager.remove(item).                     }                     entityManager.flush().                     entityManager.close().                 }                 return Boolean.TRUE.             } catch (Exception ex) {                 log.error("Something went wrong trying to clear the repository {}", ex).                 throw new PersistenceException(ex).             } finally {                 try {                     if (entityManager.isOpen()) {                         entityManager.close().                     }                 } catch (Exception e) {                 // ignore                 }             }         }     }).     log.debug("clear the store {}", MessageProcessed.class.getName()). }
false;private;2;6;;private List<?> query(final EntityManager entityManager, final String messageId) {     Query query = entityManager.createQuery(QUERY_STRING).     query.setParameter(1, processorName).     query.setParameter(2, messageId).     return query.getResultList(). }
false;private;1;5;;private List<?> queryClear(final EntityManager entityManager) {     Query query = entityManager.createQuery(QUERY_CLEAR_STRING).     query.setParameter(1, processorName).     return query.getResultList(). }
false;public;0;4;;@ManagedAttribute(description = "The processor name") public String getProcessorName() {     return processorName. }
false;public;0;4;;@ManagedAttribute(description = "Whether to join existing transaction") public boolean isJoinTransaction() {     return joinTransaction. }
false;public;1;3;;public void setJoinTransaction(boolean joinTransaction) {     this.joinTransaction = joinTransaction. }
false;public;0;4;;@ManagedAttribute(description = "Whether to use shared EntityManager") public boolean isSharedEntityManager() {     return sharedEntityManager. }
false;public;1;3;;public void setSharedEntityManager(boolean sharedEntityManager) {     this.sharedEntityManager = sharedEntityManager. }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
