commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected Query makeQueryObject(EntityManager entityManager) {     return entityManager.createQuery(query). }
false;public;0;4;;@Override public String toString() {     return "Query: " + query + getParameterDescription(). }
true;public,static;1;12;/**  * Creates a query builder using the JPA query syntax  *  * @param query JPA query language to create  * @return a query builder  */ ;/**  * Creates a query builder using the JPA query syntax  *  * @param query JPA query language to create  * @return a query builder  */ public static QueryBuilder query(final String query) {     return new QueryBuilder() {          protected Query makeQueryObject(EntityManager entityManager) {             return entityManager.createQuery(query).         }          @Override         public String toString() {             return "Query: " + query + getParameterDescription().         }     }. }
false;protected;1;3;;protected Query makeQueryObject(EntityManager entityManager) {     return entityManager.createNamedQuery(namedQuery). }
false;public;0;4;;@Override public String toString() {     return "Named: " + namedQuery + getParameterDescription(). }
true;public,static;1;12;/**  * Creates a named query  */ ;/**  * Creates a named query  */ public static QueryBuilder namedQuery(final String namedQuery) {     return new QueryBuilder() {          protected Query makeQueryObject(EntityManager entityManager) {             return entityManager.createNamedQuery(namedQuery).         }          @Override         public String toString() {             return "Named: " + namedQuery + getParameterDescription().         }     }. }
false;protected;1;3;;protected Query makeQueryObject(EntityManager entityManager) {     return entityManager.createNativeQuery(nativeQuery). }
false;public;0;4;;@Override public String toString() {     return "NativeQuery: " + nativeQuery + getParameterDescription(). }
true;public,static;1;12;/**  * Creates a native SQL query  */ ;/**  * Creates a native SQL query  */ public static QueryBuilder nativeQuery(final String nativeQuery) {     return new QueryBuilder() {          protected Query makeQueryObject(EntityManager entityManager) {             return entityManager.createNativeQuery(nativeQuery).         }          @Override         public String toString() {             return "NativeQuery: " + nativeQuery + getParameterDescription().         }     }. }
false;protected;1;3;;protected Query makeQueryObject(EntityManager entityManager) {     return entityManager.createNativeQuery(nativeQuery, resultClass). }
false;public;0;4;;@Override public String toString() {     return "NativeQuery: " + nativeQuery + " resultClass:" + resultClass + getParameterDescription(). }
true;public,static;2;12;/**  * Creates a native SQL query with a provided resultClass  */ ;/**  * Creates a native SQL query with a provided resultClass  */ public static QueryBuilder nativeQuery(final String nativeQuery, final Class<?> resultClass) {     return new QueryBuilder() {          protected Query makeQueryObject(EntityManager entityManager) {             return entityManager.createNativeQuery(nativeQuery, resultClass).         }          @Override         public String toString() {             return "NativeQuery: " + nativeQuery + " resultClass:" + resultClass + getParameterDescription().         }     }. }
true;public;1;3;/**  * Specifies the parameters to the query  *  * @param parameters the parameters to be configured on the query  * @return this query builder  */ ;/**  * Specifies the parameters to the query  *  * @param parameters the parameters to be configured on the query  * @return this query builder  */ public QueryBuilder parameters(Object... parameters) {     return parameters(Arrays.asList(parameters)). }
false;public;2;6;;public void populateQuery(EntityManager entityManager, Query query) {     int counter = 0.     for (Object parameter : parameters) {         query.setParameter(counter++, parameter).     } }
false;public;0;4;;@Override public String toString() {     return "Parameters: " + parameters. }
true;public;1;17;/**  * Specifies the parameters to the query as an ordered collection of  * parameters  *  * @param parameters the parameters to be configured on the query  * @return this query builder  */ ;/**  * Specifies the parameters to the query as an ordered collection of  * parameters  *  * @param parameters the parameters to be configured on the query  * @return this query builder  */ public QueryBuilder parameters(final Collection<?> parameters) {     checkNoParametersConfigured().     parameterBuilder = new ParameterBuilder() {          public void populateQuery(EntityManager entityManager, Query query) {             int counter = 0.             for (Object parameter : parameters) {                 query.setParameter(counter++, parameter).             }         }          @Override         public String toString() {             return "Parameters: " + parameters.         }     }.     return this. }
false;public;2;6;;public void populateQuery(EntityManager entityManager, Query query) {     Set<Map.Entry<String, Object>> entries = parameterMap.entrySet().     for (Map.Entry<String, Object> entry : entries) {         query.setParameter(entry.getKey(), entry.getValue()).     } }
false;public;0;4;;@Override public String toString() {     return "Parameters: " + parameterMap. }
true;public;1;17;/**  * Specifies the parameters to the query as a Map of key/value pairs  *  * @param parameterMap the parameters to be configured on the query  * @return this query builder  */ ;/**  * Specifies the parameters to the query as a Map of key/value pairs  *  * @param parameterMap the parameters to be configured on the query  * @return this query builder  */ public QueryBuilder parameters(final Map<String, Object> parameterMap) {     checkNoParametersConfigured().     parameterBuilder = new ParameterBuilder() {          public void populateQuery(EntityManager entityManager, Query query) {             Set<Map.Entry<String, Object>> entries = parameterMap.entrySet().             for (Map.Entry<String, Object> entry : entries) {                 query.setParameter(entry.getKey(), entry.getValue()).             }         }          @Override         public String toString() {             return "Parameters: " + parameterMap.         }     }.     return this. }
false;protected;0;5;;protected void checkNoParametersConfigured() {     if (parameterBuilder != null) {         throw new IllegalArgumentException("Cannot add parameters to a QueryBuilder which already has parameters configured").     } }
false;public;1;5;;public Query createQuery(EntityManager entityManager) {     Query query = makeQueryObject(entityManager).     populateQuery(entityManager, query).     return query. }
false;protected;0;7;;protected String getParameterDescription() {     if (parameterBuilder == null) {         return "".     } else {         return " " + parameterBuilder.toString().     } }
false;protected;2;5;;protected void populateQuery(EntityManager entityManager, Query query) {     if (parameterBuilder != null) {         parameterBuilder.populateQuery(entityManager, query).     } }
false;protected,abstract;1;1;;protected abstract Query makeQueryObject(EntityManager entityManager).
false;public,abstract;2;1;;public abstract void populateQuery(EntityManager entityManager, Query query).
