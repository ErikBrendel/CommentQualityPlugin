# id;timestamp;commentText;codeText;commentWords;codeWords
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1179416274;A strategy method to lock an object with an exclusive lock so that it can be processed__@param entity        the entity to be locked_@param entityManager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        try {_            if (log.isDebugEnabled()) {_                log.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        }_        catch (Exception e) {_            if (log.isDebugEnabled()) {_                log.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1180021550;A strategy method to lock an object with an exclusive lock so that it can be processed__@param entity        the entity to be locked_@param entityManager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        try {_            if (log.isDebugEnabled()) {_                log.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        }_        catch (Exception e) {_            if (log.isDebugEnabled()) {_                log.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1185553677;A strategy method to lock an object with an exclusive lock so that it can be processed__@param entity        the entity to be locked_@param entityManager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (log.isDebugEnabled()) {_                log.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        }_        catch (Exception e) {_            if (log.isDebugEnabled()) {_                log.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1186522380;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1226348945;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1235748007;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1243093456;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1243485414;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1243487077;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1244220660;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1245821373;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1255951226;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1258003617;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1260372509;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1260373196;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1261839486;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1285078629;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1289556400;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1290627379;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1294920065;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1296546062;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1297032186;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1297975937;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Acquiring exclusive lock on entity: " + entity)__            }_            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,if,log,is,debug,enabled,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1307685726;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1311748650;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1315209088;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1315901888;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1320497173;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1321016014;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1321368485;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1321434072;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1326561926;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1326907405;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1343393250;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1372665042;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1376549254;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1377090392;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1377090392;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1377151818;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, LockModeType.WRITE)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,write,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1377770411;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, lockModeType)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1381567550;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, lockModeType)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1382141421;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, lockModeType)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1383934146;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            entityManager.lock(entity, lockModeType)__            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1392751344;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1395076208;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1415211488;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1429024581;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1431283455;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,delete,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1436423469;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1455696708;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1456572620;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1466273350;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1489481407;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1493226380;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1493226380;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1503505952;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1524001544;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            LOG.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1540108160;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            log.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (log.isDebugEnabled()) {_                log.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1540108161;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            log.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (log.isDebugEnabled()) {_                log.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1540108163;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            log.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (log.isDebugEnabled()) {_                log.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> protected boolean lockEntity(Object entity, EntityManager entityManager);1548080593;A strategy method to lock an object with an exclusive lock so that it can_be processed__@param entity the entity to be locked_@param entityManager entity manager_@return true if the entity was locked;protected boolean lockEntity(Object entity, EntityManager entityManager) {_        if (!getEndpoint().isConsumeLockEntity()) {_            return true__        }_        try {_            log.debug("Acquiring exclusive lock on entity: {}", entity)__            if (isSkipLockedEntity()) {_                entityManager.lock(entity, lockModeType, NOWAIT)__            } else {_                entityManager.lock(entity, lockModeType)__            }_            return true__        } catch (Exception e) {_            if (log.isDebugEnabled()) {_                log.debug("Failed to achieve lock on entity: " + entity + ". Reason: " + e, e)__            }_            if (e instanceof PessimisticLockException || e instanceof OptimisticLockException) {_                _                throw (PersistenceException) e__            }_            _            _            if (entity.getClass().isArray()) {_                return true__            }_            return false__        }_    };a,strategy,method,to,lock,an,object,with,an,exclusive,lock,so,that,it,can,be,processed,param,entity,the,entity,to,be,locked,param,entity,manager,entity,manager,return,true,if,the,entity,was,locked;protected,boolean,lock,entity,object,entity,entity,manager,entity,manager,if,get,endpoint,is,consume,lock,entity,return,true,try,log,debug,acquiring,exclusive,lock,on,entity,entity,if,is,skip,locked,entity,entity,manager,lock,entity,lock,mode,type,nowait,else,entity,manager,lock,entity,lock,mode,type,return,true,catch,exception,e,if,log,is,debug,enabled,log,debug,failed,to,achieve,lock,on,entity,entity,reason,e,e,if,e,instanceof,pessimistic,lock,exception,e,instanceof,optimistic,lock,exception,throw,persistence,exception,e,if,entity,get,class,is,array,return,true,return,false
JpaConsumer -> public void setTransacted(boolean transacted);1321368485;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1321434072;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1326561926;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1326907405;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1343393250;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1372665042;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1376549254;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1377090392;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1377090392;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1377151818;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1377770411;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1381567550;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1382141421;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1383934146;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1392751344;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1395076208;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1415211488;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1429024581;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1431283455;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1436423469;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1455696708;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1456572620;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1466273350;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1489481407;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1493226380;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1493226380;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1503505952;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1524001544;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1540108160;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1540108161;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1540108163;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setTransacted(boolean transacted);1548080593;Sets whether to run in transacted mode or not._<p/>_This option is default <tt>false</tt>. When <tt>false</tt> then all the good messages_will commit, and the first failed message will rollback._However when <tt>true</tt>, then all messages will rollback, if just one message failed.;public void setTransacted(boolean transacted) {_        this.transacted = transacted__    };sets,whether,to,run,in,transacted,mode,or,not,p,this,option,is,default,tt,false,tt,when,tt,false,tt,then,all,the,good,messages,will,commit,and,the,first,failed,message,will,rollback,however,when,tt,true,tt,then,all,messages,will,rollback,if,just,one,message,failed;public,void,set,transacted,boolean,transacted,this,transacted,transacted
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1392751344;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.__@param skipLockedEntity;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity,param,skip,locked,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1395076208;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.__@param skipLockedEntity;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity,param,skip,locked,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1415211488;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.__@param skipLockedEntity;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity,param,skip,locked,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1429024581;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.__@param skipLockedEntity;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity,param,skip,locked,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1431283455;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1436423469;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1455696708;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1456572620;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1466273350;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1489481407;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1493226380;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1493226380;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1503505952;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1524001544;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1540108160;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1540108161;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1540108163;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
JpaConsumer -> public void setSkipLockedEntity(boolean skipLockedEntity);1548080593;Sets whether to use NOWAIT on lock and silently skip the entity. This_allows different instances to process entities at the same time but not_processing the same entity.;public void setSkipLockedEntity(boolean skipLockedEntity) {_        this.skipLockedEntity = skipLockedEntity__    };sets,whether,to,use,nowait,on,lock,and,silently,skip,the,entity,this,allows,different,instances,to,process,entities,at,the,same,time,but,not,processing,the,same,entity;public,void,set,skip,locked,entity,boolean,skip,locked,entity,this,skip,locked,entity,skip,locked,entity
