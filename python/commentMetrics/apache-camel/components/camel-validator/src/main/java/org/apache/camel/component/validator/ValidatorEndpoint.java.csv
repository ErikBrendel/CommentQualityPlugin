commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@ManagedOperation(description = "Clears the cached schema, forcing to re-load the schema on next request") public void clearCachedSchema() {     // will cause to reload the schema     schemaReader.setSchema(null). }
false;public;0;30;;@Override public Producer createProducer() throws Exception {     if (!schemaReaderConfigured) {         if (resourceResolver != null) {             schemaReader.setResourceResolver(resourceResolver).         } else if (resourceResolverFactory != null) {             resourceResolver = resourceResolverFactory.createResourceResolver(getCamelContext(), resourceUri).             // set the created resource resolver to the resourceResolver variable, so that it can             // be accessed by the endpoint             schemaReader.setResourceResolver(resourceResolver).         } else {             schemaReader.setResourceResolver(new DefaultValidatorResourceResolverFactory().createResourceResolver(getCamelContext(), resourceUri)).         }         schemaReader.setSchemaLanguage(getSchemaLanguage()).         schemaReader.setSchemaFactory(getSchemaFactory()).         // force loading of schema at create time otherwise concurrent         // processing could cause thread safe issues for the         // javax.xml.validation.SchemaFactory         schemaReader.loadSchema().         // configure only once         schemaReaderConfigured = true.     }     ValidatingProcessor validator = new ValidatingProcessor(schemaReader).     configureValidator(validator).     return new ValidatorProducer(this, validator). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Cannot consume from validator"). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;protected;1;7;;protected void configureValidator(ValidatingProcessor validator) throws Exception {     validator.setErrorHandler(getErrorHandler()).     validator.setUseSharedSchema(isUseSharedSchema()).     validator.setFailOnNullBody(isFailOnNullBody()).     validator.setFailOnNullHeader(isFailOnNullHeader()).     validator.setHeaderName(getHeaderName()). }
false;public;0;3;;public String getResourceUri() {     return resourceUri. }
true;public;1;3;/**  * URL to a local resource on the classpath,or a reference to lookup a bean in the Registry,  * or a full URL to a remote resource or resource on the file system which contains the XSD to validate against.  */ ;/**  * URL to a local resource on the classpath,or a reference to lookup a bean in the Registry,  * or a full URL to a remote resource or resource on the file system which contains the XSD to validate against.  */ public void setResourceUri(String resourceUri) {     this.resourceUri = resourceUri. }
false;public;0;3;;public String getSchemaLanguage() {     return schemaLanguage. }
true;public;1;3;/**  * Configures the W3C XML Schema Namespace URI.  */ ;/**  * Configures the W3C XML Schema Namespace URI.  */ public void setSchemaLanguage(String schemaLanguage) {     this.schemaLanguage = schemaLanguage. }
false;public;0;3;;public SchemaFactory getSchemaFactory() {     return schemaFactory. }
true;public;1;3;/**  * To use a custom javax.xml.validation.SchemaFactory  */ ;/**  * To use a custom javax.xml.validation.SchemaFactory  */ public void setSchemaFactory(SchemaFactory schemaFactory) {     this.schemaFactory = schemaFactory. }
false;public;0;3;;public ValidatorErrorHandler getErrorHandler() {     return errorHandler. }
true;public;1;3;/**  * To use a custom org.apache.camel.processor.validation.ValidatorErrorHandler.  * <p/>  * The default error handler captures the errors and throws an exception.  */ ;/**  * To use a custom org.apache.camel.processor.validation.ValidatorErrorHandler.  * <p/>  * The default error handler captures the errors and throws an exception.  */ public void setErrorHandler(ValidatorErrorHandler errorHandler) {     this.errorHandler = errorHandler. }
false;public;0;3;;public boolean isUseSharedSchema() {     return useSharedSchema. }
true;public;1;3;/**  * Whether the Schema instance should be shared or not. This option is introduced to work around a JDK 1.6.x bug. Xerces should not have this issue.  */ ;/**  * Whether the Schema instance should be shared or not. This option is introduced to work around a JDK 1.6.x bug. Xerces should not have this issue.  */ public void setUseSharedSchema(boolean useSharedSchema) {     this.useSharedSchema = useSharedSchema. }
false;public;0;3;;public LSResourceResolver getResourceResolver() {     return resourceResolver. }
true;public;1;3;/**  * To use a custom LSResourceResolver. See also {@link #setResourceResolverFactory(ValidatorResourceResolverFactory)}  */ ;/**  * To use a custom LSResourceResolver. See also {@link #setResourceResolverFactory(ValidatorResourceResolverFactory)}  */ public void setResourceResolver(LSResourceResolver resourceResolver) {     this.resourceResolver = resourceResolver. }
false;public;0;3;;public ValidatorResourceResolverFactory getResourceResolverFactory() {     return resourceResolverFactory. }
true;public;1;3;/**  * For creating a resource resolver which depends on the endpoint resource URI.  * Must not be used in combination with method {@link #setResourceResolver(LSResourceResolver)}.  * If not set then {@link DefaultValidatorResourceResolverFactory} is used  */ ;/**  * For creating a resource resolver which depends on the endpoint resource URI.  * Must not be used in combination with method {@link #setResourceResolver(LSResourceResolver)}.  * If not set then {@link DefaultValidatorResourceResolverFactory} is used  */ public void setResourceResolverFactory(ValidatorResourceResolverFactory resourceResolverFactory) {     this.resourceResolverFactory = resourceResolverFactory. }
false;public;0;3;;public boolean isFailOnNullBody() {     return failOnNullBody. }
true;public;1;3;/**  * Whether to fail if no body exists.  */ ;/**  * Whether to fail if no body exists.  */ public void setFailOnNullBody(boolean failOnNullBody) {     this.failOnNullBody = failOnNullBody. }
false;public;0;3;;public boolean isFailOnNullHeader() {     return failOnNullHeader. }
true;public;1;3;/**  * Whether to fail if no header exists when validating against a header.  */ ;/**  * Whether to fail if no header exists when validating against a header.  */ public void setFailOnNullHeader(boolean failOnNullHeader) {     this.failOnNullHeader = failOnNullHeader. }
false;public;0;3;;public String getHeaderName() {     return headerName. }
true;public;1;3;/**  * To validate against a header instead of the message body.  */ ;/**  * To validate against a header instead of the message body.  */ public void setHeaderName(String headerName) {     this.headerName = headerName. }
