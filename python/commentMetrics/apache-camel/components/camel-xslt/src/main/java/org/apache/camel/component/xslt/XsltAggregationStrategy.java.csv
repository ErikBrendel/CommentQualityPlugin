commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;2;27;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     // guard against unlikely NPE     if (newExchange == null) {         return oldExchange.     }     // incoming exchange     if (oldExchange == null) {         return newExchange.     }     if (!isRunAllowed()) {         throw new RejectedExecutionException().     }     try {         oldExchange.setProperty(propertyName, newExchange.getIn().getBody(Document.class)).         xslt.process(oldExchange).         return oldExchange.     } catch (Throwable e) {         oldExchange.setException(e).     }     return oldExchange. }
false;public;1;3;;public void setOutput(XsltOutput output) {     this.output = output. }
false;public;1;3;;public void setXslt(XsltBuilder xslt) {     this.xslt = xslt. }
false;public;1;3;;public void setUriResolver(URIResolver uriResolver) {     this.uriResolver = uriResolver. }
false;public;1;3;;public void setTransformerFactoryClass(String transformerFactoryClass) {     this.transformerFactoryClass = transformerFactoryClass. }
false;public;0;3;;public String getPropertyName() {     return propertyName. }
false;public;1;3;;public void setPropertyName(String propertyName) {     this.propertyName = propertyName. }
false;protected;2;17;;protected void configureOutput(XsltBuilder xslt, String output) throws Exception {     if (ObjectHelper.isEmpty(output)) {         return.     }     if ("string".equalsIgnoreCase(output)) {         xslt.outputString().     } else if ("bytes".equalsIgnoreCase(output)) {         xslt.outputBytes().     } else if ("DOM".equalsIgnoreCase(output)) {         xslt.outputDOM().     } else if ("file".equalsIgnoreCase(output)) {         xslt.outputFile().     } else {         throw new IllegalArgumentException("Unknown output type: " + output).     } }
true;protected;1;9;/**  * Loads the resource.  *  * @param resourceUri the resource to load  * @throws TransformerException is thrown if error loading resource  * @throws IOException          is thrown if error loading resource  */ ;/**  * Loads the resource.  *  * @param resourceUri the resource to load  * @throws TransformerException is thrown if error loading resource  * @throws IOException          is thrown if error loading resource  */ protected void loadResource(String resourceUri) throws TransformerException, IOException {     LOG.trace("{} loading schema resource: {}", this, resourceUri).     Source source = xslt.getUriResolver().resolve(resourceUri, null).     if (source == null) {         throw new IOException("Cannot load schema resource " + resourceUri).     } else {         xslt.setTransformerSource(source).     } }
true;public,static;1;3;// --- fluent builders --- ;// --- fluent builders --- public static XsltAggregationStrategy create(String xslFile) {     return new XsltAggregationStrategy(xslFile). }
false;public;1;4;;public XsltAggregationStrategy withPropertyName(String propertyName) {     setPropertyName(propertyName).     return this. }
false;public;1;4;;public XsltAggregationStrategy withOutput(XsltOutput output) {     setOutput(output).     return this. }
false;public;1;4;;public XsltAggregationStrategy withUriResolver(URIResolver resolver) {     setUriResolver(resolver).     return this. }
false;public;1;4;;public XsltAggregationStrategy withTransformerFactoryClass(String clazz) {     setTransformerFactoryClass(clazz).     return this. }
false;public;0;4;;public XsltAggregationStrategy withSaxon() {     setTransformerFactoryClass(XsltEndpoint.SAXON_TRANSFORMER_FACTORY_CLASS_NAME).     return this. }
false;protected;0;29;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "CamelContext", this).     // set the default property name if not set     this.propertyName = ObjectHelper.isNotEmpty(propertyName) ? propertyName : DEFAULT_PROPERTY_NAME.     // initialize the XsltBuilder     this.xslt = camelContext.getInjector().newInstance(XsltBuilder.class).     if (transformerFactoryClass != null) {         Class<?> factoryClass = camelContext.getClassResolver().resolveMandatoryClass(transformerFactoryClass, XsltAggregationStrategy.class.getClassLoader()).         TransformerFactory factory = (TransformerFactory) camelContext.getInjector().newInstance(factoryClass).         xslt.setTransformerFactory(factory).     }     if (uriResolver == null) {         uriResolver = new XsltUriResolver(camelContext, xslFile).     }     xslt.setUriResolver(uriResolver).     xslt.setFailOnNullBody(true).     xslt.transformerCacheSize(0).     xslt.setAllowStAX(true).     configureOutput(xslt, output.name()).     loadResource(xslFile). }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
