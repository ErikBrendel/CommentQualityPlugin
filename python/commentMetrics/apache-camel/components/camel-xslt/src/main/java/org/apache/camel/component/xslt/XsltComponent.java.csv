commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public XsltUriResolverFactory getUriResolverFactory() {     return uriResolverFactory. }
true;public;1;3;/**  * To use a custom UriResolver which depends on a dynamic endpoint resource URI. Should not be used together with the option 'uriResolver'.  */ ;/**  * To use a custom UriResolver which depends on a dynamic endpoint resource URI. Should not be used together with the option 'uriResolver'.  */ public void setUriResolverFactory(XsltUriResolverFactory uriResolverFactory) {     this.uriResolverFactory = uriResolverFactory. }
false;public;0;3;;public URIResolver getUriResolver() {     return uriResolver. }
true;public;1;3;/**  * To use a custom UriResolver. Should not be used together with the option 'uriResolverFactory'.  */ ;/**  * To use a custom UriResolver. Should not be used together with the option 'uriResolverFactory'.  */ public void setUriResolver(URIResolver uriResolver) {     this.uriResolver = uriResolver. }
false;public;0;3;;public boolean isContentCache() {     return contentCache. }
true;public;1;3;/**  * Cache for the resource content (the stylesheet file) when it is loaded.  * If set to false Camel will reload the stylesheet file on each message processing. This is good for development.  * A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation.  */ ;/**  * Cache for the resource content (the stylesheet file) when it is loaded.  * If set to false Camel will reload the stylesheet file on each message processing. This is good for development.  * A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation.  */ public void setContentCache(boolean contentCache) {     this.contentCache = contentCache. }
false;public;0;3;;public boolean isSaxon() {     return saxon. }
true;public;1;3;/**  * Whether to use Saxon as the transformerFactoryClass.  * If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon to the classpath.  */ ;/**  * Whether to use Saxon as the transformerFactoryClass.  * If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon to the classpath.  */ public void setSaxon(boolean saxon) {     this.saxon = saxon. }
false;public;0;3;;public List<Object> getSaxonExtensionFunctions() {     return saxonExtensionFunctions. }
true;public;1;3;/**  * Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition.  * You would need to add camel-saxon to the classpath.  * The function is looked up in the registry, where you can comma to separate multiple values to lookup.  */ ;/**  * Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition.  * You would need to add camel-saxon to the classpath.  * The function is looked up in the registry, where you can comma to separate multiple values to lookup.  */ public void setSaxonExtensionFunctions(List<Object> extensionFunctions) {     this.saxonExtensionFunctions = extensionFunctions. }
true;public;1;7;/**  * Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition.  * You would need to add camel-saxon to the classpath.  * The function is looked up in the registry, where you can comma to separate multiple values to lookup.  */ ;/**  * Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition.  * You would need to add camel-saxon to the classpath.  * The function is looked up in the registry, where you can comma to separate multiple values to lookup.  */ public void setSaxonExtensionFunctions(String extensionFunctions) {     this.saxonExtensionFunctions = EndpointHelper.resolveReferenceListParameter(getCamelContext(), extensionFunctions, Object.class). }
false;public;0;3;;public Object getSaxonConfiguration() {     return saxonConfiguration. }
true;public;1;3;/**  * To use a custom Saxon configuration  */ ;/**  * To use a custom Saxon configuration  */ public void setSaxonConfiguration(Object saxonConfiguration) {     this.saxonConfiguration = saxonConfiguration. }
false;public;0;3;;public Map<String, Object> getSaxonConfigurationProperties() {     return saxonConfigurationProperties. }
true;public;1;3;/**  * To set custom Saxon configuration properties  */ ;/**  * To set custom Saxon configuration properties  */ public void setSaxonConfigurationProperties(Map<String, Object> configurationProperties) {     this.saxonConfigurationProperties = configurationProperties. }
false;protected;3;48;;@Override protected Endpoint createEndpoint(String uri, final String remaining, Map<String, Object> parameters) throws Exception {     XsltEndpoint endpoint = new XsltEndpoint(uri, this).     endpoint.setContentCache(isContentCache()).     endpoint.setSaxon(isSaxon()).     endpoint.setSaxonConfiguration(saxonConfiguration).     endpoint.setSaxonConfigurationProperties(saxonConfigurationProperties).     endpoint.setSaxonExtensionFunctions(saxonExtensionFunctions).     // lookup custom resolver to use     URIResolver resolver = resolveAndRemoveReferenceParameter(parameters, "uriResolver", URIResolver.class).     if (resolver == null) {         // not in endpoint then use component specific resolver         resolver = getUriResolver().     }     if (resolver == null) {         // lookup custom resolver factory to use         XsltUriResolverFactory resolverFactory = resolveAndRemoveReferenceParameter(parameters, "uriResolverFactory", XsltUriResolverFactory.class).         if (resolverFactory == null) {             // not in endpoint then use component specific resolver factory             resolverFactory = getUriResolverFactory().         }         if (resolverFactory == null) {             // fallback to use the Default URI resolver factory             resolverFactory = new DefaultXsltUriResolverFactory().         }         resolver = resolverFactory.createUriResolver(getCamelContext(), remaining).     }     endpoint.setUriResolver(resolver).     setProperties(endpoint, parameters).     String resourceUri = remaining.     if (ResourceHelper.isHttpUri(resourceUri)) {         // if its a http uri, then append additional parameters as they are part of the uri         resourceUri = ResourceHelper.appendParameters(resourceUri, parameters).     }     log.debug("{} using schema resource: {}", this, resourceUri).     endpoint.setResourceUri(resourceUri).     if (!parameters.isEmpty()) {         // additional parameters need to be stored on endpoint as they can be used to configure xslt builder additionally         endpoint.setParameters(parameters).     }     return endpoint. }
