# id;timestamp;commentText;codeText;commentWords;codeWords
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1291814864;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1291846409;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1291966629;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1296495624;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1296559781;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1298407301;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1298543101;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1298611849;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1306598071;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1307584248;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1308710460;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1309788201;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1309796137;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1310732770;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1316198186;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1324996472;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1326392736;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1326623920;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1326885550;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1329325079;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1331486528;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1337787858;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1337868694;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1337876322;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1337948322;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1337953843;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1339227531;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1342458052;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1345209872;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1348825863;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1368267678;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1373129971;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1376549254;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1377519119;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1377520219;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1377568298;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1378202957;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1380373064;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1381142659;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1384450797;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1415211488;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1417588598;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1417748526;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1422910430;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1422950020;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1423147884;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1423147884;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1423922931;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1424015964;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1424842351;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1426507208;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1431500811;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1453321450;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1454234249;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1454235010;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1463118388;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1463118635;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1467138250;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1478271959;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1479916286;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1484136182;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1487924177;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1489158238;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1513158838;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1520250198;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1523968787;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1536687142;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1540108158;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1540108163;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1547200229;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1547836603;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1547890500;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> CamelInjector -> protected void injectFields(final Object bean, final String beanName);1548685217;A strategy method to allow implementations to perform some custom JBI_based injection of the POJO__@param bean the bean to be injected;protected void injectFields(final Object bean, final String beanName) {_            Class<?> clazz = bean.getClass()__            do {_                Field[] fields = clazz.getDeclaredFields()__                for (Field field : fields) {_                    PropertyInject propertyInject = field.getAnnotation(PropertyInject.class)__                    if (propertyInject != null && matchContext(propertyInject.context())) {_                        injectFieldProperty(field, propertyInject.value(), propertyInject.defaultValue(), bean, beanName)__                    }__                    BeanInject beanInject = field.getAnnotation(BeanInject.class)__                    if (beanInject != null && matchContext(beanInject.context())) {_                        injectFieldBean(field, beanInject.value(), bean, beanName)__                    }__                    EndpointInject endpointInject = field.getAnnotation(EndpointInject.class)__                    if (endpointInject != null && matchContext(endpointInject.context())) {_                        injectField(field, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), bean, beanName)__                    }__                    Produce produce = field.getAnnotation(Produce.class)__                    if (produce != null && matchContext(produce.context())) {_                        injectField(field, produce.uri(), produce.ref(), produce.property(), bean, beanName)__                    }_                }_                clazz = clazz.getSuperclass()__            } while (clazz != null && clazz != Object.class)__        };a,strategy,method,to,allow,implementations,to,perform,some,custom,jbi,based,injection,of,the,pojo,param,bean,the,bean,to,be,injected;protected,void,inject,fields,final,object,bean,final,string,bean,name,class,clazz,bean,get,class,do,field,fields,clazz,get,declared,fields,for,field,field,fields,property,inject,property,inject,field,get,annotation,property,inject,class,if,property,inject,null,match,context,property,inject,context,inject,field,property,field,property,inject,value,property,inject,default,value,bean,bean,name,bean,inject,bean,inject,field,get,annotation,bean,inject,class,if,bean,inject,null,match,context,bean,inject,context,inject,field,bean,field,bean,inject,value,bean,bean,name,endpoint,inject,endpoint,inject,field,get,annotation,endpoint,inject,class,if,endpoint,inject,null,match,context,endpoint,inject,context,inject,field,field,endpoint,inject,uri,endpoint,inject,ref,endpoint,inject,property,bean,bean,name,produce,produce,field,get,annotation,produce,class,if,produce,null,match,context,produce,context,inject,field,field,produce,uri,produce,ref,produce,property,bean,bean,name,clazz,clazz,get,superclass,while,clazz,null,clazz,object,class
CamelNamespaceHandler -> private void registerBundleStateService(ParserContext context);1547200229;There's single instance of {@link BlueprintCamelStateService} that's used by all Blueprint Camel contexts_to inform about state of Camel contexts. If Karaf is available, this information will propagate to_<em>extended bundle info</em>._See CAMEL-12980_@param context;private void registerBundleStateService(ParserContext context) {_        ComponentDefinitionRegistry componentDefinitionRegistry = context.getComponentDefinitionRegistry()__        ComponentMetadata cm = componentDefinitionRegistry.getComponentDefinition(".camelBlueprint.bundleStateService")__        if (cm == null) {_            MutableBeanMetadata ssm = context.createMetadata(MutableBeanMetadata.class)__            ssm.setId(".camelBlueprint.bundleStateService")__            ssm.setRuntimeClass(BlueprintCamelStateService.class)__            ssm.addProperty("bundleContext", createRef(context, "blueprintBundleContext"))__            ssm.setInitMethod("init")__            ssm.setDestroyMethod("destroy")__            componentDefinitionRegistry.registerComponentDefinition(ssm)__        }_    };there,s,single,instance,of,link,blueprint,camel,state,service,that,s,used,by,all,blueprint,camel,contexts,to,inform,about,state,of,camel,contexts,if,karaf,is,available,this,information,will,propagate,to,em,extended,bundle,info,em,see,camel,12980,param,context;private,void,register,bundle,state,service,parser,context,context,component,definition,registry,component,definition,registry,context,get,component,definition,registry,component,metadata,cm,component,definition,registry,get,component,definition,camel,blueprint,bundle,state,service,if,cm,null,mutable,bean,metadata,ssm,context,create,metadata,mutable,bean,metadata,class,ssm,set,id,camel,blueprint,bundle,state,service,ssm,set,runtime,class,blueprint,camel,state,service,class,ssm,add,property,bundle,context,create,ref,context,blueprint,bundle,context,ssm,set,init,method,init,ssm,set,destroy,method,destroy,component,definition,registry,register,component,definition,ssm
CamelNamespaceHandler -> private void registerBundleStateService(ParserContext context);1547836603;There's single instance of {@link BlueprintCamelStateService} that's used by all Blueprint Camel contexts_to inform about state of Camel contexts. If Karaf is available, this information will propagate to_<em>extended bundle info</em>._See CAMEL-12980_@param context;private void registerBundleStateService(ParserContext context) {_        ComponentDefinitionRegistry componentDefinitionRegistry = context.getComponentDefinitionRegistry()__        ComponentMetadata cm = componentDefinitionRegistry.getComponentDefinition(".camelBlueprint.bundleStateService")__        if (cm == null) {_            MutableBeanMetadata ssm = context.createMetadata(MutableBeanMetadata.class)__            ssm.setId(".camelBlueprint.bundleStateService")__            ssm.setRuntimeClass(BlueprintCamelStateService.class)__            ssm.addProperty("bundleContext", createRef(context, "blueprintBundleContext"))__            ssm.setInitMethod("init")__            ssm.setDestroyMethod("destroy")__            componentDefinitionRegistry.registerComponentDefinition(ssm)__        }_    };there,s,single,instance,of,link,blueprint,camel,state,service,that,s,used,by,all,blueprint,camel,contexts,to,inform,about,state,of,camel,contexts,if,karaf,is,available,this,information,will,propagate,to,em,extended,bundle,info,em,see,camel,12980,param,context;private,void,register,bundle,state,service,parser,context,context,component,definition,registry,component,definition,registry,context,get,component,definition,registry,component,metadata,cm,component,definition,registry,get,component,definition,camel,blueprint,bundle,state,service,if,cm,null,mutable,bean,metadata,ssm,context,create,metadata,mutable,bean,metadata,class,ssm,set,id,camel,blueprint,bundle,state,service,ssm,set,runtime,class,blueprint,camel,state,service,class,ssm,add,property,bundle,context,create,ref,context,blueprint,bundle,context,ssm,set,init,method,init,ssm,set,destroy,method,destroy,component,definition,registry,register,component,definition,ssm
CamelNamespaceHandler -> private void registerBundleStateService(ParserContext context);1547890500;There's single instance of {@link BlueprintCamelStateService} that's used by all Blueprint Camel contexts_to inform about state of Camel contexts. If Karaf is available, this information will propagate to_<em>extended bundle info</em>._See CAMEL-12980_@param context;private void registerBundleStateService(ParserContext context) {_        ComponentDefinitionRegistry componentDefinitionRegistry = context.getComponentDefinitionRegistry()__        ComponentMetadata cm = componentDefinitionRegistry.getComponentDefinition(".camelBlueprint.bundleStateService")__        if (cm == null) {_            MutableBeanMetadata ssm = context.createMetadata(MutableBeanMetadata.class)__            ssm.setId(".camelBlueprint.bundleStateService")__            ssm.setRuntimeClass(BlueprintCamelStateService.class)__            ssm.addProperty("bundleContext", createRef(context, "blueprintBundleContext"))__            ssm.setInitMethod("init")__            ssm.setDestroyMethod("destroy")__            componentDefinitionRegistry.registerComponentDefinition(ssm)__        }_    };there,s,single,instance,of,link,blueprint,camel,state,service,that,s,used,by,all,blueprint,camel,contexts,to,inform,about,state,of,camel,contexts,if,karaf,is,available,this,information,will,propagate,to,em,extended,bundle,info,em,see,camel,12980,param,context;private,void,register,bundle,state,service,parser,context,context,component,definition,registry,component,definition,registry,context,get,component,definition,registry,component,metadata,cm,component,definition,registry,get,component,definition,camel,blueprint,bundle,state,service,if,cm,null,mutable,bean,metadata,ssm,context,create,metadata,mutable,bean,metadata,class,ssm,set,id,camel,blueprint,bundle,state,service,ssm,set,runtime,class,blueprint,camel,state,service,class,ssm,add,property,bundle,context,create,ref,context,blueprint,bundle,context,ssm,set,init,method,init,ssm,set,destroy,method,destroy,component,definition,registry,register,component,definition,ssm
CamelNamespaceHandler -> private void registerBundleStateService(ParserContext context);1548685217;There's single instance of {@link BlueprintCamelStateService} that's used by all Blueprint Camel contexts_to inform about state of Camel contexts. If Karaf is available, this information will propagate to_<em>extended bundle info</em>._See CAMEL-12980_@param context;private void registerBundleStateService(ParserContext context) {_        ComponentDefinitionRegistry componentDefinitionRegistry = context.getComponentDefinitionRegistry()__        ComponentMetadata cm = componentDefinitionRegistry.getComponentDefinition(".camelBlueprint.bundleStateService")__        if (cm == null) {_            MutableBeanMetadata ssm = context.createMetadata(MutableBeanMetadata.class)__            ssm.setId(".camelBlueprint.bundleStateService")__            ssm.setRuntimeClass(BlueprintCamelStateService.class)__            ssm.addProperty("bundleContext", createRef(context, "blueprintBundleContext"))__            ssm.setInitMethod("init")__            ssm.setDestroyMethod("destroy")__            componentDefinitionRegistry.registerComponentDefinition(ssm)__        }_    };there,s,single,instance,of,link,blueprint,camel,state,service,that,s,used,by,all,blueprint,camel,contexts,to,inform,about,state,of,camel,contexts,if,karaf,is,available,this,information,will,propagate,to,em,extended,bundle,info,em,see,camel,12980,param,context;private,void,register,bundle,state,service,parser,context,context,component,definition,registry,component,definition,registry,context,get,component,definition,registry,component,metadata,cm,component,definition,registry,get,component,definition,camel,blueprint,bundle,state,service,if,cm,null,mutable,bean,metadata,ssm,context,create,metadata,mutable,bean,metadata,class,ssm,set,id,camel,blueprint,bundle,state,service,ssm,set,runtime,class,blueprint,camel,state,service,class,ssm,add,property,bundle,context,create,ref,context,blueprint,bundle,context,ssm,set,init,method,init,ssm,set,destroy,method,destroy,component,definition,registry,register,component,definition,ssm
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1422910430;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if ("uri".equals(att.getNodeName()) || "url".equals(att.getNodeName())) {__                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removing whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,uri,equals,att,get,node,name,url,equals,att,get,node,name,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removing,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1422950020;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1423147884;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1423147884;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1423922931;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1424015964;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1424842351;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1426507208;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1431500811;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1453321450;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1454234249;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1454235010;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1463118388;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1463118635;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    String value = att.getNodeValue()__                    _                    String changed = value.replaceAll("\\s{2,}", "")___                    if (!value.equals(changed)) {_                        LOG.debug("Removed whitespace noise from attribute {} -> {}", value, changed)__                        att.setNodeValue(changed)__                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,string,value,att,get,node,value,string,changed,value,replace,all,s,2,if,value,equals,changed,log,debug,removed,whitespace,noise,from,attribute,value,changed,att,set,node,value,changed,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1467138250;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1478271959;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1479916286;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1484136182;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1487924177;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1489158238;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1513158838;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1520250198;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1523968787;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1536687142;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = ObjectHelper.before(value, "?")__                    String after = ObjectHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,object,helper,before,value,string,after,object,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1540108158;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = StringHelper.before(value, "?")__                    String after = StringHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,string,helper,before,value,string,after,string,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1540108163;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = StringHelper.before(value, "?")__                    String after = StringHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,string,helper,before,value,string,after,string,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1547200229;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = StringHelper.before(value, "?")__                    String after = StringHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,string,helper,before,value,string,after,string,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1547836603;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = StringHelper.before(value, "?")__                    String after = StringHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,string,helper,before,value,string,after,string,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1547890500;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = StringHelper.before(value, "?")__                    String after = StringHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,string,helper,before,value,string,after,string,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
CamelNamespaceHandler -> public static void doBeforeParse(Node node, String fromNamespace, String toNamespace);1548685217;Prepares the nodes before parsing.;public static void doBeforeParse(Node node, String fromNamespace, String toNamespace) {_        if (node.getNodeType() == Node.ELEMENT_NODE) {_            Document doc = node.getOwnerDocument()__            if (node.getNamespaceURI().equals(fromNamespace)) {_                doc.renameNode(node, toNamespace, node.getLocalName())__            }__            _            _            _            NamedNodeMap map = node.getAttributes()__            for (int i = 0_ i < map.getLength()_ i++) {_                Node att = map.item(i)__                if (att.getNodeName().equals("uri") || att.getNodeName().endsWith("Uri")) {_                    final String value = att.getNodeValue()__                    String before = StringHelper.before(value, "?")__                    String after = StringHelper.after(value, "?")___                    if (before != null && after != null) {_                        _                        String changed = after.replaceAll("\\s{2,}", "")__                        if (!after.equals(changed)) {_                            String newAtr = before.trim() + "?" + changed.trim()__                            LOG.debug("Removed whitespace noise from attribute {} -> {}", value, newAtr)__                            att.setNodeValue(newAtr)__                        }_                    }_                }_            }_        }_        NodeList list = node.getChildNodes()__        for (int i = 0_ i < list.getLength()_ ++i) {_            doBeforeParse(list.item(i), fromNamespace, toNamespace)__        }_    };prepares,the,nodes,before,parsing;public,static,void,do,before,parse,node,node,string,from,namespace,string,to,namespace,if,node,get,node,type,node,document,doc,node,get,owner,document,if,node,get,namespace,uri,equals,from,namespace,doc,rename,node,node,to,namespace,node,get,local,name,named,node,map,map,node,get,attributes,for,int,i,0,i,map,get,length,i,node,att,map,item,i,if,att,get,node,name,equals,uri,att,get,node,name,ends,with,uri,final,string,value,att,get,node,value,string,before,string,helper,before,value,string,after,string,helper,after,value,if,before,null,after,null,string,changed,after,replace,all,s,2,if,after,equals,changed,string,new,atr,before,trim,changed,trim,log,debug,removed,whitespace,noise,from,attribute,value,new,atr,att,set,node,value,new,atr,node,list,list,node,get,child,nodes,for,int,i,0,i,list,get,length,i,do,before,parse,list,item,i,from,namespace,to,namespace
