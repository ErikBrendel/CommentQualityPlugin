commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Object getObject() {     return serviceProxy. }
false;public;0;3;;public Class<Object> getObjectType() {     return Object.class. }
false;protected;1;6;;protected CamelContext getCamelContextWithId(String camelContextId) {     if (blueprintContainer != null) {         return (CamelContext) blueprintContainer.getComponentInstance(camelContextId).     }     return null. }
false;protected;0;11;;@Override protected CamelContext discoverDefaultCamelContext() {     if (blueprintContainer != null) {         Set<String> ids = BlueprintCamelContextLookupHelper.lookupBlueprintCamelContext(blueprintContainer).         if (ids.size() == 1) {             // there is only 1 id for a BlueprintCamelContext so fallback and use this             return getCamelContextWithId(ids.iterator().next()).         }     }     return null. }
false;public;0;37;;public void afterPropertiesSet() throws Exception {     if (endpoint == null) {         getCamelContext().         if (getServiceUrl() == null && getServiceRef() == null) {             throw new IllegalArgumentException("serviceUrl or serviceRef must be specified.").         }         if (getServiceInterface() == null) {             throw new IllegalArgumentException("serviceInterface must be specified.").         }         // lookup endpoint or we have the url for it         if (getServiceRef() != null) {             endpoint = getCamelContext().getRegistry().lookupByNameAndType(getServiceRef(), Endpoint.class).         } else {             endpoint = getCamelContext().getEndpoint(getServiceUrl()).         }         if (endpoint == null) {             throw new IllegalArgumentException("Could not resolve endpoint: " + getServiceUrl()).         }     }     // binding is enabled by default     boolean bind = getBinding() != null ? getBinding() : true.     try {         // need to start endpoint before we create producer         ServiceHelper.startService(endpoint).         producer = endpoint.createProducer().         // add and start producer         getCamelContext().addService(producer, true, true).         Class<?> clazz = blueprintContainer.loadClass(getServiceInterface()).         serviceProxy = ProxyHelper.createProxy(endpoint, bind, producer, clazz).     } catch (Exception e) {         throw new FailedToCreateProducerException(endpoint, e).     } }
false;public;0;3;;public void destroy() throws Exception { // we let CamelContext manage the lifecycle of the producer and shut it down when Camel stops }
false;public;0;3;;public String getServiceUrl() {     return serviceUrl. }
false;public;1;3;;public void setServiceUrl(String serviceUrl) {     this.serviceUrl = serviceUrl. }
false;public;0;3;;public String getServiceRef() {     return serviceRef. }
false;public;1;3;;public void setServiceRef(String serviceRef) {     this.serviceRef = serviceRef. }
false;public;0;3;;public Boolean getBinding() {     return binding. }
false;public;1;3;;public void setBinding(Boolean binding) {     this.binding = binding. }
false;public;0;3;;public String getServiceInterface() {     return serviceInterface. }
false;public;1;3;;public void setServiceInterface(String serviceInterface) {     this.serviceInterface = serviceInterface. }
false;public;0;3;;public Endpoint getEndpoint() {     return endpoint. }
false;public;1;3;;public void setEndpoint(Endpoint endpoint) {     this.endpoint = endpoint. }
false;public;0;3;;public Producer getProducer() {     return producer. }
false;public;1;3;;public void setProducer(Producer producer) {     this.producer = producer. }
false;public;0;3;;public ExtendedBlueprintContainer getBlueprintContainer() {     return blueprintContainer. }
false;public;1;3;;public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {     this.blueprintContainer = blueprintContainer. }
