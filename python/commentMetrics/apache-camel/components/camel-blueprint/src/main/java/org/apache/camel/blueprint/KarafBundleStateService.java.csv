commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "Camel Blueprint". }
false;public;1;21;;@Override public String getDiag(Bundle bundle) {     if (getState(bundle) == BundleState.Failure) {         // return stacktraces for failed camel contexts         Map<String, Throwable> exceptions = camelStateService.getExceptions(bundle).         StringWriter sw = new StringWriter().         for (String contextId : exceptions.keySet()) {             sw.append("Camel context \"").append(contextId).append("\"\n").             Throwable t = exceptions.get(contextId).             if (t instanceof NullPointerException) {                 sw.append("Exception: NullPointerException\n").             } else if (t.getMessage() != null) {                 sw.append("Exception: ").append(t.getMessage()).append("\n").             }             t.printStackTrace(new PrintWriter(sw)).             sw.append("\n").         }         return sw.toString().     }     return null. }
false;public;1;22;;@Override public BundleState getState(Bundle bundle) {     BundleState effective = BundleState.Unknown.     for (BlueprintCamelStateService.State s : camelStateService.getStates(bundle)) {         if (effective == BundleState.Unknown || s == BlueprintCamelStateService.State.Failure) {             switch(s) {                 case Starting:                     effective = BundleState.Starting.                     break.                 case Active:                     effective = BundleState.Active.                     break.                 case Failure:                     effective = BundleState.Failure.                     break.                 default:                     break.             }         }     }     return effective. }
false;public;1;3;;public ServiceRegistration<?> register(BundleContext context) {     return context.registerService(BundleStateService.class, this, null). }
