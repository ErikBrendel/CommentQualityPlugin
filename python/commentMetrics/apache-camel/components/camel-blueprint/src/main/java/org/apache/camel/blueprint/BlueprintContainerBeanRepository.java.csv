commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public Object lookupByName(String name) {     try {         return blueprintContainer.getComponentInstance(name).     } catch (NoSuchComponentException e) {         return null.     } }
false;public;2;22;;@Override public <T> T lookupByNameAndType(String name, Class<T> type) {     Object answer.     try {         answer = blueprintContainer.getComponentInstance(name).     } catch (NoSuchComponentException e) {         return null.     }     // just to be safe     if (answer == null) {         return null.     }     try {         return type.cast(answer).     } catch (Throwable e) {         String msg = "Found bean: " + name + " in BlueprintContainer: " + blueprintContainer + " of type: " + answer.getClass().getName() + " expected type was: " + type.         throw new NoSuchBeanException(name, msg, e).     } }
false;public;1;4;;@Override public <T> Map<String, T> findByTypeWithName(Class<T> type) {     return lookupByType(blueprintContainer, type). }
false;public;1;5;;@Override public <T> Set<T> findByType(Class<T> type) {     Map<String, T> map = lookupByType(blueprintContainer, type).     return new HashSet<>(map.values()). }
false;public,static;2;3;;public static <T> Map<String, T> lookupByType(BlueprintContainer blueprintContainer, Class<T> type) {     return lookupByType(blueprintContainer, type, true). }
false;public,static;3;35;;public static <T> Map<String, T> lookupByType(BlueprintContainer blueprintContainer, Class<T> type, boolean includeNonSingletons) {     Bundle bundle = (Bundle) blueprintContainer.getComponentInstance("blueprintBundle").     Map<String, T> objects = new LinkedHashMap<>().     Set<String> ids = blueprintContainer.getComponentIds().     for (String id : ids) {         try {             ComponentMetadata metadata = blueprintContainer.getComponentMetadata(id).             Class<?> cl = null.             if (metadata instanceof BeanMetadata) {                 BeanMetadata beanMetadata = (BeanMetadata) metadata.                 // should we skip the bean if its prototype and we are only looking for singletons?                 if (!includeNonSingletons) {                     String scope = beanMetadata.getScope().                     if (BeanMetadata.SCOPE_PROTOTYPE.equals(scope)) {                         continue.                     }                 }                 String clazz = beanMetadata.getClassName().                 if (clazz != null) {                     cl = bundle.loadClass(clazz).                 }             } else if (metadata instanceof ReferenceMetadata) {                 ReferenceMetadata referenceMetadata = (ReferenceMetadata) metadata.                 cl = bundle.loadClass(referenceMetadata.getInterface()).             }             if (cl != null && type.isAssignableFrom(cl)) {                 Object o = blueprintContainer.getComponentInstance(metadata.getId()).                 objects.put(metadata.getId(), type.cast(o)).             }         } catch (Throwable t) {         // ignore         }     }     return objects. }
