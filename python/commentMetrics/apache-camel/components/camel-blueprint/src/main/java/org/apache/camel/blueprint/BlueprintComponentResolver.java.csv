commented;modifiers;parameterAmount;loc;comment;code
false;public;3;10;;@Override public void handleException(Exception e, Logger log, String name) {     if (getException(NoSuchComponentException.class, e) != null) {     // if the caused error is NoSuchComponentException then that can be expected so ignore     } else if (getException(ComponentDefinitionException.class, e) != null) {         LOG.warn("Problem looking up bean: " + name + " due: " + e.getMessage(), e).     } else {         LOG.trace("Ignored error looking up bean: " + name + " due: " + e.getMessage(), e).     } }
false;public;2;31;;@Override public Component resolveComponent(String name, CamelContext context) throws Exception {     Component componentReg = ResolverHelper.lookupComponentInRegistryWithFallback(context, name, new ResolverHelper.LookupExceptionHandler() {          @Override         public void handleException(Exception e, Logger log, String name) {             if (getException(NoSuchComponentException.class, e) != null) {             // if the caused error is NoSuchComponentException then that can be expected so ignore             } else if (getException(ComponentDefinitionException.class, e) != null) {                 LOG.warn("Problem looking up bean: " + name + " due: " + e.getMessage(), e).             } else {                 LOG.trace("Ignored error looking up bean: " + name + " due: " + e.getMessage(), e).             }         }     }).     if (componentReg != null) {         return componentReg.     }     try {         Object bean = context.getRegistry().lookupByName(".camelBlueprint.componentResolver." + name).         if (bean instanceof ComponentResolver) {             LOG.debug("Found component resolver: {} in registry: {}", name, bean).             return ((ComponentResolver) bean).resolveComponent(name, context).         }     } catch (Exception e) {         LOG.trace("Ignored error looking up bean: " + name + " due: " + e.getMessage(), e).     }     return getComponent(name, context). }
