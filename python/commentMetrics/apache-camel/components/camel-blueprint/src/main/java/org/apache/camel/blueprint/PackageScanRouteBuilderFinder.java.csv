commented;modifiers;parameterAmount;loc;comment;code
true;public;1;22;/**  * Appends all the {@link org.apache.camel.builder.RouteBuilder} instances that can be found on the classpath  */ ;/**  * Appends all the {@link org.apache.camel.builder.RouteBuilder} instances that can be found on the classpath  */ public void appendBuilders(List<RoutesBuilder> list) throws IllegalAccessException, InstantiationException {     Set<Class<?>> classes = resolver.findImplementations(RoutesBuilder.class, packages).     for (Class<?> aClass : classes) {         LOG.trace("Found RouteBuilder class: {}", aClass).         // certain beans should be ignored         if (shouldIgnoreBean(aClass)) {             LOG.debug("Ignoring RouteBuilder class: {}", aClass).             continue.         }         if (!isValidClass(aClass)) {             LOG.debug("Ignoring invalid RouteBuilder class: {}", aClass).             continue.         }         // type is valid so create and instantiate the builder         RoutesBuilder builder = instantiateBuilder(aClass).         LOG.debug("Adding instantiated RouteBuilder: {}", builder).         list.add(builder).     } }
true;protected;1;12;/**  * Allows for ignoring beans that are explicitly configured in the Spring XML files  */ ;/**  * Allows for ignoring beans that are explicitly configured in the Spring XML files  */ protected boolean shouldIgnoreBean(Class<?> type) {     for (Object metadataObject : blueprintContainer.getMetadata(BeanMetadata.class)) {         BeanMetadata metadata = (BeanMetadata) metadataObject.         if (BeanMetadata.SCOPE_SINGLETON.equals(metadata.getScope())) {             Object bean = blueprintContainer.getComponentInstance(metadata.getId()).             if (type.isInstance(bean)) {                 return true.             }         }     }     return false. }
true;protected;1;11;/**  * Returns <tt>true</tt>if the class is a public, non-abstract class  */ ;/**  * Returns <tt>true</tt>if the class is a public, non-abstract class  */ protected boolean isValidClass(Class<?> type) {     // should skip non public classes     if (!Modifier.isPublic(type.getModifiers())) {         return false.     }     if (!Modifier.isAbstract(type.getModifiers()) && !type.isInterface()) {         return true.     }     return false. }
false;protected;1;3;;protected RoutesBuilder instantiateBuilder(Class<?> type) throws IllegalAccessException, InstantiationException {     return (RoutesBuilder) camelContext.getInjector().newInstance(type). }
