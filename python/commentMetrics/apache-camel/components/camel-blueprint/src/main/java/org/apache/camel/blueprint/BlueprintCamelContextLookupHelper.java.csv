commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;16;/**  * Lookup all the {@link BlueprintCamelContext} in the {@link BlueprintContainer}.  *  * @param container the blueprint container, must be provided  * @return a set with the ids of the {@link BlueprintCamelContext}, never <tt>null</tt>, but can be empty set.  */ ;/**  * Lookup all the {@link BlueprintCamelContext} in the {@link BlueprintContainer}.  *  * @param container the blueprint container, must be provided  * @return a set with the ids of the {@link BlueprintCamelContext}, never <tt>null</tt>, but can be empty set.  */ public static Set<String> lookupBlueprintCamelContext(BlueprintContainer container) {     Set<String> ids = new LinkedHashSet<>().     for (Object id : container.getComponentIds()) {         ComponentMetadata meta = container.getComponentMetadata(id.toString()).         // must be extended meta, to see if its the blueprint camel context         if (meta instanceof ExtendedBeanMetadata) {             Class<?> clazz = ((ExtendedBeanMetadata) meta).getRuntimeClass().             if (clazz != null && BlueprintCamelContext.class.isAssignableFrom(clazz)) {                 // okay we found a BlueprintCamelContext                 ids.add(meta.getId()).             }         }     }     return ids. }
