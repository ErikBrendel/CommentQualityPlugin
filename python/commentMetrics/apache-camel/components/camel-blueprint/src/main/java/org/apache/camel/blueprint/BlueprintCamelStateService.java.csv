commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public BundleContext getBundleContext() {     return bundleContext. }
false;public;1;3;;public void setBundleContext(BundleContext bundleContext) {     this.bundleContext = bundleContext. }
true;public;3;3;/**  * One of four {@link State states} is set for given {@link org.osgi.framework.Bundle} and context Id.  * One (blueprint) bundle may declare one or more Camel context.  * @param contextId  * @param state  */ ;/**  * One of four {@link State states} is set for given {@link org.osgi.framework.Bundle} and context Id.  * One (blueprint) bundle may declare one or more Camel context.  * @param contextId  * @param state  */ public void setBundleState(Bundle bundle, String contextId, State state) {     setBundleState(bundle, contextId, state, null). }
true;public;4;19;/**  * One of four {@link State states} is set for given {@link org.osgi.framework.Bundle} and context Id.  * One (blueprint) bundle may declare one or more Camel context.  * @param contextId  * @param state  * @param t  */ ;/**  * One of four {@link State states} is set for given {@link org.osgi.framework.Bundle} and context Id.  * One (blueprint) bundle may declare one or more Camel context.  * @param contextId  * @param state  * @param t  */ public void setBundleState(Bundle bundle, String contextId, State state, Throwable t) {     if (state == State.Failure) {         LOG.warn("Changing Camel state for bundle {} to {}", bundle.getBundleId(), state).     } else if (LOG.isDebugEnabled()) {         LOG.debug("Changing Camel state for bundle {} to {}", bundle.getBundleId(), state).     }     String key = String.format("%d:%s", bundle.getBundleId(), contextId).     if (state != null) {         states.put(key, state).     } else {         states.remove(key).     }     if (t != null) {         exceptions.put(key, t).     } else {         exceptions.remove(key).     } }
true;public;1;9;/**  * Get states for all context registered for given {@link Bundle}  * @param bundle  * @return  */ ;/**  * Get states for all context registered for given {@link Bundle}  * @param bundle  * @return  */ public List<State> getStates(Bundle bundle) {     List<State> result = new LinkedList<>().     for (Map.Entry<String, State> e : states.entrySet()) {         if (e.getKey().startsWith(bundle.getBundleId() + ":")) {             result.add(e.getValue()).         }     }     return result. }
true;public;1;9;/**  * Get exceptions for all camel contexts for given bundle  * @param bundle  * @return  */ ;/**  * Get exceptions for all camel contexts for given bundle  * @param bundle  * @return  */ public Map<String, Throwable> getExceptions(Bundle bundle) {     Map<String, Throwable> result = new LinkedHashMap<>().     for (Map.Entry<String, Throwable> e : exceptions.entrySet()) {         if (e.getKey().startsWith(bundle.getBundleId() + ":")) {             result.put(e.getKey().substring(e.getKey().indexOf(":") + 1), e.getValue()).         }     }     return result. }
true;public;0;10;/**  * Attempts to register Karaf-specific BundleStateService - if possible  */ ;/**  * Attempts to register Karaf-specific BundleStateService - if possible  */ public void init() {     try {         states = new ConcurrentHashMap<>().         exceptions = new ConcurrentHashMap<>().         registration = new KarafBundleStateServiceCreator().create(bundleContext, this).     } catch (NoClassDefFoundError e) {         LOG.info("Karaf BundleStateService not accessible. Bundle state won't reflect Camel context state").     } }
true;public;0;9;/**  * Unregisters any OSGi service registered  */ ;/**  * Unregisters any OSGi service registered  */ public void destroy() {     if (registration != null) {         registration.unregister().     }     states.clear().     states = null.     exceptions.clear().     exceptions = null. }
false;public;2;4;;public ServiceRegistration<?> create(BundleContext context, BlueprintCamelStateService camelStateService) {     KarafBundleStateService karafBundleStateService = new KarafBundleStateService(camelStateService).     return karafBundleStateService.register(context). }
