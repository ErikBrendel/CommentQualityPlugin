commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;14;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/stream").     createDirectory("target/stream").     File file = new File("target/stream/streamfile.txt").     file.createNewFile().     fos = new FileOutputStream(file).     fos.write("Hello\n".getBytes()).     super.setUp(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     template.send("mock:result", exchange). }
false;public;0;24;;@Test public void testFile() throws Exception {     context.start().     try {         MockEndpoint mock = getMockEndpoint("mock:result").         mock.expectedBodiesReceived("Hello").         // can not use route builder as we need to have the file created in the setup before route builder starts         Endpoint endpoint = context.getEndpoint("stream:file?fileName=target/stream/streamfile.txt&delay=100").         Consumer consumer = endpoint.createConsumer(new Processor() {              public void process(Exchange exchange) throws Exception {                 template.send("mock:result", exchange).             }         }).         consumer.start().         assertMockEndpointsSatisfied().         consumer.stop().     } finally {         fos.close().     } }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").routeId("produce").to("stream:file?fileName=target/stream/StreamFileTest.txt&autoCloseCount=2").     from("file://target/stream?fileName=StreamFileTest.txt&noop=true").routeId("consume").autoStartup(false).split().tokenize(LS).to("mock:result"). }
false;public;0;24;;@Test public void testFileProducer() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("produce").to("stream:file?fileName=target/stream/StreamFileTest.txt&autoCloseCount=2").             from("file://target/stream?fileName=StreamFileTest.txt&noop=true").routeId("consume").autoStartup(false).split().tokenize(LS).to("mock:result").         }     }).     context.start().     template.sendBody("direct:start", "Hadrian").     template.sendBody("direct:start", "Apache").     template.sendBody("direct:start", "Camel").     context.getRouteController().startRoute("consume").     assertMockEndpointsSatisfied().     context.stop(). }
