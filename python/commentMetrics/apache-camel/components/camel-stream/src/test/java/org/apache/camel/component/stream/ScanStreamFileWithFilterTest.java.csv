commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/stream").     createDirectory("target/stream").     file = new File("target/stream/scanstreamfile.txt").     file.createNewFile().     super.setUp(). }
false;public;0;26;;@Test public void testScanFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Boy").     FileOutputStream fos = new FileOutputStream(file).     fos.write("Hello\n".getBytes()).     Thread.sleep(150).     fos.write("World\n".getBytes()).     Thread.sleep(150).     fos.write("Hello\n".getBytes()).     Thread.sleep(150).     fos.write("World\n".getBytes()).     Thread.sleep(150).     fos.write("Hello\n".getBytes()).     Thread.sleep(150).     fos.write("World\n".getBytes()).     Thread.sleep(150).     fos.write("Hello Boy\n".getBytes()).     Thread.sleep(150).     fos.write("World\n".getBytes()).     assertMockEndpointsSatisfied().     fos.close(). }
false;public;0;5;;public void configure() {     from("stream:file?fileName=target/stream/scanstreamfile.txt&scanStream=true&scanStreamDelay=100").filter(body().contains("Hello Boy")).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("stream:file?fileName=target/stream/scanstreamfile.txt&scanStream=true&scanStreamDelay=100").filter(body().contains("Hello Boy")).to("mock:result").         }     }. }
