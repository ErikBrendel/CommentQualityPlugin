commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myGroupStrategy", new MyGroupStrategy()).     return jndi. }
false;public;1;9;;@Override public Object groupLines(List<String> lines) {     StringBuilder buffer = new StringBuilder().     for (String line : lines) {         buffer.append(line).         buffer.append(LS).     }     return buffer.toString(). }
false;public;0;18;;@Test public void testGroupLines() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     mock.setAssertPeriod(1000).     mock.message(0).header(StreamConstants.STREAM_INDEX).isEqualTo(0).     mock.message(0).header(StreamConstants.STREAM_COMPLETE).isEqualTo(false).     mock.message(1).header(StreamConstants.STREAM_INDEX).isEqualTo(1).     mock.message(1).header(StreamConstants.STREAM_COMPLETE).isEqualTo(true).     assertMockEndpointsSatisfied().     Object result = mock.getExchanges().get(0).getIn().getBody().     assertEquals("Get a wrong result.", "A" + LS + "B" + LS + "C" + LS, result).     Object result2 = mock.getExchanges().get(1).getIn().getBody().     assertEquals("Get a wrong result.", "D" + LS + "E" + LS + "F" + LS, result2). }
false;public;0;4;;@Override public void configure() throws Exception {     from("stream:file?fileName=target/stream/streamfile.txt&groupLines=3&groupStrategy=#myGroupStrategy").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("stream:file?fileName=target/stream/streamfile.txt&groupLines=3&groupStrategy=#myGroupStrategy").to("mock:result").         }     }. }
