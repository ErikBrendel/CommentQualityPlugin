# id;timestamp;commentText;codeText;commentWords;codeWords
StreamEndpoint -> public void setDelay(long delay);1430121382;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1451237129;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1473684123;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1475847630;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1486028039;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1528200424;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1528551496;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1528551765;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1540108158;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1540108160;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1540108163;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1547240981;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1547480087;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setDelay(long delay);1548660891;Initial delay in milliseconds before producing the stream.;public void setDelay(long delay) {_        this.delay = delay__    };initial,delay,in,milliseconds,before,producing,the,stream;public,void,set,delay,long,delay,this,delay,delay
StreamEndpoint -> public void setFile(String file);1213944924;@deprecated use camel-file component. Will be removed in Camel 2.0;public void setFile(String file) {_        this.file = file__    };deprecated,use,camel,file,component,will,be,removed,in,camel,2,0;public,void,set,file,string,file,this,file,file
StreamEndpoint -> public void setFile(String file);1226284843;@deprecated use camel-file component. Will be removed in Camel 2.0;public void setFile(String file) {_        this.file = file__    };deprecated,use,camel,file,component,will,be,removed,in,camel,2,0;public,void,set,file,string,file,this,file,file
StreamEndpoint -> public void setFile(String file);1226296872;@deprecated use camel-file component. Will be removed in Camel 2.0;public void setFile(String file) {_        this.file = file__    };deprecated,use,camel,file,component,will,be,removed,in,camel,2,0;public,void,set,file,string,file,this,file,file
StreamEndpoint -> public void setFile(String file);1226378057;@deprecated use camel-file component. Will be removed in Camel 2.0;public void setFile(String file) {_        this.file = file__    };deprecated,use,camel,file,component,will,be,removed,in,camel,2,0;public,void,set,file,string,file,this,file,file
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1430121382;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1451237129;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1473684123;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1475847630;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1486028039;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1528200424;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1528551496;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1528551765;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1540108158;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1540108160;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1540108163;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1547240981;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1547480087;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setInitialPromptDelay(long initialPromptDelay);1548660891;Initial delay in milliseconds before showing the message prompt. This delay occurs only once._Can be used during system startup to avoid message prompts being written while other logging is done to the system out.;public void setInitialPromptDelay(long initialPromptDelay) {_        this.initialPromptDelay = initialPromptDelay__    };initial,delay,in,milliseconds,before,showing,the,message,prompt,this,delay,occurs,only,once,can,be,used,during,system,startup,to,avoid,message,prompts,being,written,while,other,logging,is,done,to,the,system,out;public,void,set,initial,prompt,delay,long,initial,prompt,delay,this,initial,prompt,delay,initial,prompt,delay
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1430121382;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1451237129;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1473684123;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1475847630;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1486028039;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1528200424;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1528551496;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1528551765;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1540108158;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1540108160;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1540108163;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1547240981;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1547480087;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setGroupStrategy(GroupStrategy strategy);1548660891;Allows to use a custom GroupStrategy to control how to group lines.;public void setGroupStrategy(GroupStrategy strategy) {_        this.groupStrategy = strategy__    };allows,to,use,a,custom,group,strategy,to,control,how,to,group,lines;public,void,set,group,strategy,group,strategy,strategy,this,group,strategy,strategy
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1430121382;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1451237129;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1473684123;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1475847630;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1486028039;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1528200424;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1528551496;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1528551765;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1540108158;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1540108160;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1540108163;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1547240981;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1547480087;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setScanStreamDelay(long scanStreamDelay);1548660891;Delay in milliseconds between read attempts when using scanStream.;public void setScanStreamDelay(long scanStreamDelay) {_        this.scanStreamDelay = scanStreamDelay__    };delay,in,milliseconds,between,read,attempts,when,using,scan,stream;public,void,set,scan,stream,delay,long,scan,stream,delay,this,scan,stream,delay,scan,stream,delay
StreamEndpoint -> public void setKind(String kind);1475847630;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1486028039;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1528200424;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1528551496;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1528551765;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1540108158;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1540108160;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1540108163;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1547240981;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1547480087;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setKind(String kind);1548660891;Kind of stream to use such as System.in or System.out.;public void setKind(String kind) {_        this.kind = kind__    };kind,of,stream,to,use,such,as,system,in,or,system,out;public,void,set,kind,string,kind,this,kind,kind
StreamEndpoint -> public void setConnectTimeout(int connectTimeout);1528551765;Sets a specified timeout value, in milliseconds, to be used_when opening a communications link to the resource referenced_by this URLConnection.  If the timeout expires before the_connection can be established, a_java.net.SocketTimeoutException is raised. A timeout of zero is_interpreted as an infinite timeout.;public void setConnectTimeout(int connectTimeout) {_        this.connectTimeout = connectTimeout__    };sets,a,specified,timeout,value,in,milliseconds,to,be,used,when,opening,a,communications,link,to,the,resource,referenced,by,this,urlconnection,if,the,timeout,expires,before,the,connection,can,be,established,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
StreamEndpoint -> public void setConnectTimeout(int connectTimeout);1540108158;Sets a specified timeout value, in milliseconds, to be used_when opening a communications link to the resource referenced_by this URLConnection.  If the timeout expires before the_connection can be established, a_java.net.SocketTimeoutException is raised. A timeout of zero is_interpreted as an infinite timeout.;public void setConnectTimeout(int connectTimeout) {_        this.connectTimeout = connectTimeout__    };sets,a,specified,timeout,value,in,milliseconds,to,be,used,when,opening,a,communications,link,to,the,resource,referenced,by,this,urlconnection,if,the,timeout,expires,before,the,connection,can,be,established,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
StreamEndpoint -> public void setConnectTimeout(int connectTimeout);1540108160;Sets a specified timeout value, in milliseconds, to be used_when opening a communications link to the resource referenced_by this URLConnection.  If the timeout expires before the_connection can be established, a_java.net.SocketTimeoutException is raised. A timeout of zero is_interpreted as an infinite timeout.;public void setConnectTimeout(int connectTimeout) {_        this.connectTimeout = connectTimeout__    };sets,a,specified,timeout,value,in,milliseconds,to,be,used,when,opening,a,communications,link,to,the,resource,referenced,by,this,urlconnection,if,the,timeout,expires,before,the,connection,can,be,established,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
StreamEndpoint -> public void setConnectTimeout(int connectTimeout);1540108163;Sets a specified timeout value, in milliseconds, to be used_when opening a communications link to the resource referenced_by this URLConnection.  If the timeout expires before the_connection can be established, a_java.net.SocketTimeoutException is raised. A timeout of zero is_interpreted as an infinite timeout.;public void setConnectTimeout(int connectTimeout) {_        this.connectTimeout = connectTimeout__    };sets,a,specified,timeout,value,in,milliseconds,to,be,used,when,opening,a,communications,link,to,the,resource,referenced,by,this,urlconnection,if,the,timeout,expires,before,the,connection,can,be,established,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
StreamEndpoint -> public void setConnectTimeout(int connectTimeout);1547240981;Sets a specified timeout value, in milliseconds, to be used_when opening a communications link to the resource referenced_by this URLConnection.  If the timeout expires before the_connection can be established, a_java.net.SocketTimeoutException is raised. A timeout of zero is_interpreted as an infinite timeout.;public void setConnectTimeout(int connectTimeout) {_        this.connectTimeout = connectTimeout__    };sets,a,specified,timeout,value,in,milliseconds,to,be,used,when,opening,a,communications,link,to,the,resource,referenced,by,this,urlconnection,if,the,timeout,expires,before,the,connection,can,be,established,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
StreamEndpoint -> public void setConnectTimeout(int connectTimeout);1547480087;Sets a specified timeout value, in milliseconds, to be used_when opening a communications link to the resource referenced_by this URLConnection.  If the timeout expires before the_connection can be established, a_java.net.SocketTimeoutException is raised. A timeout of zero is_interpreted as an infinite timeout.;public void setConnectTimeout(int connectTimeout) {_        this.connectTimeout = connectTimeout__    };sets,a,specified,timeout,value,in,milliseconds,to,be,used,when,opening,a,communications,link,to,the,resource,referenced,by,this,urlconnection,if,the,timeout,expires,before,the,connection,can,be,established,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
StreamEndpoint -> public void setConnectTimeout(int connectTimeout);1548660891;Sets a specified timeout value, in milliseconds, to be used_when opening a communications link to the resource referenced_by this URLConnection.  If the timeout expires before the_connection can be established, a_java.net.SocketTimeoutException is raised. A timeout of zero is_interpreted as an infinite timeout.;public void setConnectTimeout(int connectTimeout) {_        this.connectTimeout = connectTimeout__    };sets,a,specified,timeout,value,in,milliseconds,to,be,used,when,opening,a,communications,link,to,the,resource,referenced,by,this,urlconnection,if,the,timeout,expires,before,the,connection,can,be,established,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,connect,timeout,int,connect,timeout,this,connect,timeout,connect,timeout
StreamEndpoint -> public void setEncoding(String encoding);1430121382;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1451237129;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1473684123;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1475847630;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1486028039;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1528200424;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1528551496;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1528551765;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1540108158;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1540108160;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1540108163;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1547240981;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1547480087;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setEncoding(String encoding);1548660891;You can configure the encoding (is a charset name) to use text-based streams (for example, message body is a String object)._If not provided, Camel uses the JVM default Charset.;public void setEncoding(String encoding) {_        this.encoding = encoding__    };you,can,configure,the,encoding,is,a,charset,name,to,use,text,based,streams,for,example,message,body,is,a,string,object,if,not,provided,camel,uses,the,jvm,default,charset;public,void,set,encoding,string,encoding,this,encoding,encoding
StreamEndpoint -> public void setUrl(String url);1213944924;@deprecated use camel-jetty or camel-http component. Will be removed in Camel 2.0;public void setUrl(String url) {_        this.url = url__    };deprecated,use,camel,jetty,or,camel,http,component,will,be,removed,in,camel,2,0;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1226284843;@deprecated use camel-jetty or camel-http component. Will be removed in Camel 2.0;public void setUrl(String url) {_        this.url = url__    };deprecated,use,camel,jetty,or,camel,http,component,will,be,removed,in,camel,2,0;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1226296872;@deprecated use camel-jetty or camel-http component. Will be removed in Camel 2.0;public void setUrl(String url) {_        this.url = url__    };deprecated,use,camel,jetty,or,camel,http,component,will,be,removed,in,camel,2,0;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1226378057;@deprecated use camel-jetty or camel-http component. Will be removed in Camel 2.0;public void setUrl(String url) {_        this.url = url__    };deprecated,use,camel,jetty,or,camel,http,component,will,be,removed,in,camel,2,0;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1430121382;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1451237129;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1473684123;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1475847630;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1486028039;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1528200424;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1528551496;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1528551765;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1540108158;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1540108160;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1540108163;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1547240981;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1547480087;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setUrl(String url);1548660891;When using the stream:url URI format, this option specifies the URL to stream to/from._The input/output stream will be opened using the JDK URLConnection facility.;public void setUrl(String url) {_        this.url = url__    };when,using,the,stream,url,uri,format,this,option,specifies,the,url,to,stream,to,from,the,input,output,stream,will,be,opened,using,the,jdk,urlconnection,facility;public,void,set,url,string,url,this,url,url
StreamEndpoint -> public void setReadTimeout(int readTimeout);1528551765;Sets the read timeout to a specified timeout, in_milliseconds. A non-zero value specifies the timeout when_reading from Input stream when a connection is established to a_resource. If the timeout expires before there is data available_for read, a java.net.SocketTimeoutException is raised. A_timeout of zero is interpreted as an infinite timeout.;public void setReadTimeout(int readTimeout) {_        this.readTimeout = readTimeout__    };sets,the,read,timeout,to,a,specified,timeout,in,milliseconds,a,non,zero,value,specifies,the,timeout,when,reading,from,input,stream,when,a,connection,is,established,to,a,resource,if,the,timeout,expires,before,there,is,data,available,for,read,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
StreamEndpoint -> public void setReadTimeout(int readTimeout);1540108158;Sets the read timeout to a specified timeout, in_milliseconds. A non-zero value specifies the timeout when_reading from Input stream when a connection is established to a_resource. If the timeout expires before there is data available_for read, a java.net.SocketTimeoutException is raised. A_timeout of zero is interpreted as an infinite timeout.;public void setReadTimeout(int readTimeout) {_        this.readTimeout = readTimeout__    };sets,the,read,timeout,to,a,specified,timeout,in,milliseconds,a,non,zero,value,specifies,the,timeout,when,reading,from,input,stream,when,a,connection,is,established,to,a,resource,if,the,timeout,expires,before,there,is,data,available,for,read,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
StreamEndpoint -> public void setReadTimeout(int readTimeout);1540108160;Sets the read timeout to a specified timeout, in_milliseconds. A non-zero value specifies the timeout when_reading from Input stream when a connection is established to a_resource. If the timeout expires before there is data available_for read, a java.net.SocketTimeoutException is raised. A_timeout of zero is interpreted as an infinite timeout.;public void setReadTimeout(int readTimeout) {_        this.readTimeout = readTimeout__    };sets,the,read,timeout,to,a,specified,timeout,in,milliseconds,a,non,zero,value,specifies,the,timeout,when,reading,from,input,stream,when,a,connection,is,established,to,a,resource,if,the,timeout,expires,before,there,is,data,available,for,read,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
StreamEndpoint -> public void setReadTimeout(int readTimeout);1540108163;Sets the read timeout to a specified timeout, in_milliseconds. A non-zero value specifies the timeout when_reading from Input stream when a connection is established to a_resource. If the timeout expires before there is data available_for read, a java.net.SocketTimeoutException is raised. A_timeout of zero is interpreted as an infinite timeout.;public void setReadTimeout(int readTimeout) {_        this.readTimeout = readTimeout__    };sets,the,read,timeout,to,a,specified,timeout,in,milliseconds,a,non,zero,value,specifies,the,timeout,when,reading,from,input,stream,when,a,connection,is,established,to,a,resource,if,the,timeout,expires,before,there,is,data,available,for,read,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
StreamEndpoint -> public void setReadTimeout(int readTimeout);1547240981;Sets the read timeout to a specified timeout, in_milliseconds. A non-zero value specifies the timeout when_reading from Input stream when a connection is established to a_resource. If the timeout expires before there is data available_for read, a java.net.SocketTimeoutException is raised. A_timeout of zero is interpreted as an infinite timeout.;public void setReadTimeout(int readTimeout) {_        this.readTimeout = readTimeout__    };sets,the,read,timeout,to,a,specified,timeout,in,milliseconds,a,non,zero,value,specifies,the,timeout,when,reading,from,input,stream,when,a,connection,is,established,to,a,resource,if,the,timeout,expires,before,there,is,data,available,for,read,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
StreamEndpoint -> public void setReadTimeout(int readTimeout);1547480087;Sets the read timeout to a specified timeout, in_milliseconds. A non-zero value specifies the timeout when_reading from Input stream when a connection is established to a_resource. If the timeout expires before there is data available_for read, a java.net.SocketTimeoutException is raised. A_timeout of zero is interpreted as an infinite timeout.;public void setReadTimeout(int readTimeout) {_        this.readTimeout = readTimeout__    };sets,the,read,timeout,to,a,specified,timeout,in,milliseconds,a,non,zero,value,specifies,the,timeout,when,reading,from,input,stream,when,a,connection,is,established,to,a,resource,if,the,timeout,expires,before,there,is,data,available,for,read,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
StreamEndpoint -> public void setReadTimeout(int readTimeout);1548660891;Sets the read timeout to a specified timeout, in_milliseconds. A non-zero value specifies the timeout when_reading from Input stream when a connection is established to a_resource. If the timeout expires before there is data available_for read, a java.net.SocketTimeoutException is raised. A_timeout of zero is interpreted as an infinite timeout.;public void setReadTimeout(int readTimeout) {_        this.readTimeout = readTimeout__    };sets,the,read,timeout,to,a,specified,timeout,in,milliseconds,a,non,zero,value,specifies,the,timeout,when,reading,from,input,stream,when,a,connection,is,established,to,a,resource,if,the,timeout,expires,before,there,is,data,available,for,read,a,java,net,socket,timeout,exception,is,raised,a,timeout,of,zero,is,interpreted,as,an,infinite,timeout;public,void,set,read,timeout,int,read,timeout,this,read,timeout,read,timeout
StreamEndpoint -> public void setRetry(boolean retry);1430121382;Will retry opening the file if it's overwritten, somewhat like tail --retry;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,file,if,it,s,overwritten,somewhat,like,tail,retry;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1451237129;Will retry opening the file if it's overwritten, somewhat like tail --retry;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,file,if,it,s,overwritten,somewhat,like,tail,retry;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1473684123;Will retry opening the file if it's overwritten, somewhat like tail --retry;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,file,if,it,s,overwritten,somewhat,like,tail,retry;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1475847630;Will retry opening the file if it's overwritten, somewhat like tail --retry;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,file,if,it,s,overwritten,somewhat,like,tail,retry;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1486028039;Will retry opening the file if it's overwritten, somewhat like tail --retry;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,file,if,it,s,overwritten,somewhat,like,tail,retry;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1528200424;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1528551496;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1528551765;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1540108158;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1540108160;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1540108163;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1547240981;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1547480087;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setRetry(boolean retry);1548660891;Will retry opening the stream if it's overwritten, somewhat like tail --retry_<p/>_If reading from files then you should also enable the fileWatcher option, to make it work reliable.;public void setRetry(boolean retry) {_        this.retry = retry__    };will,retry,opening,the,stream,if,it,s,overwritten,somewhat,like,tail,retry,p,if,reading,from,files,then,you,should,also,enable,the,file,watcher,option,to,make,it,work,reliable;public,void,set,retry,boolean,retry,this,retry,retry
StreamEndpoint -> public void setPromptMessage(String promptMessage);1430121382;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1451237129;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1473684123;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1475847630;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1486028039;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1528200424;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1528551496;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1528551765;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1540108158;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1540108160;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1540108163;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1547240981;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1547480087;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setPromptMessage(String promptMessage);1548660891;Message prompt to use when reading from stream:in_ for example, you could set this to Enter a command:;public void setPromptMessage(String promptMessage) {_        this.promptMessage = promptMessage__    };message,prompt,to,use,when,reading,from,stream,in,for,example,you,could,set,this,to,enter,a,command;public,void,set,prompt,message,string,prompt,message,this,prompt,message,prompt,message
StreamEndpoint -> public void setGroupLines(int groupLines);1430121382;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1451237129;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1473684123;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1475847630;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1486028039;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1528200424;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1528551496;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1528551765;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1540108158;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1540108160;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1540108163;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1547240981;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1547480087;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setGroupLines(int groupLines);1548660891;To group X number of lines in the consumer._For example to group 10 lines and therefore only spit out an Exchange with 10 lines, instead of 1 Exchange per line.;public void setGroupLines(int groupLines) {_        this.groupLines = groupLines__    };to,group,x,number,of,lines,in,the,consumer,for,example,to,group,10,lines,and,therefore,only,spit,out,an,exchange,with,10,lines,instead,of,1,exchange,per,line;public,void,set,group,lines,int,group,lines,this,group,lines,group,lines
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1528200424;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1528551496;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1528551765;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1540108158;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1540108160;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1540108163;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1547240981;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1547480087;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setFileWatcher(boolean fileWatcher);1548660891;To use JVM file watcher to listen for file change events to support re-loading files that may be overwritten, somewhat like tail --retry;public void setFileWatcher(boolean fileWatcher) {_        this.fileWatcher = fileWatcher__    };to,use,jvm,file,watcher,to,listen,for,file,change,events,to,support,re,loading,files,that,may,be,overwritten,somewhat,like,tail,retry;public,void,set,file,watcher,boolean,file,watcher,this,file,watcher,file,watcher
StreamEndpoint -> public void setPromptDelay(long promptDelay);1430121382;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1451237129;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1473684123;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1475847630;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1486028039;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1528200424;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1528551496;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1528551765;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1540108158;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1540108160;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1540108163;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1547240981;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1547480087;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setPromptDelay(long promptDelay);1548660891;Optional delay in milliseconds before showing the message prompt.;public void setPromptDelay(long promptDelay) {_        this.promptDelay = promptDelay__    };optional,delay,in,milliseconds,before,showing,the,message,prompt;public,void,set,prompt,delay,long,prompt,delay,this,prompt,delay,prompt,delay
StreamEndpoint -> public void setScanStream(boolean scanStream);1430121382;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1451237129;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1473684123;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1475847630;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1486028039;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1528200424;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1528551496;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1528551765;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1540108158;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1540108160;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1540108163;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1547240981;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1547480087;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setScanStream(boolean scanStream);1548660891;To be used for continuously reading a stream such as the unix tail command.;public void setScanStream(boolean scanStream) {_        this.scanStream = scanStream__    };to,be,used,for,continuously,reading,a,stream,such,as,the,unix,tail,command;public,void,set,scan,stream,boolean,scan,stream,this,scan,stream,scan,stream
StreamEndpoint -> public void setHttpHeaders(Map<String, Object> httpHeaders);1528551496;Optional http headers to use in request when using HTTP URL.;public void setHttpHeaders(Map<String, Object> httpHeaders) {_        this.httpHeaders = httpHeaders__    };optional,http,headers,to,use,in,request,when,using,http,url;public,void,set,http,headers,map,string,object,http,headers,this,http,headers,http,headers
StreamEndpoint -> public void setHttpHeaders(Map<String, Object> httpHeaders);1528551765;Optional http headers to use in request when using HTTP URL.;public void setHttpHeaders(Map<String, Object> httpHeaders) {_        this.httpHeaders = httpHeaders__    };optional,http,headers,to,use,in,request,when,using,http,url;public,void,set,http,headers,map,string,object,http,headers,this,http,headers,http,headers
StreamEndpoint -> public void setHttpHeaders(Map<String, Object> httpHeaders);1540108158;Optional http headers to use in request when using HTTP URL.;public void setHttpHeaders(Map<String, Object> httpHeaders) {_        this.httpHeaders = httpHeaders__    };optional,http,headers,to,use,in,request,when,using,http,url;public,void,set,http,headers,map,string,object,http,headers,this,http,headers,http,headers
StreamEndpoint -> public void setHttpHeaders(Map<String, Object> httpHeaders);1540108160;Optional http headers to use in request when using HTTP URL.;public void setHttpHeaders(Map<String, Object> httpHeaders) {_        this.httpHeaders = httpHeaders__    };optional,http,headers,to,use,in,request,when,using,http,url;public,void,set,http,headers,map,string,object,http,headers,this,http,headers,http,headers
StreamEndpoint -> public void setHttpHeaders(Map<String, Object> httpHeaders);1540108163;Optional http headers to use in request when using HTTP URL.;public void setHttpHeaders(Map<String, Object> httpHeaders) {_        this.httpHeaders = httpHeaders__    };optional,http,headers,to,use,in,request,when,using,http,url;public,void,set,http,headers,map,string,object,http,headers,this,http,headers,http,headers
StreamEndpoint -> public void setHttpHeaders(Map<String, Object> httpHeaders);1547240981;Optional http headers to use in request when using HTTP URL.;public void setHttpHeaders(Map<String, Object> httpHeaders) {_        this.httpHeaders = httpHeaders__    };optional,http,headers,to,use,in,request,when,using,http,url;public,void,set,http,headers,map,string,object,http,headers,this,http,headers,http,headers
StreamEndpoint -> public void setHttpHeaders(Map<String, Object> httpHeaders);1547480087;Optional http headers to use in request when using HTTP URL.;public void setHttpHeaders(Map<String, Object> httpHeaders) {_        this.httpHeaders = httpHeaders__    };optional,http,headers,to,use,in,request,when,using,http,url;public,void,set,http,headers,map,string,object,http,headers,this,http,headers,http,headers
StreamEndpoint -> public void setHttpHeaders(Map<String, Object> httpHeaders);1548660891;Optional http headers to use in request when using HTTP URL.;public void setHttpHeaders(Map<String, Object> httpHeaders) {_        this.httpHeaders = httpHeaders__    };optional,http,headers,to,use,in,request,when,using,http,url;public,void,set,http,headers,map,string,object,http,headers,this,http,headers,http,headers
StreamEndpoint -> public void setFileName(String fileName);1430121382;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1451237129;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1473684123;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1475847630;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1486028039;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1528200424;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1528551496;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1528551765;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1540108158;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1540108160;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1540108163;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1547240981;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1547480087;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setFileName(String fileName);1548660891;When using the stream:file URI format, this option specifies the filename to stream to/from.;public void setFileName(String fileName) {_        this.fileName = fileName__    };when,using,the,stream,file,uri,format,this,option,specifies,the,filename,to,stream,to,from;public,void,set,file,name,string,file,name,this,file,name,file,name
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1430121382;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1451237129;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1473684123;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1475847630;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1486028039;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1528200424;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1528551496;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1528551765;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1540108158;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1540108160;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1540108163;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1547240981;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1547480087;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setAutoCloseCount(int autoCloseCount);1548660891;Number of messages to process before closing stream on Producer side._Never close stream by default (only when Producer is stopped). If more messages are sent, the stream is reopened for another autoCloseCount batch.;public void setAutoCloseCount(int autoCloseCount) {_        this.autoCloseCount = autoCloseCount__    };number,of,messages,to,process,before,closing,stream,on,producer,side,never,close,stream,by,default,only,when,producer,is,stopped,if,more,messages,are,sent,the,stream,is,reopened,for,another,auto,close,count,batch;public,void,set,auto,close,count,int,auto,close,count,this,auto,close,count,auto,close,count
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1430121382;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1451237129;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1473684123;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1475847630;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1486028039;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1528200424;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1528551496;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1528551765;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1540108158;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1540108160;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1540108163;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1547240981;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1547480087;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
StreamEndpoint -> public void setCloseOnDone(boolean closeOnDone);1548660891;This option is used in combination with Splitter and streaming to the same file._The idea is to keep the stream open and only close when the Splitter is done, to improve performance._Mind this requires that you only stream to the same file, and not 2 or more files.;public void setCloseOnDone(boolean closeOnDone) {_        this.closeOnDone = closeOnDone__    };this,option,is,used,in,combination,with,splitter,and,streaming,to,the,same,file,the,idea,is,to,keep,the,stream,open,and,only,close,when,the,splitter,is,done,to,improve,performance,mind,this,requires,that,you,only,stream,to,the,same,file,and,not,2,or,more,files;public,void,set,close,on,done,boolean,close,on,done,this,close,on,done,close,on,done
