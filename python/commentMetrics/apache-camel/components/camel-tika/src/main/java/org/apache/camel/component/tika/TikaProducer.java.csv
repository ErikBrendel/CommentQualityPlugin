commented;modifiers;parameterAmount;loc;comment;code
false;public;1;20;;@Override public void process(Exchange exchange) throws Exception {     TikaOperation operation = this.tikaConfiguration.getOperation().     Object result.     switch(operation) {         case detect:             result = doDetect(exchange).             break.         case parse:             result = doParse(exchange).             break.         default:             throw new IllegalArgumentException(String.format("Unknown operation %s", tikaConfiguration.getOperation())).     }     // propagate headers     exchange.getOut().setHeaders(exchange.getIn().getHeaders()).     exchange.getOut().setAttachments(exchange.getIn().getAttachments()).     // and set result     exchange.getOut().setBody(result). }
false;private;1;7;;private Object doDetect(Exchange exchange) throws IOException {     InputStream inputStream = exchange.getIn().getBody(InputStream.class).     Metadata metadata = new Metadata().     MediaType result = this.detector.detect(inputStream, metadata).     convertMetadataToHeaders(metadata, exchange).     return result.toString(). }
false;private;1;12;;private Object doParse(Exchange exchange) throws TikaException, IOException, SAXException, TransformerConfigurationException {     InputStream inputStream = exchange.getIn().getBody(InputStream.class).     OutputStream result = new ByteArrayOutputStream().     ContentHandler contentHandler = getContentHandler(this.tikaConfiguration, result).     ParseContext context = new ParseContext().     context.set(Parser.class, this.parser).     Metadata metadata = new Metadata().     this.parser.parse(inputStream, contentHandler, metadata, context).     convertMetadataToHeaders(metadata, exchange).     return result. }
false;private;2;12;;private void convertMetadataToHeaders(Metadata metadata, Exchange exchange) {     if (metadata != null) {         for (String metaname : metadata.names()) {             String[] values = metadata.getValues(metaname).             if (values.length == 1) {                 exchange.getIn().setHeader(metaname, values[0]).             } else {                 exchange.getIn().setHeader(metaname, values).             }         }     } }
false;private;2;25;;private ContentHandler getContentHandler(TikaConfiguration configuration, OutputStream outputStream) throws TransformerConfigurationException, UnsupportedEncodingException {     ContentHandler result = null.     TikaParseOutputFormat outputFormat = configuration.getTikaParseOutputFormat().     switch(outputFormat) {         case xml:             result = getTransformerHandler(outputStream, "xml", true).             break.         case text:             result = new BodyContentHandler(new OutputStreamWriter(outputStream, this.encoding)).             break.         case textMain:             result = new BoilerpipeContentHandler(new OutputStreamWriter(outputStream, this.encoding)).             break.         case html:             result = new ExpandedTitleContentHandler(getTransformerHandler(outputStream, "html", true)).             break.         default:             throw new IllegalArgumentException(String.format("Unknown format %s", tikaConfiguration.getTikaParseOutputFormat())).     }     return result. }
false;private;3;13;;private TransformerHandler getTransformerHandler(OutputStream output, String method, boolean prettyPrint) throws TransformerConfigurationException, UnsupportedEncodingException {     SAXTransformerFactory factory = (SAXTransformerFactory) TransformerFactory.newInstance().     factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).     TransformerHandler handler = factory.newTransformerHandler().     handler.getTransformer().setOutputProperty(OutputKeys.METHOD, method).     handler.getTransformer().setOutputProperty(OutputKeys.INDENT, prettyPrint ? "yes" : "no").     if (this.encoding != null) {         handler.getTransformer().setOutputProperty(OutputKeys.ENCODING, this.encoding).     }     handler.setResult(new StreamResult(new OutputStreamWriter(output, this.encoding))).     return handler. }
