commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public boolean matches(Exchange exchange) {     Object body = exchange.getIn().getBody(String.class).     assertThat(body, instanceOf(String.class)).     assertThat((String) body, containsString("application/x-tika-msoffice")).     return true. }
false;public;0;18;;@Test public void testDocumentDetect() throws Exception {     File document = new File("src/test/resources/test.doc").     template.sendBody("direct:start", document).     resultEndpoint.setExpectedMessageCount(1).     resultEndpoint.expectedMessagesMatches(new Predicate() {          @Override         public boolean matches(Exchange exchange) {             Object body = exchange.getIn().getBody(String.class).             assertThat(body, instanceOf(String.class)).             assertThat((String) body, containsString("application/x-tika-msoffice")).             return true.         }     }).     resultEndpoint.assertIsSatisfied(). }
false;public;1;7;;@Override public boolean matches(Exchange exchange) {     Object body = exchange.getIn().getBody(String.class).     assertThat(body, instanceOf(String.class)).     assertThat((String) body, containsString("image/gif")).     return true. }
false;public;0;18;;@Test public void testImageDetect() throws Exception {     File document = new File("src/test/resources/testGIF.gif").     template.sendBody("direct:start", document).     resultEndpoint.setExpectedMessageCount(1).     resultEndpoint.expectedMessagesMatches(new Predicate() {          @Override         public boolean matches(Exchange exchange) {             Object body = exchange.getIn().getBody(String.class).             assertThat(body, instanceOf(String.class)).             assertThat((String) body, containsString("image/gif")).             return true.         }     }).     resultEndpoint.assertIsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("tika:detect").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("tika:detect").to("mock:result").         }     }. }
