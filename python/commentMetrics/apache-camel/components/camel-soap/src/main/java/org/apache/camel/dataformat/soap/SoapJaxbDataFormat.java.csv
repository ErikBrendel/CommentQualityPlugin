# id;timestamp;commentText;codeText;commentWords;codeWords
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1267017377;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1268967338;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1294226158;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1308432267;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1311938671;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1312453192;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1317914821;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1325694383;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1325745470;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1341408567;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> private Exception createExceptionFromFault(Fault fault);1341409401;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        String message = fault.getFaultstring()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = elementNameStrategy.findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageContructor__        Constructor<? extends Exception> constructor___        try {_            messageContructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageContructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,message,fault,get,faultstring,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,contructor,constructor,extends,exception,constructor,try,message,contructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,contructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1265702792;Marshal inputObject to SOAP xml. If the exchange or message has an EXCEPTION_CAUGTH_property or header then instead of the object the exception is marshaled.__To determine the name of the top level xml elment the elementNameStrategy is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        _        checkElementNameStrategy(exchange)___        String soapAction = (String) exchange.getProperty(Exchange.SOAP_ACTION)__        Body body = new Body()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        final JAXBElement<?> content__        if (exception != null) {_            content = createFaultFromException(exception, soapAction)__        } else {_            content = createBodyContentFromObject(inputObject, soapAction)__        }_        body.getAny().add(content)__        Envelope envelope = new Envelope()__        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,object,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elment,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,string,exchange,get,property,exchange,body,body,new,body,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,jaxbelement,content,if,exception,null,content,create,fault,from,exception,exception,soap,action,else,content,create,body,content,from,object,input,object,soap,action,body,get,any,add,content,envelope,envelope,new,envelope,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1267017377;Marshal inputObject to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elment the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {__        checkElementNameStrategy(exchange)___        String soapAction = (String) exchange.getIn().getHeader(Exchange.SOAP_ACTION)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_        Body body = new Body()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        final JAXBElement<?> content__        if (exception != null) {_            content = createFaultFromException(exception, soapAction)__        } else {_            content = createBodyContentFromObject(inputObject, soapAction)__        }_        body.getAny().add(content)__        Envelope envelope = new Envelope()__        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,object,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elment,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,string,exchange,get,in,get,header,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,jaxbelement,content,if,exception,null,content,create,fault,from,exception,exception,soap,action,else,content,create,body,content,from,object,input,object,soap,action,body,get,any,add,content,envelope,envelope,new,envelope,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1268967338;Marshal inputObject to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elment the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {__        checkElementNameStrategy(exchange)___        String soapAction = (String) exchange.getIn().getHeader(Exchange.SOAP_ACTION)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_        Body body = new Body()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        final JAXBElement<?> content__        if (exception != null) {_            content = createFaultFromException(exception)__        } else {_            content = createBodyContentFromObject(inputObject, soapAction)__        }_        body.getAny().add(content)__        Envelope envelope = new Envelope()__        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,object,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elment,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,string,exchange,get,in,get,header,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,jaxbelement,content,if,exception,null,content,create,fault,from,exception,exception,else,content,create,body,content,from,object,input,object,soap,action,body,get,any,add,content,envelope,envelope,new,envelope,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1294226158;Marshal inputObject to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elment the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_        Body body = new Body()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        final JAXBElement<?> content__        if (exception != null) {_            content = createFaultFromException(exception)__        } else {_            content = createBodyContentFromObject(inputObject, soapAction)__        }_        body.getAny().add(content)__        Envelope envelope = new Envelope()__        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,object,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elment,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,jaxbelement,content,if,exception,null,content,create,fault,from,exception,exception,else,content,create,body,content,from,object,input,object,soap,action,body,get,any,add,content,envelope,envelope,new,envelope,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1308432267;Marshal inputObject to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elment the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_        Body body = new Body()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        final JAXBElement<?> content__        if (exception != null) {_            content = createFaultFromException(exception)__        } else {_            content = createBodyContentFromObject(inputObject, soapAction)__        }_        body.getAny().add(content)__        Envelope envelope = new Envelope()__        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,object,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elment,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,jaxbelement,content,if,exception,null,content,create,fault,from,exception,exception,else,content,create,body,content,from,object,input,object,soap,action,body,get,any,add,content,envelope,envelope,new,envelope,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1311938671;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_                _        Body body = new Body()__        Header header = new Header()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        _        final List<JAXBElement<?>> bodyContent__        List<JAXBElement<?>> headerContent = new ArrayList<JAXBElement<?>>()__        if (exception != null) {_            bodyContent = new ArrayList<JAXBElement<?>>()__            bodyContent.add(createFaultFromException(exception))__        } else {_            bodyContent = createContentFromObject(inputObject, soapAction, headerContent)__        }_       _        for (JAXBElement<?> elem : bodyContent) {_            body.getAny().add(elem)__        }_        for (JAXBElement<?> elem : headerContent) {_            header.getAny().add(elem)__        }_        Envelope envelope = new Envelope()__        if (headerContent.size() > 0) {_            envelope.setHeader(header)__        }_        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,header,header,new,header,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,list,jaxbelement,body,content,list,jaxbelement,header,content,new,array,list,jaxbelement,if,exception,null,body,content,new,array,list,jaxbelement,body,content,add,create,fault,from,exception,exception,else,body,content,create,content,from,object,input,object,soap,action,header,content,for,jaxbelement,elem,body,content,body,get,any,add,elem,for,jaxbelement,elem,header,content,header,get,any,add,elem,envelope,envelope,new,envelope,if,header,content,size,0,envelope,set,header,header,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1312453192;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_                _        Body body = new Body()__        Header header = new Header()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        _        final List<JAXBElement<?>> bodyContent__        List<JAXBElement<?>> headerContent = new ArrayList<JAXBElement<?>>()__        if (exception != null) {_            bodyContent = new ArrayList<JAXBElement<?>>()__            bodyContent.add(createFaultFromException(exception))__        } else {_            bodyContent = createContentFromObject(inputObject, soapAction, headerContent)__        }_       _        for (JAXBElement<?> elem : bodyContent) {_            body.getAny().add(elem)__        }_        for (JAXBElement<?> elem : headerContent) {_            header.getAny().add(elem)__        }_        Envelope envelope = new Envelope()__        if (headerContent.size() > 0) {_            envelope.setHeader(header)__        }_        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,header,header,new,header,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,list,jaxbelement,body,content,list,jaxbelement,header,content,new,array,list,jaxbelement,if,exception,null,body,content,new,array,list,jaxbelement,body,content,add,create,fault,from,exception,exception,else,body,content,create,content,from,object,input,object,soap,action,header,content,for,jaxbelement,elem,body,content,body,get,any,add,elem,for,jaxbelement,elem,header,content,header,get,any,add,elem,envelope,envelope,new,envelope,if,header,content,size,0,envelope,set,header,header,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1317914821;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_                _        Body body = new Body()__        Header header = new Header()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        _        final List<JAXBElement<?>> bodyContent__        List<JAXBElement<?>> headerContent = new ArrayList<JAXBElement<?>>()__        if (exception != null) {_            bodyContent = new ArrayList<JAXBElement<?>>()__            bodyContent.add(createFaultFromException(exception))__        } else {_            bodyContent = createContentFromObject(inputObject, soapAction, headerContent)__        }_       _        for (JAXBElement<?> elem : bodyContent) {_            body.getAny().add(elem)__        }_        for (JAXBElement<?> elem : headerContent) {_            header.getAny().add(elem)__        }_        Envelope envelope = new Envelope()__        if (headerContent.size() > 0) {_            envelope.setHeader(header)__        }_        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,header,header,new,header,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,list,jaxbelement,body,content,list,jaxbelement,header,content,new,array,list,jaxbelement,if,exception,null,body,content,new,array,list,jaxbelement,body,content,add,create,fault,from,exception,exception,else,body,content,create,content,from,object,input,object,soap,action,header,content,for,jaxbelement,elem,body,content,body,get,any,add,elem,for,jaxbelement,elem,header,content,header,get,any,add,elem,envelope,envelope,new,envelope,if,header,content,size,0,envelope,set,header,header,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1325694383;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_                _        Body body = new Body()__        Header header = new Header()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        _        final List<JAXBElement<?>> bodyContent__        List<JAXBElement<?>> headerContent = new ArrayList<JAXBElement<?>>()__        if (exception != null) {_            bodyContent = new ArrayList<JAXBElement<?>>()__            bodyContent.add(createFaultFromException(exception))__        } else {_            bodyContent = createContentFromObject(inputObject, soapAction, headerContent)__        }_       _        for (JAXBElement<?> elem : bodyContent) {_            body.getAny().add(elem)__        }_        for (JAXBElement<?> elem : headerContent) {_            header.getAny().add(elem)__        }_        Envelope envelope = new Envelope()__        if (headerContent.size() > 0) {_            envelope.setHeader(header)__        }_        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,header,header,new,header,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,list,jaxbelement,body,content,list,jaxbelement,header,content,new,array,list,jaxbelement,if,exception,null,body,content,new,array,list,jaxbelement,body,content,add,create,fault,from,exception,exception,else,body,content,create,content,from,object,input,object,soap,action,header,content,for,jaxbelement,elem,body,content,body,get,any,add,elem,for,jaxbelement,elem,header,content,header,get,any,add,elem,envelope,envelope,new,envelope,if,header,content,size,0,envelope,set,header,header,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1325745470;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_                _        Body body = new Body()__        Header header = new Header()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        _        final List<JAXBElement<?>> bodyContent__        List<JAXBElement<?>> headerContent = new ArrayList<JAXBElement<?>>()__        if (exception != null) {_            bodyContent = new ArrayList<JAXBElement<?>>()__            bodyContent.add(createFaultFromException(exception))__        } else {_            bodyContent = createContentFromObject(inputObject, soapAction, headerContent)__        }_       _        for (JAXBElement<?> elem : bodyContent) {_            body.getAny().add(elem)__        }_        for (JAXBElement<?> elem : headerContent) {_            header.getAny().add(elem)__        }_        Envelope envelope = new Envelope()__        if (headerContent.size() > 0) {_            envelope.setHeader(header)__        }_        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,header,header,new,header,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,list,jaxbelement,body,content,list,jaxbelement,header,content,new,array,list,jaxbelement,if,exception,null,body,content,new,array,list,jaxbelement,body,content,add,create,fault,from,exception,exception,else,body,content,create,content,from,object,input,object,soap,action,header,content,for,jaxbelement,elem,body,content,body,get,any,add,elem,for,jaxbelement,elem,header,content,header,get,any,add,elem,envelope,envelope,new,envelope,if,header,content,size,0,envelope,set,header,header,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1341408567;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_                _        Body body = new Body()__        Header header = new Header()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        _        final List<JAXBElement<?>> bodyContent__        List<JAXBElement<?>> headerContent = new ArrayList<JAXBElement<?>>()__        if (exception != null) {_            bodyContent = new ArrayList<JAXBElement<?>>()__            bodyContent.add(createFaultFromException(exception))__        } else {_            bodyContent = createContentFromObject(inputObject, soapAction, headerContent)__        }_       _        for (JAXBElement<?> elem : bodyContent) {_            body.getAny().add(elem)__        }_        for (JAXBElement<?> elem : headerContent) {_            header.getAny().add(elem)__        }_        Envelope envelope = new Envelope()__        if (headerContent.size() > 0) {_            envelope.setHeader(header)__        }_        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,header,header,new,header,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,list,jaxbelement,body,content,list,jaxbelement,header,content,new,array,list,jaxbelement,if,exception,null,body,content,new,array,list,jaxbelement,body,content,add,create,fault,from,exception,exception,else,body,content,create,content,from,object,input,object,soap,action,header,content,for,jaxbelement,elem,body,content,body,get,any,add,elem,for,jaxbelement,elem,header,content,header,get,any,add,elem,envelope,envelope,new,envelope,if,header,content,size,0,envelope,set,header,header,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException;1341409401;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, final Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }_                _        Body body = new Body()__        Header header = new Header()___        Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        if (exception == null) {_            exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class)__        }_        _        final List<JAXBElement<?>> bodyContent__        List<JAXBElement<?>> headerContent = new ArrayList<JAXBElement<?>>()__        if (exception != null) {_            bodyContent = new ArrayList<JAXBElement<?>>()__            bodyContent.add(createFaultFromException(exception))__        } else {_            bodyContent = createContentFromObject(inputObject, soapAction, headerContent)__        }_       _        for (JAXBElement<?> elem : bodyContent) {_            body.getAny().add(elem)__        }_        for (JAXBElement<?> elem : headerContent) {_            header.getAny().add(elem)__        }_        Envelope envelope = new Envelope()__        if (headerContent.size() > 0) {_            envelope.setHeader(header)__        }_        envelope.setBody(body)__        JAXBElement<Envelope> envelopeEl = new ObjectFactory().createEnvelope(envelope)__        super.marshal(exchange, envelopeEl, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,final,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,body,body,new,body,header,header,new,header,throwable,exception,exchange,get,property,exchange,throwable,class,if,exception,null,exception,exchange,get,in,get,header,exchange,throwable,class,final,list,jaxbelement,body,content,list,jaxbelement,header,content,new,array,list,jaxbelement,if,exception,null,body,content,new,array,list,jaxbelement,body,content,add,create,fault,from,exception,exception,else,body,content,create,content,from,object,input,object,soap,action,header,content,for,jaxbelement,elem,body,content,body,get,any,add,elem,for,jaxbelement,elem,header,content,header,get,any,add,elem,envelope,envelope,new,envelope,if,header,content,size,0,envelope,set,header,header,envelope,set,body,body,jaxbelement,envelope,envelope,el,new,object,factory,create,envelope,envelope,super,marshal,exchange,envelope,el,stream
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException;1364874938;Unmarshal a given SOAP xml stream and return the content of the SOAP body_@throws IOException,SAXException;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body,throws,ioexception,saxexception;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException;1364875967;Unmarshal a given SOAP xml stream and return the content of the SOAP body_@throws IOException,SAXException;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body,throws,ioexception,saxexception;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException;1365238374;Unmarshal a given SOAP xml stream and return the content of the SOAP body_@throws IOException,SAXException;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body,throws,ioexception,saxexception;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException;1376549254;Unmarshal a given SOAP xml stream and return the content of the SOAP body_@throws IOException,SAXException;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body,throws,ioexception,saxexception;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException;1439393281;Unmarshal a given SOAP xml stream and return the content of the SOAP body_@throws IOException,SAXException;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body,throws,ioexception,saxexception;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException;1443168793;Unmarshal a given SOAP xml stream and return the content of the SOAP body_@throws IOException,SAXException;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body,throws,ioexception,saxexception;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1265702792;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1267017377;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1268967338;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1294226158;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1308432267;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1311938671;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1312453192;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1317914821;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1325694383;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_        super()__    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format,super
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1325745470;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1341408567;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1341409401;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1341474664;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1358954767;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1364874938;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1364875967;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1365238374;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1376549254;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1439393281;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1443168793;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1516531724;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1521541903;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1524063178;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1536687142;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1537290824;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1540108160;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> public SoapJaxbDataFormat();1547241305;Remember to set the context path when using this constructor;public SoapJaxbDataFormat() {_    };remember,to,set,the,context,path,when,using,this,constructor;public,soap,jaxb,data,format
SoapJaxbDataFormat -> protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1341474664;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1358954767;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1364874938;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1364875967;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1365238374;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1376549254;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1312453192;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param elementNameStrategyRef_webservice interface referenced bean name;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,element,name,strategy,ref,webservice,interface,referenced,bean,name;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1317914821;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param elementNameStrategyRef_webservice interface referenced bean name;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,element,name,strategy,ref,webservice,interface,referenced,bean,name;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1325694383;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param elementNameStrategyRef_webservice interface referenced bean name;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,element,name,strategy,ref,webservice,interface,referenced,bean,name;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1325745470;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param elementNameStrategyRef_webservice interface referenced bean name;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,element,name,strategy,ref,webservice,interface,referenced,bean,name;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1341408567;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param elementNameStrategyRef_webservice interface referenced bean name;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,element,name,strategy,ref,webservice,interface,referenced,bean,name;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1341409401;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1341474664;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1358954767;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1364874938;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1364875967;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1365238374;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1376549254;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1439393281;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1443168793;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1516531724;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1521541903;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1524063178;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1536687142;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1537290824;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1540108160;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef);1547241305;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, String elementNameStrategyRef) {_        this(contextPath)__        this.elementNameStrategyRef = elementNameStrategyRef__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,string,element,name,strategy,ref,this,context,path,this,element,name,strategy,ref,element,name,strategy,ref
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1439393281;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<Object>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,object,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1443168793;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<Object>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,object,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1516531724;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<Object>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,object,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1521541903;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<Object>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,object,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1524063178;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<>()__        List<Object> headerParts = new ArrayList<>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,list,object,header,parts,new,array,list,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1536687142;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<>()__        List<Object> headerParts = new ArrayList<>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class {}", bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class {}", headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,list,object,header,parts,new,array,list,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1537290824;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<>()__        List<Object> headerParts = new ArrayList<>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class {}", bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class {}", headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,list,object,header,parts,new,array,list,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1540108160;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<>()__        List<Object> headerParts = new ArrayList<>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class {}", bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class {}", headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,list,object,header,parts,new,array,list,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> protected List<Object> createContentFromObject(final Object inputObject, String soapAction,                                                          List<Object> headerElements);1547241305;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;protected List<Object> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<Object> headerElements) {_        List<Object> bodyParts = new ArrayList<>()__        List<Object> headerParts = new ArrayList<>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException("The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<Object> bodyElements = new ArrayList<>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class {}", bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class {}", headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;protected,list,object,create,content,from,object,final,object,input,object,string,soap,action,list,object,header,elements,list,object,body,parts,new,array,list,list,object,header,parts,new,array,list,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,object,body,elements,new,array,list,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> private boolean isIgnoreUnmarshalledHeaders();1311938671;Indicates whether header content that has been unmarshalled should be placed into a message_header on the exchange;private boolean isIgnoreUnmarshalledHeaders() {_        return ignoreUnmarshalledHeaders__    };indicates,whether,header,content,that,has,been,unmarshalled,should,be,placed,into,a,message,header,on,the,exchange;private,boolean,is,ignore,unmarshalled,headers,return,ignore,unmarshalled,headers
SoapJaxbDataFormat -> private boolean isIgnoreUnmarshalledHeaders();1312453192;Indicates whether header content that has been unmarshalled should be placed into a message_header on the exchange;private boolean isIgnoreUnmarshalledHeaders() {_        return ignoreUnmarshalledHeaders__    };indicates,whether,header,content,that,has,been,unmarshalled,should,be,placed,into,a,message,header,on,the,exchange;private,boolean,is,ignore,unmarshalled,headers,return,ignore,unmarshalled,headers
SoapJaxbDataFormat -> private boolean isIgnoreUnmarshalledHeaders();1317914821;Indicates whether header content that has been unmarshalled should be placed into a message_header on the exchange;private boolean isIgnoreUnmarshalledHeaders() {_        return ignoreUnmarshalledHeaders__    };indicates,whether,header,content,that,has,been,unmarshalled,should,be,placed,into,a,message,header,on,the,exchange;private,boolean,is,ignore,unmarshalled,headers,return,ignore,unmarshalled,headers
SoapJaxbDataFormat -> private boolean isIgnoreUnmarshalledHeaders();1325694383;Indicates whether header content that has been unmarshalled should be placed into a message_header on the exchange;private boolean isIgnoreUnmarshalledHeaders() {_        return ignoreUnmarshalledHeaders__    };indicates,whether,header,content,that,has,been,unmarshalled,should,be,placed,into,a,message,header,on,the,exchange;private,boolean,is,ignore,unmarshalled,headers,return,ignore,unmarshalled,headers
SoapJaxbDataFormat -> private boolean isIgnoreUnmarshalledHeaders();1325745470;Indicates whether header content that has been unmarshalled should be placed into a message_header on the exchange;private boolean isIgnoreUnmarshalledHeaders() {_        return ignoreUnmarshalledHeaders__    };indicates,whether,header,content,that,has,been,unmarshalled,should,be,placed,into,a,message,header,on,the,exchange;private,boolean,is,ignore,unmarshalled,headers,return,ignore,unmarshalled,headers
SoapJaxbDataFormat -> private boolean isIgnoreUnmarshalledHeaders();1341408567;Indicates whether header content that has been unmarshalled should be placed into a message_header on the exchange;private boolean isIgnoreUnmarshalledHeaders() {_        return ignoreUnmarshalledHeaders__    };indicates,whether,header,content,that,has,been,unmarshalled,should,be,placed,into,a,message,header,on,the,exchange;private,boolean,is,ignore,unmarshalled,headers,return,ignore,unmarshalled,headers
SoapJaxbDataFormat -> private boolean isIgnoreUnmarshalledHeaders();1341409401;Indicates whether header content that has been unmarshalled should be placed into a message_header on the exchange;private boolean isIgnoreUnmarshalledHeaders() {_        return ignoreUnmarshalledHeaders__    };indicates,whether,header,content,that,has,been,unmarshalled,should,be,placed,into,a,message,header,on,the,exchange;private,boolean,is,ignore,unmarshalled,headers,return,ignore,unmarshalled,headers
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1265702792;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshaling__@param jaxbPackage_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshaling,param,jaxb,package,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1267017377;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshaling__@param jaxbPackage_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshaling,param,jaxb,package,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1268967338;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshaling__@param jaxbPackage_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshaling,param,jaxb,package,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1294226158;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshaling__@param jaxbPackage_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshaling,param,jaxb,package,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1308432267;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshaling__@param jaxbPackage_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshaling,param,jaxb,package,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1311938671;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshaling__@param jaxbPackage_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshaling,param,jaxb,package,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1312453192;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1317914821;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1325694383;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1325745470;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1341408567;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling__@param contextPath_package for JAXB context_@param serviceInterface_webservice interface;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling,param,context,path,package,for,jaxb,context,param,service,interface,webservice,interface;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1341409401;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1341474664;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1358954767;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1364874938;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1364875967;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1365238374;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1376549254;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1439393281;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1443168793;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1516531724;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1521541903;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1524063178;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1536687142;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1537290824;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1540108160;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy);1547241305;Initialize the data format. The serviceInterface is necessary to_determine the element name and namespace of the element inside the soap_body when marshalling;public SoapJaxbDataFormat(String contextPath, ElementNameStrategy elementNameStrategy) {_        this(contextPath)__        this.elementNameStrategy = elementNameStrategy__    };initialize,the,data,format,the,service,interface,is,necessary,to,determine,the,element,name,and,namespace,of,the,element,inside,the,soap,body,when,marshalling;public,soap,jaxb,data,format,string,context,path,element,name,strategy,element,name,strategy,this,context,path,this,element,name,strategy,element,name,strategy
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1265702792;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1267017377;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1268967338;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1294226158;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1308432267;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1311938671;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1312453192;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1317914821;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1325694383;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1325745470;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1341408567;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1341409401;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(SOAP_PACKAGE_NAME + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1341474664;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1358954767;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1364874938;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1364875967;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1365238374;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1376549254;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1439393281;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1443168793;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1516531724;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1521541903;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1524063178;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1536687142;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1537290824;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1540108160;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @Override     protected JAXBContext createContext() throws JAXBException;1547241305;Added the generated SOAP package to the JAXB context so Soap datatypes_are available;@Override_    protected JAXBContext createContext() throws JAXBException {_        if (getContextPath() != null) {_            return JAXBContext.newInstance(adapter.getSoapPackageName() + ":" + getContextPath())__        } else {_            return JAXBContext.newInstance()__        }_    };added,the,generated,soap,package,to,the,jaxb,context,so,soap,datatypes,are,available;override,protected,jaxbcontext,create,context,throws,jaxbexception,if,get,context,path,null,return,jaxbcontext,new,instance,adapter,get,soap,package,name,get,context,path,else,return,jaxbcontext,new,instance
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction);1265702792;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject object to be put into the SOAP body_@param soapAction for name resolution_@param classResolver for name resolution_@return JAXBElement for the body content;@SuppressWarnings("unchecked")_    private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction) {_        Object graph__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation) inputObject__            if (bi.getArgs().length > 1) {_                throw new RuntimeCamelException(_                        "SoapDataFormat does not work with Beaninvocations that contain more than 1 parameter")__            }_            graph = (bi.getArgs().length == 1) ? bi.getArgs()[0] : null__        } else {_            graph = inputObject__        }_        QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, graph.getClass())__        return new JAXBElement(name, graph.getClass(), graph)__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,return,jaxbelement,for,the,body,content;suppress,warnings,unchecked,private,jaxbelement,create,body,content,from,object,final,object,input,object,string,soap,action,object,graph,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,if,bi,get,args,length,1,throw,new,runtime,camel,exception,soap,data,format,does,not,work,with,beaninvocations,that,contain,more,than,1,parameter,graph,bi,get,args,length,1,bi,get,args,0,null,else,graph,input,object,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,graph,get,class,return,new,jaxbelement,name,graph,get,class,graph
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction);1267017377;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@return JAXBElement for the body content;@SuppressWarnings("unchecked")_    private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction) {_        Object graph__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation) inputObject__            if (bi.getArgs().length > 1) {_                throw new RuntimeCamelException(_                        "SoapDataFormat does not work with Beaninvocations that contain more than 1 parameter")__            }_            graph = (bi.getArgs().length == 1) ? bi.getArgs()[0] : null__        } else {_            graph = inputObject__        }_        QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, graph.getClass())__        return new JAXBElement(name, graph.getClass(), graph)__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,return,jaxbelement,for,the,body,content;suppress,warnings,unchecked,private,jaxbelement,create,body,content,from,object,final,object,input,object,string,soap,action,object,graph,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,if,bi,get,args,length,1,throw,new,runtime,camel,exception,soap,data,format,does,not,work,with,beaninvocations,that,contain,more,than,1,parameter,graph,bi,get,args,length,1,bi,get,args,0,null,else,graph,input,object,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,graph,get,class,return,new,jaxbelement,name,graph,get,class,graph
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction);1268967338;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@return JAXBElement for the body content;@SuppressWarnings("unchecked")_    private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction) {_        Object graph__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation) inputObject__            if (bi.getArgs().length > 1) {_                throw new RuntimeCamelException(_                        "SoapDataFormat does not work with Beaninvocations that contain more than 1 parameter")__            }_            graph = (bi.getArgs().length == 1) ? bi.getArgs()[0] : null__        } else {_            graph = inputObject__        }_        QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, graph.getClass())__        return new JAXBElement(name, graph.getClass(), graph)__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,return,jaxbelement,for,the,body,content;suppress,warnings,unchecked,private,jaxbelement,create,body,content,from,object,final,object,input,object,string,soap,action,object,graph,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,if,bi,get,args,length,1,throw,new,runtime,camel,exception,soap,data,format,does,not,work,with,beaninvocations,that,contain,more,than,1,parameter,graph,bi,get,args,length,1,bi,get,args,0,null,else,graph,input,object,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,graph,get,class,return,new,jaxbelement,name,graph,get,class,graph
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1267017377;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1268967338;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1294226158;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1308432267;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1311938671;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1312453192;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1317914821;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1325694383;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1325745470;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1341408567;Initialize with JAXB context path__@param contexPath;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path,param,contex,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1341409401;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1341474664;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1358954767;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1364874938;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1364875967;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1365238374;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1376549254;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1439393281;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1443168793;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1516531724;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1521541903;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1524063178;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1536687142;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1537290824;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1540108160;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> public SoapJaxbDataFormat(String contextPath);1547241305;Initialize with JAXB context path;public SoapJaxbDataFormat(String contextPath) {_        super(contextPath)__    };initialize,with,jaxb,context,path;public,soap,jaxb,data,format,string,context,path,super,context,path
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception, String soapAction);1265702792;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@param soapAction_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception, String soapAction) {_        QName name = new ExceptionNameStrategy().findQNameForSoapActionOrType(soapAction, exception.getClass())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault_                .setFaultcode(new QName(exception.getClass().getPackage().getName(), exception.getClass()_                        .getSimpleName()))__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,param,soap,action,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,string,soap,action,qname,name,new,exception,name,strategy,find,qname,for,soap,action,or,type,soap,action,exception,get,class,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,new,qname,exception,get,class,get,package,get,name,exception,get,class,get,simple,name,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception, String soapAction);1267017377;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@param soapAction_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception, String soapAction) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace")__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,param,soap,action,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,string,soap,action,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException;1364874938;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used._@throws IOException,SAXException;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used,throws,ioexception,saxexception;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException;1364875967;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used._@throws IOException,SAXException;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used,throws,ioexception,saxexception;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException;1365238374;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used._@throws IOException,SAXException;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used,throws,ioexception,saxexception;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException;1376549254;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used._@throws IOException,SAXException;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used,throws,ioexception,saxexception;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException;1439393281;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used._@throws IOException,SAXException;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used,throws,ioexception,saxexception;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException;1443168793;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used._@throws IOException,SAXException;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException, SAXException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used,throws,ioexception,saxexception;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,saxexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1268967338;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace")__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1294226158;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace")__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1308432267;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace")__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1311938671;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace")__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1312453192;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace")__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1317914821;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1325694383;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1325745470;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1341408567;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject = null__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,null,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1341409401;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }_        Fault fault = new Fault()__        fault.setFaultcode(FAULT_CODE_SERVER)__        fault.setFaultstring(exception.getMessage())__        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,fault,set,faultcode,fault,set,faultstring,exception,get,message,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1265702792;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        Object rootObject = JAXBIntrospector.getValue(super.unmarshal(exchange, stream))__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        Object payloadEl = envelope.getBody().getAny().get(0)__        return (isIgnoreJAXBElement()) ? JAXBIntrospector.getValue(payloadEl) : payloadEl__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,object,root,object,jaxbintrospector,get,value,super,unmarshal,exchange,stream,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,object,payload,el,envelope,get,body,get,any,get,0,return,is,ignore,jaxbelement,jaxbintrospector,get,value,payload,el,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1267017377;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        Object rootObject = JAXBIntrospector.getValue(super.unmarshal(exchange, stream))__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        Object payloadEl = envelope.getBody().getAny().get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,object,root,object,jaxbintrospector,get,value,super,unmarshal,exchange,stream,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,object,payload,el,envelope,get,body,get,any,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1268967338;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        Object rootObject = JAXBIntrospector.getValue(super.unmarshal(exchange, stream))__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        Object payloadEl = envelope.getBody().getAny().get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,object,root,object,jaxbintrospector,get,value,super,unmarshal,exchange,stream,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,object,payload,el,envelope,get,body,get,any,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1294226158;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1308432267;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1311938671;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        _        Header header = envelope.getHeader()__        if (header != null) {_            List<Object> returnHeaders__            List<Object> anyHeaderElements = envelope.getHeader().getAny()__            if (null != anyHeaderElements && !(isIgnoreUnmarshalledHeaders())) {_                if (isIgnoreJAXBElement()) {_                    returnHeaders = new ArrayList<Object>()__                    for (Object headerEl : anyHeaderElements) {_                        returnHeaders.add(JAXBIntrospector.getValue(headerEl))__                    }  _                } else {_                    returnHeaders = anyHeaderElements__                }_                exchange.getOut().setHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST, returnHeaders)__            }_        }_        _        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,header,header,envelope,get,header,if,header,null,list,object,return,headers,list,object,any,header,elements,envelope,get,header,get,any,if,null,any,header,elements,is,ignore,unmarshalled,headers,if,is,ignore,jaxbelement,return,headers,new,array,list,object,for,object,header,el,any,header,elements,return,headers,add,jaxbintrospector,get,value,header,el,else,return,headers,any,header,elements,exchange,get,out,set,header,soap,jaxb,data,format,return,headers,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1312453192;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        _        Header header = envelope.getHeader()__        if (header != null) {_            List<Object> returnHeaders__            List<Object> anyHeaderElements = envelope.getHeader().getAny()__            if (null != anyHeaderElements && !(isIgnoreUnmarshalledHeaders())) {_                if (isIgnoreJAXBElement()) {_                    returnHeaders = new ArrayList<Object>()__                    for (Object headerEl : anyHeaderElements) {_                        returnHeaders.add(JAXBIntrospector.getValue(headerEl))__                    }  _                } else {_                    returnHeaders = anyHeaderElements__                }_                exchange.getOut().setHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST, returnHeaders)__            }_        }_        _        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,header,header,envelope,get,header,if,header,null,list,object,return,headers,list,object,any,header,elements,envelope,get,header,get,any,if,null,any,header,elements,is,ignore,unmarshalled,headers,if,is,ignore,jaxbelement,return,headers,new,array,list,object,for,object,header,el,any,header,elements,return,headers,add,jaxbintrospector,get,value,header,el,else,return,headers,any,header,elements,exchange,get,out,set,header,soap,jaxb,data,format,return,headers,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1317914821;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        _        Header header = envelope.getHeader()__        if (header != null) {_            List<Object> returnHeaders__            List<Object> anyHeaderElements = envelope.getHeader().getAny()__            if (null != anyHeaderElements && !(isIgnoreUnmarshalledHeaders())) {_                if (isIgnoreJAXBElement()) {_                    returnHeaders = new ArrayList<Object>()__                    for (Object headerEl : anyHeaderElements) {_                        returnHeaders.add(JAXBIntrospector.getValue(headerEl))__                    }  _                } else {_                    returnHeaders = anyHeaderElements__                }_                exchange.getOut().setHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST, returnHeaders)__            }_        }_        _        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,header,header,envelope,get,header,if,header,null,list,object,return,headers,list,object,any,header,elements,envelope,get,header,get,any,if,null,any,header,elements,is,ignore,unmarshalled,headers,if,is,ignore,jaxbelement,return,headers,new,array,list,object,for,object,header,el,any,header,elements,return,headers,add,jaxbintrospector,get,value,header,el,else,return,headers,any,header,elements,exchange,get,out,set,header,soap,jaxb,data,format,return,headers,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1325694383;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        _        Header header = envelope.getHeader()__        if (header != null) {_            List<Object> returnHeaders__            List<Object> anyHeaderElements = envelope.getHeader().getAny()__            if (null != anyHeaderElements && !(isIgnoreUnmarshalledHeaders())) {_                if (isIgnoreJAXBElement()) {_                    returnHeaders = new ArrayList<Object>()__                    for (Object headerEl : anyHeaderElements) {_                        returnHeaders.add(JAXBIntrospector.getValue(headerEl))__                    }  _                } else {_                    returnHeaders = anyHeaderElements__                }_                exchange.getOut().setHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST, returnHeaders)__            }_        }_        _        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,header,header,envelope,get,header,if,header,null,list,object,return,headers,list,object,any,header,elements,envelope,get,header,get,any,if,null,any,header,elements,is,ignore,unmarshalled,headers,if,is,ignore,jaxbelement,return,headers,new,array,list,object,for,object,header,el,any,header,elements,return,headers,add,jaxbintrospector,get,value,header,el,else,return,headers,any,header,elements,exchange,get,out,set,header,soap,jaxb,data,format,return,headers,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1325745470;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        _        Header header = envelope.getHeader()__        if (header != null) {_            List<Object> returnHeaders__            List<Object> anyHeaderElements = envelope.getHeader().getAny()__            if (null != anyHeaderElements && !(isIgnoreUnmarshalledHeaders())) {_                if (isIgnoreJAXBElement()) {_                    returnHeaders = new ArrayList<Object>()__                    for (Object headerEl : anyHeaderElements) {_                        returnHeaders.add(JAXBIntrospector.getValue(headerEl))__                    }  _                } else {_                    returnHeaders = anyHeaderElements__                }_                exchange.getOut().setHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST, returnHeaders)__            }_        }_        _        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,header,header,envelope,get,header,if,header,null,list,object,return,headers,list,object,any,header,elements,envelope,get,header,get,any,if,null,any,header,elements,is,ignore,unmarshalled,headers,if,is,ignore,jaxbelement,return,headers,new,array,list,object,for,object,header,el,any,header,elements,return,headers,add,jaxbintrospector,get,value,header,el,else,return,headers,any,header,elements,exchange,get,out,set,header,soap,jaxb,data,format,return,headers,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1341408567;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        _        Header header = envelope.getHeader()__        if (header != null) {_            List<Object> returnHeaders__            List<Object> anyHeaderElements = envelope.getHeader().getAny()__            if (null != anyHeaderElements && !(isIgnoreUnmarshalledHeaders())) {_                if (isIgnoreJAXBElement()) {_                    returnHeaders = new ArrayList<Object>()__                    for (Object headerEl : anyHeaderElements) {_                        returnHeaders.add(JAXBIntrospector.getValue(headerEl))__                    }  _                } else {_                    returnHeaders = anyHeaderElements__                }_                exchange.getOut().setHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST, returnHeaders)__            }_        }_        _        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,header,header,envelope,get,header,if,header,null,list,object,return,headers,list,object,any,header,elements,envelope,get,header,get,any,if,null,any,header,elements,is,ignore,unmarshalled,headers,if,is,ignore,jaxbelement,return,headers,new,array,list,object,for,object,header,el,any,header,elements,return,headers,add,jaxbintrospector,get,value,header,el,else,return,headers,any,header,elements,exchange,get,out,set,header,soap,jaxb,data,format,return,headers,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1341409401;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)__        if (rootObject.getClass() != Envelope.class) {_            throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass())__        }_        Envelope envelope = (Envelope) rootObject__        _        Header header = envelope.getHeader()__        if (header != null) {_            List<Object> returnHeaders__            List<Object> anyHeaderElements = envelope.getHeader().getAny()__            if (null != anyHeaderElements && !(isIgnoreUnmarshalledHeaders())) {_                if (isIgnoreJAXBElement()) {_                    returnHeaders = new ArrayList<Object>()__                    for (Object headerEl : anyHeaderElements) {_                        returnHeaders.add(JAXBIntrospector.getValue(headerEl))__                    }  _                } else {_                    returnHeaders = anyHeaderElements__                }_                exchange.getOut().setHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST, returnHeaders)__            }_        }_        _        List<Object> anyElement = envelope.getBody().getAny()__        if (anyElement.size() == 0) {_            _            return null___        }_        Object payloadEl = anyElement.get(0)__        Object payload = JAXBIntrospector.getValue(payloadEl)__        if (payload instanceof Fault) {_            Exception exception = createExceptionFromFault((Fault) payload)__            exchange.setException(exception)__            return null__        } else {_            return isIgnoreJAXBElement() ? payload : payloadEl__        }_    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,if,root,object,get,class,envelope,class,throw,new,runtime,camel,exception,expected,soap,envelope,but,got,root,object,get,class,envelope,envelope,envelope,root,object,header,header,envelope,get,header,if,header,null,list,object,return,headers,list,object,any,header,elements,envelope,get,header,get,any,if,null,any,header,elements,is,ignore,unmarshalled,headers,if,is,ignore,jaxbelement,return,headers,new,array,list,object,for,object,header,el,any,header,elements,return,headers,add,jaxbintrospector,get,value,header,el,else,return,headers,any,header,elements,exchange,get,out,set,header,soap,jaxb,data,format,return,headers,list,object,any,element,envelope,get,body,get,any,if,any,element,size,0,return,null,object,payload,el,any,element,get,0,object,payload,jaxbintrospector,get,value,payload,el,if,payload,instanceof,fault,exception,exception,create,exception,from,fault,fault,payload,exchange,set,exception,exception,return,null,else,return,is,ignore,jaxbelement,payload,payload,el
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1341474664;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1358954767;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1516531724;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1521541903;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1524063178;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1536687142;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1537290824;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1540108160;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> public Object unmarshal(Exchange exchange, InputStream stream) throws IOException;1547241305;Unmarshal a given SOAP xml stream and return the content of the SOAP body;public Object unmarshal(Exchange exchange, InputStream stream) throws IOException {_        checkElementNameStrategy(exchange)__        _        String soapAction = getSoapActionFromExchange(exchange)__        _        _        if (soapAction != null && elementNameStrategy instanceof ServiceInterfaceStrategy) {_            ServiceInterfaceStrategy strategy = (ServiceInterfaceStrategy) elementNameStrategy__            String methodName = strategy.getMethodForSoapAction(soapAction)__            exchange.getOut().setHeader(Exchange.BEAN_METHOD_NAME, methodName)__        }_        _        _        _        if (soapAction != null) {_            exchange.setProperty(Exchange.SOAP_ACTION, soapAction)__        }_        _        Object unmarshalledObject = super.unmarshal(exchange, stream)__        Object rootObject = JAXBIntrospector.getValue(unmarshalledObject)___        return adapter.doUnmarshal(exchange, stream, rootObject)__    };unmarshal,a,given,soap,xml,stream,and,return,the,content,of,the,soap,body;public,object,unmarshal,exchange,exchange,input,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,element,name,strategy,instanceof,service,interface,strategy,service,interface,strategy,strategy,service,interface,strategy,element,name,strategy,string,method,name,strategy,get,method,for,soap,action,soap,action,exchange,get,out,set,header,exchange,method,name,if,soap,action,null,exchange,set,property,exchange,soap,action,object,unmarshalled,object,super,unmarshal,exchange,stream,object,root,object,jaxbintrospector,get,value,unmarshalled,object,return,adapter,do,unmarshal,exchange,stream,root,object
SoapJaxbDataFormat -> private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1311938671;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (int i = 0_ i < annotations.length_ i++) {_                Annotation[] singleParameterAnnotations = annotations[i]__                for (int j = 0_ j < singleParameterAnnotations.length_ j++) {_                    Annotation annotation = singleParameterAnnotations[j]__                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException(_                                                    "The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;private,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,int,i,0,i,annotations,length,i,annotation,single,parameter,annotations,annotations,i,for,int,j,0,j,single,parameter,annotations,length,j,annotation,annotation,single,parameter,annotations,j,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1312453192;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (int i = 0_ i < annotations.length_ i++) {_                Annotation[] singleParameterAnnotations = annotations[i]__                for (int j = 0_ j < singleParameterAnnotations.length_ j++) {_                    Annotation annotation = singleParameterAnnotations[j]__                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException(_                                                    "The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;private,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,int,i,0,i,annotations,length,i,annotation,single,parameter,annotations,annotations,i,for,int,j,0,j,single,parameter,annotations,length,j,annotation,annotation,single,parameter,annotations,j,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1317914821;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (int i = 0_ i < annotations.length_ i++) {_                Annotation[] singleParameterAnnotations = annotations[i]__                for (int j = 0_ j < singleParameterAnnotations.length_ j++) {_                    Annotation annotation = singleParameterAnnotations[j]__                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException(_                                                    "The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;private,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,int,i,0,i,annotations,length,i,annotation,single,parameter,annotations,annotations,i,for,int,j,0,j,single,parameter,annotations,length,j,annotation,annotation,single,parameter,annotations,j,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1325694383;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException(_                                                    "The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;private,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1325745470;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException(_                                                    "The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;private,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1341408567;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException(_                                                    "The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                log.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;private,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,                                                          List<JAXBElement<?>> headerElements);1341409401;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param headerElements_in/out parameter used to capture header content if present__@return JAXBElement for the body content;private List<JAXBElement<?>> createContentFromObject(final Object inputObject, String soapAction,_                                                         List<JAXBElement<?>> headerElements) {_        List<Object> bodyParts = new ArrayList<Object>()__        List<Object> headerParts = new ArrayList<Object>()__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation)inputObject__            Annotation[][] annotations = bi.getMethod().getParameterAnnotations()___            List<WebParam> webParams = new ArrayList<WebParam>()__            for (Annotation[] singleParameterAnnotations : annotations) {_                for (Annotation annotation : singleParameterAnnotations) {_                    if (annotation instanceof WebParam) {_                        webParams.add((WebParam)annotation)__                    }_                }_            }__            if (webParams.size() > 0) {_                if (webParams.size() == bi.getArgs().length) {_                    int index = -1__                    for (Object o : bi.getArgs()) {_                        if (webParams.get(++index).header()) {_                            headerParts.add(o)__                        } else {_                            bodyParts.add(o)__                        }_                    }_                } else {_                    throw new RuntimeCamelException(_                                                    "The number of bean invocation parameters does not "_                                                        + "match the number of parameters annotated with @WebParam for the method [ "_                                                        + bi.getMethod().getName() + "].")__                }_            } else {_                _                for (Object o : bi.getArgs()) {_                    bodyParts.add(o)__                }_            }__        } else {_            bodyParts.add(inputObject)__        }__        List<JAXBElement<?>> bodyElements = new ArrayList<JAXBElement<?>>()__        for (Object bodyObj : bodyParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, bodyObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + bodyObj.getClass().getName())__                continue__            } else {_                bodyElements.add(getElement(bodyObj, name))__            }_        }__        for (Object headerObj : headerParts) {_            QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, headerObj.getClass())__            if (name == null) {_                LOG.warn("Could not find QName for class " + headerObj.getClass().getName())__                continue__            } else {_                JAXBElement<?> headerElem = getElement(headerObj, name)__                if (null != headerElem) {_                    headerElements.add(headerElem)__                }_            }_        }__        return bodyElements__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,header,elements,in,out,parameter,used,to,capture,header,content,if,present,return,jaxbelement,for,the,body,content;private,list,jaxbelement,create,content,from,object,final,object,input,object,string,soap,action,list,jaxbelement,header,elements,list,object,body,parts,new,array,list,object,list,object,header,parts,new,array,list,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,annotation,annotations,bi,get,method,get,parameter,annotations,list,web,param,web,params,new,array,list,web,param,for,annotation,single,parameter,annotations,annotations,for,annotation,annotation,single,parameter,annotations,if,annotation,instanceof,web,param,web,params,add,web,param,annotation,if,web,params,size,0,if,web,params,size,bi,get,args,length,int,index,1,for,object,o,bi,get,args,if,web,params,get,index,header,header,parts,add,o,else,body,parts,add,o,else,throw,new,runtime,camel,exception,the,number,of,bean,invocation,parameters,does,not,match,the,number,of,parameters,annotated,with,web,param,for,the,method,bi,get,method,get,name,else,for,object,o,bi,get,args,body,parts,add,o,else,body,parts,add,input,object,list,jaxbelement,body,elements,new,array,list,jaxbelement,for,object,body,obj,body,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,body,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,body,obj,get,class,get,name,continue,else,body,elements,add,get,element,body,obj,name,for,object,header,obj,header,parts,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,header,obj,get,class,if,name,null,log,warn,could,not,find,qname,for,class,header,obj,get,class,get,name,continue,else,jaxbelement,header,elem,get,element,header,obj,name,if,null,header,elem,header,elements,add,header,elem,return,body,elements
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1341474664;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1358954767;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1516531724;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1521541903;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1524063178;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1536687142;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1537290824;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1540108160;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException;1547241305;Marshal inputObjects to SOAP xml. If the exchange or message has an_EXCEPTION_CAUGTH property or header then instead of the object the_exception is marshaled.__To determine the name of the top level xml elements the elementNameStrategy_is used.;public void marshal(Exchange exchange, Object inputObject, OutputStream stream) throws IOException {_        checkElementNameStrategy(exchange)___        String soapAction = getSoapActionFromExchange(exchange)__        if (soapAction == null && inputObject instanceof BeanInvocation) {_            BeanInvocation beanInvocation = (BeanInvocation) inputObject__            WebMethod webMethod = beanInvocation.getMethod().getAnnotation(WebMethod.class)__            if (webMethod != null && webMethod.action() != null) {_                soapAction = webMethod.action()__            }_        }__        Object envelope = adapter.doMarshal(exchange, inputObject, stream, soapAction)___        _        super.marshal(exchange, envelope, stream)__    };marshal,input,objects,to,soap,xml,if,the,exchange,or,message,has,an,property,or,header,then,instead,of,the,object,the,exception,is,marshaled,to,determine,the,name,of,the,top,level,xml,elements,the,element,name,strategy,is,used;public,void,marshal,exchange,exchange,object,input,object,output,stream,stream,throws,ioexception,check,element,name,strategy,exchange,string,soap,action,get,soap,action,from,exchange,exchange,if,soap,action,null,input,object,instanceof,bean,invocation,bean,invocation,bean,invocation,bean,invocation,input,object,web,method,web,method,bean,invocation,get,method,get,annotation,web,method,class,if,web,method,null,web,method,action,null,soap,action,web,method,action,object,envelope,adapter,do,marshal,exchange,input,object,stream,soap,action,super,marshal,exchange,envelope,stream
SoapJaxbDataFormat -> @SuppressWarnings({ "unchecked", "rawtypes" })     private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction);1294226158;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@return JAXBElement for the body content;@SuppressWarnings({ "unchecked", "rawtypes" })_    private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction) {_        Object paramObject__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation) inputObject__            if (bi.getArgs() == null || bi.getArgs().length == 0) {_                paramObject = null__            } else if (bi.getArgs().length == 1) {_                paramObject = bi.getArgs()[0]__            } else {_                throw new RuntimeCamelException("SoapDataFormat does not work with " _                        + "Beaninvocations that contain more than 1 parameter")_                _            }_        } else {_            paramObject = inputObject__        }_        if (paramObject == null) {_            return null__        }_        QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, paramObject.getClass())__        if (name == null) {_            _            return null__        }_        return new JAXBElement(name, paramObject.getClass(), paramObject)__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,return,jaxbelement,for,the,body,content;suppress,warnings,unchecked,rawtypes,private,jaxbelement,create,body,content,from,object,final,object,input,object,string,soap,action,object,param,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,if,bi,get,args,null,bi,get,args,length,0,param,object,null,else,if,bi,get,args,length,1,param,object,bi,get,args,0,else,throw,new,runtime,camel,exception,soap,data,format,does,not,work,with,beaninvocations,that,contain,more,than,1,parameter,else,param,object,input,object,if,param,object,null,return,null,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,param,object,get,class,if,name,null,return,null,return,new,jaxbelement,name,param,object,get,class,param,object
SoapJaxbDataFormat -> @SuppressWarnings({ "unchecked", "rawtypes" })     private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction);1308432267;Create body content from a non Exception object. If the inputObject is a_BeanInvocation the following should be considered: The first parameter_will be used for the SOAP body. BeanInvocations with more than one_parameter are not supported. So the interface should be in doc lit bare_style.__@param inputObject_object to be put into the SOAP body_@param soapAction_for name resolution_@param classResolver_for name resolution_@return JAXBElement for the body content;@SuppressWarnings({ "unchecked", "rawtypes" })_    private JAXBElement<?> createBodyContentFromObject(final Object inputObject, String soapAction) {_        Object paramObject__        if (inputObject instanceof BeanInvocation) {_            BeanInvocation bi = (BeanInvocation) inputObject__            if (bi.getArgs() == null || bi.getArgs().length == 0) {_                paramObject = null__            } else if (bi.getArgs().length == 1) {_                paramObject = bi.getArgs()[0]__            } else {_                throw new RuntimeCamelException("SoapDataFormat does not work with " _                        + "Beaninvocations that contain more than 1 parameter")_                _            }_        } else {_            paramObject = inputObject__        }_        if (paramObject == null) {_            return null__        }_        QName name = elementNameStrategy.findQNameForSoapActionOrType(soapAction, paramObject.getClass())__        if (name == null) {_            _            return null__        }_        return new JAXBElement(name, paramObject.getClass(), paramObject)__    };create,body,content,from,a,non,exception,object,if,the,input,object,is,a,bean,invocation,the,following,should,be,considered,the,first,parameter,will,be,used,for,the,soap,body,bean,invocations,with,more,than,one,parameter,are,not,supported,so,the,interface,should,be,in,doc,lit,bare,style,param,input,object,object,to,be,put,into,the,soap,body,param,soap,action,for,name,resolution,param,class,resolver,for,name,resolution,return,jaxbelement,for,the,body,content;suppress,warnings,unchecked,rawtypes,private,jaxbelement,create,body,content,from,object,final,object,input,object,string,soap,action,object,param,object,if,input,object,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,input,object,if,bi,get,args,null,bi,get,args,length,0,param,object,null,else,if,bi,get,args,length,1,param,object,bi,get,args,0,else,throw,new,runtime,camel,exception,soap,data,format,does,not,work,with,beaninvocations,that,contain,more,than,1,parameter,else,param,object,input,object,if,param,object,null,return,null,qname,name,element,name,strategy,find,qname,for,soap,action,or,type,soap,action,param,object,get,class,if,name,null,return,null,return,new,jaxbelement,name,param,object,get,class,param,object
