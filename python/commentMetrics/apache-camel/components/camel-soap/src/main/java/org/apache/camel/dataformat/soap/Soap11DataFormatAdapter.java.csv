commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public SoapJaxbDataFormat getDataFormat() {     return dataFormat. }
false;public;4;39;;@Override public Object doMarshal(Exchange exchange, Object inputObject, OutputStream stream, String soapAction) throws IOException {     Body body = objectFactory.createBody().     Header header = objectFactory.createHeader().     Throwable exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class).     if (exception == null) {         exception = exchange.getIn().getHeader(Exchange.EXCEPTION_CAUGHT, Throwable.class).     }     final List<Object> bodyContent.     List<Object> headerContent = new ArrayList<>().     if (exception != null) {         bodyContent = new ArrayList<>().         bodyContent.add(createFaultFromException(exception)).     } else {         if (!dataFormat.isIgnoreUnmarshalledHeaders()) {             List<Object> inboundSoapHeaders = (List<Object>) exchange.getIn().getHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST).             if (null != inboundSoapHeaders) {                 headerContent.addAll(inboundSoapHeaders).             }         }         bodyContent = getDataFormat().createContentFromObject(inputObject, soapAction, headerContent).     }     for (Object elem : bodyContent) {         body.getAny().add(elem).     }     for (Object elem : headerContent) {         header.getAny().add(elem).     }     Envelope envelope = new Envelope().     if (headerContent.size() > 0) {         envelope.setHeader(header).     }     envelope.setBody(body).     JAXBElement<Envelope> envelopeEl = objectFactory.createEnvelope(envelope).     return envelopeEl. }
true;private;1;25;/**  * Creates a SOAP fault from the exception and populates the message as well  * as the detail. The detail object is read from the method getFaultInfo of  * the throwable if present  *  * @param exception the cause exception  * @return SOAP fault from given Throwable  */ ;/**  * Creates a SOAP fault from the exception and populates the message as well  * as the detail. The detail object is read from the method getFaultInfo of  * the throwable if present  *  * @param exception the cause exception  * @return SOAP fault from given Throwable  */ @SuppressWarnings("unchecked") private JAXBElement<Fault> createFaultFromException(final Throwable exception) {     WebFault webFault = exception.getClass().getAnnotation(WebFault.class).     if (webFault == null || webFault.targetNamespace() == null) {         throw new RuntimeException("The exception " + exception.getClass().getName() + " needs to have an WebFault annotation with name and targetNamespace", exception).     }     QName name = new QName(webFault.targetNamespace(), webFault.name()).     Object faultObject.     try {         Method method = exception.getClass().getMethod("getFaultInfo").         faultObject = method.invoke(exception).     } catch (Exception e) {         throw new RuntimeCamelException("Exception while trying to get fault details", e).     }     Fault fault = new Fault().     fault.setFaultcode(FAULT_CODE_SERVER).     fault.setFaultstring(exception.getMessage()).     Detail detailEl = new ObjectFactory().createDetail().     @SuppressWarnings("rawtypes")     JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject).     detailEl.getAny().add(faultDetailContent).     fault.setDetail(detailEl).     return new ObjectFactory().createFault(fault). }
false;public;3;40;;@Override public Object doUnmarshal(Exchange exchange, InputStream stream, Object rootObject) throws IOException {     if (rootObject.getClass() != Envelope.class) {         throw new RuntimeCamelException("Expected Soap Envelope but got " + rootObject.getClass()).     }     Envelope envelope = (Envelope) rootObject.     Header header = envelope.getHeader().     if (header != null) {         List<Object> returnHeaders.         List<Object> anyHeaderElements = envelope.getHeader().getAny().         if (null != anyHeaderElements && !(getDataFormat().isIgnoreUnmarshalledHeaders())) {             if (getDataFormat().isIgnoreJAXBElement()) {                 returnHeaders = new ArrayList<>().                 for (Object headerEl : anyHeaderElements) {                     returnHeaders.add(JAXBIntrospector.getValue(headerEl)).                 }             } else {                 returnHeaders = anyHeaderElements.             }             exchange.getOut().setHeader(SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST, returnHeaders).         }     }     List<Object> anyElement = envelope.getBody().getAny().     if (anyElement.size() == 0) {         // No parameter so return null         return null.     }     Object payloadEl = anyElement.get(0).     Object payload = JAXBIntrospector.getValue(payloadEl).     if (payload instanceof Fault) {         Exception exception = createExceptionFromFault((Fault) payload).         exchange.setException(exception).         return null.     } else {         return getDataFormat().isIgnoreJAXBElement() ? payload : payloadEl.     } }
true;private;1;40;/**  * Creates an exception and eventually an embedded bean that contains the  * fault detail. The exception class is determined by using the  * elementNameStrategy. The qName of the fault detail should match the  * WebFault annotation of the Exception class. If no fault detail is set a  * SOAPFaultException is created.  *  * @param fault Soap fault  * @return created Exception  */ ;/**  * Creates an exception and eventually an embedded bean that contains the  * fault detail. The exception class is determined by using the  * elementNameStrategy. The qName of the fault detail should match the  * WebFault annotation of the Exception class. If no fault detail is set a  * SOAPFaultException is created.  *  * @param fault Soap fault  * @return created Exception  */ private Exception createExceptionFromFault(Fault fault) {     String message = fault.getFaultstring().     Detail faultDetail = fault.getDetail().     if (faultDetail == null || faultDetail.getAny().size() == 0) {         try {             return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getFaultcode())).         } catch (SOAPException e) {             throw new RuntimeCamelException(e).         }     }     Object detailObj = faultDetail.getAny().get(0).     if (!(detailObj instanceof JAXBElement)) {         try {             return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getFaultcode())).         } catch (SOAPException e) {             throw new RuntimeCamelException(e).         }     }     JAXBElement<?> detailEl = (JAXBElement<?>) detailObj.     Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName()).     Constructor<? extends Exception> messageConstructor.     Constructor<? extends Exception> constructor.     try {         Object detail = JAXBIntrospector.getValue(detailEl).         try {             constructor = exceptionClass.getConstructor(String.class, detail.getClass()).             return constructor.newInstance(message, detail).         } catch (NoSuchMethodException e) {             messageConstructor = exceptionClass.getConstructor(String.class).             return messageConstructor.newInstance(message).         }     } catch (Exception e) {         throw new RuntimeCamelException(e).     } }
false;public;0;4;;@Override public String getSoapPackageName() {     return SOAP_PACKAGE_NAME. }
