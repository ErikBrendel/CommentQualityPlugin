# id;timestamp;commentText;codeText;commentWords;codeWords
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1265702792;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        TypeInfo inInfo = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(soapAction, inInfo, outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,type,info,in,info,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,soap,action,in,info,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1267017377;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        TypeInfo inInfo = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(soapAction, inInfo, outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,type,info,in,info,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,soap,action,in,info,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1294226158;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        TypeInfo inInfo = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, inInfo, outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,type,info,in,info,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,info,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1311938671;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        List<TypeInfo> inInfos = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, _                inInfos.toArray(new TypeInfo[inInfos.size()]), outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,list,type,info,in,infos,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,infos,to,array,new,type,info,in,infos,size,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1318068053;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        List<TypeInfo> inInfos = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, _                inInfos.toArray(new TypeInfo[inInfos.size()]), outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,list,type,info,in,infos,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,infos,to,array,new,type,info,in,infos,size,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1325694383;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        List<TypeInfo> inInfos = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, _                inInfos.toArray(new TypeInfo[inInfos.size()]), outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,list,type,info,in,infos,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,infos,to,array,new,type,info,in,infos,size,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1376549254;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        List<TypeInfo> inInfos = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, _                inInfos.toArray(new TypeInfo[inInfos.size()]), outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,list,type,info,in,infos,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,infos,to,array,new,type,info,in,infos,size,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1405374721;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        List<TypeInfo> inInfos = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, _                inInfos.toArray(new TypeInfo[inInfos.size()]), outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,list,type,info,in,infos,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,infos,to,array,new,type,info,in,infos,size,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1461847536;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        List<TypeInfo> inInfos = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, _                inInfos.toArray(new TypeInfo[inInfos.size()]), outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,list,type,info,in,infos,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,infos,to,array,new,type,info,in,infos,size,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1524063178;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        List<TypeInfo> inInfos = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, _                inInfos.toArray(new TypeInfo[inInfos.size()]), outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,list,type,info,in,infos,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,infos,to,array,new,type,info,in,infos,size,out,info
ServiceInterfaceStrategy -> private MethodInfo analyzeMethod(Method method);1537290824;Determines how the parameter object of the service method will be named_in xml. It will use either the RequestWrapper annotation of the method if_present or the WebParam method of the parameter.__@param method;private MethodInfo analyzeMethod(Method method) {_        List<TypeInfo> inInfos = getInInfo(method)__        TypeInfo outInfo = getOutInfo(method)__        WebMethod webMethod = method.getAnnotation(WebMethod.class)__        String soapAction = (webMethod != null) ? webMethod.action() : null__        return new MethodInfo(method.getName(), soapAction, _                inInfos.toArray(new TypeInfo[inInfos.size()]), outInfo)__    };determines,how,the,parameter,object,of,the,service,method,will,be,named,in,xml,it,will,use,either,the,request,wrapper,annotation,of,the,method,if,present,or,the,web,param,method,of,the,parameter,param,method;private,method,info,analyze,method,method,method,list,type,info,in,infos,get,in,info,method,type,info,out,info,get,out,info,method,web,method,web,method,method,get,annotation,web,method,class,string,soap,action,web,method,null,web,method,action,null,return,new,method,info,method,get,name,soap,action,in,infos,to,array,new,type,info,in,infos,size,out,info
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1265702792;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                return info.getIn().getElName()__            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (isClient) {_            qName = inTypeNameToQName.get(type.getName())__        } else {_            qName = outTypeNameToQName.get(type.getName())__        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction + " or that has an "_                        + (isClient ? "input" : "output") + " of type " + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,return,info,get,in,get,el,name,else,return,info,get,out,get,el,name,qname,q,name,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1267017377;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                return info.getIn().getElName()__            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (isClient) {_            qName = inTypeNameToQName.get(type.getName())__        } else {_            qName = outTypeNameToQName.get(type.getName())__        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction + " or that has an "_                        + (isClient ? "input" : "output") + " of type " + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,return,info,get,in,get,el,name,else,return,info,get,out,get,el,name,qname,q,name,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1294226158;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                return info.getIn().getElName()__            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction + " or that has an "_                        + (isClient ? "input" : "output") + " of type " + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,return,info,get,in,get,el,name,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1311938671;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                if (type != null) {_                    return info.getIn(type.getName()).getElName()__                } else {_                    return null__                }_            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction_                             + " or that has an " + (isClient ? "input" : "output") + " of type "_                             + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,if,type,null,return,info,get,in,type,get,name,get,el,name,else,return,null,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1318068053;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                if (type != null) {_                    return info.getIn(type.getName()).getElName()__                } else {_                    return null__                }_            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction_                             + " or that has an " + (isClient ? "input" : "output") + " of type "_                             + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,if,type,null,return,info,get,in,type,get,name,get,el,name,else,return,null,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1325694383;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                if (type != null) {_                    return info.getIn(type.getName()).getElName()__                } else {_                    return null__                }_            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction_                             + " or that has an " + (isClient ? "input" : "output") + " of type "_                             + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,if,type,null,return,info,get,in,type,get,name,get,el,name,else,return,null,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1376549254;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                if (type != null) {_                    return info.getIn(type.getName()).getElName()__                } else {_                    return null__                }_            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction_                             + " or that has an " + (isClient ? "input" : "output") + " of type "_                             + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,if,type,null,return,info,get,in,type,get,name,get,el,name,else,return,null,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1405374721;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                if (type != null) {_                    return info.getIn(type.getName()).getElName()__                } else {_                    return null__                }_            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction_                             + " or that has an " + (isClient ? "input" : "output") + " of type "_                             + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,if,type,null,return,info,get,in,type,get,name,get,el,name,else,return,null,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1461847536;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                if (type != null) {_                    return info.getIn(type.getName()).getElName()__                } else {_                    return null__                }_            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction_                             + " or that has an " + (isClient ? "input" : "output") + " of type "_                             + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,if,type,null,return,info,get,in,type,get,name,get,el,name,else,return,null,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1524063178;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                if (type != null) {_                    return info.getIn(type.getName()).getElName()__                } else {_                    return null__                }_            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction_                             + " or that has an " + (isClient ? "input" : "output") + " of type "_                             + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,if,type,null,return,info,get,in,type,get,name,get,el,name,else,return,null,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1537290824;Determine the QName of the method parameter of the method that matches_either soapAction and type or if not possible only the type__@param soapAction_@param type_@return matching QName throws RuntimeException if no matching QName was_found;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        MethodInfo info = soapActionToMethodInfo.get(soapAction)__        if (info != null) {_            if (isClient) {_                if (type != null) {_                    return info.getIn(type.getName()).getElName()__                } else {_                    return null__                }_            } else {_                return info.getOut().getElName()__            }_        }_        QName qName = null__        if (type != null) {_            if (isClient) {_                qName = inTypeNameToQName.get(type.getName())__            } else {_                qName = outTypeNameToQName.get(type.getName())__            }_        }_        if (qName == null) {_            try {_                qName = fallBackStrategy.findQNameForSoapActionOrType(soapAction, type)__            } catch (Exception e) {_                String msg = "No method found that matches the given SoapAction " + soapAction_                             + " or that has an " + (isClient ? "input" : "output") + " of type "_                             + type.getName()__                throw new RuntimeCamelException(msg, e)__            }_        }_        return qName__    };determine,the,qname,of,the,method,parameter,of,the,method,that,matches,either,soap,action,and,type,or,if,not,possible,only,the,type,param,soap,action,param,type,return,matching,qname,throws,runtime,exception,if,no,matching,qname,was,found;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,method,info,info,soap,action,to,method,info,get,soap,action,if,info,null,if,is,client,if,type,null,return,info,get,in,type,get,name,get,el,name,else,return,null,else,return,info,get,out,get,el,name,qname,q,name,null,if,type,null,if,is,client,q,name,in,type,name,to,qname,get,type,get,name,else,q,name,out,type,name,to,qname,get,type,get,name,if,q,name,null,try,q,name,fall,back,strategy,find,qname,for,soap,action,or,type,soap,action,type,catch,exception,e,string,msg,no,method,found,that,matches,the,given,soap,action,soap,action,or,that,has,an,is,client,input,output,of,type,type,get,name,throw,new,runtime,camel,exception,msg,e,return,q,name
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1265702792;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1267017377;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1294226158;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1311938671;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1318068053;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1325694383;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1376549254;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1405374721;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1461847536;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1524063178;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
ServiceInterfaceStrategy -> public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient);1537290824;Init with JAX-WS service interface__@param serviceInterface_@param isClient_determines if marhalling looks at input or output of method;public ServiceInterfaceStrategy(Class<?> serviceInterface, boolean isClient) {_        analyzeServiceInterface(serviceInterface)__        this.isClient = isClient__        this.fallBackStrategy = new TypeNameStrategy()__    };init,with,jax,ws,service,interface,param,service,interface,param,is,client,determines,if,marhalling,looks,at,input,or,output,of,method;public,service,interface,strategy,class,service,interface,boolean,is,client,analyze,service,interface,service,interface,this,is,client,is,client,this,fall,back,strategy,new,type,name,strategy
