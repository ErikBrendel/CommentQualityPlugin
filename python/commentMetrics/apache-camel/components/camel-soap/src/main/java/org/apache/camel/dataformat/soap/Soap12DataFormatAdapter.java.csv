# id;timestamp;commentText;codeText;commentWords;codeWords
Soap12DataFormatAdapter -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1341474664;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }__        Fault fault = new Fault()__        Faultcode code = new Faultcode()__        code.setValue(FAULT_CODE_SERVER)__        fault.setCode(code)___        Reasontext text = new Reasontext()__        text.setValue(exception.getMessage())__        text.setLang("en")__        fault.setReason(new Faultreason().withText(text))___        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,faultcode,code,new,faultcode,code,set,value,fault,set,code,code,reasontext,text,new,reasontext,text,set,value,exception,get,message,text,set,lang,en,fault,set,reason,new,faultreason,with,text,text,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
Soap12DataFormatAdapter -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1347633348;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }__        Fault fault = new Fault()__        Faultcode code = new Faultcode()__        code.setValue(FAULT_CODE_SERVER)__        fault.setCode(code)___        Reasontext text = new Reasontext()__        text.setValue(exception.getMessage())__        text.setLang("en")__        fault.setReason(new Faultreason().withText(text))___        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,faultcode,code,new,faultcode,code,set,value,fault,set,code,code,reasontext,text,new,reasontext,text,set,value,exception,get,message,text,set,lang,en,fault,set,reason,new,faultreason,with,text,text,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
Soap12DataFormatAdapter -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1439393281;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }__        Fault fault = new Fault()__        Faultcode code = new Faultcode()__        code.setValue(FAULT_CODE_SERVER)__        fault.setCode(code)___        Reasontext text = new Reasontext()__        text.setValue(exception.getMessage())__        text.setLang("en")__        fault.setReason(new Faultreason().withText(text))___        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,faultcode,code,new,faultcode,code,set,value,fault,set,code,code,reasontext,text,new,reasontext,text,set,value,exception,get,message,text,set,lang,en,fault,set,reason,new,faultreason,with,text,text,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
Soap12DataFormatAdapter -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1450076438;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }__        Fault fault = new Fault()__        Faultcode code = new Faultcode()__        code.setValue(FAULT_CODE_SERVER)__        fault.setCode(code)___        Reasontext text = new Reasontext()__        text.setValue(exception.getMessage())__        text.setLang("en")__        fault.setReason(new Faultreason().withText(text))___        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,faultcode,code,new,faultcode,code,set,value,fault,set,code,code,reasontext,text,new,reasontext,text,set,value,exception,get,message,text,set,lang,en,fault,set,reason,new,faultreason,with,text,text,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
Soap12DataFormatAdapter -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1450077069;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }__        Fault fault = new Fault()__        Faultcode code = new Faultcode()__        code.setValue(FAULT_CODE_SERVER)__        fault.setCode(code)___        Reasontext text = new Reasontext()__        text.setValue(exception.getMessage())__        text.setLang("en")__        fault.setReason(new Faultreason().withText(text))___        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,faultcode,code,new,faultcode,code,set,value,fault,set,code,code,reasontext,text,new,reasontext,text,set,value,exception,get,message,text,set,lang,en,fault,set,reason,new,faultreason,with,text,text,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
Soap12DataFormatAdapter -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1490862642;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }__        Fault fault = new Fault()__        Faultcode code = new Faultcode()__        code.setValue(FAULT_CODE_SERVER)__        fault.setCode(code)___        Reasontext text = new Reasontext()__        text.setValue(exception.getMessage())__        text.setLang("en")__        fault.setReason(new Faultreason().withText(text))___        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,faultcode,code,new,faultcode,code,set,value,fault,set,code,code,reasontext,text,new,reasontext,text,set,value,exception,get,message,text,set,lang,en,fault,set,reason,new,faultreason,with,text,text,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
Soap12DataFormatAdapter -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1491312611;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }__        Fault fault = new Fault()__        Faultcode code = new Faultcode()__        code.setValue(FAULT_CODE_SERVER)__        fault.setCode(code)___        Reasontext text = new Reasontext()__        text.setValue(exception.getMessage())__        text.setLang("en")__        fault.setReason(new Faultreason().withText(text))___        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,faultcode,code,new,faultcode,code,set,value,fault,set,code,code,reasontext,text,new,reasontext,text,set,value,exception,get,message,text,set,lang,en,fault,set,reason,new,faultreason,with,text,text,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
Soap12DataFormatAdapter -> @SuppressWarnings("unchecked")     private JAXBElement<Fault> createFaultFromException(final Throwable exception);1524063178;Creates a SOAP fault from the exception and populates the message as well_as the detail. The detail object is read from the method getFaultInfo of_the throwable if present__@param exception the cause exception_@return SOAP fault from given Throwable;@SuppressWarnings("unchecked")_    private JAXBElement<Fault> createFaultFromException(final Throwable exception) {_        WebFault webFault = exception.getClass().getAnnotation(WebFault.class)__        if (webFault == null || webFault.targetNamespace() == null) {_            throw new RuntimeException("The exception " + exception.getClass().getName()_                    + " needs to have an WebFault annotation with name and targetNamespace", exception)__        }_        QName name = new QName(webFault.targetNamespace(), webFault.name())__        Object faultObject__        try {_            Method method = exception.getClass().getMethod("getFaultInfo")__            faultObject = method.invoke(exception)__        } catch (Exception e) {_            throw new RuntimeCamelException("Exception while trying to get fault details", e)__        }__        Fault fault = new Fault()__        Faultcode code = new Faultcode()__        code.setValue(FAULT_CODE_SERVER)__        fault.setCode(code)___        Reasontext text = new Reasontext()__        text.setValue(exception.getMessage())__        text.setLang("en")__        fault.setReason(new Faultreason().withText(text))___        Detail detailEl = new ObjectFactory().createDetail()__        @SuppressWarnings("rawtypes")_        JAXBElement<?> faultDetailContent = new JAXBElement(name, faultObject.getClass(), faultObject)__        detailEl.getAny().add(faultDetailContent)__        fault.setDetail(detailEl)__        return new ObjectFactory().createFault(fault)__    };creates,a,soap,fault,from,the,exception,and,populates,the,message,as,well,as,the,detail,the,detail,object,is,read,from,the,method,get,fault,info,of,the,throwable,if,present,param,exception,the,cause,exception,return,soap,fault,from,given,throwable;suppress,warnings,unchecked,private,jaxbelement,fault,create,fault,from,exception,final,throwable,exception,web,fault,web,fault,exception,get,class,get,annotation,web,fault,class,if,web,fault,null,web,fault,target,namespace,null,throw,new,runtime,exception,the,exception,exception,get,class,get,name,needs,to,have,an,web,fault,annotation,with,name,and,target,namespace,exception,qname,name,new,qname,web,fault,target,namespace,web,fault,name,object,fault,object,try,method,method,exception,get,class,get,method,get,fault,info,fault,object,method,invoke,exception,catch,exception,e,throw,new,runtime,camel,exception,exception,while,trying,to,get,fault,details,e,fault,fault,new,fault,faultcode,code,new,faultcode,code,set,value,fault,set,code,code,reasontext,text,new,reasontext,text,set,value,exception,get,message,text,set,lang,en,fault,set,reason,new,faultreason,with,text,text,detail,detail,el,new,object,factory,create,detail,suppress,warnings,rawtypes,jaxbelement,fault,detail,content,new,jaxbelement,name,fault,object,get,class,fault,object,detail,el,get,any,add,fault,detail,content,fault,set,detail,detail,el,return,new,object,factory,create,fault,fault
Soap12DataFormatAdapter -> private Exception createExceptionFromFault(Fault fault);1341474664;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault_Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        StringBuilder sb = new StringBuilder()__        for (Reasontext text : fault.getReason().getText()) {_            sb.append(text)__        }_        String message = sb.toString()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageConstructor__        Constructor<? extends Exception> constructor___        try {_            messageConstructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageConstructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,builder,sb,new,string,builder,for,reasontext,text,fault,get,reason,get,text,sb,append,text,string,message,sb,to,string,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,get,data,format,get,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,constructor,constructor,extends,exception,constructor,try,message,constructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,constructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
Soap12DataFormatAdapter -> private Exception createExceptionFromFault(Fault fault);1347633348;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        StringBuilder sb = new StringBuilder()__        for (Reasontext text : fault.getReason().getText()) {_            sb.append(text)__        }_        String message = sb.toString()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageConstructor__        Constructor<? extends Exception> constructor___        try {_            messageConstructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageConstructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,builder,sb,new,string,builder,for,reasontext,text,fault,get,reason,get,text,sb,append,text,string,message,sb,to,string,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,get,data,format,get,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,constructor,constructor,extends,exception,constructor,try,message,constructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,constructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
Soap12DataFormatAdapter -> private Exception createExceptionFromFault(Fault fault);1439393281;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set the_a RuntimeCamelException is created.__@param fault Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        List<Object> detailList = fault.getDetail().getAny()__        StringBuilder sb = new StringBuilder()__        for (Reasontext text : fault.getReason().getText()) {_            sb.append(text)__        }_        String message = sb.toString()___        if (detailList.size() == 0) {_            return new RuntimeCamelException(message)__        }_        JAXBElement<?> detailEl = (JAXBElement<?>) detailList.get(0)__        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageConstructor__        Constructor<? extends Exception> constructor___        try {_            messageConstructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageConstructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,the,a,runtime,camel,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,list,object,detail,list,fault,get,detail,get,any,string,builder,sb,new,string,builder,for,reasontext,text,fault,get,reason,get,text,sb,append,text,string,message,sb,to,string,if,detail,list,size,0,return,new,runtime,camel,exception,message,jaxbelement,detail,el,jaxbelement,detail,list,get,0,class,extends,exception,exception,class,get,data,format,get,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,constructor,constructor,extends,exception,constructor,try,message,constructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,constructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
Soap12DataFormatAdapter -> private Exception createExceptionFromFault(Fault fault);1450076438;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set_a {@link javax.xml.ws.soap.SOAPFaultException} is created.__@param fault Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        StringBuilder sb = new StringBuilder()__        for (Reasontext text : fault.getReason().getText()) {_            sb.append(text)__        }_        String message = sb.toString()___        Detail faultDetail = fault.getDetail()__        if (faultDetail == null || faultDetail.getAny().size() == 0) {_            try {_                return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getCode().getValue()))__            } catch (SOAPException e) {_                throw new RuntimeCamelException(e)__            }_        }_        _        JAXBElement<?> detailEl = (JAXBElement<?>) faultDetail.getAny().get(0)__        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageConstructor__        Constructor<? extends Exception> constructor___        try {_            messageConstructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageConstructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,a,link,javax,xml,ws,soap,soapfault,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,string,builder,sb,new,string,builder,for,reasontext,text,fault,get,reason,get,text,sb,append,text,string,message,sb,to,string,detail,fault,detail,fault,get,detail,if,fault,detail,null,fault,detail,get,any,size,0,try,return,new,soapfault,exception,soapfactory,new,instance,create,fault,message,fault,get,code,get,value,catch,soapexception,e,throw,new,runtime,camel,exception,e,jaxbelement,detail,el,jaxbelement,fault,detail,get,any,get,0,class,extends,exception,exception,class,get,data,format,get,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,constructor,constructor,extends,exception,constructor,try,message,constructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,constructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
Soap12DataFormatAdapter -> private Exception createExceptionFromFault(Fault fault);1450077069;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set_a {@link javax.xml.ws.soap.SOAPFaultException} is created.__@param fault Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        StringBuilder sb = new StringBuilder()__        for (Reasontext text : fault.getReason().getText()) {_            sb.append(text.getValue())__        }_        String message = sb.toString()___        Detail faultDetail = fault.getDetail()__        if (faultDetail == null || faultDetail.getAny().size() == 0) {_            try {_                return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getCode().getValue()))__            } catch (SOAPException e) {_                throw new RuntimeCamelException(e)__            }_        }_        _        JAXBElement<?> detailEl = (JAXBElement<?>) faultDetail.getAny().get(0)__        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageConstructor__        Constructor<? extends Exception> constructor___        try {_            messageConstructor = exceptionClass.getConstructor(String.class)__            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                return messageConstructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,a,link,javax,xml,ws,soap,soapfault,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,string,builder,sb,new,string,builder,for,reasontext,text,fault,get,reason,get,text,sb,append,text,get,value,string,message,sb,to,string,detail,fault,detail,fault,get,detail,if,fault,detail,null,fault,detail,get,any,size,0,try,return,new,soapfault,exception,soapfactory,new,instance,create,fault,message,fault,get,code,get,value,catch,soapexception,e,throw,new,runtime,camel,exception,e,jaxbelement,detail,el,jaxbelement,fault,detail,get,any,get,0,class,extends,exception,exception,class,get,data,format,get,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,constructor,constructor,extends,exception,constructor,try,message,constructor,exception,class,get,constructor,string,class,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,return,message,constructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
Soap12DataFormatAdapter -> private Exception createExceptionFromFault(Fault fault);1490862642;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set_a {@link javax.xml.ws.soap.SOAPFaultException} is created.__@param fault Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        StringBuilder sb = new StringBuilder()__        for (Reasontext text : fault.getReason().getText()) {_            sb.append(text.getValue())__        }_        String message = sb.toString()___        Detail faultDetail = fault.getDetail()__        if (faultDetail == null || faultDetail.getAny().size() == 0) {_            try {_                return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getCode().getValue()))__            } catch (SOAPException e) {_                throw new RuntimeCamelException(e)__            }_        }_        _        JAXBElement<?> detailEl = (JAXBElement<?>) faultDetail.getAny().get(0)__        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageConstructor__        Constructor<? extends Exception> constructor___        try {_            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                messageConstructor = exceptionClass.getConstructor(String.class)__                return messageConstructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,a,link,javax,xml,ws,soap,soapfault,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,string,builder,sb,new,string,builder,for,reasontext,text,fault,get,reason,get,text,sb,append,text,get,value,string,message,sb,to,string,detail,fault,detail,fault,get,detail,if,fault,detail,null,fault,detail,get,any,size,0,try,return,new,soapfault,exception,soapfactory,new,instance,create,fault,message,fault,get,code,get,value,catch,soapexception,e,throw,new,runtime,camel,exception,e,jaxbelement,detail,el,jaxbelement,fault,detail,get,any,get,0,class,extends,exception,exception,class,get,data,format,get,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,constructor,constructor,extends,exception,constructor,try,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,message,constructor,exception,class,get,constructor,string,class,return,message,constructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
Soap12DataFormatAdapter -> private Exception createExceptionFromFault(Fault fault);1491312611;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set_a {@link javax.xml.ws.soap.SOAPFaultException} is created.__@param fault Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        StringBuilder sb = new StringBuilder()__        for (Reasontext text : fault.getReason().getText()) {_            sb.append(text.getValue())__        }_        String message = sb.toString()___        Detail faultDetail = fault.getDetail()__        if (faultDetail == null || faultDetail.getAny().size() == 0) {_            try {_                return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getCode().getValue()))__            } catch (SOAPException e) {_                throw new RuntimeCamelException(e)__            }_        }__        Object detailObj = faultDetail.getAny().get(0)___        if (!(detailObj instanceof JAXBElement)) {_            try {_                return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getCode().getValue()))__            } catch (SOAPException e) {_                throw new RuntimeCamelException(e)__            }_        }__        JAXBElement<?> detailEl = (JAXBElement<?>) detailObj__        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageConstructor__        Constructor<? extends Exception> constructor___        try {_            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                messageConstructor = exceptionClass.getConstructor(String.class)__                return messageConstructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,a,link,javax,xml,ws,soap,soapfault,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,string,builder,sb,new,string,builder,for,reasontext,text,fault,get,reason,get,text,sb,append,text,get,value,string,message,sb,to,string,detail,fault,detail,fault,get,detail,if,fault,detail,null,fault,detail,get,any,size,0,try,return,new,soapfault,exception,soapfactory,new,instance,create,fault,message,fault,get,code,get,value,catch,soapexception,e,throw,new,runtime,camel,exception,e,object,detail,obj,fault,detail,get,any,get,0,if,detail,obj,instanceof,jaxbelement,try,return,new,soapfault,exception,soapfactory,new,instance,create,fault,message,fault,get,code,get,value,catch,soapexception,e,throw,new,runtime,camel,exception,e,jaxbelement,detail,el,jaxbelement,detail,obj,class,extends,exception,exception,class,get,data,format,get,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,constructor,constructor,extends,exception,constructor,try,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,message,constructor,exception,class,get,constructor,string,class,return,message,constructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
Soap12DataFormatAdapter -> private Exception createExceptionFromFault(Fault fault);1524063178;Creates an exception and eventually an embedded bean that contains the_fault detail. The exception class is determined by using the_elementNameStrategy. The qName of the fault detail should match the_WebFault annotation of the Exception class. If no fault detail is set_a {@link javax.xml.ws.soap.SOAPFaultException} is created.__@param fault Soap fault_@return created Exception;private Exception createExceptionFromFault(Fault fault) {_        StringBuilder sb = new StringBuilder()__        for (Reasontext text : fault.getReason().getText()) {_            sb.append(text.getValue())__        }_        String message = sb.toString()___        Detail faultDetail = fault.getDetail()__        if (faultDetail == null || faultDetail.getAny().size() == 0) {_            try {_                return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getCode().getValue()))__            } catch (SOAPException e) {_                throw new RuntimeCamelException(e)__            }_        }__        Object detailObj = faultDetail.getAny().get(0)___        if (!(detailObj instanceof JAXBElement)) {_            try {_                return new SOAPFaultException(SOAPFactory.newInstance().createFault(message, fault.getCode().getValue()))__            } catch (SOAPException e) {_                throw new RuntimeCamelException(e)__            }_        }__        JAXBElement<?> detailEl = (JAXBElement<?>) detailObj__        Class<? extends Exception> exceptionClass = getDataFormat().getElementNameStrategy().findExceptionForFaultName(detailEl.getName())__        Constructor<? extends Exception> messageConstructor__        Constructor<? extends Exception> constructor___        try {_            Object detail = JAXBIntrospector.getValue(detailEl)__            try {_                constructor = exceptionClass.getConstructor(String.class, detail.getClass())__                return constructor.newInstance(message, detail)__            } catch (NoSuchMethodException e) {_                messageConstructor = exceptionClass.getConstructor(String.class)__                return messageConstructor.newInstance(message)__            }_        } catch (Exception e) {_            throw new RuntimeCamelException(e)__        }_    };creates,an,exception,and,eventually,an,embedded,bean,that,contains,the,fault,detail,the,exception,class,is,determined,by,using,the,element,name,strategy,the,q,name,of,the,fault,detail,should,match,the,web,fault,annotation,of,the,exception,class,if,no,fault,detail,is,set,a,link,javax,xml,ws,soap,soapfault,exception,is,created,param,fault,soap,fault,return,created,exception;private,exception,create,exception,from,fault,fault,fault,string,builder,sb,new,string,builder,for,reasontext,text,fault,get,reason,get,text,sb,append,text,get,value,string,message,sb,to,string,detail,fault,detail,fault,get,detail,if,fault,detail,null,fault,detail,get,any,size,0,try,return,new,soapfault,exception,soapfactory,new,instance,create,fault,message,fault,get,code,get,value,catch,soapexception,e,throw,new,runtime,camel,exception,e,object,detail,obj,fault,detail,get,any,get,0,if,detail,obj,instanceof,jaxbelement,try,return,new,soapfault,exception,soapfactory,new,instance,create,fault,message,fault,get,code,get,value,catch,soapexception,e,throw,new,runtime,camel,exception,e,jaxbelement,detail,el,jaxbelement,detail,obj,class,extends,exception,exception,class,get,data,format,get,element,name,strategy,find,exception,for,fault,name,detail,el,get,name,constructor,extends,exception,message,constructor,constructor,extends,exception,constructor,try,object,detail,jaxbintrospector,get,value,detail,el,try,constructor,exception,class,get,constructor,string,class,detail,get,class,return,constructor,new,instance,message,detail,catch,no,such,method,exception,e,message,constructor,exception,class,get,constructor,string,class,return,message,constructor,new,instance,message,catch,exception,e,throw,new,runtime,camel,exception,e
