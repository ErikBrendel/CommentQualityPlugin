commented;modifiers;parameterAmount;loc;comment;code
false;public;2;36;;@Override public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {     XmlType xmlType = type.getAnnotation(XmlType.class).     if (xmlType == null || xmlType.name() == null) {         throw new RuntimeException("The type " + type.getName() + " needs to have an XmlType annotation with name").     }     // prefer name+ns from the XmlRootElement, and fallback to XmlType     String localName = null.     String nameSpace = null.     XmlRootElement root = type.getAnnotation(XmlRootElement.class).     if (root != null) {         localName = ObjectHelper.isEmpty(localName) ? root.name() : localName.         nameSpace = isInValidNamespace(nameSpace) ? root.namespace() : nameSpace.     }     if (ObjectHelper.isEmpty(localName)) {         localName = xmlType.name().     }     if (isInValidNamespace(nameSpace)) {         XmlSchema xmlSchema = type.getPackage().getAnnotation(XmlSchema.class).         if (xmlSchema != null) {             nameSpace = xmlSchema.namespace().         }     }     if (isInValidNamespace(nameSpace)) {         nameSpace = xmlType.namespace().     }     if (ObjectHelper.isEmpty(localName) || isInValidNamespace(nameSpace)) {         throw new IllegalStateException("Unable to determine localName or namespace for type <" + type.getName() + ">").     }     return new QName(nameSpace, localName). }
false;private;1;3;;private boolean isInValidNamespace(String namespace) {     return ObjectHelper.isEmpty(namespace) || DEFAULT_NS.equalsIgnoreCase(namespace). }
false;public;1;4;;@Override public Class<? extends Exception> findExceptionForFaultName(QName faultName) {     throw new UnsupportedOperationException("Exception lookup is not supported"). }
