# id;timestamp;commentText;codeText;commentWords;codeWords
TypeNameStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1265702792;@return determine element name by using the XmlType.name() of the type to be_marshalled and the XmlSchema.namespace() of the package-info;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        XmlType xmlType = type.getAnnotation(XmlType.class)__        if (xmlType == null || xmlType.name() == null) {_            throw new RuntimeException("The type " + type.getName() + " needs to have an XmlType annotation with name")__        }_        String nameSpace = xmlType.namespace()__        if ("##default".equals(nameSpace)) {_            XmlSchema xmlSchema = type.getPackage().getAnnotation(XmlSchema.class)__            if (xmlSchema != null) {_                nameSpace = xmlSchema.namespace()__            }_        }_        return new QName(nameSpace, xmlType.name())__    };return,determine,element,name,by,using,the,xml,type,name,of,the,type,to,be,marshalled,and,the,xml,schema,namespace,of,the,package,info;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,xml,type,xml,type,type,get,annotation,xml,type,class,if,xml,type,null,xml,type,name,null,throw,new,runtime,exception,the,type,type,get,name,needs,to,have,an,xml,type,annotation,with,name,string,name,space,xml,type,namespace,if,default,equals,name,space,xml,schema,xml,schema,type,get,package,get,annotation,xml,schema,class,if,xml,schema,null,name,space,xml,schema,namespace,return,new,qname,name,space,xml,type,name
TypeNameStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1267017377;@return determine element name by using the XmlType.name() of the type to_be marshalled and the XmlSchema.namespace() of the package-info;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        XmlType xmlType = type.getAnnotation(XmlType.class)__        if (xmlType == null || xmlType.name() == null) {_            throw new RuntimeException("The type " + type.getName() + " needs to have an XmlType annotation with name")__        }_        String nameSpace = xmlType.namespace()__        if ("##default".equals(nameSpace)) {_            XmlSchema xmlSchema = type.getPackage().getAnnotation(XmlSchema.class)__            if (xmlSchema != null) {_                nameSpace = xmlSchema.namespace()__            }_        }_        return new QName(nameSpace, xmlType.name())__    };return,determine,element,name,by,using,the,xml,type,name,of,the,type,to,be,marshalled,and,the,xml,schema,namespace,of,the,package,info;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,xml,type,xml,type,type,get,annotation,xml,type,class,if,xml,type,null,xml,type,name,null,throw,new,runtime,exception,the,type,type,get,name,needs,to,have,an,xml,type,annotation,with,name,string,name,space,xml,type,namespace,if,default,equals,name,space,xml,schema,xml,schema,type,get,package,get,annotation,xml,schema,class,if,xml,schema,null,name,space,xml,schema,namespace,return,new,qname,name,space,xml,type,name
TypeNameStrategy -> public QName findQNameForSoapActionOrType(String soapAction, Class<?> type);1347635895;@return determine element name by using the XmlType.name() of the type to_be marshalled and the XmlSchema.namespace() of the package-info;public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {_        XmlType xmlType = type.getAnnotation(XmlType.class)__        if (xmlType == null || xmlType.name() == null) {_            throw new RuntimeException("The type " + type.getName() + " needs to have an XmlType annotation with name")__        }_        String nameSpace = xmlType.namespace()__        if ("##default".equals(nameSpace)) {_            XmlSchema xmlSchema = type.getPackage().getAnnotation(XmlSchema.class)__            if (xmlSchema != null) {_                nameSpace = xmlSchema.namespace()__            }_        }_        _        String localName = xmlType.name()__        if (ObjectHelper.isEmpty(localName)) {_            XmlRootElement root = type.getAnnotation(XmlRootElement.class)__            if (root != null) {_                localName = root.name()__            }_        }_        return new QName(nameSpace, localName)__    };return,determine,element,name,by,using,the,xml,type,name,of,the,type,to,be,marshalled,and,the,xml,schema,namespace,of,the,package,info;public,qname,find,qname,for,soap,action,or,type,string,soap,action,class,type,xml,type,xml,type,type,get,annotation,xml,type,class,if,xml,type,null,xml,type,name,null,throw,new,runtime,exception,the,type,type,get,name,needs,to,have,an,xml,type,annotation,with,name,string,name,space,xml,type,namespace,if,default,equals,name,space,xml,schema,xml,schema,type,get,package,get,annotation,xml,schema,class,if,xml,schema,null,name,space,xml,schema,namespace,string,local,name,xml,type,name,if,object,helper,is,empty,local,name,xml,root,element,root,type,get,annotation,xml,root,element,class,if,root,null,local,name,root,name,return,new,qname,name,space,local,name
