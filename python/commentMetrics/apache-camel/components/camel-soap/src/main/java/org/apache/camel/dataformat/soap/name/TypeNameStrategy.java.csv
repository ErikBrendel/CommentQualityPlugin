commented;modifiers;parameterAmount;loc;comment;code
true;public;2;22;/**  * @return determine element name by using the XmlType.name() of the type to  *         be marshalled and the XmlSchema.namespace() of the package-info  */ ;/**  * @return determine element name by using the XmlType.name() of the type to  *         be marshalled and the XmlSchema.namespace() of the package-info  */ public QName findQNameForSoapActionOrType(String soapAction, Class<?> type) {     XmlType xmlType = type.getAnnotation(XmlType.class).     if (xmlType == null || xmlType.name() == null) {         throw new RuntimeException("The type " + type.getName() + " needs to have an XmlType annotation with name").     }     String nameSpace = xmlType.namespace().     if ("##default".equals(nameSpace)) {         XmlSchema xmlSchema = type.getPackage().getAnnotation(XmlSchema.class).         if (xmlSchema != null) {             nameSpace = xmlSchema.namespace().         }     }     // prefer name from the XmlType, and fallback to XmlRootElement     String localName = xmlType.name().     if (ObjectHelper.isEmpty(localName)) {         XmlRootElement root = type.getAnnotation(XmlRootElement.class).         if (root != null) {             localName = root.name().         }     }     return new QName(nameSpace, localName). }
false;public;1;3;;public Class<? extends Exception> findExceptionForFaultName(QName faultName) {     throw new UnsupportedOperationException("Exception lookup is not supported for TypeNameStrategy"). }
