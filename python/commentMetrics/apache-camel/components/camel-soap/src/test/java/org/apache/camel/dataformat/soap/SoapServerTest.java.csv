commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testSuccess() throws IOException, InterruptedException {     sendAndCheckReply("request.xml", "response.xml"). }
false;public;0;4;;@Test public void testFault() throws IOException, InterruptedException {     sendAndCheckReply("requestFault.xml", "responseFault.xml"). }
false;private;2;8;;private void sendAndCheckReply(String requestResource, String responseResource) throws IOException {     context.setTracing(true).     InputStream requestIs = this.getClass().getResourceAsStream(requestResource).     InputStream responseIs = this.getClass().getResourceAsStream(responseResource).     Object reply = producer.requestBody(requestIs).     String replySt = context.getTypeConverter().convertTo(String.class, reply).     assertEquals(TestUtil.readStream(responseIs), replySt). }
false;public;0;13;;@Override public void configure() throws Exception {     ElementNameStrategy elNameStrat = new TypeNameStrategy().     SoapJaxbDataFormat soapDataFormat = new SoapJaxbDataFormat(jaxbPackage, elNameStrat).     CustomerServiceImpl serverBean = new CustomerServiceImpl().     //      from("direct:start").onException(Exception.class).handled(//      true).marshal(//      soapDataFormat).end().unmarshal(//      soapDataFormat).bean(//      serverBean).marshal(soapDataFormat). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          String jaxbPackage = GetCustomersByName.class.getPackage().getName().          @Override         public void configure() throws Exception {             ElementNameStrategy elNameStrat = new TypeNameStrategy().             SoapJaxbDataFormat soapDataFormat = new SoapJaxbDataFormat(jaxbPackage, elNameStrat).             CustomerServiceImpl serverBean = new CustomerServiceImpl().             //              from("direct:start").onException(Exception.class).handled(//              true).marshal(//              soapDataFormat).end().unmarshal(//              soapDataFormat).bean(//              serverBean).marshal(soapDataFormat).         }     }. }
