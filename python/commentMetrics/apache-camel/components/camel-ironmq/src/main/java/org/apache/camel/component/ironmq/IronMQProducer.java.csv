commented;modifiers;parameterAmount;loc;comment;code
false;public;1;23;;public void process(Exchange exchange) throws Exception {     IronMQConfiguration configuration = getEndpoint().getConfiguration().     if (IronMQConstants.CLEARQUEUE.equals(exchange.getIn().getHeader(IronMQConstants.OPERATION, String.class))) {         this.ironQueue.clear().     } else {         Object messageId = null.         Object body = exchange.getIn().getBody().         if (body instanceof String[]) {             messageId = this.ironQueue.pushMessages((String[]) body, configuration.getVisibilityDelay()).         } else if (body instanceof String) {             if (configuration.isPreserveHeaders()) {                 body = GsonUtil.getBodyFromMessage(exchange.getIn()).             }             messageId = this.ironQueue.push((String) body, configuration.getVisibilityDelay()).         } else {             throw new InvalidPayloadException(exchange, String.class).         }         log.trace("Send request [{}] from exchange [{}]...", body, exchange).         log.trace("Received messageId [{}]", messageId).         Message message = getMessageForResponse(exchange).         message.setHeader(IronMQConstants.MESSAGE_ID, messageId).     } }
false;private;1;9;;private Message getMessageForResponse(Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
false;public;0;4;;@Override public IronMQEndpoint getEndpoint() {     return (IronMQEndpoint) super.getEndpoint(). }
