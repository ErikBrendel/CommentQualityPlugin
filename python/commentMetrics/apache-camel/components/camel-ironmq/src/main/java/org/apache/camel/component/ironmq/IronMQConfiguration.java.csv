commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Client getClient() {     return client. }
true;public;1;3;/**  * Reference to a io.iron.ironmq.Client in the Registry.  */ ;/**  * Reference to a io.iron.ironmq.Client in the Registry.  */ public void setClient(Client client) {     this.client = client. }
false;public;0;3;;public int getConcurrentConsumers() {     return concurrentConsumers. }
true;public;1;3;/**  * The number of concurrent consumers.  */ ;/**  * The number of concurrent consumers.  */ public void setConcurrentConsumers(int concurrentConsumers) {     this.concurrentConsumers = concurrentConsumers. }
false;public;0;3;;public String getProjectId() {     return projectId. }
true;public;1;3;/**  * IronMQ projectId  */ ;/**  * IronMQ projectId  */ public void setProjectId(String projectId) {     this.projectId = projectId. }
false;public;0;3;;public String getToken() {     return token. }
true;public;1;3;/**  * IronMQ token  */ ;/**  * IronMQ token  */ public void setToken(String token) {     this.token = token. }
true;public;1;3;/**  * The name of the IronMQ queue  */ ;/**  * The name of the IronMQ queue  */ public void setQueueName(String queueName) {     this.queueName = queueName. }
false;public;0;3;;public String getQueueName() {     return queueName. }
true;public;1;3;/**  * IronMq Cloud url. Urls for public clusters: https://mq-aws-us-east-1-1.iron.io (US) and https://mq-aws-eu-west-1-1.iron.io (EU)  */ ;/**  * IronMq Cloud url. Urls for public clusters: https://mq-aws-us-east-1-1.iron.io (US) and https://mq-aws-eu-west-1-1.iron.io (EU)  */ public void setIronMQCloud(String ironMQCloud) {     this.ironMQCloud = ironMQCloud. }
false;public;0;3;;public String getIronMQCloud() {     return ironMQCloud. }
false;public;0;3;;public int getTimeout() {     return timeout. }
true;public;1;3;/**  * After timeout (in seconds), item will be placed back onto the queue.  */ ;/**  * After timeout (in seconds), item will be placed back onto the queue.  */ public void setTimeout(int timeout) {     this.timeout = timeout. }
false;public;0;3;;public int getMaxMessagesPerPoll() {     return maxMessagesPerPoll. }
true;public;1;3;/**  * Number of messages to poll pr. call. Maximum is 100.  */ ;/**  * Number of messages to poll pr. call. Maximum is 100.  */ public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {     this.maxMessagesPerPoll = maxMessagesPerPoll. }
false;public;0;3;;public int getVisibilityDelay() {     return visibilityDelay. }
true;public;1;3;/**  * The item will not be available on the queue until this many seconds have passed.  * Default is 0 seconds.  */ ;/**  * The item will not be available on the queue until this many seconds have passed.  * Default is 0 seconds.  */ public void setVisibilityDelay(int visibilityDelay) {     this.visibilityDelay = visibilityDelay. }
false;public;0;3;;public boolean isPreserveHeaders() {     return preserveHeaders. }
true;public;1;3;/**  * Should message headers be preserved when publishing messages.  * This will add the Camel headers to the Iron MQ message as a json payload with a header list, and a message body.  * Useful when Camel is both consumer and producer.  */ ;/**  * Should message headers be preserved when publishing messages.  * This will add the Camel headers to the Iron MQ message as a json payload with a header list, and a message body.  * Useful when Camel is both consumer and producer.  */ public void setPreserveHeaders(boolean preserveHeaders) {     this.preserveHeaders = preserveHeaders. }
false;public;0;3;;public boolean isBatchDelete() {     return batchDelete. }
true;public;1;3;/**  * Should messages be deleted in one batch.  * This will limit the number of api requests since messages are deleted in one request, instead of one pr. exchange.  * If enabled care should be taken that the consumer is idempotent when processing exchanges.  */ ;/**  * Should messages be deleted in one batch.  * This will limit the number of api requests since messages are deleted in one request, instead of one pr. exchange.  * If enabled care should be taken that the consumer is idempotent when processing exchanges.  */ public void setBatchDelete(boolean batchDelete) {     this.batchDelete = batchDelete. }
false;public;0;3;;public int getWait() {     return wait. }
true;public;1;3;/**  * Time in seconds to wait for a message to become available.  * This enables long polling. Default is 0 (does not wait), maximum is 30.  */ ;/**  * Time in seconds to wait for a message to become available.  * This enables long polling. Default is 0 (does not wait), maximum is 30.  */ public void setWait(int wait) {     this.wait = wait. }
