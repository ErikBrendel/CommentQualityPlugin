commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new IronMQProducer(this, getClient().queue(configuration.getQueueName())). }
false;public;1;10;;public Consumer createConsumer(Processor processor) throws Exception {     IronMQConsumer ironMQConsumer = new IronMQConsumer(this, processor, getClient().queue(configuration.getQueueName())).     configureConsumer(ironMQConsumer).     ironMQConsumer.setMaxMessagesPerPoll(configuration.getMaxMessagesPerPoll()).     DefaultScheduledPollConsumerScheduler scheduler = new DefaultScheduledPollConsumerScheduler().     scheduler.setConcurrentTasks(configuration.getConcurrentConsumers()).     ironMQConsumer.setScheduler(scheduler).     return ironMQConsumer. }
false;public;1;3;;public Exchange createExchange(io.iron.ironmq.Message msg) {     return createExchange(getExchangePattern(), msg). }
false;private;2;13;;private Exchange createExchange(ExchangePattern pattern, io.iron.ironmq.Message msg) {     Exchange exchange = super.createExchange(pattern).     Message message = exchange.getIn().     if (configuration.isPreserveHeaders()) {         GsonUtil.copyFrom(msg, message).     } else {         message.setBody(msg.getBody()).     }     message.setHeader(IronMQConstants.MESSAGE_ID, msg.getId()).     message.setHeader(IronMQConstants.MESSAGE_RESERVATION_ID, msg.getReservationId()).     message.setHeader(IronMQConstants.MESSAGE_RESERVED_COUNT, msg.getReservedCount()).     return exchange. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart().     client = getConfiguration().getClient() != null ? getConfiguration().getClient() : getClient(). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     client = null.     super.doStop(). }
false;public;0;6;;public Client getClient() {     if (client == null) {         client = createClient().     }     return client. }
false;public;1;3;;public void setClient(Client client) {     this.client = client. }
true;;0;11;/**  * Provide the possibility to override this method for an mock  * implementation  *  * @return Client  */ ;/**  * Provide the possibility to override this method for an mock  * implementation  *  * @return Client  */ Client createClient() {     Cloud cloud.     try {         cloud = new Cloud(configuration.getIronMQCloud()).     } catch (MalformedURLException e) {         cloud = Cloud.ironAWSUSEast.         log.warn("Unable to parse ironMQCloud {} will use {}", configuration.getIronMQCloud(), cloud.getHost()).     }     client = new Client(configuration.getProjectId(), configuration.getToken(), cloud).     return client. }
false;public;0;3;;public IronMQConfiguration getConfiguration() {     return configuration. }
