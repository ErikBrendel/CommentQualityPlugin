commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testIronMQ() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     template.sendBody("direct:start", "some payload").     assertMockEndpointsSatisfied().     Message in = mock.getExchanges().get(0).getIn().     Assert.assertNotNull(in.getHeader(IronMQConstants.MESSAGE_ID)).     Assert.assertNotNull(in.getHeader(IronMQConstants.MESSAGE_RESERVATION_ID)).     Assert.assertNotNull(in.getHeader(IronMQConstants.MESSAGE_RESERVED_COUNT)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("This is my message text."). }
false;public;0;19;;@Test public void sendInOnly() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("This is my message text.").         }     }).     assertMockEndpointsSatisfied().     Exchange resultExchange = result.getExchanges().get(0).     assertEquals("This is my message text.", resultExchange.getIn().getBody()).     assertNotNull(resultExchange.getIn().getHeader(IronMQConstants.MESSAGE_ID)).     assertEquals("This is my message text.", exchange.getIn().getBody()).     assertNotNull(exchange.getIn().getHeader(IronMQConstants.MESSAGE_ID)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("This is my message text."). }
false;public;0;19;;@Test public void sendInOut() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("This is my message text.").         }     }).     assertMockEndpointsSatisfied().     Exchange resultExchange = result.getExchanges().get(0).     assertEquals("This is my message text.", resultExchange.getIn().getBody()).     assertNotNull(resultExchange.getIn().getHeader(IronMQConstants.MESSAGE_ID)).     assertEquals("This is my message text.", exchange.getOut().getBody()).     assertNotNull(exchange.getOut().getHeader(IronMQConstants.MESSAGE_ID)). }
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     IronMQComponent component = new IronMQComponent(context).     Map<String, Object> parameters = new HashMap<>().     parameters.put("projectId", "dummy").     parameters.put("token", "dummy").     endpoint = (IronMQEndpoint) component.createEndpoint("ironmq", "testqueue", parameters).     endpoint.setClient(new IronMQClientMock("dummy", "dummy")).     context.addComponent("ironmq", component).     return context. }
false;public;0;5;;public void configure() {     from("direct:start").to(endpoint).     from(endpoint).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to(endpoint).             from(endpoint).to("mock:result").         }     }. }
