commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override public String push(String msg, long delay) throws IOException {     String randint = new BigInteger(24 * 8, new Random()).toString(16).     Message message = new Message().     message.setBody(msg).     message.setDelay(delay).     message.setId(randint).     message.setReservationId(UUID.randomUUID().toString()).     messages.put(randint, message).     return randint. }
false;public;2;21;;@Override public Ids pushMessages(String[] msg, long delay) throws IOException {     for (String messageName : msg) {         Message message = new Message().         message.setBody(messageName).         message.setDelay(delay).         String randint = new BigInteger(24 * 8, new Random()).toString(16).         message.setId(randint).         message.setReservationId(UUID.randomUUID().toString()).         messages.put(randint, message).     }     Ids ids = null.     try {         Constructor<Ids> constructor = Ids.class.getDeclaredConstructor(Messages.class).         constructor.setAccessible(true).         Messages messageList = new Messages(new ArrayList<>(messages.values())).         ids = constructor.newInstance(messageList).     } catch (Exception e) {     }     return ids. }
false;public;2;8;;@Override public void deleteMessage(String id, String reservationId) throws IOException {     if (messages.containsKey(id)) {         messages.remove(id).     } else {         throw new HTTPException(404, "not found").     } }
false;public;1;7;;@Override public void deleteMessages(Messages messages) throws IOException {     MessageOptions[] messageOptions = messages.toMessageOptions().     for (MessageOptions messageOption : messageOptions) {         deleteMessage(messageOption.getId(), messageOption.getReservationId()).     } }
false;public;0;7;;@Override public Message peek() throws IOException {     if (messages.size() > 0) {         return messages.entrySet().iterator().next().getValue().     }     throw new EmptyQueueException(). }
false;public;0;8;;@Override public Message reserve() throws IOException {     if (messages.size() > 0) {         Entry<String, Message> next = messages.entrySet().iterator().next().         return next.getValue().     }     throw new EmptyQueueException(). }
false;public;1;4;;@Override public Messages reserve(int numberOfMessages) throws IOException {     return reserve(numberOfMessages, 120). }
false;public;3;17;;@Override public Messages reserve(int numberOfMessages, int timeout, int wait) throws IOException {     if (messages.size() > 0) {         Iterator<Entry<String, Message>> iterator = messages.entrySet().iterator().         int i = 0.         List<Message> list = new ArrayList<>().         while (iterator.hasNext() && i < numberOfMessages) {             Entry<String, Message> next = iterator.next().             list.add(next.getValue()).             i++.         }         Messages messages = new Messages(list.toArray(new Message[list.size()])).         return messages.     }     throw new EmptyQueueException(). }
false;;1;3;;void add(Message message) {     messages.put(message.getId(), message). }
