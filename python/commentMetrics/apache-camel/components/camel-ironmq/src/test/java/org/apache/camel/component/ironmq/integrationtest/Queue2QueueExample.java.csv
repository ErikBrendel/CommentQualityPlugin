commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void clean() {     template.sendBodyAndHeader(ironQueue1, "fo", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE).     template.sendBodyAndHeader(ironQueue2, "fo", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE). }
false;public;0;9;;@Test public void testSendMessagesBetweenQueues() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(100).     for (int i = 1. i <= 100. i++) {         String payloadToSend = PAYLOAD.replace("#", "" + i).         template.sendBody("direct:start", payloadToSend).     }     assertMockEndpointsSatisfied(2, TimeUnit.MINUTES). }
false;public;0;5;;public void configure() {     from("direct:start").to(ironQueue1).     from(ironQueue1).to(ironQueue2).     from(ironQueue2).log("got message : ${body}").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to(ironQueue1).             from(ironQueue1).to(ironQueue2).             from(ironQueue2).log("got message : ${body}").to("mock:result").         }     }. }
