commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testPreserveHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     mock.expectedBodiesReceived("some payload").     mock.expectedHeaderReceived("MyHeader", "HeaderValue").     template.sendBodyAndHeader("direct:start", "some payload", "MyHeader", "HeaderValue").     assertMockEndpointsSatisfied().     String id = mock.getExchanges().get(0).getIn().getHeader(IronMQConstants.MESSAGE_ID, String.class).     Assert.assertNotNull(id). }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     IronMQComponent component = new IronMQComponent(context).     endpoint = (IronMQEndpoint) component.createEndpoint("ironmq://TestQueue?projectId=xxx&token=yyy&preserveHeaders=true").     endpoint.setClient(new IronMQClientMock("dummy", "dummy")).     context.addComponent("ironmq", component).     return context. }
false;public;0;5;;public void configure() {     from("direct:start").to(endpoint).     from(endpoint).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to(endpoint).             from(endpoint).to("mock:result").         }     }. }
