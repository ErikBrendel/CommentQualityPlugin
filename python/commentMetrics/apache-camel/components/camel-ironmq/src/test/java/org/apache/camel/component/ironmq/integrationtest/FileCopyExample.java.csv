commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void clean() {     template.sendBodyAndHeader(ironMQEndpoint, "fo", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE).     deleteDirectory("target/out"). }
false;public;0;6;;@Test public void testCopyFileOverIronMQ() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     assertMockEndpointsSatisfied().     assertFileExists("target/out/test.txt"). }
false;public;0;6;;public void configure() {     // copies test.txt from test/data to ironmq     from("file:src/test/data?noop=true").convertBodyTo(String.class).log("sending : ${body}").to(ironMQEndpoint).     // Receives test.txt from ironmq and writes it to target/out     from(ironMQEndpoint).log("got message : ${body}").to("file:target/out").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // copies test.txt from test/data to ironmq             from("file:src/test/data?noop=true").convertBodyTo(String.class).log("sending : ${body}").to(ironMQEndpoint).             // Receives test.txt from ironmq and writes it to target/out             from(ironMQEndpoint).log("got message : ${body}").to("file:target/out").to("mock:result").         }     }. }
