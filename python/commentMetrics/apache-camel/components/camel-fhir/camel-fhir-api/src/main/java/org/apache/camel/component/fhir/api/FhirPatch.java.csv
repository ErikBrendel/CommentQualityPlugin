commented;modifiers;parameterAmount;loc;comment;code
true;public;4;8;/**  * Specifies that the update should be performed as a conditional create  * against a given search URL.  *  * @param url The search URL to use. The format of this URL should be of the form <code>[ResourceType]?[Parameters]</code>,  *            for example: <code>Patient?name=Smith&amp.identifier=13.2.4.11.4%7C847366</code>  * @param patchBody The body of the patch document serialized in either XML or JSON which conforms to  *                  http://jsonpatch.com/ or http://tools.ietf.org/html/rfc5261  * @param preferReturn Add a <code>Prefer</code> header to the request, which requests that the server include  *                     or suppress the resource body as a part of the result. If a resource is returned by the server  *                     it will be parsed an accessible to the client via {@link MethodOutcome#getResource()}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the {@link MethodOutcome}  */ ;/**  * Specifies that the update should be performed as a conditional create  * against a given search URL.  *  * @param url The search URL to use. The format of this URL should be of the form <code>[ResourceType]?[Parameters]</code>,  *            for example: <code>Patient?name=Smith&amp.identifier=13.2.4.11.4%7C847366</code>  * @param patchBody The body of the patch document serialized in either XML or JSON which conforms to  *                  http://jsonpatch.com/ or http://tools.ietf.org/html/rfc5261  * @param preferReturn Add a <code>Prefer</code> header to the request, which requests that the server include  *                     or suppress the resource body as a part of the result. If a resource is returned by the server  *                     it will be parsed an accessible to the client via {@link MethodOutcome#getResource()}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the {@link MethodOutcome}  */ public MethodOutcome patchByUrl(String patchBody, String url, PreferReturnEnum preferReturn, Map<ExtraParameters, Object> extraParameters) {     IPatchExecutable patchExecutable = client.patch().withBody(patchBody).conditionalByUrl(url).     if (preferReturn != null) {         patchExecutable.prefer(preferReturn).     }     ExtraParameters.process(extraParameters, patchExecutable).     return patchExecutable.execute(). }
true;public;4;8;/**  * Applies the patch to the given resource ID  *  * @param patchBody The body of the patch document serialized in either XML or JSON which conforms to  *                  http://jsonpatch.com/ or http://tools.ietf.org/html/rfc5261  * @param id The resource ID to patch  * @param preferReturn Add a <code>Prefer</code> header to the request, which requests that the server include  *                     or suppress the resource body as a part of the result. If a resource is returned by the server  *                     it will be parsed an accessible to the client via {@link MethodOutcome#getResource()}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the {@link MethodOutcome}  */ ;/**  * Applies the patch to the given resource ID  *  * @param patchBody The body of the patch document serialized in either XML or JSON which conforms to  *                  http://jsonpatch.com/ or http://tools.ietf.org/html/rfc5261  * @param id The resource ID to patch  * @param preferReturn Add a <code>Prefer</code> header to the request, which requests that the server include  *                     or suppress the resource body as a part of the result. If a resource is returned by the server  *                     it will be parsed an accessible to the client via {@link MethodOutcome#getResource()}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the {@link MethodOutcome}  */ public MethodOutcome patchById(String patchBody, IIdType id, PreferReturnEnum preferReturn, Map<ExtraParameters, Object> extraParameters) {     IPatchExecutable patchExecutable = client.patch().withBody(patchBody).withId(id).     if (preferReturn != null) {         patchExecutable.prefer(preferReturn).     }     ExtraParameters.process(extraParameters, patchExecutable).     return patchExecutable.execute(). }
true;public;4;8;/**  * Applies the patch to the given resource ID  *  * @param patchBody The body of the patch document serialized in either XML or JSON which conforms to  *                  http://jsonpatch.com/ or http://tools.ietf.org/html/rfc5261  * @param stringId The resource ID to patch  * @param preferReturn Add a <code>Prefer</code> header to the request, which requests that the server include  *                     or suppress the resource body as a part of the result. If a resource is returned by the server  *                     it will be parsed an accessible to the client via {@link MethodOutcome#getResource()}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the {@link MethodOutcome}  */ ;/**  * Applies the patch to the given resource ID  *  * @param patchBody The body of the patch document serialized in either XML or JSON which conforms to  *                  http://jsonpatch.com/ or http://tools.ietf.org/html/rfc5261  * @param stringId The resource ID to patch  * @param preferReturn Add a <code>Prefer</code> header to the request, which requests that the server include  *                     or suppress the resource body as a part of the result. If a resource is returned by the server  *                     it will be parsed an accessible to the client via {@link MethodOutcome#getResource()}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the {@link MethodOutcome}  */ public MethodOutcome patchById(String patchBody, String stringId, PreferReturnEnum preferReturn, Map<ExtraParameters, Object> extraParameters) {     IPatchExecutable patchExecutable = client.patch().withBody(patchBody).withId(stringId).     if (preferReturn != null) {         patchExecutable.prefer(preferReturn).     }     ExtraParameters.process(extraParameters, patchExecutable).     return patchExecutable.execute(). }
