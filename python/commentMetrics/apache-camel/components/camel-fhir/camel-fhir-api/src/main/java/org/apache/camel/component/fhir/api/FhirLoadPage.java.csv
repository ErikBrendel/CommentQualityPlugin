commented;modifiers;parameterAmount;loc;comment;code
true;public;2;5;/**  * Load the next page of results using the link with relation "next" in the bundle. This  * method accepts a DSTU2 Bundle resource  * @param <T> extends {@link IBaseBundle}  * @param bundle the {@link IBaseBundle}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the next {@link IBaseBundle}  */ ;/**  * Load the next page of results using the link with relation "next" in the bundle. This  * method accepts a DSTU2 Bundle resource  * @param <T> extends {@link IBaseBundle}  * @param bundle the {@link IBaseBundle}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the next {@link IBaseBundle}  */ public <T extends IBaseBundle> T next(T bundle, Map<ExtraParameters, Object> extraParameters) {     IGetPageTyped<T> getPageTyped = client.loadPage().next(bundle).     ExtraParameters.process(extraParameters, getPageTyped).     return getPageTyped.execute(). }
true;public;2;5;/**  * Load the previous page of results using the link with relation "prev" in the bundle. This  * method accepts a DSTU2+ Bundle resource  * @param <T> extends {@link IBaseBundle}  * @param bundle the {@link IBaseBundle}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the previous {@link IBaseBundle}  */ ;/**  * Load the previous page of results using the link with relation "prev" in the bundle. This  * method accepts a DSTU2+ Bundle resource  * @param <T> extends {@link IBaseBundle}  * @param bundle the {@link IBaseBundle}  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @return the previous {@link IBaseBundle}  */ public <T extends IBaseBundle> T previous(T bundle, Map<ExtraParameters, Object> extraParameters) {     IGetPageTyped<T> getPageTyped = client.loadPage().previous(bundle).     ExtraParameters.process(extraParameters, getPageTyped).     return getPageTyped.execute(). }
true;public;3;5;/**  * Load a page of results using the given URL and bundle type and return a DSTU1 Atom bundle  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @param <T> extends {@link IBaseBundle}  * @param url the search url  * @param returnType the return type  * @return the {@link IBaseBundle} page  */ ;/**  * Load a page of results using the given URL and bundle type and return a DSTU1 Atom bundle  * @param extraParameters see {@link ExtraParameters} for a full list of parameters that can be passed, may be NULL  * @param <T> extends {@link IBaseBundle}  * @param url the search url  * @param returnType the return type  * @return the {@link IBaseBundle} page  */ public <T extends IBaseBundle> T byUrl(String url, Class<T> returnType, Map<ExtraParameters, Object> extraParameters) {     IGetPageTyped<T> getPageTyped = client.loadPage().byUrl(url).andReturnBundle(returnType).     ExtraParameters.process(extraParameters, getPageTyped).     return getPageTyped.execute(). }
