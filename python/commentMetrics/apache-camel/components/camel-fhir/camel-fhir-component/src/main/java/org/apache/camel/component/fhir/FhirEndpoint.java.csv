commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new FhirProducer(this). }
false;public;1;10;;public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final FhirConsumer consumer = new FhirConsumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<FhirConfiguration> getPropertiesHelper() {     return FhirPropertiesHelper.getHelper(). }
false;protected;0;3;;protected String getThreadProfileName() {     return FhirConstants.THREAD_PROFILE_NAME. }
false;protected;0;47;;@Override protected void afterConfigureProperties() {     IGenericClient client = getClient().     switch(apiName) {         case CAPABILITIES:             apiProxy = new FhirCapabilities(client).             break.         case CREATE:             apiProxy = new FhirCreate(client).             break.         case DELETE:             apiProxy = new FhirDelete(client).             break.         case HISTORY:             apiProxy = new FhirHistory(client).             break.         case LOAD_PAGE:             apiProxy = new FhirLoadPage(client).             break.         case META:             apiProxy = new FhirMeta(client).             break.         case OPERATION:             apiProxy = new FhirOperation(client).             break.         case PATCH:             apiProxy = new FhirPatch(client).             break.         case READ:             apiProxy = new FhirRead(client).             break.         case SEARCH:             apiProxy = new FhirSearch(client).             break.         case TRANSACTION:             apiProxy = new FhirTransaction(client).             break.         case UPDATE:             apiProxy = new FhirUpdate(client).             break.         case VALIDATE:             apiProxy = new FhirValidate(client).             break.         default:             throw new IllegalArgumentException("Invalid API name " + apiName).     } }
false;public;1;12;;@Override public void interceptProperties(Map<String, Object> properties) {     Map<ExtraParameters, Object> extraProperties = getExtraParameters(properties).     for (ExtraParameters extraParameter : ExtraParameters.values()) {         Object value = properties.get(extraParameter.getParam()).         if (value != null) {             extraProperties.put(extraParameter, value).         }     }     properties.put(EXTRA_PARAMETERS_PROPERTY, extraProperties). }
false;;0;3;;IGenericClient getClient() {     return ((FhirComponent) getComponent()).getClient(configuration). }
false;private;1;7;;private Map<ExtraParameters, Object> getExtraParameters(Map<String, Object> properties) {     Object extraParameters = properties.get(EXTRA_PARAMETERS_PROPERTY).     if (extraParameters == null) {         return new HashMap<>().     }     return (Map<ExtraParameters, Object>) extraParameters. }
false;public;2;4;;@Override public Object getApiProxy(ApiMethod method, Map<String, Object> args) {     return apiProxy. }
