commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;32;;public static IGenericClient createClient(FhirConfiguration endpointConfiguration, CamelContext camelContext) {     if (endpointConfiguration.getClient() != null) {         return endpointConfiguration.getClient().     }     FhirContext fhirContext = getFhirContext(endpointConfiguration).     if (endpointConfiguration.isDeferModelScanning()) {         fhirContext.setPerformanceOptions(PerformanceOptionsEnum.DEFERRED_MODEL_SCANNING).     }     if (endpointConfiguration.getClientFactory() != null) {         fhirContext.setRestfulClientFactory(endpointConfiguration.getClientFactory()).     }     IRestfulClientFactory restfulClientFactory = fhirContext.getRestfulClientFactory().     configureClientFactory(endpointConfiguration, restfulClientFactory, camelContext).     IGenericClient genericClient = fhirContext.newRestfulGenericClient(endpointConfiguration.getServerUrl()).     genericClient.setPrettyPrint(endpointConfiguration.isPrettyPrint()).     EncodingEnum encoding = endpointConfiguration.getEncoding().     SummaryEnum summary = endpointConfiguration.getSummary().     if (encoding != null) {         genericClient.setEncoding(encoding).     }     if (summary != null) {         genericClient.setSummary(summary).     }     if (endpointConfiguration.isForceConformanceCheck()) {         genericClient.forceConformanceCheck().     }     registerClientInterceptors(genericClient, endpointConfiguration).     return genericClient. }
false;private,static;3;13;;private static void configureClientFactory(FhirConfiguration endpointConfiguration, IRestfulClientFactory restfulClientFactory, CamelContext camelContext) {     Integer connectionTimeout = endpointConfiguration.getConnectionTimeout().     Integer socketTimeout = endpointConfiguration.getSocketTimeout().     if (ObjectHelper.isNotEmpty(connectionTimeout)) {         restfulClientFactory.setConnectTimeout(connectionTimeout).     }     if (ObjectHelper.isNotEmpty(socketTimeout)) {         restfulClientFactory.setSocketTimeout(socketTimeout).     }     configureProxy(endpointConfiguration, restfulClientFactory, camelContext). }
false;private,static;3;23;;private static void configureProxy(FhirConfiguration endpointConfiguration, IRestfulClientFactory restfulClientFactory, CamelContext camelContext) {     ServerValidationModeEnum validationMode = endpointConfiguration.getValidationMode().     String proxyHost = endpointConfiguration.getProxyHost().     Integer proxyPort = endpointConfiguration.getProxyPort().     String proxyUser = endpointConfiguration.getProxyUser().     String proxyPassword = endpointConfiguration.getProxyPassword().     String camelProxyHost = camelContext.getGlobalOption("http.proxyHost").     String camelProxyPort = camelContext.getGlobalOption("http.proxyPort").     if (ObjectHelper.isNotEmpty(camelProxyHost) && ObjectHelper.isNotEmpty(camelProxyPort)) {         restfulClientFactory.setProxy(camelProxyHost, Integer.parseInt(camelProxyPort)).     }     if (ObjectHelper.isNotEmpty(proxyHost) && ObjectHelper.isNotEmpty(proxyPort)) {         restfulClientFactory.setProxy(proxyHost, proxyPort).     }     if (ObjectHelper.isNotEmpty(proxyUser)) {         restfulClientFactory.setProxyCredentials(proxyUser, proxyPassword).     }     if (ObjectHelper.isNotEmpty(validationMode)) {         restfulClientFactory.setServerValidationMode(validationMode).     } }
false;private,static;2;21;;private static void registerClientInterceptors(IGenericClient genericClient, FhirConfiguration endpointConfiguration) {     String username = endpointConfiguration.getUsername().     String password = endpointConfiguration.getPassword().     String accessToken = endpointConfiguration.getAccessToken().     String sessionCookie = endpointConfiguration.getSessionCookie().     if (ObjectHelper.isNotEmpty(username)) {         genericClient.registerInterceptor(new BasicAuthInterceptor(username, password)).     }     if (ObjectHelper.isNotEmpty(accessToken)) {         genericClient.registerInterceptor(new BearerTokenAuthInterceptor(accessToken)).     }     if (endpointConfiguration.isLog()) {         genericClient.registerInterceptor(new LoggingInterceptor(true)).     }     if (endpointConfiguration.isCompress()) {         genericClient.registerInterceptor(new GZipContentInterceptor()).     }     if (ObjectHelper.isNotEmpty(sessionCookie)) {         genericClient.registerInterceptor(new CookieInterceptor(sessionCookie)).     } }
false;private,static;1;11;;private static FhirContext getFhirContext(FhirConfiguration endpointConfiguration) {     FhirContext context = endpointConfiguration.getFhirContext().     if (context != null) {         return context.     }     if (ObjectHelper.isEmpty(endpointConfiguration.getServerUrl())) {         throw new RuntimeCamelException("The FHIR URL must be set!").     }     FhirVersionEnum fhirVersion = endpointConfiguration.getFhirVersion().     return new FhirContext(fhirVersion). }
