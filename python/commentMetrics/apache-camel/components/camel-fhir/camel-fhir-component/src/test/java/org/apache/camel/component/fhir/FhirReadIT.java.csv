commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testResourceById() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resource", Patient.class).     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.id", patient.getIdElement()).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_ID", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByLongId() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resource", Patient.class).     // parameter type is Long     headers.put("CamelFhir.longId", Long.valueOf(patient.getIdElement().getIdPart())).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_LONG_ID", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByStringId() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resource", Patient.class).     // parameter type is Long     headers.put("CamelFhir.stringId", patient.getIdElement().getIdPart()).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByIdAndStringResource() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resourceClass", "Patient").     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.id", patient.getIdElement()).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_ID_AND_STRING_RESOURCE", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByLongIdAndStringResource() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resource", Patient.class).     // parameter type is Long     headers.put("CamelFhir.longId", Long.valueOf(patient.getIdElement().getIdPart())).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByStringIdAndStringResource() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resource", Patient.class).     // parameter type is Long     headers.put("CamelFhir.stringId", patient.getIdElement().getIdPart()).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE", null, headers).     assertValidResponse(result). }
false;public;0;14;;@Test public void testResourceByStringIdAndVersion() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resource", Patient.class).     // parameter type is Long     headers.put("CamelFhir.stringId", patient.getIdElement().getIdPart()).     // parameter type is String     headers.put("CamelFhir.version", patient.getIdElement().getVersionIdPart()).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID_AND_VERSION", null, headers).     assertValidResponse(result). }
false;public;0;14;;@Test public void testResourceByStringIdAndVersionWithResourceClass() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resourceClass", "Patient").     // parameter type is Long     headers.put("CamelFhir.stringId", patient.getIdElement().getIdPart()).     // parameter type is String     headers.put("CamelFhir.version", patient.getIdElement().getVersionIdPart()).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByiUrl() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resource", Patient.class).     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.iUrl", new IdType(this.patient.getId())).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_IURL", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByUrl() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resource", Patient.class).     // parameter type is String     headers.put("CamelFhir.url", this.patient.getId()).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_URL", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByStringUrlAndStringResource() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.resourceClass", "Patient").     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.iUrl", new IdType(this.patient.getId())).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE", null, headers).     assertValidResponse(result). }
false;public;0;12;;@Test public void testResourceByUrlAndStringResource() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.resourceClass", "Patient").     // parameter type is String     headers.put("CamelFhir.url", this.patient.getId()).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_URL_AND_STRING_RESOURCE", null, headers).     assertValidResponse(result). }
false;public;0;13;;@Test public void testResourceByUrlAndStringResourcePrettyPrint() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.resourceClass", "Patient").     // parameter type is String     headers.put("CamelFhir.url", this.patient.getId()).     headers.put(ExtraParameters.PRETTY_PRINT.getHeaderName(), Boolean.TRUE).     Patient result = requestBodyAndHeaders("direct://RESOURCE_BY_URL_AND_STRING_RESOURCE", null, headers).     assertValidResponse(result). }
false;private;1;5;;private void assertValidResponse(Patient result) {     LOG.debug("response: " + result).     assertNotNull("resourceByUrl result", result).     assertEquals("Freeman", result.getName().get(0).getFamily()). }
false;public;0;50;;public void configure() {     // test route for resourceById     from("direct://RESOURCE_BY_ID").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceById     from("direct://RESOURCE_BY_LONG_ID").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceById     from("direct://RESOURCE_BY_STRING_ID").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceById     from("direct://RESOURCE_BY_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceById     from("direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceById     from("direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceById     from("direct://RESOURCE_BY_STRING_ID_AND_VERSION").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceById     from("direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceByUrl     from("direct://RESOURCE_BY_IURL").to("fhir://" + PATH_PREFIX + "/resourceByUrl").     // test route for resourceByUrl     from("direct://RESOURCE_BY_URL").to("fhir://" + PATH_PREFIX + "/resourceByUrl").     // test route for resourceByUrl     from("direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceByUrl").     // test route for resourceByUrl     from("direct://RESOURCE_BY_URL_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceByUrl"). }
false;protected;0;55;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for resourceById             from("direct://RESOURCE_BY_ID").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceById             from("direct://RESOURCE_BY_LONG_ID").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceById             from("direct://RESOURCE_BY_STRING_ID").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceById             from("direct://RESOURCE_BY_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceById             from("direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceById             from("direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceById             from("direct://RESOURCE_BY_STRING_ID_AND_VERSION").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceById             from("direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceByUrl             from("direct://RESOURCE_BY_IURL").to("fhir://" + PATH_PREFIX + "/resourceByUrl").             // test route for resourceByUrl             from("direct://RESOURCE_BY_URL").to("fhir://" + PATH_PREFIX + "/resourceByUrl").             // test route for resourceByUrl             from("direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceByUrl").             // test route for resourceByUrl             from("direct://RESOURCE_BY_URL_AND_STRING_RESOURCE").to("fhir://" + PATH_PREFIX + "/resourceByUrl").         }     }. }
