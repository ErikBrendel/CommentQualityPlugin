commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = new DefaultCamelContext(createRegistry()).     // add FhirComponent to Camel context but don't set up componentConfiguration     final FhirComponent component = new FhirComponent(context).     context.addComponent("fhir", component).     return context. }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("customClient", new CustomClient()).     registry.bind("customClientFactory", new CustomClientFactory()).     return registry. }
false;public;0;6;;@Test public void testConfigurationWithCustomClient() throws Exception {     FhirEndpoint endpoint = getMandatoryEndpoint(TEST_URI_CUSTOM_CLIENT, FhirEndpoint.class).     IGenericClient client = endpoint.getClient().     assertTrue(client instanceof CustomClient). }
false;public;0;6;;@Test public void testConfigurationWithCustomFactory() throws Exception {     FhirEndpoint endpoint = getMandatoryEndpoint(TEST_URI_CUSTOM_CLIENT_FACTORY, FhirEndpoint.class).     IGenericClient client = endpoint.getClient().     assertTrue(client instanceof CustomClient). }
false;public;0;4;;@Override public void cleanFhirServerState() { // do nothing }
false;public;0;5;;@Override public void configure() {     from("direct://CONFIGURATION_CUSTOM_CLIENT").to(TEST_URI_CUSTOM_CLIENT).     from("direct://CONFIGURATION_CUSTOM_CLIENT_FACTORY").to(TEST_URI_CUSTOM_CLIENT_FACTORY). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct://CONFIGURATION_CUSTOM_CLIENT").to(TEST_URI_CUSTOM_CLIENT).             from("direct://CONFIGURATION_CUSTOM_CLIENT_FACTORY").to(TEST_URI_CUSTOM_CLIENT_FACTORY).         }     }. }
false;public;0;4;;@Override public int getConnectionRequestTimeout() {     return 0. }
false;public;0;4;;@Override public int getConnectTimeout() {     return 0. }
false;public;5;4;;@Override public IHttpClient getHttpClient(StringBuilder theUrl, Map<String, List<String>> theIfNoneExistParams, String theIfNoneExistString, RequestTypeEnum theRequestType, List<Header> theHeaders) {     return null. }
false;public;0;4;;@Override public ServerValidationModeEnum getServerValidationModeEnum() {     return null. }
false;public;0;4;;@Override public ServerValidationModeEnum getServerValidationMode() {     return null. }
false;public;0;4;;@Override public int getSocketTimeout() {     return 0. }
false;public;0;4;;@Override public int getPoolMaxTotal() {     return 0. }
false;public;0;4;;@Override public int getPoolMaxPerRoute() {     return 0. }
false;public;2;4;;@Override public <T extends IRestfulClient> T newClient(Class<T> theClientType, String theServerBase) {     return null. }
false;public;1;4;;@Override public IGenericClient newGenericClient(String theServerBase) {     return new CustomClient(). }
false;public;1;4;;@Override public void setConnectionRequestTimeout(int theConnectionRequestTimeout) { }
false;public;1;4;;@Override public void setConnectTimeout(int theConnectTimeout) { }
false;public;1;4;;@Override public <T> void setHttpClient(T theHttpClient) { }
false;public;2;4;;@Override public void setProxy(String theHost, Integer thePort) { }
false;public;2;4;;@Override public void setProxyCredentials(String theUsername, String thePassword) { }
false;public;1;4;;@Override public void setServerValidationModeEnum(ServerValidationModeEnum theServerValidationMode) { }
false;public;1;4;;@Override public void setServerValidationMode(ServerValidationModeEnum theServerValidationMode) { }
false;public;1;4;;@Override public void setSocketTimeout(int theSocketTimeout) { }
false;public;1;4;;@Override public void setPoolMaxTotal(int thePoolMaxTotal) { }
false;public;1;4;;@Override public void setPoolMaxPerRoute(int thePoolMaxPerRoute) { }
false;public;3;4;;@Override public void validateServerBase(String theServerBase, IHttpClient theHttpClient, IRestfulClient theClient) { }
false;public;3;4;;@Override public void validateServerBaseIfConfiguredToDoSo(String theServerBase, IHttpClient theHttpClient, IRestfulClient theClient) { }
false;public;0;4;;@Override public IFetchConformanceUntyped capabilities() {     return null. }
false;public;0;4;;@Override public ICreate create() {     return null. }
false;public;0;4;;@Override public IDelete delete() {     return null. }
false;public;0;4;;@Override public IFetchConformanceUntyped fetchConformance() {     return null. }
false;public;0;4;;@Override public void forceConformanceCheck() throws FhirClientConnectionException { }
false;public;0;4;;@Override public IHistory history() {     return null. }
false;public;0;4;;@Override public IGetPage loadPage() {     return null. }
false;public;0;4;;@Override public IMeta meta() {     return null. }
false;public;0;4;;@Override public IOperation operation() {     return null. }
false;public;0;4;;@Override public IPatch patch() {     return null. }
false;public;0;4;;@Override public IRead read() {     return null. }
false;public;2;4;;@Override public <T extends IBaseResource> T read(Class<T> theType, String theId) {     return null. }
false;public;2;4;;@Override public <T extends IBaseResource> T read(Class<T> theType, UriDt theUrl) {     return null. }
false;public;1;4;;@Override public IBaseResource read(UriDt theUrl) {     return null. }
false;public;2;4;;@Override public <T extends IBaseResource> T fetchResourceFromUrl(Class<T> theResourceType, String theUrl) {     return null. }
false;public;0;4;;@Override public EncodingEnum getEncoding() {     return null. }
false;public;0;4;;@Override public FhirContext getFhirContext() {     return null. }
false;public;0;4;;@Override public IHttpClient getHttpClient() {     return null. }
false;public;0;4;;@Override public List<IClientInterceptor> getInterceptors() {     return null. }
false;public;0;4;;@Override public String getServerBase() {     return null. }
false;public;1;4;;@Override public void registerInterceptor(IClientInterceptor theInterceptor) { }
false;public;1;4;;@Override public void setEncoding(EncodingEnum theEncoding) { }
false;public;1;4;;@Override public void setPrettyPrint(Boolean thePrettyPrint) { }
false;public;1;4;;@Override public void setSummary(SummaryEnum theSummary) { }
false;public;0;4;;@Override public <T extends IBaseBundle> IUntypedQuery<T> search() {     return null. }
false;public;1;4;;@Override public void setLogRequestAndResponse(boolean theLogRequestAndResponse) { }
false;public;0;4;;@Override public ITransaction transaction() {     return null. }
false;public;1;4;;@Override public void unregisterInterceptor(IClientInterceptor theInterceptor) { }
false;public;0;4;;@Override public IUpdate update() {     return null. }
false;public;2;4;;@Override public MethodOutcome update(IdDt theId, IBaseResource theResource) {     return null. }
false;public;2;4;;@Override public MethodOutcome update(String theId, IBaseResource theResource) {     return null. }
false;public;0;4;;@Override public IValidate validate() {     return null. }
false;public;1;4;;@Override public MethodOutcome validate(IBaseResource theResource) {     return null. }
false;public;2;4;;@Override public <T extends IBaseResource> T vread(Class<T> theType, IdDt theId) {     return null. }
false;public;3;4;;@Override public <T extends IBaseResource> T vread(Class<T> theType, String theId, String theVersionId) {     return null. }
