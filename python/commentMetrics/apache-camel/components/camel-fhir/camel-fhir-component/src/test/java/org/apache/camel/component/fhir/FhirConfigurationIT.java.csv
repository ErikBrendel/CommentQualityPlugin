commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;23;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = new DefaultCamelContext(createRegistry()).     // add FhirComponent to Camel context but don't set up componentConfiguration     final FhirComponent component = new FhirComponent(context).     FhirConfiguration fhirConfiguration = new FhirConfiguration().     fhirConfiguration.setLog(true).     fhirConfiguration.setEncoding("JSON").     fhirConfiguration.setSummary("TEXT").     fhirConfiguration.setCompress(true).     fhirConfiguration.setUsername("art").     fhirConfiguration.setPassword("tatum").     fhirConfiguration.setSessionCookie("mycookie=Chips Ahoy").     fhirConfiguration.setAccessToken("token").     fhirConfiguration.setServerUrl("http://localhost:8080/hapi-fhir-jpaserver-example/baseDstu3").     fhirConfiguration.setFhirVersion("DSTU3").     component.setConfiguration(fhirConfiguration).     this.componentConfiguration = fhirConfiguration.     context.addComponent("fhir", component).     return context. }
false;public;0;12;;@Test public void testConfiguration() throws Exception {     FhirEndpoint endpoint = getMandatoryEndpoint(TEST_URI, FhirEndpoint.class).     GenericClient client = (GenericClient) endpoint.getClient().     FhirConfiguration configuration = endpoint.getConfiguration().     assertEquals(this.componentConfiguration, configuration).     assertEquals("http://localhost:8080/hapi-fhir-jpaserver-example/baseDstu3", client.getUrlBase()).     assertEquals(EncodingEnum.JSON, client.getEncoding()).     assertEquals(SummaryEnum.TEXT, client.getSummary()).     List<IClientInterceptor> interceptors = client.getInterceptors().     assertEquals(5, interceptors.size()). }
false;public;0;4;;@Override public void cleanFhirServerState() { // do nothing }
false;public;0;4;;@Override public void configure() {     from("direct://CONFIGURATION").to(TEST_URI). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct://CONFIGURATION").to(TEST_URI).         }     }. }
