commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override @Before public void setUp() throws Exception {     super.setUp(). }
false;public;0;5;;@Test public void defaultFhirJsonConfigTest() {     FhirDataFormat fhirJson = getDataformat("fhirJson").     assertConfig(fhirJson). }
false;public;0;5;;@Test public void defaultFhirXmlConfigTest() {     FhirDataFormat fhirXml = getDataformat("fhirXml").     assertConfig(fhirXml). }
false;private;1;23;;private void assertConfig(FhirDataFormat fhirJson) {     assertEquals(FhirVersionEnum.DSTU3, fhirJson.getFhirContext().getVersion().getVersion()).     Set<String> dontEncodeElements = fhirJson.getDontEncodeElements().     assertCollection(dontEncodeElements).     List<String> dontStripVersionsFromReferencesAtPaths = fhirJson.getDontStripVersionsFromReferencesAtPaths().     assertCollection(dontStripVersionsFromReferencesAtPaths).     Set<String> encodeElements = fhirJson.getEncodeElements().     assertCollection(encodeElements).     Set<String> encodeElementsAppliesToResourceTypes = fhirJson.getEncodeElementsAppliesToResourceTypes().     assertCollection(encodeElementsAppliesToResourceTypes).     assertTrue(fhirJson.getForceResourceId().getClass().isAssignableFrom(IdType.class)).     assertTrue(fhirJson.getParserErrorHandler().getClass().isAssignableFrom(LenientErrorHandler.class)).     assertTrue(fhirJson.getParserOptions().getClass().isAssignableFrom(ParserOptions.class)).     assertNotNull(fhirJson.getPreferTypes()).     assertEquals("serverBaseUrl", fhirJson.getServerBaseUrl()).     assertTrue(fhirJson.getOverrideResourceIdWithBundleEntryFullUrl()).     assertTrue(fhirJson.getStripVersionsFromReferences()).     assertTrue(fhirJson.isPrettyPrint()).     assertTrue(fhirJson.isEncodeElementsAppliesToChildResourcesOnly()).     assertTrue(fhirJson.isOmitResourceId()).     assertTrue(fhirJson.isSummaryMode()).     assertTrue(fhirJson.isSuppressNarratives()). }
false;private;1;5;;private void assertCollection(Collection<String> encodeElements) {     assertEquals(2, encodeElements.size()).     assertTrue(encodeElements.contains("foo")).     assertTrue(encodeElements.contains("bar")). }
false;private;1;4;;private FhirDataFormat getDataformat(String name) {     CamelContext camelContext = context().     return (FhirDataFormat) ((FhirDataformat) camelContext.getRegistry().lookupByName(name)).getDataFormat(). }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/fhir/FhirDataFormatConfigSpringTest.xml"). }
