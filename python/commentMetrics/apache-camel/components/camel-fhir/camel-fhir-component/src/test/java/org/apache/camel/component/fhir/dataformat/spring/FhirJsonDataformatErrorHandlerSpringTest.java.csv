commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     mockEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class). }
false;public;0;8;;@Test(expected = DataFormatException.class) public void unmarshalParserErrorHandler() throws Throwable {     try {         template.sendBody("direct:unmarshalErrorHandlerStrict", INPUT).     } catch (CamelExecutionException e) {         throw e.getCause().     } }
false;public;0;14;;@Test public void unmarshalLenientErrorHandler() throws Exception {     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:unmarshalErrorHandlerLenient", INPUT).     mockEndpoint.assertIsSatisfied().     Exchange exchange = mockEndpoint.getExchanges().get(0).     Patient patient = (Patient) exchange.getIn().getBody().     assertEquals(1, patient.getExtension().size()).     assertEquals(null, patient.getExtension().get(0).getUrl()).     assertEquals("2011-01-02T11:13:15", patient.getExtension().get(0).getValueAsPrimitive().getValueAsString()). }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/fhir/json/FhirJsonDataFormatErrorHandlerSpringTest.xml"). }
