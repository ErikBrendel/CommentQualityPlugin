commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     mockEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class). }
false;public;0;8;;@Test(expected = DataFormatException.class) public void unmarshalParserErrorHandler() throws Throwable {     try {         template.sendBody("direct:unmarshalErrorHandlerStrict", INPUT).     } catch (CamelExecutionException e) {         throw e.getCause().     } }
false;public;0;12;;@Test public void unmarshalLenientErrorHandler() throws Exception {     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:unmarshalErrorHandlerLenient", INPUT).     mockEndpoint.assertIsSatisfied().     Exchange exchange = mockEndpoint.getExchanges().get(0).     Patient patient = (Patient) exchange.getIn().getBody().     assertEquals(true, patient.getActive()). }
false;public;0;12;;public void configure() {     FhirXmlDataFormat strickErrorHandlerDataformat = getStrictErrorHandlerDataFormat().     FhirXmlDataFormat lenientErrorHandlerDataFormat = getLenientErrorHandlerDataFormat().     from("direct:unmarshalErrorHandlerStrict").unmarshal(strickErrorHandlerDataformat).to("mock:errorIsThrown").     from("direct:unmarshalErrorHandlerLenient").unmarshal(lenientErrorHandlerDataFormat).to("mock:result"). }
false;private;0;7;;private FhirXmlDataFormat getStrictErrorHandlerDataFormat() {     FhirXmlDataFormat fhirXmlDataFormat = new FhirXmlDataFormat().     fhirXmlDataFormat.setFhirContext(fhirContext).     IParserErrorHandler parserErrorHandler = new StrictErrorHandler().     fhirXmlDataFormat.setParserErrorHandler(parserErrorHandler).     return fhirXmlDataFormat. }
false;private;0;7;;private FhirXmlDataFormat getLenientErrorHandlerDataFormat() {     FhirXmlDataFormat fhirXmlDataFormat = new FhirXmlDataFormat().     fhirXmlDataFormat.setFhirContext(fhirContext).     IParserErrorHandler parserErrorHandler = new LenientErrorHandler().     fhirXmlDataFormat.setParserErrorHandler(parserErrorHandler).     return fhirXmlDataFormat. }
false;protected;0;33;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             FhirXmlDataFormat strickErrorHandlerDataformat = getStrictErrorHandlerDataFormat().             FhirXmlDataFormat lenientErrorHandlerDataFormat = getLenientErrorHandlerDataFormat().             from("direct:unmarshalErrorHandlerStrict").unmarshal(strickErrorHandlerDataformat).to("mock:errorIsThrown").             from("direct:unmarshalErrorHandlerLenient").unmarshal(lenientErrorHandlerDataFormat).to("mock:result").         }          private FhirXmlDataFormat getStrictErrorHandlerDataFormat() {             FhirXmlDataFormat fhirXmlDataFormat = new FhirXmlDataFormat().             fhirXmlDataFormat.setFhirContext(fhirContext).             IParserErrorHandler parserErrorHandler = new StrictErrorHandler().             fhirXmlDataFormat.setParserErrorHandler(parserErrorHandler).             return fhirXmlDataFormat.         }          private FhirXmlDataFormat getLenientErrorHandlerDataFormat() {             FhirXmlDataFormat fhirXmlDataFormat = new FhirXmlDataFormat().             fhirXmlDataFormat.setFhirContext(fhirContext).             IParserErrorHandler parserErrorHandler = new LenientErrorHandler().             fhirXmlDataFormat.setParserErrorHandler(parserErrorHandler).             return fhirXmlDataFormat.         }     }. }
