commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testDeleteResource() throws Exception {     assertTrue(patientExists()).     // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter "resource"     IBaseOperationOutcome result = requestBody("direct://RESOURCE", this.patient).     LOG.debug("resource: " + result).     assertNotNull("resource result", result).     assertFalse(patientExists()). }
false;public;0;11;;@Test public void testDeleteResourceById() throws Exception {     assertTrue(patientExists()).     // using org.hl7.fhir.instance.model.api.IIdType message body for single parameter "id"     IBaseOperationOutcome result = requestBody("direct://RESOURCE_BY_ID", this.patient.getIdElement()).     LOG.debug("resourceById: " + result).     assertNotNull("resourceById result", result).     assertFalse(patientExists()). }
false;public;0;16;;@Test public void testDeleteResourceByStringId() throws Exception {     assertTrue(patientExists()).     Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.type", "Patient").     // parameter type is String     headers.put("CamelFhir.stringId", this.patient.getIdElement().getIdPart()).     IBaseOperationOutcome result = requestBodyAndHeaders("direct://RESOURCE_BY_STRING_ID", null, headers).     LOG.debug("resourceById: " + result).     assertNotNull("resourceById result", result).     assertFalse(patientExists()). }
false;public;0;10;;@Test public void testDeleteResourceConditionalByUrl() throws Exception {     assertTrue(patientExists()).     IBaseOperationOutcome result = requestBody("direct://RESOURCE_CONDITIONAL_BY_URL", "Patient?given=Vincent&family=Freeman").     LOG.debug("resourceConditionalByUrl: " + result).     assertNotNull("resourceConditionalByUrl result", result).     assertFalse(patientExists()). }
false;public;0;12;;@Test public void testDeleteResourceConditionalByUrlCacheControlDirective() throws Exception {     assertTrue(patientExists()).     Map<String, Object> headers = new HashMap<>().     headers.put(ExtraParameters.CACHE_CONTROL_DIRECTIVE.getHeaderName(), new CacheControlDirective().setNoCache(true)).     IBaseOperationOutcome result = requestBodyAndHeaders("direct://RESOURCE_CONDITIONAL_BY_URL", "Patient?given=Vincent&family=Freeman", headers).     LOG.debug("resourceConditionalByUrl: " + result).     assertNotNull("resourceConditionalByUrl result", result).     assertFalse(patientExists()). }
false;public;0;18;;public void configure() {     // test route for resource     from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource?inBody=resource").     // test route for resourceById     from("direct://RESOURCE_BY_ID").to("fhir://" + PATH_PREFIX + "/resourceById?inBody=id").     // test route for resourceById     from("direct://RESOURCE_BY_STRING_ID").to("fhir://" + PATH_PREFIX + "/resourceById").     // test route for resourceConditionalByUrl     from("direct://RESOURCE_CONDITIONAL_BY_URL").to("fhir://" + PATH_PREFIX + "/resourceConditionalByUrl?inBody=url"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for resource             from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource?inBody=resource").             // test route for resourceById             from("direct://RESOURCE_BY_ID").to("fhir://" + PATH_PREFIX + "/resourceById?inBody=id").             // test route for resourceById             from("direct://RESOURCE_BY_STRING_ID").to("fhir://" + PATH_PREFIX + "/resourceById").             // test route for resourceConditionalByUrl             from("direct://RESOURCE_CONDITIONAL_BY_URL").to("fhir://" + PATH_PREFIX + "/resourceConditionalByUrl?inBody=url").         }     }. }
