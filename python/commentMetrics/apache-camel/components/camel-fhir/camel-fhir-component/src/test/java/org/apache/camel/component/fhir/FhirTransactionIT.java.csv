commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testWithBundle() throws Exception {     // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter "bundle"     Bundle result = requestBody("direct://WITH_BUNDLE", createTransactionBundle()).     assertNotNull("withBundle result", result).     assertTrue(result.getEntry().get(0).getResponse().getStatus().contains("Created")).     LOG.debug("withBundle: " + result). }
false;public;0;12;;@Test public void testWithStringBundle() throws Exception {     Bundle transactionBundle = createTransactionBundle().     String stringBundle = fhirContext.newJsonParser().encodeResourceToString(transactionBundle).     // using String message body for single parameter "sBundle"     final String result = requestBody("direct://WITH_STRING_BUNDLE", stringBundle).     assertNotNull("withBundle result", result).     assertTrue(result.contains("Bundle")).     LOG.debug("withBundle: " + result). }
false;public;0;15;;@Test public void testWithResources() throws Exception {     Patient oscar = new Patient().addName(new HumanName().addGiven("Oscar").setFamily("Peterson")).     Patient bobbyHebb = new Patient().addName(new HumanName().addGiven("Bobby").setFamily("Hebb")).     List<IBaseResource> patients = new ArrayList<>(2).     patients.add(oscar).     patients.add(bobbyHebb).     // using java.util.List message body for single parameter "resources"     List<IBaseResource> result = requestBody("direct://WITH_RESOURCES", patients).     assertNotNull("withResources result", result).     LOG.debug("withResources: " + result).     assertTrue(result.size() == 2). }
false;public;0;17;;@Test public void testWithResourcesSummaryEnum() throws Exception {     Patient oscar = new Patient().addName(new HumanName().addGiven("Oscar").setFamily("Peterson")).     Patient bobbyHebb = new Patient().addName(new HumanName().addGiven("Bobby").setFamily("Hebb")).     List<IBaseResource> patients = new ArrayList<>(2).     patients.add(oscar).     patients.add(bobbyHebb).     final Map<String, Object> headers = new HashMap<>().     headers.put(ExtraParameters.SUMMARY_ENUM.getHeaderName(), SummaryEnum.DATA).     // using java.util.List message body for single parameter "resources"     List<IBaseResource> result = requestBodyAndHeaders("direct://WITH_RESOURCES", patients, headers).     assertNotNull("withResources result", result).     LOG.debug("withResources: " + result).     assertTrue(result.size() == 2). }
false;public;0;14;;public void configure() {     // test route for withBundle     from("direct://WITH_BUNDLE").to("fhir://" + PATH_PREFIX + "/withBundle?inBody=bundle").     // test route for withBundle     from("direct://WITH_STRING_BUNDLE").to("fhir://" + PATH_PREFIX + "/withBundle?inBody=stringBundle").     // test route for withResources     from("direct://WITH_RESOURCES").to("fhir://" + PATH_PREFIX + "/withResources?inBody=resources"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for withBundle             from("direct://WITH_BUNDLE").to("fhir://" + PATH_PREFIX + "/withBundle?inBody=bundle").             // test route for withBundle             from("direct://WITH_STRING_BUNDLE").to("fhir://" + PATH_PREFIX + "/withBundle?inBody=stringBundle").             // test route for withResources             from("direct://WITH_RESOURCES").to("fhir://" + PATH_PREFIX + "/withResources?inBody=resources").         }     }. }
false;private;0;9;;private Bundle createTransactionBundle() {     Bundle input = new Bundle().     input.setType(Bundle.BundleType.TRANSACTION).     input.addEntry().setResource(new Patient().addName(new HumanName().addGiven("Art").setFamily("Tatum"))).getRequest().setMethod(Bundle.HTTPVerb.POST).     return input. }
