commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testResource() throws Exception {     Date date = new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29").     assertNotEquals(date, patient.getBirthDate()).     this.patient.setBirthDate(date).     final Map<String, Object> headers = new HashMap<>().     // parameter type is org.hl7.fhir.instance.model.api.IBaseResource     headers.put("CamelFhir.resource", this.patient).     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.id", this.patient.getIdElement()).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", PreferReturnEnum.REPRESENTATION).     MethodOutcome result = requestBodyAndHeaders("direct://RESOURCE", null, headers).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertEquals("Birth date not updated!", date, ((Patient) result.getResource()).getBirthDate()). }
false;public;0;17;;@Test public void testResourceNoId() throws Exception {     Date date = new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29").     assertNotEquals(date, patient.getBirthDate()).     this.patient.setBirthDate(date).     final Map<String, Object> headers = new HashMap<>().     // parameter type is org.hl7.fhir.instance.model.api.IBaseResource     headers.put("CamelFhir.resource", this.patient).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", PreferReturnEnum.REPRESENTATION).     MethodOutcome result = requestBodyAndHeaders("direct://RESOURCE", null, headers).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertEquals("Birth date not updated!", date, ((Patient) result.getResource()).getBirthDate()). }
false;public;0;19;;@Test public void testResourceStringId() throws Exception {     Date date = new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29").     assertNotEquals(date, patient.getBirthDate()).     this.patient.setBirthDate(date).     final Map<String, Object> headers = new HashMap<>().     // parameter type is org.hl7.fhir.instance.model.api.IBaseResource     headers.put("CamelFhir.resource", this.patient).     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.stringId", this.patient.getIdElement().getIdPart()).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", PreferReturnEnum.REPRESENTATION).     MethodOutcome result = requestBodyAndHeaders("direct://RESOURCE_WITH_STRING_ID", null, headers).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertEquals("Birth date not updated!", date, ((Patient) result.getResource()).getBirthDate()). }
false;public;0;19;;@Test public void testResourceAsString() throws Exception {     Date date = new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29").     assertNotEquals(date, patient.getBirthDate()).     this.patient.setBirthDate(date).     final Map<String, Object> headers = new HashMap<>().     // parameter type is org.hl7.fhir.instance.model.api.IBaseResource     headers.put("CamelFhir.resourceAsString", this.fhirContext.newJsonParser().encodeResourceToString(this.patient)).     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.id", this.patient.getIdElement()).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", PreferReturnEnum.REPRESENTATION).     MethodOutcome result = requestBodyAndHeaders("direct://RESOURCE_AS_STRING", null, headers).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertEquals("Birth date not updated!", date, ((Patient) result.getResource()).getBirthDate()). }
false;public;0;19;;@Test public void testResourceAsStringWithStringId() throws Exception {     Date date = new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29").     assertNotEquals(date, patient.getBirthDate()).     this.patient.setBirthDate(date).     final Map<String, Object> headers = new HashMap<>().     // parameter type is org.hl7.fhir.instance.model.api.IBaseResource     headers.put("CamelFhir.resourceAsString", this.fhirContext.newJsonParser().encodeResourceToString(this.patient)).     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.stringId", this.patient.getIdElement().getIdPart()).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", PreferReturnEnum.REPRESENTATION).     MethodOutcome result = requestBodyAndHeaders("direct://RESOURCE_AS_STRING_WITH_STRING_ID", null, headers).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertEquals("Birth date not updated!", date, ((Patient) result.getResource()).getBirthDate()). }
false;public;0;20;;@Test public void testResourceBySearchUrl() throws Exception {     Date date = new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29").     assertNotEquals(date, patient.getBirthDate()).     this.patient.setBirthDate(date).     String url = "Patient?" + Patient.SP_IDENTIFIER + '=' + URLEncoder.encode(this.patient.getId(), "UTF-8").     final Map<String, Object> headers = new HashMap<>().     // parameter type is org.hl7.fhir.instance.model.api.IBaseResource     headers.put("CamelFhir.resource", this.patient).     // parameter type is String     headers.put("CamelFhir.url", url).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", PreferReturnEnum.REPRESENTATION).     MethodOutcome result = requestBodyAndHeaders("direct://RESOURCE_BY_SEARCH_URL", null, headers).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertEquals("Birth date not updated!", date, ((Patient) result.getResource()).getBirthDate()). }
false;public;0;20;;@Test public void testResourceBySearchUrlAndResourceAsString() throws Exception {     Date date = new SimpleDateFormat("yyyy-MM-dd").parse("1998-04-29").     assertNotEquals(date, patient.getBirthDate()).     this.patient.setBirthDate(date).     String url = "Patient?" + Patient.SP_IDENTIFIER + '=' + URLEncoder.encode(this.patient.getId(), "UTF-8").     final Map<String, Object> headers = new HashMap<>().     // parameter type is org.hl7.fhir.instance.model.api.IBaseResource     headers.put("CamelFhir.resourceAsString", this.fhirContext.newJsonParser().encodeResourceToString(this.patient)).     // parameter type is String     headers.put("CamelFhir.url", url).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", PreferReturnEnum.REPRESENTATION).     MethodOutcome result = requestBodyAndHeaders("direct://RESOURCE_BY_SEARCH_URL_AND_RESOURCE_AS_STRING", null, headers).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertEquals("Birth date not updated!", date, ((Patient) result.getResource()).getBirthDate()). }
false;public;0;26;;public void configure() {     // test route for resource     from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource").     // test route for resource     from("direct://RESOURCE_WITH_STRING_ID").to("fhir://" + PATH_PREFIX + "/resource").     // test route for resource     from("direct://RESOURCE_AS_STRING").to("fhir://" + PATH_PREFIX + "/resource").     // test route for resource     from("direct://RESOURCE_AS_STRING_WITH_STRING_ID").to("fhir://" + PATH_PREFIX + "/resource").     // test route for resourceBySearchUrl     from("direct://RESOURCE_BY_SEARCH_URL").to("fhir://" + PATH_PREFIX + "/resourceBySearchUrl").     // test route for resourceBySearchUrl     from("direct://RESOURCE_BY_SEARCH_URL_AND_RESOURCE_AS_STRING").to("fhir://" + PATH_PREFIX + "/resourceBySearchUrl"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for resource             from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource").             // test route for resource             from("direct://RESOURCE_WITH_STRING_ID").to("fhir://" + PATH_PREFIX + "/resource").             // test route for resource             from("direct://RESOURCE_AS_STRING").to("fhir://" + PATH_PREFIX + "/resource").             // test route for resource             from("direct://RESOURCE_AS_STRING_WITH_STRING_ID").to("fhir://" + PATH_PREFIX + "/resource").             // test route for resourceBySearchUrl             from("direct://RESOURCE_BY_SEARCH_URL").to("fhir://" + PATH_PREFIX + "/resourceBySearchUrl").             // test route for resourceBySearchUrl             from("direct://RESOURCE_BY_SEARCH_URL_AND_RESOURCE_AS_STRING").to("fhir://" + PATH_PREFIX + "/resourceBySearchUrl").         }     }. }
