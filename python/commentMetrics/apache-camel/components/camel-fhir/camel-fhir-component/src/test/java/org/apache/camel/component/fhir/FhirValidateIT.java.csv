commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testResource() throws Exception {     Patient bobbyHebb = new Patient().addName(new HumanName().addGiven("Bobby").setFamily("Hebb")).     // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter "resource"     MethodOutcome result = requestBody("direct://RESOURCE", bobbyHebb).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertNotNull(result.getOperationOutcome()).     assertTrue(((OperationOutcome) result.getOperationOutcome()).getText().getDivAsString().contains("No issues detected during validation")). }
false;public;0;11;;@Test public void testResourceAsString() throws Exception {     Patient bobbyHebb = new Patient().addName(new HumanName().addGiven("Bobby").setFamily("Hebb")).     // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter "resource"     MethodOutcome result = requestBody("direct://RESOURCE_AS_STRING", this.fhirContext.newXmlParser().encodeResourceToString(bobbyHebb)).     assertNotNull("resource result", result).     LOG.debug("resource: " + result).     assertNotNull(result.getOperationOutcome()).     assertTrue(((OperationOutcome) result.getOperationOutcome()).getText().getDivAsString().contains("No issues detected during validation")). }
false;public;0;10;;public void configure() {     // test route for resource     from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource?inBody=resource").     // test route for resource     from("direct://RESOURCE_AS_STRING").to("fhir://" + PATH_PREFIX + "/resource?inBody=resourceAsString"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for resource             from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource?inBody=resource").             // test route for resource             from("direct://RESOURCE_AS_STRING").to("fhir://" + PATH_PREFIX + "/resource?inBody=resourceAsString").         }     }. }
