commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testOnInstance() throws Exception {     final Map<String, Object> headers = new HashMap<>().     headers.put("CamelFhir.id", this.patient.getIdElement()).     // parameter type is Class     headers.put("CamelFhir.returnType", Bundle.class).     // parameter type is Integer     headers.put("CamelFhir.count", 1).     Bundle result = requestBodyAndHeaders("direct://ON_INSTANCE", null, headers).     LOG.debug("onInstance: " + result).     assertNotNull("onInstance result", result).     assertEquals(1, result.getEntry().size()). }
false;public;0;11;;@Test public void testOnServer() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put("CamelFhir.returnType", Bundle.class).     headers.put("CamelFhir.count", 1).     Bundle result = requestBodyAndHeaders("direct://ON_SERVER", null, headers).     LOG.debug("onServer: " + result).     assertNotNull("onServer result", result).     assertEquals(1, result.getEntry().size()). }
false;public;0;16;;@Test public void testOnType() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resourceType", Patient.class).     // parameter type is Class     headers.put("CamelFhir.returnType", Bundle.class).     // parameter type is Integer     headers.put("CamelFhir.count", 1).     Bundle result = requestBodyAndHeaders("direct://ON_TYPE", null, headers).     LOG.debug("onType: " + result).     assertNotNull("onType result", result).     assertEquals(1, result.getEntry().size()). }
false;public;0;19;;@Test public void testOnTypeWithSubsetElements() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is Class     headers.put("CamelFhir.resourceType", Patient.class).     // parameter type is Class     headers.put("CamelFhir.returnType", Bundle.class).     // parameter type is Integer     headers.put("CamelFhir.count", 1).     // only include the identifier and name     headers.put(ExtraParameters.SUBSET_ELEMENTS.getHeaderName(), new String[] { "identifier", "name" }).     Bundle result = requestBodyAndHeaders("direct://ON_TYPE", null, headers).     LOG.debug("onType: " + result).     assertNotNull("onType result", result).     assertEquals(1, result.getEntry().size()). }
false;public;0;13;;public void configure() {     // test route for onInstance     from("direct://ON_INSTANCE").to("fhir://" + PATH_PREFIX + "/onInstance").     // test route for onServer     from("direct://ON_SERVER").to("fhir://" + PATH_PREFIX + "/onServer").     // test route for onType     from("direct://ON_TYPE").to("fhir://" + PATH_PREFIX + "/onType"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for onInstance             from("direct://ON_INSTANCE").to("fhir://" + PATH_PREFIX + "/onInstance").             // test route for onServer             from("direct://ON_SERVER").to("fhir://" + PATH_PREFIX + "/onServer").             // test route for onType             from("direct://ON_TYPE").to("fhir://" + PATH_PREFIX + "/onType").         }     }. }
