commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void cleanFhirServerState() {     if (patientExists()) {         deletePatient().     }     createPatient(). }
false;;0;8;;boolean patientExists() {     try {         Bundle bundle = fhirClient.search().byUrl("Patient?given=Vincent&family=Freeman").returnBundle(Bundle.class).execute().         return !bundle.getEntry().isEmpty().     } catch (ResourceGoneException e) {         return false.     } }
false;private;0;3;;private void deletePatient() {     fhirClient.delete().resourceConditionalByUrl("Patient?given=Vincent&family=Freeman").execute(). }
false;private;0;4;;private void createPatient() {     this.patient = new Patient().addName(new HumanName().addGiven("Vincent").setFamily("Freeman")).setActive(false).     this.patient.setId(fhirClient.create().resource(patient).execute().getId()). }
false;protected;0;34;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     // read Fhir component configuration from TEST_OPTIONS_PROPERTIES     final Properties properties = new Properties().     try {         properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES)).     } catch (Exception e) {         throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()), e).     }     Map<String, Object> options = new HashMap<>().     for (Map.Entry<Object, Object> entry : properties.entrySet()) {         options.put(entry.getKey().toString(), entry.getValue()).     }     FhirVersionEnum version = FhirVersionEnum.valueOf((String) options.get("fhirVersion")).     this.fhirContext = new FhirContext(version).     FHIR_CONTEXT_THREAD_LOCAL.set(this.fhirContext).     this.fhirClient = this.fhirContext.newRestfulGenericClient((String) options.get("serverUrl")).     GENERIC_CLIENT_THREAD_LOCAL.set(this.fhirClient).     final FhirConfiguration configuration = new FhirConfiguration().     IntrospectionSupport.setProperties(configuration, options).     configuration.setFhirContext(this.fhirContext).     // add FhirComponent to Camel context     final FhirComponent component = new FhirComponent(context).     component.setConfiguration(configuration).     context.addComponent("fhir", component).     return context. }
false;protected;0;6;;@Override protected void postProcessTest() throws Exception {     super.postProcessTest().     this.fhirContext = FHIR_CONTEXT_THREAD_LOCAL.get().     this.fhirClient = GENERIC_CLIENT_THREAD_LOCAL.get(). }
false;public;0;5;;@Override public boolean isCreateCamelContextPerClass() {     // only create the context once for this class     return true. }
false;;3;5;;@SuppressWarnings("unchecked") <T> T requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) throws CamelExecutionException {     return (T) template().requestBodyAndHeaders(endpointUri, body, headers). }
false;;2;4;;@SuppressWarnings("unchecked") <T> T requestBody(String endpoint, Object body) throws CamelExecutionException {     return (T) template().requestBody(endpoint, body). }
