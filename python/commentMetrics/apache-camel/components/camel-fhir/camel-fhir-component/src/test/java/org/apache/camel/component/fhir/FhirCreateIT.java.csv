commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testCreateResource() throws Exception {     Patient patient = new Patient().addName(new HumanName().addGiven("Vincent").setFamily("Freeman")).     MethodOutcome result = requestBody("direct://RESOURCE", patient).     LOG.debug("resource: " + result).     assertNotNull("resource result", result).     assertTrue(result.getCreated()). }
false;public;0;11;;@Test public void testCreateStringResource() throws Exception {     Patient patient = new Patient().addName(new HumanName().addGiven("Vincent").setFamily("Freeman")).     String patientString = this.fhirContext.newXmlParser().encodeResourceToString(patient).     MethodOutcome result = requestBody("direct://RESOURCE_STRING", patientString).     LOG.debug("resource: " + result).     assertNotNull("resource result", result).     assertTrue(result.getCreated()). }
false;public;0;12;;@Test public void testCreateStringResourceEncodeXml() throws Exception {     Patient patient = new Patient().addName(new HumanName().addGiven("Vincent").setFamily("Freeman")).     String patientString = this.fhirContext.newXmlParser().encodeResourceToString(patient).     Map<String, Object> headers = new HashMap<>().     headers.put(ExtraParameters.ENCODE_XML.getHeaderName(), Boolean.TRUE).     MethodOutcome result = requestBodyAndHeaders("direct://RESOURCE_STRING", patientString, headers).     LOG.debug("resource: " + result).     assertNotNull("resource result", result).     assertTrue(result.getCreated()). }
false;public;0;10;;public void configure() {     // test route for resource     from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource?inBody=resource").     // test route for resource     from("direct://RESOURCE_STRING").to("fhir://" + PATH_PREFIX + "/resource?inBody=resourceAsString&log=true"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for resource             from("direct://RESOURCE").to("fhir://" + PATH_PREFIX + "/resource?inBody=resource").             // test route for resource             from("direct://RESOURCE_STRING").to("fhir://" + PATH_PREFIX + "/resource?inBody=resourceAsString&log=true").         }     }. }
