commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testEncodeRequestToXml() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // encode request to XML     headers.put(ExtraParameters.ENCODE_XML.getHeaderName(), Boolean.TRUE).     String url = "Patient?given=Vincent&family=Freeman&_format=json".     Bundle result = requestBodyAndHeaders("direct://SEARCH_BY_URL", url, headers).     LOG.debug("searchByUrl: " + result).     assertNotNull("searchByUrl result", result).     Patient patient = (Patient) result.getEntry().get(0).getResource().     assertNotNull(patient).     assertEquals("Freeman", patient.getName().get(0).getFamily()). }
false;public;0;6;;public void configure() {     // test route for searchByUrl     from("direct://SEARCH_BY_URL").to("fhir://" + PATH_PREFIX + "/searchByUrl?inBody=url"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for searchByUrl             from("direct://SEARCH_BY_URL").to("fhir://" + PATH_PREFIX + "/searchByUrl?inBody=url").         }     }. }
