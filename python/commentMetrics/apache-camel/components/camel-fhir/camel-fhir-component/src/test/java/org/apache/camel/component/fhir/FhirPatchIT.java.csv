commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testPatchById() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.patchBody", PATCH).     // parameter type is org.hl7.fhir.instance.model.api.IIdType     headers.put("CamelFhir.id", this.patient.getIdElement()).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", null).     MethodOutcome result = requestBodyAndHeaders("direct://PATCH_BY_ID", null, headers).     assertNotNull("patchById result", result).     assertActive(result). }
false;public;0;13;;@Test public void testPatchByStringId() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.patchBody", PATCH).     // parameter type is String     headers.put("CamelFhir.stringId", this.patient.getId()).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", null).     MethodOutcome result = requestBodyAndHeaders("direct://PATCH_BY_SID", null, headers).     assertActive(result). }
false;public;0;17;;@Test public void testPatchByStringIdPreferResponseTypes() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.patchBody", PATCH).     // parameter type is String     headers.put("CamelFhir.stringId", this.patient.getId()).     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", null).     List<Class<? extends IBaseResource>> preferredResponseTypes = new ArrayList<>().     preferredResponseTypes.add(Patient.class).     headers.put(ExtraParameters.PREFER_RESPONSE_TYPES.getHeaderName(), preferredResponseTypes).     MethodOutcome result = requestBodyAndHeaders("direct://PATCH_BY_SID", null, headers).     assertActive(result). }
false;public;0;17;;@Test @Ignore(value = "https://github.com/jamesagnew/hapi-fhir/issues/955") public void testPatchByUrl() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.patchBody", PATCH).     // parameter type is String     headers.put("CamelFhir.url", "Patient?given=Vincent&family=Freeman").     // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum     headers.put("CamelFhir.preferReturn", null).     MethodOutcome result = requestBodyAndHeaders("direct://PATCH_BY_URL", null, headers).     assertNotNull("patchByUrl result", result).     LOG.debug("patchByUrl: " + result).     assertActive(result). }
false;public;0;14;;public void configure() {     // test route for patchById     from("direct://PATCH_BY_ID").to("fhir://" + PATH_PREFIX + "/patchById").     // test route for patchBySId     from("direct://PATCH_BY_SID").to("fhir://" + PATH_PREFIX + "/patchById").     // test route for patchByUrl     from("direct://PATCH_BY_URL").to("fhir://" + PATH_PREFIX + "/patchByUrl"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for patchById             from("direct://PATCH_BY_ID").to("fhir://" + PATH_PREFIX + "/patchById").             // test route for patchBySId             from("direct://PATCH_BY_SID").to("fhir://" + PATH_PREFIX + "/patchById").             // test route for patchByUrl             from("direct://PATCH_BY_URL").to("fhir://" + PATH_PREFIX + "/patchByUrl").         }     }. }
false;private;1;7;;private void assertActive(MethodOutcome result) {     LOG.debug("result: " + result).     IIdType id = result.getId().     Patient patient = fhirClient.read().resource(Patient.class).withId(id).preferResponseType(Patient.class).execute().     assertTrue(patient.getActive()). }
