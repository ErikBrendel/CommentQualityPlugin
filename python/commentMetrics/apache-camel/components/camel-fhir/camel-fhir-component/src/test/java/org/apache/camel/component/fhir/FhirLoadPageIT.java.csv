commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testByUrl() throws Exception {     String url = "Patient?_count=2".     Bundle bundle = this.fhirClient.search().byUrl(url).returnBundle(Bundle.class).execute().     assertNotNull(bundle.getLink(Bundle.LINK_NEXT)).     String nextPageLink = bundle.getLink("next").getUrl().     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelFhir.url", nextPageLink).     // parameter type is Class     headers.put("CamelFhir.returnType", Bundle.class).     IBaseBundle result = requestBodyAndHeaders("direct://BY_URL", null, headers).     LOG.debug("byUrl: " + result).     assertNotNull("byUrl result", result). }
false;public;0;14;;@Test public void testNext() throws Exception {     String url = "Patient?_count=2".     Bundle bundle = this.fhirClient.search().byUrl(url).returnBundle(Bundle.class).execute().     assertNotNull(bundle.getLink(Bundle.LINK_NEXT)).     // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter "bundle"     Bundle result = requestBody("direct://NEXT", bundle).     assertNotNull("next result", result).     LOG.debug("next: " + result). }
false;public;0;18;;@Test public void testPrevious() throws Exception {     String url = "Patient?_count=2".     Bundle bundle = this.fhirClient.search().byUrl(url).returnBundle(Bundle.class).execute().     assertNotNull(bundle.getLink(Bundle.LINK_NEXT)).     String nextPageLink = bundle.getLink("next").getUrl().     bundle = this.fhirClient.loadPage().byUrl(nextPageLink).andReturnBundle(Bundle.class).execute().     assertNotNull(bundle.getLink(Bundle.LINK_PREV)).     // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter "bundle"     Bundle result = requestBody("direct://PREVIOUS", bundle).     LOG.debug("previous: " + result).     assertNotNull("previous result", result). }
false;public;0;20;;@Test public void testPreviousWithEncodingEnum() throws Exception {     String url = "Patient?_count=2".     Bundle bundle = this.fhirClient.search().byUrl(url).returnBundle(Bundle.class).execute().     assertNotNull(bundle.getLink(Bundle.LINK_NEXT)).     String nextPageLink = bundle.getLink("next").getUrl().     bundle = this.fhirClient.loadPage().byUrl(nextPageLink).andReturnBundle(Bundle.class).execute().     assertNotNull(bundle.getLink(Bundle.LINK_PREV)).     Map<String, Object> headers = new HashMap<>().     headers.put(ExtraParameters.ENCODING_ENUM.getHeaderName(), EncodingEnum.XML).     // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter "bundle"     Bundle result = requestBodyAndHeaders("direct://PREVIOUS", bundle, headers).     LOG.debug("previous: " + result).     assertNotNull("previous result", result). }
false;public;0;20;;@Before public void populateServer() {     List<IBaseResource> input = new ArrayList<>().     Patient p1 = new Patient().     p1.addName().setFamily("PATIENT1").     input.add(p1).     Patient p2 = new Patient().     p2.addName().setFamily("PATIENT2").     input.add(p2).     input.add(new Patient().addName(new HumanName().setFamily("PATIENT3"))).     List<IBaseResource> response = fhirClient.transaction().withResources(input).encodedJson().execute().     assertEquals(3, response.size()). }
false;public;0;14;;public void configure() {     // test route for byUrl     from("direct://BY_URL").to("fhir://" + PATH_PREFIX + "/byUrl").     // test route for next     from("direct://NEXT").to("fhir://" + PATH_PREFIX + "/next?inBody=bundle").     // test route for previous     from("direct://PREVIOUS").to("fhir://" + PATH_PREFIX + "/previous?inBody=bundle"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for byUrl             from("direct://BY_URL").to("fhir://" + PATH_PREFIX + "/byUrl").             // test route for next             from("direct://NEXT").to("fhir://" + PATH_PREFIX + "/next?inBody=bundle").             // test route for previous             from("direct://PREVIOUS").to("fhir://" + PATH_PREFIX + "/previous?inBody=bundle").         }     }. }
