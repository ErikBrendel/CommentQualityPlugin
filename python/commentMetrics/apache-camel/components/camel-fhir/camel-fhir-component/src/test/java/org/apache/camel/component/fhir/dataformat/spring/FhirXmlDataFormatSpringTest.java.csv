commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     mockEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class). }
false;public;0;12;;@Test public void unmarshal() throws Exception {     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:unmarshal", PATIENT).     mockEndpoint.assertIsSatisfied().     Exchange exchange = mockEndpoint.getExchanges().get(0).     Patient patient = (Patient) exchange.getIn().getBody().     assertTrue("Patients should be equal!", patient.equalsDeep(getPatient())). }
false;public;0;14;;@Test public void marshal() throws Exception {     mockEndpoint.expectedMessageCount(1).     Patient patient = getPatient().     template.sendBody("direct:marshal", patient).     mockEndpoint.assertIsSatisfied().     Exchange exchange = mockEndpoint.getExchanges().get(0).     InputStream inputStream = exchange.getIn().getBody(InputStream.class).     final IBaseResource iBaseResource = FhirContext.forDstu3().newXmlParser().parseResource(new InputStreamReader(inputStream)).     assertTrue("Patients should be equal!", patient.equalsDeep((Base) iBaseResource)). }
false;private;0;5;;private Patient getPatient() {     Patient patient = new Patient().     patient.addName(new HumanName().addGiven("Sherlock").setFamily("Holmes")).addAddress(new Address().addLine("221b Baker St, Marylebone, London NW1 6XE, UK")).     return patient. }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/fhir/xml/FhirXmlDataFormatSpringTest.xml"). }
