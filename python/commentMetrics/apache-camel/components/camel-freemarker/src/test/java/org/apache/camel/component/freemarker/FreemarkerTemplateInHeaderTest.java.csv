commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testReceivesFooResponse() throws Exception {     assertRespondsWith("cheese", "foo", "<hello>foo</hello>"). }
false;public;0;4;;@Test public void testReceivesBarResponse() throws Exception {     assertRespondsWith("cheese", "bar", "<hello>bar</hello>"). }
false;public;0;4;;@Test public void testRespectHeaderNamesUpperCase() throws Exception {     assertRespondsWith("Cheese", "bar", "<hello>bar</hello>"). }
false;public;0;4;;@Test public void testRespectHeaderNamesCamelCase() throws Exception {     assertRespondsWith("CorrelationID", "bar", "<hello>bar</hello>"). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     in.setHeader(FreemarkerConstants.FREEMARKER_TEMPLATE, "<hello>${headers." + headerName + "}</hello>").     in.setHeader(headerName, headerValue). }
false;protected;3;23;;protected void assertRespondsWith(final String headerName, final String headerValue, String expectedBody) throws InvalidPayloadException {     Exchange response = template.request("direct:a", new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             in.setHeader(FreemarkerConstants.FREEMARKER_TEMPLATE, "<hello>${headers." + headerName + "}</hello>").             in.setHeader(headerName, headerValue).         }     }).     assertOutMessageBodyEquals(response, expectedBody).     Object template = response.getOut().getHeader(FreemarkerConstants.FREEMARKER_TEMPLATE).     assertNull("Template header should have been removed", template).     Set<Entry<String, Object>> entrySet = response.getOut().getHeaders().entrySet().     boolean keyFound = false.     for (Entry<String, Object> entry : entrySet) {         if (entry.getKey().equals(headerName)) {             keyFound = true.         }     }     assertTrue("Header should been found", keyFound). }
false;public;0;3;;public void configure() {     from("direct:a").to("freemarker://dummy"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:a").to("freemarker://dummy").         }     }. }
