commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testSendingApple() throws Exception {     assertRespondsWith("apple", "I am an apple"). }
false;public;0;4;;@Test public void testSendingOrgane() throws Exception {     assertRespondsWith("orange", "I am an orange"). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     in.setBody(value). }
false;protected;2;14;;protected void assertRespondsWith(final String value, String expectedBody) throws InvalidPayloadException, InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     // mock.expectedHeaderReceived("fruit", value).     mock.expectedBodiesReceived(expectedBody).     template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             in.setBody(value).         }     }).     mock.assertIsSatisfied(). }
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/freemarker/camel-context.xml"). }
