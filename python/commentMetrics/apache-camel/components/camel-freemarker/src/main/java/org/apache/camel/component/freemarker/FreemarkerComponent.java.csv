commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;31;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // should we use regular configuration or no cache (content cache is default true)     Configuration config.     String encoding = getAndRemoveParameter(parameters, "encoding", String.class).     boolean cache = getAndRemoveParameter(parameters, "contentCache", Boolean.class, Boolean.TRUE).     int templateUpdateDelay = getAndRemoveParameter(parameters, "templateUpdateDelay", Integer.class, 0).     if (cache) {         config = getConfiguration().         if (templateUpdateDelay > 0) {             config.setTemplateUpdateDelay(templateUpdateDelay).         }     } else {         config = getNoCacheConfiguration().     }     FreemarkerEndpoint endpoint = new FreemarkerEndpoint(uri, this, remaining).     if (ObjectHelper.isNotEmpty(encoding)) {         endpoint.setEncoding(encoding).     }     endpoint.setContentCache(cache).     endpoint.setConfiguration(config).     endpoint.setTemplateUpdateDelay(templateUpdateDelay).     // if its a http resource then append any remaining parameters and update the resource uri     if (ResourceHelper.isHttpUri(remaining)) {         remaining = ResourceHelper.appendParameters(remaining, parameters).         endpoint.setResourceUri(remaining).     }     return endpoint. }
false;protected;1;10;;@Override protected URL getURL(String name) {     try {         return ResourceHelper.resolveMandatoryResourceAsUrl(getCamelContext().getClassResolver(), name).     } catch (Exception e) {         // so we should return null to signal the resource could not be found         return null.     } }
false;public,synchronized;0;18;;public synchronized Configuration getConfiguration() {     if (configuration == null) {         configuration = new Configuration().         configuration.setTemplateLoader(new URLTemplateLoader() {              @Override             protected URL getURL(String name) {                 try {                     return ResourceHelper.resolveMandatoryResourceAsUrl(getCamelContext().getClassResolver(), name).                 } catch (Exception e) {                     // so we should return null to signal the resource could not be found                     return null.                 }             }         }).     }     return (Configuration) configuration.clone(). }
true;public;1;3;/**  * To use an existing {@link freemarker.template.Configuration} instance as the configuration.  */ ;/**  * To use an existing {@link freemarker.template.Configuration} instance as the configuration.  */ public void setConfiguration(Configuration configuration) {     this.configuration = configuration. }
false;private,synchronized;0;9;;private synchronized Configuration getNoCacheConfiguration() {     if (noCacheConfiguration == null) {         // create a clone of the regular configuration         noCacheConfiguration = (Configuration) getConfiguration().clone().         // set this one to not use cache         noCacheConfiguration.setCacheStorage(new NullCacheStorage()).     }     return noCacheConfiguration. }
