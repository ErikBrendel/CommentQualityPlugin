commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public ExchangePattern getExchangePattern() {     return ExchangePattern.InOut. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "freemarker:" + getResourceUri(). }
true;public;1;3;/**  * Sets the encoding to be used for loading the template file.  */ ;/**  * Sets the encoding to be used for loading the template file.  */ public void setEncoding(String encoding) {     this.encoding = encoding. }
false;public;0;3;;public String getEncoding() {     return encoding. }
false;public;0;3;;public int getTemplateUpdateDelay() {     return templateUpdateDelay. }
true;public;1;3;/**  * Number of seconds the loaded template resource will remain in the cache.  */ ;/**  * Number of seconds the loaded template resource will remain in the cache.  */ public void setTemplateUpdateDelay(int templateUpdateDelay) {     this.templateUpdateDelay = templateUpdateDelay. }
false;public;0;3;;public Configuration getConfiguration() {     return configuration. }
true;public;1;3;/**  * Sets the Freemarker configuration to use  */ ;/**  * Sets the Freemarker configuration to use  */ public void setConfiguration(Configuration configuration) {     this.configuration = configuration. }
false;public;2;5;;public FreemarkerEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {     String newUri = uri.replace(getResourceUri(), newResourceUri).     log.debug("Getting endpoint with URI: {}", newUri).     return getCamelContext().getEndpoint(newUri, FreemarkerEndpoint.class). }
false;public;0;4;;@Override public void clearContentCache() {     configuration.clearTemplateCache(). }
false;protected;1;52;;@Override protected void onExchange(Exchange exchange) throws Exception {     String path = getResourceUri().     ObjectHelper.notNull(configuration, "configuration").     ObjectHelper.notNull(path, "resourceUri").     String newResourceUri = exchange.getIn().getHeader(FreemarkerConstants.FREEMARKER_RESOURCE_URI, String.class).     if (newResourceUri != null) {         exchange.getIn().removeHeader(FreemarkerConstants.FREEMARKER_RESOURCE_URI).         log.debug("{} set to {} creating new endpoint to handle exchange", FreemarkerConstants.FREEMARKER_RESOURCE_URI, newResourceUri).         FreemarkerEndpoint newEndpoint = findOrCreateEndpoint(getEndpointUri(), newResourceUri).         newEndpoint.onExchange(exchange).         return.     }     Reader reader = null.     String content = exchange.getIn().getHeader(FreemarkerConstants.FREEMARKER_TEMPLATE, String.class).     if (content != null) {         // use content from header         reader = new StringReader(content).         // remove the header to avoid it being propagated in the routing         exchange.getIn().removeHeader(FreemarkerConstants.FREEMARKER_TEMPLATE).     }     Object dataModel = exchange.getIn().getHeader(FreemarkerConstants.FREEMARKER_DATA_MODEL, Object.class).     if (dataModel == null) {         dataModel = ExchangeHelper.createVariableMap(exchange).     }     // let freemarker parse and generate the result in buffer     Template template.     if (reader != null) {         log.debug("Freemarker is evaluating template read from header {} using context: {}", FreemarkerConstants.FREEMARKER_TEMPLATE, dataModel).         template = new Template("temp", reader, new Configuration()).     } else {         log.debug("Freemarker is evaluating {} using context: {}", path, dataModel).         if (getEncoding() != null) {             template = configuration.getTemplate(path, getEncoding()).         } else {             template = configuration.getTemplate(path).         }     }     StringWriter buffer = new StringWriter().     template.process(dataModel, buffer).     buffer.flush().     // now lets output the results to the exchange     Message out = exchange.getOut().     out.setBody(buffer.toString()).     out.setHeaders(exchange.getIn().getHeaders()).     out.setAttachments(exchange.getIn().getAttachments()). }
