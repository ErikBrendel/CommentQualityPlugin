commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;14;;public static <K, V> JCacheManager<K, V> createManager(JCacheConfiguration configuration) {     if (isOSGi()) {         try {             Class<?> type = Class.forName("org.apache.camel.component.jcache.osgi.OSGiCacheManager").             Constructor<?> ctor = type.getConstructor(JCacheConfiguration.class).             return (JCacheManager<K, V>) ctor.newInstance(configuration).         } catch (Exception e) {             throw new RuntimeCamelException(e).         }     }     return new JCacheManager<>(configuration). }
false;public,static;3;18;;@SuppressWarnings("unchecked") public static <T> T tcclProxy(final T instance, Class<T> type, final ClassLoader classLoader) {     return (T) Proxy.newProxyInstance(JCacheHelper.class.getClassLoader(), new Class<?>[] { type }, (Object proxy, Method method, Object[] args) -> {         final ClassLoader tccl = Thread.currentThread().getContextClassLoader().         try {             Thread.currentThread().setContextClassLoader(classLoader).             return method.invoke(instance, args).         } finally {             Thread.currentThread().setContextClassLoader(tccl).         }     }). }
false;public,static;0;17;;public static boolean isOSGi() {     try {         // Check if we are in an osgi container         Class<?> fu = Class.forName("org.osgi.framework.FrameworkUtil").         if (fu != null) {             Method method = fu.getMethod("getBundle", Class.class).             if (method != null) {                 return method.invoke(null, JCacheHelper.class) != null.             }         }     } catch (ClassNotFoundException e) {     } catch (Exception e) {         throw new RuntimeCamelException(e).     }     return false. }
