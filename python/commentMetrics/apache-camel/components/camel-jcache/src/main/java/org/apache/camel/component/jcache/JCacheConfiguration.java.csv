commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelContext getCamelContext() {     return this.camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public String getCacheName() {     return this.cacheName. }
false;public;1;3;;public void setCacheName(String cacheName) {     this.cacheName = cacheName. }
false;public;0;5;;public ClassLoader getApplicationContextClassLoader() {     return this.camelContext != null ? this.camelContext.getApplicationContextClassLoader() : null. }
true;public;0;3;/**  * The fully qualified class name of the {@link javax.cache.spi.CachingProvider}  */ ;/**  * The fully qualified class name of the {@link javax.cache.spi.CachingProvider}  */ public String getCachingProvider() {     return cachingProvider. }
false;public;1;3;;public void setCachingProvider(String cachingProvider) {     this.cachingProvider = cachingProvider. }
true;public;0;3;/**  * A {@link Configuration} for the {@link Cache}  */ ;/**  * A {@link Configuration} for the {@link Cache}  */ public Configuration getCacheConfiguration() {     return cacheConfiguration. }
false;public;1;3;;public void setCacheConfiguration(Configuration cacheConfiguration) {     this.cacheConfiguration = cacheConfiguration. }
true;public;0;3;/**  * The {@link Properties} for the {@link javax.cache.spi.CachingProvider} to  * create the {@link CacheManager}  */ ;/**  * The {@link Properties} for the {@link javax.cache.spi.CachingProvider} to  * create the {@link CacheManager}  */ public Properties getCacheConfigurationProperties() {     return cacheConfigurationProperties. }
false;public;1;3;;public void setCacheConfigurationProperties(Properties cacheConfigurationProperties) {     this.cacheConfigurationProperties = cacheConfigurationProperties. }
true;public;0;3;/**  * An implementation specific URI for the {@link CacheManager}  */ ;/**  * An implementation specific URI for the {@link CacheManager}  */ public String getConfigurationUri() {     return configurationUri. }
false;public;1;3;;public void setConfigurationUri(String configurationUri) {     this.configurationUri = configurationUri. }
true;public;0;3;/**  * The {@link CacheLoader} factory  */ ;/**  * The {@link CacheLoader} factory  */ public Factory<CacheLoader> getCacheLoaderFactory() {     return cacheLoaderFactory. }
false;public;1;3;;public void setCacheLoaderFactory(Factory<CacheLoader> cacheLoaderFactory) {     this.cacheLoaderFactory = cacheLoaderFactory. }
true;public;0;3;/**  * The {@link CacheWriter} factory  */ ;/**  * The {@link CacheWriter} factory  */ public Factory<CacheWriter> getCacheWriterFactory() {     return cacheWriterFactory. }
false;public;1;3;;public void setCacheWriterFactory(Factory<CacheWriter> cacheWriterFactory) {     this.cacheWriterFactory = cacheWriterFactory. }
true;public;0;3;/**  * The {@link ExpiryPolicy} factory  */ ;/**  * The {@link ExpiryPolicy} factory  */ public Factory<ExpiryPolicy> getExpiryPolicyFactory() {     return expiryPolicyFactory. }
false;public;1;3;;public void setExpiryPolicyFactory(Factory<ExpiryPolicy> expiryPolicyFactory) {     this.expiryPolicyFactory = expiryPolicyFactory. }
true;public;0;3;/**  * If read-through caching should be used  */ ;/**  * If read-through caching should be used  */ public boolean isReadThrough() {     return readThrough. }
false;public;1;3;;public void setReadThrough(boolean readThrough) {     this.readThrough = readThrough. }
true;public;0;3;/**  * If write-through caching should be used  */ ;/**  * If write-through caching should be used  */ public boolean isWriteThrough() {     return writeThrough. }
false;public;1;3;;public void setWriteThrough(boolean writeThrough) {     this.writeThrough = writeThrough. }
true;public;0;3;/**  * If cache should use store-by-value or store-by-reference semantics  */ ;/**  * If cache should use store-by-value or store-by-reference semantics  */ public boolean isStoreByValue() {     return storeByValue. }
false;public;1;3;;public void setStoreByValue(boolean storeByValue) {     this.storeByValue = storeByValue. }
true;public;0;3;/**  * Whether statistics gathering is enabled  */ ;/**  * Whether statistics gathering is enabled  */ public boolean isStatisticsEnabled() {     return statisticsEnabled. }
false;public;1;3;;public void setStatisticsEnabled(boolean statisticsEnabled) {     this.statisticsEnabled = statisticsEnabled. }
true;public;0;3;/**  * Whether management gathering is enabled  */ ;/**  * Whether management gathering is enabled  */ public boolean isManagementEnabled() {     return managementEnabled. }
false;public;1;3;;public void setManagementEnabled(boolean managementEnabled) {     this.managementEnabled = managementEnabled. }
true;public;0;3;/**  * Events a consumer should filter. If using filteredEvents option, then eventFilters one will be ignored  */ ;/**  * Events a consumer should filter. If using filteredEvents option, then eventFilters one will be ignored  */ public List<EventType> getFilteredEvents() {     return filteredEvents. }
false;public;1;3;;public void setFilteredEvents(List<EventType> filteredEvents) {     this.filteredEvents = filteredEvents. }
false;public;1;7;;public void setFilteredEvents(String filteredEvents) {     this.filteredEvents = new ArrayList<>().     for (String event : filteredEvents.split(",")) {         this.filteredEvents.add(EventType.valueOf(event)).     } }
true;public;0;3;/**  * The CacheEntryEventFilter. If using eventFilters option, then filteredEvents one will be ignored  */ ;/**  * The CacheEntryEventFilter. If using eventFilters option, then filteredEvents one will be ignored  */ public List<CacheEntryEventFilter> getEventFilters() {     return eventFilters. }
false;public;1;3;;public void setEventFilters(List<CacheEntryEventFilter> eventFilters) {     this.eventFilters = new LinkedList<>(eventFilters). }
false;public;1;3;;public void setEventFilters(String eventFilter) {     this.eventFilters = EndpointHelper.resolveReferenceListParameter(camelContext, eventFilter, CacheEntryEventFilter.class). }
true;public;0;3;/**  * if the old value is required for events  */ ;/**  * if the old value is required for events  */ public boolean isOldValueRequired() {     return oldValueRequired. }
false;public;1;3;;public void setOldValueRequired(boolean oldValueRequired) {     this.oldValueRequired = oldValueRequired. }
true;public;0;3;/**  * if the event listener should block the thread causing the event  */ ;/**  * if the event listener should block the thread causing the event  */ public boolean isSynchronous() {     return synchronous. }
false;public;1;3;;public void setSynchronous(boolean synchronous) {     this.synchronous = synchronous. }
false;public;0;3;;public String getAction() {     return action. }
true;public;1;3;/**  * To configure using a cache operation by default. If an operation in the  * message header, then the operation from the header takes precedence.  */ ;/**  * To configure using a cache operation by default. If an operation in the  * message header, then the operation from the header takes precedence.  */ public void setAction(String action) {     this.action = action. }
false;public;0;3;;public boolean isCreateCacheIfNotExists() {     return createCacheIfNotExists. }
true;public;1;3;/**  * Configure if a cache need to be created if it does exist or can't be  * pre-configured.  */ ;/**  * Configure if a cache need to be created if it does exist or can't be  * pre-configured.  */ public void setCreateCacheIfNotExists(boolean createCacheIfNotExists) {     this.createCacheIfNotExists = createCacheIfNotExists. }
false;public;0;3;;public boolean isLookupProviders() {     return lookupProviders. }
true;public;1;3;/**  * Configure if a camel-cache should try to find implementations of jcache  * api in runtimes like OSGi.  */ ;/**  * Configure if a camel-cache should try to find implementations of jcache  * api in runtimes like OSGi.  */ public void setLookupProviders(boolean lookupProviders) {     this.lookupProviders = lookupProviders. }
