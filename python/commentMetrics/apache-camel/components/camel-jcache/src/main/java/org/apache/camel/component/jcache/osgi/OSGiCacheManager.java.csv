commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;1;22;;@Override public synchronized Cache<K, V> doGetCache(JCacheProvider provider) throws Exception {     final ClassLoader jcl = getClassLoader(provider.className()).     final ClassLoader tccl = Thread.currentThread().getContextClassLoader().     try {         if (jcl != null) {             Thread.currentThread().setContextClassLoader(jcl).         }         Cache<K, V> cache = super.doGetCache(provider).         if (provider == JCacheProviders.hazelcast && jcl != null) {             cache = JCacheHelper.tcclProxy(cache, Cache.class, jcl).         }         return cache.     } finally {         if (jcl != null) {             Thread.currentThread().setContextClassLoader(tccl).         }     } }
false;protected;1;8;;@Override protected Class<?> findClass(String name) throws ClassNotFoundException {     try {         return acl.loadClass(name).     } catch (ClassNotFoundException e) {         return bundle.loadClass(name).     } }
false;protected;1;8;;@Override protected URL findResource(String name) {     URL resource = acl.getResource(name).     if (resource == null) {         resource = bundle.getResource(name).     }     return resource. }
false;protected;1;8;;@Override protected Enumeration findResources(String name) throws IOException {     try {         return acl.getResources(name).     } catch (IOException e) {         return bundle.getResources(name).     } }
false;private;1;47;;private ClassLoader getClassLoader(String providerName) throws Exception {     if (providerName == null || !getConfiguration().isLookupProviders()) {         return null.     }     final BundleContext bc = FrameworkUtil.getBundle(JCacheHelper.class).getBundleContext().     final ClassLoader bcl = bc.getBundle().adapt(BundleWiring.class).getClassLoader().     final ClassLoader acl = getConfiguration().getApplicationContextClassLoader().     for (final Bundle bundle : bc.getBundles()) {         URL spi = bundle.getResource("META-INF/services/javax.cache.spi.CachingProvider").         if (spi != null) {             try (BufferedReader in = new BufferedReader(new InputStreamReader(spi.openStream()))) {                 if (ObjectHelper.equal(providerName, in.readLine())) {                     return new ClassLoader(bcl) {                          @Override                         protected Class<?> findClass(String name) throws ClassNotFoundException {                             try {                                 return acl.loadClass(name).                             } catch (ClassNotFoundException e) {                                 return bundle.loadClass(name).                             }                         }                          @Override                         protected URL findResource(String name) {                             URL resource = acl.getResource(name).                             if (resource == null) {                                 resource = bundle.getResource(name).                             }                             return resource.                         }                          @Override                         protected Enumeration findResources(String name) throws IOException {                             try {                                 return acl.getResources(name).                             } catch (IOException e) {                                 return bundle.getResources(name).                             }                         }                     }.                 }             }         }     }     return null. }
