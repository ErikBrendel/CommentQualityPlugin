commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public void done(boolean doneSync) {     try {         if (!exchange.isFailed()) {             // Save body in cache after successfully executing the route             Object value = exchange.getMessage().getBody().             if (value != null) {                 LOG.debug("Saving in cache - key:{}, value:{}, exchange:{}", key, value, exchange.getExchangeId()).                 cache.put(key, value).             }         }     } catch (Exception ex) {         // Log exception, but a problem with caching should not fail the exchange         LOG.error("Error storing in cache. - key:{}, exchange:{}", key, exchange.getExchangeId(), ex).     } finally {         callback.done(doneSync).     } }
false;public;2;62;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     LOG.debug("JCachePolicy process started - cache:{}, exchange:{}", cache.getName(), exchange.getExchangeId()).     // If cache is closed, just continue     if (cache.isClosed()) {         return super.process(exchange, callback).     }     try {         // Get key by the expression or use message body         Object key = keyExpression != null ? keyExpression.evaluate(exchange, Object.class) : exchange.getMessage().getBody().         if (key == null) {             return super.process(exchange, callback).         }         // Check if cache contains the key         Object value = cache.get(key).         if (value != null) {             // use the cached object in the Exchange without calling the rest of the route             LOG.debug("Cached object is found, skipping the route - key:{}, exchange:{}", key, exchange.getExchangeId()).             exchange.getMessage().setBody(value).             callback.done(true).             return true.         }         // Not found in cache. Continue route.         LOG.debug("No cached object is found, continue route - key:{}, exchange:{}", key, exchange.getExchangeId()).         return super.process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 try {                     if (!exchange.isFailed()) {                         // Save body in cache after successfully executing the route                         Object value = exchange.getMessage().getBody().                         if (value != null) {                             LOG.debug("Saving in cache - key:{}, value:{}, exchange:{}", key, value, exchange.getExchangeId()).                             cache.put(key, value).                         }                     }                 } catch (Exception ex) {                     // Log exception, but a problem with caching should not fail the exchange                     LOG.error("Error storing in cache. - key:{}, exchange:{}", key, exchange.getExchangeId(), ex).                 } finally {                     callback.done(doneSync).                 }             }         }).     } catch (Exception e) {         exchange.setException(e).         callback.done(true).         return true.     } }
false;protected;0;8;;@Override protected void doStop() throws Exception {     // Clear cache if stopping.     if (!cache.isClosed()) {         cache.clear().     }     super.doStop(). }
false;public;0;3;;public Cache getCache() {     return cache. }
false;public;1;3;;public void setCache(Cache cache) {     this.cache = cache. }
false;public;0;3;;public Expression getKeyExpression() {     return keyExpression. }
false;public;1;3;;public void setKeyExpression(Expression keyExpression) {     this.keyExpression = keyExpression. }
