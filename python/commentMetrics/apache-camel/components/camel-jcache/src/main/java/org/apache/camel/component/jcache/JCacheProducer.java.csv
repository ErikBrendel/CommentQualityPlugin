commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public void process(Exchange exchange) throws Exception {     String actionName = exchange.getIn().getHeader(JCacheConstants.ACTION, String.class).     if (actionName == null) {         actionName = configuration.getAction().     }     StringHelper.notEmpty(actionName, JCacheConstants.ACTION).     Action action = Action.fromName(actionName).     if (action != null) {         Cache<Object, Object> cache = getJCacheEndpoint().getManager().getCache().         action.validate(cache, exchange).         action.execute(cache, exchange).     } else {         throw new IllegalArgumentException(String.format("The value '%s' is not allowed for parameter '%s'", actionName, JCacheConstants.ACTION)).     } }
false;protected;0;6;;@Override protected void doStart() throws Exception {     getCache().     super.doStart(). }
false;private;0;3;;private JCacheEndpoint getJCacheEndpoint() {     return (JCacheEndpoint) getEndpoint(). }
false;private;0;3;;private Cache getCache() throws Exception {     return getJCacheEndpoint().getManager().getCache(). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEY). }
false;;2;7;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     cache.put(exchange.getIn().getHeader(JCacheConstants.KEY), exchange.getIn().getBody()). }
false;;2;3;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception { }
false;;2;6;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     cache.putAll(exchange.getIn().getBody(Map.class)). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEY). }
false;;2;9;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     exchange.getIn().setHeader(JCacheConstants.RESULT, cache.putIfAbsent(exchange.getIn().getHeader(JCacheConstants.KEY), exchange.getIn().getBody())). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEY). }
false;;2;6;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     exchange.getIn().setBody(cache.get(exchange.getIn().getHeader(JCacheConstants.KEY))). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEYS). }
false;;2;7;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     exchange.getIn().setBody(cache.getAll(exchange.getIn().getHeader(JCacheConstants.KEYS, Set.class))). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEY). }
false;;2;7;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     exchange.getIn().setBody(cache.getAndRemove(exchange.getIn().getHeader(JCacheConstants.KEY))). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEY). }
false;;2;8;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     exchange.getIn().setBody(cache.getAndReplace(exchange.getIn().getHeader(JCacheConstants.KEY), exchange.getIn().getBody())). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEY). }
false;;2;8;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     exchange.getIn().setBody(cache.getAndPut(exchange.getIn().getHeader(JCacheConstants.KEY), exchange.getIn().getBody())). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEY). }
false;;2;16;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     Object oldValue = exchange.getIn().getHeader(JCacheConstants.OLD_VALUE).     exchange.getIn().setHeader(JCacheConstants.RESULT, oldValue != null ? cache.replace(exchange.getIn().getHeader(JCacheConstants.KEY), oldValue, exchange.getIn().getBody()) : cache.replace(exchange.getIn().getHeader(JCacheConstants.KEY), exchange.getIn().getBody())). }
false;;2;4;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.KEY). }
false;;2;14;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     Object oldValue = exchange.getIn().getHeader(JCacheConstants.OLD_VALUE).     exchange.getIn().setHeader(JCacheConstants.RESULT, oldValue != null ? cache.remove(exchange.getIn().getHeader(JCacheConstants.KEY), oldValue) : cache.remove(exchange.getIn().getHeader(JCacheConstants.KEY))). }
false;;2;3;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception { }
false;;2;10;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     Set<Object> keys = exchange.getIn().getHeader(JCacheConstants.KEYS, Set.class).     if (keys != null) {         cache.removeAll(keys).     } else {         cache.removeAll().     } }
false;;2;14;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception {     headerIsNotNull(exchange, JCacheConstants.ENTRY_PROCESSOR).     if (exchange.getIn().getHeader(JCacheConstants.KEYS) == null && exchange.getIn().getHeader(JCacheConstants.KEY) == null) {         throw new IllegalArgumentException(String.format("Either %s or %s must be set for action %s", JCacheConstants.KEYS, JCacheConstants.KEY, name())).     } }
false;;2;23;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     Message message = exchange.getIn().     Set<Object> keys = message.getHeader(JCacheConstants.KEYS, Set.class).     EntryProcessor<Object, Object, Object> entryProcessor = message.getHeader(JCacheConstants.ENTRY_PROCESSOR, EntryProcessor.class).     Collection<Object> arguments = message.getHeader(JCacheConstants.ARGUMENTS, Collection.class).     if (arguments == null) {         arguments = Collections.emptyList().     }     message.setBody(keys != null ? cache.invokeAll(keys, entryProcessor, arguments) : cache.invoke(exchange.getIn().getHeader(JCacheConstants.KEY), entryProcessor, arguments)). }
false;;2;3;;@Override void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception { }
false;;2;4;;@Override void execute(Cache<Object, Object> cache, Exchange exchange) {     cache.clear(). }
false;static;1;11;;static Action fromName(String name) {     if (ObjectHelper.isNotEmpty(name)) {         for (Action action : VALUES) {             if (action.name().equalsIgnoreCase(name)) {                 return action.             }         }     }     return null. }
false;;2;2;;void validate(Cache<Object, Object> cache, Exchange exchange) throws Exception { }
false;;2;2;;void execute(Cache<Object, Object> cache, Exchange exchange) { }
false;protected;2;9;;protected void headerIsNotNull(Exchange exchange, String... keys) throws Exception {     for (int i = keys.length - 1. i >= 0. i--) {         if (exchange.getIn().getHeader(keys[i]) == null) {             throw new IllegalArgumentException(String.format("Header %s must be set for action %s", keys[i], name())).         }     } }
