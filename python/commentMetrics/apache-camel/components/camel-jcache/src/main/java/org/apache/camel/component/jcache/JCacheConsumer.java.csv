commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected void doStart() throws Exception {     if (entryListenerConfiguration != null) {         getCache().deregisterCacheEntryListener(entryListenerConfiguration).     }     entryListenerConfiguration = createEntryListenerConfiguration().     getCache().registerCacheEntryListener(entryListenerConfiguration).     super.doStart(). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     if (entryListenerConfiguration != null) {         getCache().deregisterCacheEntryListener(entryListenerConfiguration).         entryListenerConfiguration = null.     }     super.doStop(). }
false;private;0;3;;private JCacheEndpoint getJCacheEndpoint() {     return (JCacheEndpoint) getEndpoint(). }
false;private;0;3;;private Cache getCache() throws Exception {     return getJCacheEndpoint().getManager().getCache(). }
false;protected;1;20;;@Override protected void onEvents(Iterable<CacheEntryEvent<?, ?>> events) {     for (CacheEntryEvent<?, ?> event : events) {         Exchange exchange = getEndpoint().createExchange().         Message message = exchange.getIn().         message.setHeader(JCacheConstants.EVENT_TYPE, event.getEventType().name()).         message.setHeader(JCacheConstants.KEY, event.getKey()).         message.setBody(event.getValue()).         if (event.isOldValueAvailable()) {             message.setHeader(JCacheConstants.OLD_VALUE, event.getOldValue()).         }         try {             getProcessor().process(exchange).         } catch (Exception e) {             LOGGER.error("Error processing event ", e).         }     } }
false;public;0;25;;@Override public CacheEntryListener<Object, Object> create() {     return new JCacheEntryEventListener() {          @Override         protected void onEvents(Iterable<CacheEntryEvent<?, ?>> events) {             for (CacheEntryEvent<?, ?> event : events) {                 Exchange exchange = getEndpoint().createExchange().                 Message message = exchange.getIn().                 message.setHeader(JCacheConstants.EVENT_TYPE, event.getEventType().name()).                 message.setHeader(JCacheConstants.KEY, event.getKey()).                 message.setBody(event.getValue()).                 if (event.isOldValueAvailable()) {                     message.setHeader(JCacheConstants.OLD_VALUE, event.getOldValue()).                 }                 try {                     getProcessor().process(exchange).                 } catch (Exception e) {                     LOGGER.error("Error processing event ", e).                 }             }         }     }. }
false;public;0;4;;@Override public CacheEntryEventFilter<Object, Object> create() {     return getJCacheEndpoint().getManager().getEventFilter(). }
false;private;0;39;;private CacheEntryListenerConfiguration<Object, Object> createEntryListenerConfiguration() {     return new MutableCacheEntryListenerConfiguration<>(new Factory<CacheEntryListener<Object, Object>>() {          @Override         public CacheEntryListener<Object, Object> create() {             return new JCacheEntryEventListener() {                  @Override                 protected void onEvents(Iterable<CacheEntryEvent<?, ?>> events) {                     for (CacheEntryEvent<?, ?> event : events) {                         Exchange exchange = getEndpoint().createExchange().                         Message message = exchange.getIn().                         message.setHeader(JCacheConstants.EVENT_TYPE, event.getEventType().name()).                         message.setHeader(JCacheConstants.KEY, event.getKey()).                         message.setBody(event.getValue()).                         if (event.isOldValueAvailable()) {                             message.setHeader(JCacheConstants.OLD_VALUE, event.getOldValue()).                         }                         try {                             getProcessor().process(exchange).                         } catch (Exception e) {                             LOGGER.error("Error processing event ", e).                         }                     }                 }             }.         }     }, new Factory<CacheEntryEventFilter<Object, Object>>() {          @Override         public CacheEntryEventFilter<Object, Object> create() {             return getJCacheEndpoint().getManager().getEventFilter().         }     }, getJCacheEndpoint().getManager().getConfiguration().isOldValueRequired(), getJCacheEndpoint().getManager().getConfiguration().isSynchronous()). }
