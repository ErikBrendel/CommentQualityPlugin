commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public JCacheConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(JCacheConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public String getCacheName() {     return configuration.getCacheName(). }
false;public;1;3;;public void setCacheName(String cacheName) {     configuration.setCacheName(cacheName). }
false;public;0;3;;public Cache<String, DefaultExchangeHolder> getCache() {     return cache. }
false;public;1;3;;public void setCache(Cache<String, DefaultExchangeHolder> cache) {     this.cache = cache. }
false;public;0;3;;public boolean isOptimistic() {     return optimistic. }
false;public;1;3;;public void setOptimistic(boolean optimistic) {     this.optimistic = optimistic. }
false;public;0;3;;public boolean isAllowSerializedHeaders() {     return allowSerializedHeaders. }
false;public;1;3;;public void setAllowSerializedHeaders(boolean allowSerializedHeaders) {     this.allowSerializedHeaders = allowSerializedHeaders. }
false;public;4;29;;@Override public Exchange add(CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange) throws OptimisticLockingException {     if (!optimistic) {         throw new UnsupportedOperationException().     }     log.trace("Adding an Exchange with ID {} for key {} in an optimistic manner.", newExchange.getExchangeId(), key).     if (oldExchange == null) {         DefaultExchangeHolder newHolder = DefaultExchangeHolder.marshal(newExchange, true, allowSerializedHeaders).         DefaultExchangeHolder oldHolder = cache.getAndPut(key, newHolder).         if (oldHolder != null) {             Exchange exchange = unmarshallExchange(camelContext, oldHolder).             log.error("Optimistic locking failed for exchange with key {}: IMap#putIfAbsend returned Exchange with ID {}, while it's expected no exchanges to be returned", key, exchange != null ? exchange.getExchangeId() : "<null>").             throw new OptimisticLockingException().         }     } else {         DefaultExchangeHolder oldHolder = DefaultExchangeHolder.marshal(oldExchange, true, allowSerializedHeaders).         DefaultExchangeHolder newHolder = DefaultExchangeHolder.marshal(newExchange, true, allowSerializedHeaders).         if (!cache.replace(key, oldHolder, newHolder)) {             log.error("Optimistic locking failed for exchange with key {}: IMap#replace returned no Exchanges, while it's expected to replace one", key).             throw new OptimisticLockingException().         }     }     log.trace("Added an Exchange with ID {} for key {} in optimistic manner.", newExchange.getExchangeId(), key).     return oldExchange. }
false;public;3;10;;@Override public Exchange add(CamelContext camelContext, String key, Exchange exchange) {     if (optimistic) {         throw new UnsupportedOperationException().     }     log.trace("Adding an Exchange with ID {} for key {} in a thread-safe manner.", exchange.getExchangeId(), key).     DefaultExchangeHolder newHolder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders).     DefaultExchangeHolder oldHolder = cache.getAndPut(key, newHolder).     return unmarshallExchange(camelContext, oldHolder). }
false;public;2;4;;@Override public Exchange get(CamelContext camelContext, String key) {     return unmarshallExchange(camelContext, cache.get(key)). }
false;public;3;14;;@Override public void remove(CamelContext camelContext, String key, Exchange exchange) {     DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange, true, allowSerializedHeaders).     if (optimistic) {         log.trace("Removing an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key).         if (!cache.remove(key, holder)) {             log.error("Optimistic locking failed for exchange with key {}: IMap#remove removed no Exchanges, while it's expected to remove one.", key).             throw new OptimisticLockingException().         }         log.trace("Removed an exchange with ID {} for key {} in an optimistic manner.", exchange.getExchangeId(), key).     } else {         cache.remove(key).     } }
false;public;2;4;;@Override public void confirm(CamelContext camelContext, String exchangeId) {     log.trace("Confirming an exchange with ID {}.", exchangeId). }
false;public;0;11;;@Override public Set<String> getKeys() {     Set<String> keys = new HashSet<>().     Iterator<Cache.Entry<String, DefaultExchangeHolder>> entries = cache.iterator().     while (entries.hasNext()) {         keys.add(entries.next().getKey()).     }     return Collections.unmodifiableSet(keys). }
false;protected;0;12;;@Override protected void doStart() throws Exception {     if (cache != null) {         cacheManager = new JCacheManager<>(cache).     } else {         cacheManager = JCacheHelper.createManager(ObjectHelper.notNull(configuration, "configuration")).         cache = cacheManager.getCache().     } }
false;protected;0;4;;@Override protected void doStop() throws Exception {     cacheManager.close(). }
false;protected;2;8;;protected Exchange unmarshallExchange(CamelContext camelContext, DefaultExchangeHolder holder) {     Exchange exchange = null.     if (holder != null) {         exchange = new DefaultExchange(camelContext).         DefaultExchangeHolder.unmarshal(exchange, holder).     }     return exchange. }
