commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Test public void testProducers() throws Exception {     for (String name : noArgNames) {         MockEndpoint mock = getMockEndpoint("mock:result" + name).         mock.expectedMinimumMessageCount(1).         template().sendBody("direct://test" + name, null).         // with user id         if (!idExcludes.contains(name)) {             mock = getMockEndpoint("mock:resultId" + name).             mock.expectedMinimumMessageCount(1).             template().sendBody("direct://testId" + name, null).         }         // with reading         if (!readingExcludes.contains(name)) {             mock = getMockEndpoint("mock:resultReading" + name).             mock.expectedMinimumMessageCount(1).             template().sendBody("direct://testReading" + name, null).         }         // with user id and reading         if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {             mock = getMockEndpoint("mock:resultIdReading" + name).             mock.expectedMinimumMessageCount(1).             template().sendBody("direct://testIdReading" + name, null).         }         // with user id and reading         if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {             mock = getMockEndpoint("mock:resultIdReadingHeader" + name).             mock.expectedMinimumMessageCount(1).             template().sendBody("direct://testIdReadingHeader" + name, null).         }     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Test public void testJsonStoreEnabled() throws Exception {     final String rawJSON = template().requestBody("direct://testJsonStoreEnabled", new String[] { "me" }, String.class).     assertNotNull("NULL rawJSON", rawJSON).     assertFalse("Empty rawJSON", rawJSON.isEmpty()). }
false;public;0;54;;public void configure() {     // Deprecated exceptions are ignored in the tests since this depends on the     // configuration and/or creation date of the Facebook application.     onException(FacebookException.class).setHandledPolicy(new IgnoreDeprecatedExceptions()).     // generate test routes for all methods with no args     for (String name : noArgNames) {         from("direct://test" + name).setHeader("mock", constant("mock:result" + name)).to("facebook://" + name + "?" + getOauthParams()).to("mock:result" + name).         // with user id         if (!idExcludes.contains(name)) {             from("direct://testId" + name).setHeader("mock", constant("mock:resultId" + name)).to("facebook://" + name + "?userId=me&" + getOauthParams()).to("mock:resultId" + name).         }         // reading options         if (!readingExcludes.contains(name)) {             from("direct://testReading" + name).setHeader("mock", constant("mock:resultReading" + name)).to("facebook://" + name + "?reading.limit=10&reading.locale=en,US&" + getOauthParams()).to("mock:resultReading" + name).         }         // with id and reading options         if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {             from("direct://testIdReading" + name).setHeader("mock", constant("mock:resultIdReading" + name)).to("facebook://" + name + "?userId=me&reading.limit=10&reading.locale=en,US&" + getOauthParams()).to("mock:resultIdReading" + name).         }         // with id and reading options         if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {             from("direct://testIdReadingHeader" + name).setHeader("mock", constant("mock:resultIdReadingHeader" + name)).setHeader("CamelFacebook.reading.limit", constant("10")).to("facebook://" + name + "?userId=me&reading.locale=en,US&" + getOauthParams()).to("mock:resultIdReadingHeader" + name).         }     }     from("direct://testJsonStoreEnabled").to("facebook://users?inBody=ids&jsonStoreEnabled=true&" + getOauthParams()).setBody(simple("header." + FacebookConstants.RAW_JSON_HEADER)). // TODO add tests for the rest of the supported methods }
false;protected;0;59;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // Deprecated exceptions are ignored in the tests since this depends on the             // configuration and/or creation date of the Facebook application.             onException(FacebookException.class).setHandledPolicy(new IgnoreDeprecatedExceptions()).             // generate test routes for all methods with no args             for (String name : noArgNames) {                 from("direct://test" + name).setHeader("mock", constant("mock:result" + name)).to("facebook://" + name + "?" + getOauthParams()).to("mock:result" + name).                 // with user id                 if (!idExcludes.contains(name)) {                     from("direct://testId" + name).setHeader("mock", constant("mock:resultId" + name)).to("facebook://" + name + "?userId=me&" + getOauthParams()).to("mock:resultId" + name).                 }                 // reading options                 if (!readingExcludes.contains(name)) {                     from("direct://testReading" + name).setHeader("mock", constant("mock:resultReading" + name)).to("facebook://" + name + "?reading.limit=10&reading.locale=en,US&" + getOauthParams()).to("mock:resultReading" + name).                 }                 // with id and reading options                 if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {                     from("direct://testIdReading" + name).setHeader("mock", constant("mock:resultIdReading" + name)).to("facebook://" + name + "?userId=me&reading.limit=10&reading.locale=en,US&" + getOauthParams()).to("mock:resultIdReading" + name).                 }                 // with id and reading options                 if (!(idExcludes.contains(name) || readingExcludes.contains(name))) {                     from("direct://testIdReadingHeader" + name).setHeader("mock", constant("mock:resultIdReadingHeader" + name)).setHeader("CamelFacebook.reading.limit", constant("10")).to("facebook://" + name + "?userId=me&reading.locale=en,US&" + getOauthParams()).to("mock:resultIdReadingHeader" + name).                 }             }             from("direct://testJsonStoreEnabled").to("facebook://users?inBody=ids&jsonStoreEnabled=true&" + getOauthParams()).setBody(simple("header." + FacebookConstants.RAW_JSON_HEADER)).         // TODO add tests for the rest of the supported methods         }     }. }
false;public;1;15;;@Override public boolean matches(Exchange exchange) {     RuntimeCamelException camelException = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, RuntimeCamelException.class).     if (camelException != null && camelException.getCause() != null && camelException.getCause() instanceof FacebookException) {         FacebookException facebookException = (FacebookException) camelException.getCause().         if (facebookException.getErrorCode() == 11 || facebookException.getErrorCode() == 12) {             getMockEndpoint(exchange.getIn().getHeader("mock", String.class)).expectedMinimumMessageCount(0).             return true.         }     }     return false. }
