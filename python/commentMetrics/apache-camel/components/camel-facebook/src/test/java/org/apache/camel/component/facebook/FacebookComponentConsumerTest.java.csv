commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testConsumers() throws InterruptedException {     for (String name : searchNames) {         MockEndpoint mock.         if (!excludedNames.contains(name)) {             mock = getMockEndpoint("mock:consumeResult" + name).             mock.expectedMinimumMessageCount(1).         }         mock = getMockEndpoint("mock:consumeQueryResult" + name).         mock.expectedMinimumMessageCount(1).     }     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testJsonStoreEnabled() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:testJsonStoreEnabled").     mock.expectedMinimumMessageCount(1).     mock.assertIsSatisfied().     final String rawJSON = mock.getExchanges().get(0).getIn().getHeader(FacebookConstants.RAW_JSON_HEADER, String.class).     assertNotNull("Null rawJSON", rawJSON).     assertFalse("Empty rawJSON", rawJSON.isEmpty()). }
false;public;0;6;;@Test public void testPage() throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:testPage").     mock.expectedMinimumMessageCount(1).     mock.assertIsSatisfied(). }
false;protected;0;4;;@Override protected void doPostSetup() throws Exception {     ignoreDeprecatedApiError(). }
false;public;4;16;;@Override public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {     if (e.getCause() instanceof FacebookException) {         FacebookException facebookException = (FacebookException) e.getCause().         if (facebookException.getErrorCode() == 11 || facebookException.getErrorCode() == 12 || facebookException.getErrorCode() == 1) {             context().getRouteController().stopRoute(route.getId()).             String method = ((FacebookEndpoint) route.getEndpoint()).getMethod().             MockEndpoint mock = getMockEndpoint("mock:consumeQueryResult" + method).             mock.expectedMinimumMessageCount(0).             MockEndpoint mock2 = getMockEndpoint("mock:consumeResult" + method).             mock2.expectedMinimumMessageCount(0).             log.warn("Ignoring failed Facebook deprecated API call", facebookException).         }     }     return super.rollback(consumer, endpoint, retryCounter, e). }
false;private;0;22;;private void ignoreDeprecatedApiError() {     for (final Route route : context().getRoutes()) {         ((ScheduledPollConsumer) route.getConsumer()).setPollStrategy(new DefaultPollingConsumerPollStrategy() {              @Override             public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {                 if (e.getCause() instanceof FacebookException) {                     FacebookException facebookException = (FacebookException) e.getCause().                     if (facebookException.getErrorCode() == 11 || facebookException.getErrorCode() == 12 || facebookException.getErrorCode() == 1) {                         context().getRouteController().stopRoute(route.getId()).                         String method = ((FacebookEndpoint) route.getEndpoint()).getMethod().                         MockEndpoint mock = getMockEndpoint("mock:consumeQueryResult" + method).                         mock.expectedMinimumMessageCount(0).                         MockEndpoint mock2 = getMockEndpoint("mock:consumeResult" + method).                         mock2.expectedMinimumMessageCount(0).                         log.warn("Ignoring failed Facebook deprecated API call", facebookException).                     }                 }                 return super.rollback(consumer, endpoint, retryCounter, e).             }         }).     } }
false;public;0;30;;public void configure() throws Exception {     // start with a 30 day window for the first delayed poll     String since = "RAW(" + new SimpleDateFormat(FacebookConstants.FACEBOOK_DATE_FORMAT).format(new Date(System.currentTimeMillis() - TimeUnit.MILLISECONDS.convert(30, TimeUnit.DAYS))) + ")".     for (String name : searchNames) {         if (!excludedNames.contains(name)) {             // consumer.sendEmptyMessageWhenIdle is true since user may not have some items like events             from("facebook://" + name + "?reading.limit=10&reading.locale=en.US&reading.since=" + since + "&consumer.initialDelay=1000&consumer.sendEmptyMessageWhenIdle=true&" + getOauthParams()).to("mock:consumeResult" + name).         }         from("facebook://" + name + "?query=cheese&reading.limit=10&reading.locale=en.US&reading.since=" + since + "&consumer.initialDelay=1000&" + getOauthParams()).to("mock:consumeQueryResult" + name).     }     from("facebook://me?jsonStoreEnabled=true&" + getOauthParams()).to("mock:testJsonStoreEnabled").     // test unix timestamp support     long unixSince = TimeUnit.SECONDS.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS) - TimeUnit.SECONDS.convert(30, TimeUnit.DAYS).     from("facebook://page?pageId=" + APACHE_FOUNDATION_PAGE_ID + "&reading.limit=10&reading.since=" + unixSince + "&" + getOauthParams()).to("mock:testPage"). // TODO add tests for the rest of the supported methods }
false;protected;0;35;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // start with a 30 day window for the first delayed poll             String since = "RAW(" + new SimpleDateFormat(FacebookConstants.FACEBOOK_DATE_FORMAT).format(new Date(System.currentTimeMillis() - TimeUnit.MILLISECONDS.convert(30, TimeUnit.DAYS))) + ")".             for (String name : searchNames) {                 if (!excludedNames.contains(name)) {                     // consumer.sendEmptyMessageWhenIdle is true since user may not have some items like events                     from("facebook://" + name + "?reading.limit=10&reading.locale=en.US&reading.since=" + since + "&consumer.initialDelay=1000&consumer.sendEmptyMessageWhenIdle=true&" + getOauthParams()).to("mock:consumeResult" + name).                 }                 from("facebook://" + name + "?query=cheese&reading.limit=10&reading.locale=en.US&reading.since=" + since + "&consumer.initialDelay=1000&" + getOauthParams()).to("mock:consumeQueryResult" + name).             }             from("facebook://me?jsonStoreEnabled=true&" + getOauthParams()).to("mock:testJsonStoreEnabled").             // test unix timestamp support             long unixSince = TimeUnit.SECONDS.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS) - TimeUnit.SECONDS.convert(30, TimeUnit.DAYS).             from("facebook://page?pageId=" + APACHE_FOUNDATION_PAGE_ID + "&reading.limit=10&reading.since=" + unixSince + "&" + getOauthParams()).to("mock:testPage").         // TODO add tests for the rest of the supported methods         }     }. }
