# id;timestamp;commentText;codeText;commentWords;codeWords
ReadingBuilder -> public static void setProperties(Reading reading, Map<String, Object> readingProperties);1378019315;Sets Reading properties._@param reading Reading object to populate_@param readingProperties Map to extract properties;public static void setProperties(Reading reading, Map<String, Object> readingProperties) {__        final String fields = (String) readingProperties.remove("fields")__        if (fields != null) {_            reading.fields(fields.toString().split(","))__        }_        final Object limit = readingProperties.remove("limit")__        if (limit != null) {_            reading.limit(Integer.parseInt(limit.toString()))__        }_        final Object offset = readingProperties.remove("offset")__        if (offset != null) {_            reading.offset(Integer.parseInt(offset.toString()))__        }_        final SimpleDateFormat dateFormat = new SimpleDateFormat(FacebookConstants.FACEBOOK_DATE_FORMAT)__        final Object until = readingProperties.remove("until")__        if (until != null) {_            try {_                reading.until(dateFormat.parse(until.toString()))__            } catch (ParseException e) {_                throw new RuntimeException("Error parsing property 'until' :" + e.getMessage(), e)__            }_        }_        final Object since = readingProperties.remove("since")__        if (since != null) {_            try {_                reading.since(dateFormat.parse(since.toString()))__            } catch (ParseException e) {_                throw new RuntimeException("Error parsing property 'since' :" + e.getMessage(), e)__            }_        }_        final Object metadata = readingProperties.remove("metadata")__        if (metadata != null && Boolean.parseBoolean(metadata.toString())) {_            reading.metadata()__        }_        final Object locale = readingProperties.remove("locale")__        if (locale != null) {_            String[] args = locale.toString().split(",")__            switch (args.length) {_            case  1:_                reading.locale(new Locale(args[0]))__                break__            case  2:_                reading.locale(new Locale(args[0], args[1]))__                break__            case  3:_                reading.locale(new Locale(args[0], args[1], args[2]))__                break__            default:_                throw new IllegalArgumentException(String.format("Invalid value for property 'locale' %s, "_                    + "must be of the form [language][,country][,variant]", locale.toString()))__            }_        }_        final Object with = readingProperties.remove("with")__        if (with != null && Boolean.parseBoolean(with.toString())) {_            reading.withLocation()__        }_        final Object filter = readingProperties.remove("filter")__        if (filter != null) {_            reading.filter(filter.toString())__        }_    };sets,reading,properties,param,reading,reading,object,to,populate,param,reading,properties,map,to,extract,properties;public,static,void,set,properties,reading,reading,map,string,object,reading,properties,final,string,fields,string,reading,properties,remove,fields,if,fields,null,reading,fields,fields,to,string,split,final,object,limit,reading,properties,remove,limit,if,limit,null,reading,limit,integer,parse,int,limit,to,string,final,object,offset,reading,properties,remove,offset,if,offset,null,reading,offset,integer,parse,int,offset,to,string,final,simple,date,format,date,format,new,simple,date,format,facebook,constants,final,object,until,reading,properties,remove,until,if,until,null,try,reading,until,date,format,parse,until,to,string,catch,parse,exception,e,throw,new,runtime,exception,error,parsing,property,until,e,get,message,e,final,object,since,reading,properties,remove,since,if,since,null,try,reading,since,date,format,parse,since,to,string,catch,parse,exception,e,throw,new,runtime,exception,error,parsing,property,since,e,get,message,e,final,object,metadata,reading,properties,remove,metadata,if,metadata,null,boolean,parse,boolean,metadata,to,string,reading,metadata,final,object,locale,reading,properties,remove,locale,if,locale,null,string,args,locale,to,string,split,switch,args,length,case,1,reading,locale,new,locale,args,0,break,case,2,reading,locale,new,locale,args,0,args,1,break,case,3,reading,locale,new,locale,args,0,args,1,args,2,break,default,throw,new,illegal,argument,exception,string,format,invalid,value,for,property,locale,s,must,be,of,the,form,language,country,variant,locale,to,string,final,object,with,reading,properties,remove,with,if,with,null,boolean,parse,boolean,with,to,string,reading,with,location,final,object,filter,reading,properties,remove,filter,if,filter,null,reading,filter,filter,to,string
ReadingBuilder -> public static void setProperties(Reading reading, Map<String, Object> readingProperties);1378021635;Sets Reading properties._@param reading Reading object to populate_@param readingProperties Map to extract properties;public static void setProperties(Reading reading, Map<String, Object> readingProperties) {__        final String fields = (String) readingProperties.remove("fields")__        if (fields != null) {_            reading.fields(fields.toString().split(","))__        }_        final Object limit = readingProperties.remove("limit")__        if (limit != null) {_            reading.limit(Integer.parseInt(limit.toString()))__        }_        final Object offset = readingProperties.remove("offset")__        if (offset != null) {_            reading.offset(Integer.parseInt(offset.toString()))__        }_        final SimpleDateFormat dateFormat = new SimpleDateFormat(FacebookConstants.FACEBOOK_DATE_FORMAT)__        final Object until = readingProperties.remove("until")__        if (until != null) {_            try {_                reading.until(dateFormat.parse(until.toString()))__            } catch (ParseException e) {_                throw new RuntimeException("Error parsing property 'until' :" + e.getMessage(), e)__            }_        }_        final Object since = readingProperties.remove("since")__        if (since != null) {_            try {_                reading.since(dateFormat.parse(since.toString()))__            } catch (ParseException e) {_                throw new RuntimeException("Error parsing property 'since' :" + e.getMessage(), e)__            }_        }_        final Object metadata = readingProperties.remove("metadata")__        if (metadata != null && Boolean.parseBoolean(metadata.toString())) {_            reading.metadata()__        }_        final Object locale = readingProperties.remove("locale")__        if (locale != null) {_            String[] args = locale.toString().split(",")__            switch (args.length) {_            case  1:_                reading.locale(new Locale(args[0]))__                break__            case  2:_                reading.locale(new Locale(args[0], args[1]))__                break__            case  3:_                reading.locale(new Locale(args[0], args[1], args[2]))__                break__            default:_                throw new IllegalArgumentException(String.format("Invalid value for property 'locale' %s, "_                    + "must be of the form [language][,country][,variant]", locale.toString()))__            }_        }_        final Object with = readingProperties.remove("with")__        if (with != null && Boolean.parseBoolean(with.toString())) {_            reading.withLocation()__        }_        final Object filter = readingProperties.remove("filter")__        if (filter != null) {_            reading.filter(filter.toString())__        }_    };sets,reading,properties,param,reading,reading,object,to,populate,param,reading,properties,map,to,extract,properties;public,static,void,set,properties,reading,reading,map,string,object,reading,properties,final,string,fields,string,reading,properties,remove,fields,if,fields,null,reading,fields,fields,to,string,split,final,object,limit,reading,properties,remove,limit,if,limit,null,reading,limit,integer,parse,int,limit,to,string,final,object,offset,reading,properties,remove,offset,if,offset,null,reading,offset,integer,parse,int,offset,to,string,final,simple,date,format,date,format,new,simple,date,format,facebook,constants,final,object,until,reading,properties,remove,until,if,until,null,try,reading,until,date,format,parse,until,to,string,catch,parse,exception,e,throw,new,runtime,exception,error,parsing,property,until,e,get,message,e,final,object,since,reading,properties,remove,since,if,since,null,try,reading,since,date,format,parse,since,to,string,catch,parse,exception,e,throw,new,runtime,exception,error,parsing,property,since,e,get,message,e,final,object,metadata,reading,properties,remove,metadata,if,metadata,null,boolean,parse,boolean,metadata,to,string,reading,metadata,final,object,locale,reading,properties,remove,locale,if,locale,null,string,args,locale,to,string,split,switch,args,length,case,1,reading,locale,new,locale,args,0,break,case,2,reading,locale,new,locale,args,0,args,1,break,case,3,reading,locale,new,locale,args,0,args,1,args,2,break,default,throw,new,illegal,argument,exception,string,format,invalid,value,for,property,locale,s,must,be,of,the,form,language,country,variant,locale,to,string,final,object,with,reading,properties,remove,with,if,with,null,boolean,parse,boolean,with,to,string,reading,with,location,final,object,filter,reading,properties,remove,filter,if,filter,null,reading,filter,filter,to,string
ReadingBuilder -> public static void setProperties(Reading reading, Map<String, Object> readingProperties);1381551279;Sets Reading properties._@param reading Reading object to populate_@param readingProperties Map to extract properties;public static void setProperties(Reading reading, Map<String, Object> readingProperties) {__        final String fields = (String) readingProperties.remove("fields")__        if (fields != null) {_            reading.fields(fields.toString().split(","))__        }_        final Object limit = readingProperties.remove("limit")__        if (limit != null) {_            reading.limit(Integer.parseInt(limit.toString()))__        }_        final Object offset = readingProperties.remove("offset")__        if (offset != null) {_            reading.offset(Integer.parseInt(offset.toString()))__        }_        final Object until = readingProperties.remove("until")__        if (until != null) {_            _            reading.until(until.toString())__        }_        final Object since = readingProperties.remove("since")__        if (since != null) {_            _            reading.since(since.toString())__        }_        final Object metadata = readingProperties.remove("metadata")__        if (metadata != null && Boolean.parseBoolean(metadata.toString())) {_            reading.metadata()__        }_        final Object locale = readingProperties.remove("locale")__        if (locale != null) {_            String[] args = locale.toString().split(",")__            switch (args.length) {_            case  1:_                reading.locale(new Locale(args[0]))__                break__            case  2:_                reading.locale(new Locale(args[0], args[1]))__                break__            case  3:_                reading.locale(new Locale(args[0], args[1], args[2]))__                break__            default:_                throw new IllegalArgumentException(String.format("Invalid value for property 'locale' %s, "_                    + "must be of the form [language][,country][,variant]", locale.toString()))__            }_        }_        final Object with = readingProperties.remove("with")__        if (with != null && Boolean.parseBoolean(with.toString())) {_            reading.withLocation()__        }_        final Object filter = readingProperties.remove("filter")__        if (filter != null) {_            reading.filter(filter.toString())__        }_    };sets,reading,properties,param,reading,reading,object,to,populate,param,reading,properties,map,to,extract,properties;public,static,void,set,properties,reading,reading,map,string,object,reading,properties,final,string,fields,string,reading,properties,remove,fields,if,fields,null,reading,fields,fields,to,string,split,final,object,limit,reading,properties,remove,limit,if,limit,null,reading,limit,integer,parse,int,limit,to,string,final,object,offset,reading,properties,remove,offset,if,offset,null,reading,offset,integer,parse,int,offset,to,string,final,object,until,reading,properties,remove,until,if,until,null,reading,until,until,to,string,final,object,since,reading,properties,remove,since,if,since,null,reading,since,since,to,string,final,object,metadata,reading,properties,remove,metadata,if,metadata,null,boolean,parse,boolean,metadata,to,string,reading,metadata,final,object,locale,reading,properties,remove,locale,if,locale,null,string,args,locale,to,string,split,switch,args,length,case,1,reading,locale,new,locale,args,0,break,case,2,reading,locale,new,locale,args,0,args,1,break,case,3,reading,locale,new,locale,args,0,args,1,args,2,break,default,throw,new,illegal,argument,exception,string,format,invalid,value,for,property,locale,s,must,be,of,the,form,language,country,variant,locale,to,string,final,object,with,reading,properties,remove,with,if,with,null,boolean,parse,boolean,with,to,string,reading,with,location,final,object,filter,reading,properties,remove,filter,if,filter,null,reading,filter,filter,to,string
ReadingBuilder -> public static void setProperties(Reading reading, Map<String, Object> readingProperties);1442343416;Sets Reading properties._@param reading Reading object to populate_@param readingProperties Map to extract properties;public static void setProperties(Reading reading, Map<String, Object> readingProperties) {__        final String fields = (String) readingProperties.remove("fields")__        if (fields != null) {_            reading.fields(fields.toString().split(","))__        }_        final Object limit = readingProperties.remove("limit")__        if (limit != null) {_            reading.limit(Integer.parseInt(limit.toString()))__        }_        final Object offset = readingProperties.remove("offset")__        if (offset != null) {_            reading.offset(Integer.parseInt(offset.toString()))__        }_        final Object until = readingProperties.remove("until")__        if (until != null) {_            _            reading.until(until.toString())__        }_        final Object since = readingProperties.remove("since")__        if (since != null) {_            _            reading.since(since.toString())__        }_        final Object metadata = readingProperties.remove("metadata")__        if (metadata != null && Boolean.parseBoolean(metadata.toString())) {_            reading.metadata()__        }_        final Object locale = readingProperties.remove("locale")__        if (locale != null) {_            String[] args = locale.toString().split(",")__            switch (args.length) {_            case  1:_                reading.locale(new Locale(args[0]))__                break__            case  2:_                reading.locale(new Locale(args[0], args[1]))__                break__            case  3:_                reading.locale(new Locale(args[0], args[1], args[2]))__                break__            default:_                throw new IllegalArgumentException(String.format("Invalid value for property 'locale' %s, "_                    + "must be of the form [language][,country][,variant]", locale.toString()))__            }_        }_        final Object with = readingProperties.remove("with")__        if (with != null && Boolean.parseBoolean(with.toString())) {_            reading.withLocation()__        }_        final Object filter = readingProperties.remove("filter")__        if (filter != null) {_            reading.filter(filter.toString())__        }_    };sets,reading,properties,param,reading,reading,object,to,populate,param,reading,properties,map,to,extract,properties;public,static,void,set,properties,reading,reading,map,string,object,reading,properties,final,string,fields,string,reading,properties,remove,fields,if,fields,null,reading,fields,fields,to,string,split,final,object,limit,reading,properties,remove,limit,if,limit,null,reading,limit,integer,parse,int,limit,to,string,final,object,offset,reading,properties,remove,offset,if,offset,null,reading,offset,integer,parse,int,offset,to,string,final,object,until,reading,properties,remove,until,if,until,null,reading,until,until,to,string,final,object,since,reading,properties,remove,since,if,since,null,reading,since,since,to,string,final,object,metadata,reading,properties,remove,metadata,if,metadata,null,boolean,parse,boolean,metadata,to,string,reading,metadata,final,object,locale,reading,properties,remove,locale,if,locale,null,string,args,locale,to,string,split,switch,args,length,case,1,reading,locale,new,locale,args,0,break,case,2,reading,locale,new,locale,args,0,args,1,break,case,3,reading,locale,new,locale,args,0,args,1,args,2,break,default,throw,new,illegal,argument,exception,string,format,invalid,value,for,property,locale,s,must,be,of,the,form,language,country,variant,locale,to,string,final,object,with,reading,properties,remove,with,if,with,null,boolean,parse,boolean,with,to,string,reading,with,location,final,object,filter,reading,properties,remove,filter,if,filter,null,reading,filter,filter,to,string
ReadingBuilder -> public static void setProperties(Reading reading, Map<String, Object> readingProperties);1451410909;Sets Reading properties._@param reading Reading object to populate_@param readingProperties Map to extract properties;public static void setProperties(Reading reading, Map<String, Object> readingProperties) {__        final String fields = (String) readingProperties.remove("fields")__        if (fields != null) {_            reading.fields(fields.toString().split(","))__        }_        final Object limit = readingProperties.remove("limit")__        if (limit != null) {_            reading.limit(Integer.parseInt(limit.toString()))__        }_        final Object offset = readingProperties.remove("offset")__        if (offset != null) {_            reading.offset(Integer.parseInt(offset.toString()))__        }_        final Object until = readingProperties.remove("until")__        if (until != null) {_            _            reading.until(until.toString())__        }_        final Object since = readingProperties.remove("since")__        if (since != null) {_            _            reading.since(since.toString())__        }_        final Object metadata = readingProperties.remove("metadata")__        if (metadata != null && Boolean.parseBoolean(metadata.toString())) {_            reading.metadata()__        }_        final Object locale = readingProperties.remove("locale")__        if (locale != null) {_            String[] args = locale.toString().split(",")__            switch (args.length) {_            case  1:_                reading.locale(new Locale(args[0]))__                break__            case  2:_                reading.locale(new Locale(args[0], args[1]))__                break__            case  3:_                reading.locale(new Locale(args[0], args[1], args[2]))__                break__            default:_                throw new IllegalArgumentException(String.format("Invalid value for property 'locale' %s, "_                    + "must be of the form [language][,country][,variant]", locale.toString()))__            }_        }_        final Object with = readingProperties.remove("with")__        if (with != null && Boolean.parseBoolean(with.toString())) {_            reading.withLocation()__        }_        final Object filter = readingProperties.remove("filter")__        if (filter != null) {_            reading.filter(filter.toString())__        }_    };sets,reading,properties,param,reading,reading,object,to,populate,param,reading,properties,map,to,extract,properties;public,static,void,set,properties,reading,reading,map,string,object,reading,properties,final,string,fields,string,reading,properties,remove,fields,if,fields,null,reading,fields,fields,to,string,split,final,object,limit,reading,properties,remove,limit,if,limit,null,reading,limit,integer,parse,int,limit,to,string,final,object,offset,reading,properties,remove,offset,if,offset,null,reading,offset,integer,parse,int,offset,to,string,final,object,until,reading,properties,remove,until,if,until,null,reading,until,until,to,string,final,object,since,reading,properties,remove,since,if,since,null,reading,since,since,to,string,final,object,metadata,reading,properties,remove,metadata,if,metadata,null,boolean,parse,boolean,metadata,to,string,reading,metadata,final,object,locale,reading,properties,remove,locale,if,locale,null,string,args,locale,to,string,split,switch,args,length,case,1,reading,locale,new,locale,args,0,break,case,2,reading,locale,new,locale,args,0,args,1,break,case,3,reading,locale,new,locale,args,0,args,1,args,2,break,default,throw,new,illegal,argument,exception,string,format,invalid,value,for,property,locale,s,must,be,of,the,form,language,country,variant,locale,to,string,final,object,with,reading,properties,remove,with,if,with,null,boolean,parse,boolean,with,to,string,reading,with,location,final,object,filter,reading,properties,remove,filter,if,filter,null,reading,filter,filter,to,string
ReadingBuilder -> public static void setProperties(Reading reading, Map<String, Object> readingProperties);1523994338;Sets Reading properties._@param reading Reading object to populate_@param readingProperties Map to extract properties;public static void setProperties(Reading reading, Map<String, Object> readingProperties) {__        final String fields = (String) readingProperties.remove("fields")__        if (fields != null) {_            reading.fields(fields.toString().split(","))__        }_        final Object limit = readingProperties.remove("limit")__        if (limit != null) {_            reading.limit(Integer.parseInt(limit.toString()))__        }_        final Object offset = readingProperties.remove("offset")__        if (offset != null) {_            reading.offset(Integer.parseInt(offset.toString()))__        }_        final Object until = readingProperties.remove("until")__        if (until != null) {_            _            reading.until(until.toString())__        }_        final Object since = readingProperties.remove("since")__        if (since != null) {_            _            reading.since(since.toString())__        }_        final Object metadata = readingProperties.remove("metadata")__        if (metadata != null && Boolean.parseBoolean(metadata.toString())) {_            reading.metadata()__        }_        final Object locale = readingProperties.remove("locale")__        if (locale != null) {_            String[] args = locale.toString().split(",")__            switch (args.length) {_            case  1:_                reading.locale(new Locale(args[0]))__                break__            case  2:_                reading.locale(new Locale(args[0], args[1]))__                break__            case  3:_                reading.locale(new Locale(args[0], args[1], args[2]))__                break__            default:_                throw new IllegalArgumentException(String.format("Invalid value for property 'locale' %s, "_                    + "must be of the form [language][,country][,variant]", locale.toString()))__            }_        }_        final Object with = readingProperties.remove("with")__        if (with != null && Boolean.parseBoolean(with.toString())) {_            reading.withLocation()__        }_        final Object filter = readingProperties.remove("filter")__        if (filter != null) {_            reading.filter(filter.toString())__        }_    };sets,reading,properties,param,reading,reading,object,to,populate,param,reading,properties,map,to,extract,properties;public,static,void,set,properties,reading,reading,map,string,object,reading,properties,final,string,fields,string,reading,properties,remove,fields,if,fields,null,reading,fields,fields,to,string,split,final,object,limit,reading,properties,remove,limit,if,limit,null,reading,limit,integer,parse,int,limit,to,string,final,object,offset,reading,properties,remove,offset,if,offset,null,reading,offset,integer,parse,int,offset,to,string,final,object,until,reading,properties,remove,until,if,until,null,reading,until,until,to,string,final,object,since,reading,properties,remove,since,if,since,null,reading,since,since,to,string,final,object,metadata,reading,properties,remove,metadata,if,metadata,null,boolean,parse,boolean,metadata,to,string,reading,metadata,final,object,locale,reading,properties,remove,locale,if,locale,null,string,args,locale,to,string,split,switch,args,length,case,1,reading,locale,new,locale,args,0,break,case,2,reading,locale,new,locale,args,0,args,1,break,case,3,reading,locale,new,locale,args,0,args,1,args,2,break,default,throw,new,illegal,argument,exception,string,format,invalid,value,for,property,locale,s,must,be,of,the,form,language,country,variant,locale,to,string,final,object,with,reading,properties,remove,with,if,with,null,boolean,parse,boolean,with,to,string,reading,with,location,final,object,filter,reading,properties,remove,filter,if,filter,null,reading,filter,filter,to,string
