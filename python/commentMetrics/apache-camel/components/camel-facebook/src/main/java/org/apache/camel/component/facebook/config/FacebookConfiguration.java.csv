commented;modifiers;parameterAmount;loc;comment;code
false;public;0;89;;public Configuration getConfiguration() {     final ConfigurationBuilder builder = new ConfigurationBuilder().     if (oAuthAccessToken != null) {         builder.setOAuthAccessToken(oAuthAccessToken).     }     if (oAuthAccessTokenURL != null) {         builder.setOAuthAccessTokenURL(oAuthAccessTokenURL).     }     if (oAuthAppId != null) {         builder.setOAuthAppId(oAuthAppId).     }     if (oAuthAppSecret != null) {         builder.setOAuthAppSecret(oAuthAppSecret).     }     if (oAuthAuthorizationURL != null) {         builder.setOAuthAuthorizationURL(oAuthAuthorizationURL).     }     if (oAuthPermissions != null) {         builder.setOAuthPermissions(oAuthPermissions).     }     if (clientURL != null) {         builder.setClientURL(clientURL).     }     if (clientVersion != null) {         builder.setClientVersion(clientVersion).     }     if (debugEnabled != null) {         builder.setDebugEnabled(debugEnabled).     }     if (gzipEnabled != null) {         builder.setGZIPEnabled(gzipEnabled).     }     if (httpConnectionTimeout != null) {         builder.setHttpConnectionTimeout(httpConnectionTimeout).     }     if (httpDefaultMaxPerRoute != null) {         builder.setHttpDefaultMaxPerRoute(httpDefaultMaxPerRoute).     }     if (httpMaxTotalConnections != null) {         builder.setHttpMaxTotalConnections(httpMaxTotalConnections).     }     if (httpProxyHost != null) {         builder.setHttpProxyHost(httpProxyHost).     }     if (httpProxyPassword != null) {         builder.setHttpProxyPassword(httpProxyPassword).     }     if (httpProxyPort != null) {         builder.setHttpProxyPort(httpProxyPort).     }     if (httpProxyUser != null) {         builder.setHttpProxyUser(httpProxyUser).     }     if (httpReadTimeout != null) {         builder.setHttpReadTimeout(httpReadTimeout).     }     if (httpRetryCount != null) {         builder.setHttpRetryCount(httpRetryCount).     }     if (httpRetryIntervalSeconds != null) {         builder.setHttpRetryIntervalSeconds(httpRetryIntervalSeconds).     }     if (httpStreamingReadTimeout != null) {         builder.setHttpStreamingReadTimeout(httpStreamingReadTimeout).     }     if (jsonStoreEnabled != null) {         builder.setJSONStoreEnabled(jsonStoreEnabled).     }     if (mbeanEnabled != null) {         builder.setMBeanEnabled(mbeanEnabled).     }     if (prettyDebugEnabled != null) {         builder.setPrettyDebugEnabled(prettyDebugEnabled).     }     if (restBaseURL != null) {         builder.setRestBaseURL(restBaseURL).     }     if (useSSL != null) {         builder.setUseSSL(useSSL).     }     if (videoBaseURL != null) {         builder.setVideoBaseURL(videoBaseURL).     }     return builder.build(). }
true;public;0;20;/**  * Returns {@link Facebook} instance. If needed, creates one from configuration.  * @return {@link Facebook} instance  */ ;/**  * Returns {@link Facebook} instance. If needed, creates one from configuration.  * @return {@link Facebook} instance  */ public Facebook getFacebook() throws FacebookException {     if (facebook == null) {         final Configuration configuration = getConfiguration().         FacebookFactory factory = new FacebookFactory(configuration).         if (this.oAuthAccessToken == null) {             // app login             facebook = factory.getInstance(new OAuthAuthorization(configuration)).             // also get the App access token             facebook.getOAuthAppAccessToken().             LOG.warn("Login with app id and secret, access to some APIs is restricted!").         } else {             // user login with token             facebook = factory.getInstance().             // verify the access token             facebook.getOAuthAccessToken().             LOG.debug("Login with app id, secret and token, all APIs accessible").         }     }     return facebook. }
false;public;0;6;;public FacebookConfiguration copy() throws CloneNotSupportedException {     final FacebookConfiguration copy = (FacebookConfiguration) clone().     // do not copy facebook instance!!!     copy.facebook = null.     return copy. }
false;public;0;3;;public String getOAuthAccessToken() {     return oAuthAccessToken. }
true;public;1;3;/**  * The user access token  */ ;/**  * The user access token  */ public void setOAuthAccessToken(String oAuthAccessToken) {     this.oAuthAccessToken = oAuthAccessToken. }
false;public;0;3;;public String getOAuthAccessTokenURL() {     return oAuthAccessTokenURL. }
true;public;1;3;/**  * OAuth access token URL  */ ;/**  * OAuth access token URL  */ public void setOAuthAccessTokenURL(String oAuthAccessTokenURL) {     this.oAuthAccessTokenURL = oAuthAccessTokenURL. }
false;public;0;3;;public String getOAuthAppId() {     return oAuthAppId. }
true;public;1;3;/**  * The application Id  */ ;/**  * The application Id  */ public void setOAuthAppId(String oAuthAppId) {     this.oAuthAppId = oAuthAppId. }
false;public;0;3;;public String getOAuthAppSecret() {     return oAuthAppSecret. }
true;public;1;3;/**  * The application Secret  */ ;/**  * The application Secret  */ public void setOAuthAppSecret(String oAuthAppSecret) {     this.oAuthAppSecret = oAuthAppSecret. }
false;public;0;3;;public String getOAuthAuthorizationURL() {     return oAuthAuthorizationURL. }
true;public;1;3;/**  * OAuth authorization URL  */ ;/**  * OAuth authorization URL  */ public void setOAuthAuthorizationURL(String oAuthAuthorizationURL) {     this.oAuthAuthorizationURL = oAuthAuthorizationURL. }
false;public;0;3;;public String getClientURL() {     return clientURL. }
true;public;1;3;/**  * Facebook4J API client URL  */ ;/**  * Facebook4J API client URL  */ public void setClientURL(String clientURL) {     this.clientURL = clientURL. }
false;public;0;3;;public String getClientVersion() {     return clientVersion. }
true;public;1;3;/**  * Facebook4J client API version  */ ;/**  * Facebook4J client API version  */ public void setClientVersion(String clientVersion) {     this.clientVersion = clientVersion. }
false;public;0;3;;public Boolean getDebugEnabled() {     return debugEnabled. }
true;public;1;3;/**  * Enables deubg output. Effective only with the embedded logger  */ ;/**  * Enables deubg output. Effective only with the embedded logger  */ public void setDebugEnabled(Boolean debugEnabled) {     this.debugEnabled = debugEnabled. }
false;public;0;3;;public Boolean getGzipEnabled() {     return gzipEnabled. }
true;public;1;3;/**  * Use Facebook GZIP encoding  */ ;/**  * Use Facebook GZIP encoding  */ public void setGzipEnabled(Boolean gzipEnabled) {     this.gzipEnabled = gzipEnabled. }
false;public;0;3;;public Integer getHttpConnectionTimeout() {     return httpConnectionTimeout. }
true;public;1;3;/**  * Http connection timeout in milliseconds  */ ;/**  * Http connection timeout in milliseconds  */ public void setHttpConnectionTimeout(Integer httpConnectionTimeout) {     this.httpConnectionTimeout = httpConnectionTimeout. }
false;public;0;3;;public Integer getHttpDefaultMaxPerRoute() {     return httpDefaultMaxPerRoute. }
true;public;1;3;/**  * HTTP maximum connections per route  */ ;/**  * HTTP maximum connections per route  */ public void setHttpDefaultMaxPerRoute(Integer httpDefaultMaxPerRoute) {     this.httpDefaultMaxPerRoute = httpDefaultMaxPerRoute. }
false;public;0;3;;public Integer getHttpMaxTotalConnections() {     return httpMaxTotalConnections. }
true;public;1;3;/**  * HTTP maximum total connections  */ ;/**  * HTTP maximum total connections  */ public void setHttpMaxTotalConnections(Integer httpMaxTotalConnections) {     this.httpMaxTotalConnections = httpMaxTotalConnections. }
false;public;0;3;;public String getHttpProxyHost() {     return httpProxyHost. }
true;public;1;3;/**  * HTTP proxy server host name  */ ;/**  * HTTP proxy server host name  */ public void setHttpProxyHost(String httpProxyHost) {     this.httpProxyHost = httpProxyHost. }
false;public;0;3;;public String getHttpProxyPassword() {     return httpProxyPassword. }
true;public;1;3;/**  * HTTP proxy server password  */ ;/**  * HTTP proxy server password  */ public void setHttpProxyPassword(String httpProxyPassword) {     this.httpProxyPassword = httpProxyPassword. }
false;public;0;3;;public Integer getHttpProxyPort() {     return httpProxyPort. }
true;public;1;3;/**  * HTTP proxy server port  */ ;/**  * HTTP proxy server port  */ public void setHttpProxyPort(Integer httpProxyPort) {     this.httpProxyPort = httpProxyPort. }
false;public;0;3;;public String getHttpProxyUser() {     return httpProxyUser. }
true;public;1;3;/**  * HTTP proxy server user name  */ ;/**  * HTTP proxy server user name  */ public void setHttpProxyUser(String httpProxyUser) {     this.httpProxyUser = httpProxyUser. }
false;public;0;3;;public Integer getHttpReadTimeout() {     return httpReadTimeout. }
true;public;1;3;/**  * Http read timeout in milliseconds  */ ;/**  * Http read timeout in milliseconds  */ public void setHttpReadTimeout(Integer httpReadTimeout) {     this.httpReadTimeout = httpReadTimeout. }
false;public;0;3;;public Integer getHttpRetryCount() {     return httpRetryCount. }
true;public;1;3;/**  * Number of HTTP retries  */ ;/**  * Number of HTTP retries  */ public void setHttpRetryCount(Integer httpRetryCount) {     this.httpRetryCount = httpRetryCount. }
false;public;0;3;;public Integer getHttpRetryIntervalSeconds() {     return httpRetryIntervalSeconds. }
true;public;1;3;/**  * HTTP retry interval in seconds  */ ;/**  * HTTP retry interval in seconds  */ public void setHttpRetryIntervalSeconds(Integer httpRetryIntervalSeconds) {     this.httpRetryIntervalSeconds = httpRetryIntervalSeconds. }
false;public;0;3;;public Integer getHttpStreamingReadTimeout() {     return httpStreamingReadTimeout. }
true;public;1;3;/**  * HTTP streaming read timeout in milliseconds  */ ;/**  * HTTP streaming read timeout in milliseconds  */ public void setHttpStreamingReadTimeout(Integer httpStreamingReadTimeout) {     this.httpStreamingReadTimeout = httpStreamingReadTimeout. }
false;public;0;3;;public Boolean getJsonStoreEnabled() {     return jsonStoreEnabled. }
true;public;1;3;/**  * If set to true, raw JSON forms will be stored in DataObjectFactory  */ ;/**  * If set to true, raw JSON forms will be stored in DataObjectFactory  */ public void setJsonStoreEnabled(Boolean jsonStoreEnabled) {     this.jsonStoreEnabled = jsonStoreEnabled. }
false;public;0;3;;public Boolean getMbeanEnabled() {     return mbeanEnabled. }
true;public;1;3;/**  * If set to true, Facebook4J mbean will be registerd  */ ;/**  * If set to true, Facebook4J mbean will be registerd  */ public void setMbeanEnabled(Boolean mbeanEnabled) {     this.mbeanEnabled = mbeanEnabled. }
false;public;0;3;;public String getOAuthPermissions() {     return oAuthPermissions. }
true;public;1;3;/**  * Default OAuth permissions. Comma separated permission names.  * See https://developers.facebook.com/docs/reference/login/#permissions for the detail  */ ;/**  * Default OAuth permissions. Comma separated permission names.  * See https://developers.facebook.com/docs/reference/login/#permissions for the detail  */ public void setOAuthPermissions(String oAuthPermissions) {     this.oAuthPermissions = oAuthPermissions. }
false;public;0;3;;public Boolean getPrettyDebugEnabled() {     return prettyDebugEnabled. }
true;public;1;3;/**  * Prettify JSON debug output if set to true  */ ;/**  * Prettify JSON debug output if set to true  */ public void setPrettyDebugEnabled(Boolean prettyDebugEnabled) {     this.prettyDebugEnabled = prettyDebugEnabled. }
false;public;0;3;;public String getRestBaseURL() {     return restBaseURL. }
true;public;1;3;/**  * API base URL  */ ;/**  * API base URL  */ public void setRestBaseURL(String restBaseURL) {     this.restBaseURL = restBaseURL. }
false;public;0;3;;public Boolean getUseSSL() {     return useSSL. }
true;public;1;3;/**  * Use SSL  */ ;/**  * Use SSL  */ public void setUseSSL(Boolean useSSL) {     this.useSSL = useSSL. }
false;public;0;3;;public String getVideoBaseURL() {     return videoBaseURL. }
true;public;1;3;/**  * Video API base URL  */ ;/**  * Video API base URL  */ public void setVideoBaseURL(String videoBaseURL) {     this.videoBaseURL = videoBaseURL. }
false;public;0;6;;public void validate() {     if ((oAuthAppId == null || oAuthAppId.isEmpty()) || (oAuthAppSecret == null || oAuthAppSecret.isEmpty())) {         throw new IllegalArgumentException("Missing required properties oAuthAppId, oAuthAppSecret").     } }
