commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new FacebookProducer(this). }
false;public;1;10;;public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final FacebookConsumer consumer = new FacebookConsumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;1;23;;@Override public void configureProperties(Map<String, Object> options) {     super.configureProperties(options).     // set configuration properties first     try {         if (configuration == null) {             configuration = new FacebookEndpointConfiguration().         }         EndpointHelper.setReferenceProperties(getCamelContext(), configuration, options).         EndpointHelper.setProperties(getCamelContext(), configuration, options).     } catch (Exception e) {         throw new IllegalArgumentException(e.getMessage(), e).     }     // extract reading properties     FacebookPropertiesHelper.configureReadingProperties(configuration, options).     // validate configuration     configuration.validate().     // validate and initialize state     initState(). }
false;private;0;50;;private void initState() {     // get endpoint property names     final Set<String> arguments = new HashSet<>().     arguments.addAll(getEndpointPropertyNames(configuration)).     // add inBody argument for producers     if (inBody != null) {         arguments.add(inBody).     }     final String[] argNames = arguments.toArray(new String[arguments.size()]).     candidates = new ArrayList<>().     candidates.addAll(getCandidateMethods(method, argNames)).     if (!candidates.isEmpty()) {         // found an exact name match, allows disambiguation if needed         this.nameStyle = FacebookNameStyle.EXACT.     } else {         // also search for long forms of method name, both get* and search*         // Note that this set will be further sorted by Producers and Consumers         // producers will prefer get* forms, and consumers should prefer search* forms         candidates.addAll(getCandidateMethods(convertToGetMethod(method), argNames)).         if (!candidates.isEmpty()) {             this.nameStyle = FacebookNameStyle.GET.         }         int nGetMethods = candidates.size().         candidates.addAll(getCandidateMethods(convertToSearchMethod(method), argNames)).         // error if there are no candidates         if (candidates.isEmpty()) {             throw new IllegalArgumentException(String.format("No matching operation for %s, with arguments %s", method, arguments)).         }         if (nameStyle == null) {             // no get* methods found             nameStyle = FacebookNameStyle.SEARCH.         } else if (candidates.size() > nGetMethods) {             // get* and search* methods found             nameStyle = FacebookNameStyle.GET_AND_SEARCH.         }     }     // log missing/extra properties for debugging     if (log.isDebugEnabled()) {         final Set<String> missing = getMissingProperties(method, nameStyle, arguments).         if (!missing.isEmpty()) {             log.debug("Method {} could use one or more properties from {}", method, missing).         }     } }
false;public;0;3;;public FacebookEndpointConfiguration getConfiguration() {     return configuration. }
false;public;0;3;;public List<FacebookMethodsType> getCandidates() {     return Collections.unmodifiableList(candidates). }
false;public;0;3;;public String getInBody() {     return inBody. }
false;public;0;3;;public String getMethod() {     return method. }
false;public;0;3;;public FacebookNameStyle getNameStyle() {     return nameStyle. }
true;public;1;8;/**  * Sets the name of a parameter to be passed in the exchange In Body  */ ;/**  * Sets the name of a parameter to be passed in the exchange In Body  */ public void setInBody(String inBody) {     // validate property name     ObjectHelper.notNull(inBody, "inBody").     if (!FacebookPropertiesHelper.getValidEndpointProperties().contains(inBody)) {         throw new IllegalArgumentException("Unknown property " + inBody).     }     this.inBody = inBody. }
true;public;1;3;/**  * Sets the {@link FacebookEndpointConfiguration} to use  *  * @param configuration the {@link FacebookEndpointConfiguration} to use  */ ;/**  * Sets the {@link FacebookEndpointConfiguration} to use  *  * @param configuration the {@link FacebookEndpointConfiguration} to use  */ public void setConfiguration(FacebookEndpointConfiguration configuration) {     this.configuration = configuration. }
