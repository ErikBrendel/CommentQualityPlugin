# id;timestamp;commentText;codeText;commentWords;codeWords
FacebookMethodsTypeHelper -> public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException;1378019315;Gets argument types and names for all overloaded methods with the given short form name._@param name method name, may be a short form_@param style name style_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException {_        if (style == null) {_            throw new IllegalArgumentException("Parameters style cannot be null")__        }_        switch (style) {_        case EXACT:_            return getArguments(name)__        case GET:_            return getArguments(convertToGetMethod(name))__        case SEARCH:_            return getArguments(convertToSearchMethod(name))__        case GET_AND_SEARCH:_        default:_            final List<Object> arguments = new ArrayList<Object>()__            arguments.addAll(getArguments(convertToGetMethod(name)))__            arguments.addAll(getArguments(convertToSearchMethod(name)))__            return Collections.unmodifiableList(arguments)__        }_    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,short,form,name,param,name,method,name,may,be,a,short,form,param,style,name,style,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,for,name,style,string,name,facebook,name,style,style,throws,illegal,argument,exception,if,style,null,throw,new,illegal,argument,exception,parameters,style,cannot,be,null,switch,style,case,exact,return,get,arguments,name,case,get,return,get,arguments,convert,to,get,method,name,case,search,return,get,arguments,convert,to,search,method,name,case,default,final,list,object,arguments,new,array,list,object,arguments,add,all,get,arguments,convert,to,get,method,name,arguments,add,all,get,arguments,convert,to,search,method,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException;1378021635;Gets argument types and names for all overloaded methods with the given short form name._@param name method name, may be a short form_@param style name style_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException {_        if (style == null) {_            throw new IllegalArgumentException("Parameters style cannot be null")__        }_        switch (style) {_        case EXACT:_            return getArguments(name)__        case GET:_            return getArguments(convertToGetMethod(name))__        case SEARCH:_            return getArguments(convertToSearchMethod(name))__        case GET_AND_SEARCH:_        default:_            final List<Object> arguments = new ArrayList<Object>()__            arguments.addAll(getArguments(convertToGetMethod(name)))__            arguments.addAll(getArguments(convertToSearchMethod(name)))__            return Collections.unmodifiableList(arguments)__        }_    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,short,form,name,param,name,method,name,may,be,a,short,form,param,style,name,style,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,for,name,style,string,name,facebook,name,style,style,throws,illegal,argument,exception,if,style,null,throw,new,illegal,argument,exception,parameters,style,cannot,be,null,switch,style,case,exact,return,get,arguments,name,case,get,return,get,arguments,convert,to,get,method,name,case,search,return,get,arguments,convert,to,search,method,name,case,default,final,list,object,arguments,new,array,list,object,arguments,add,all,get,arguments,convert,to,get,method,name,arguments,add,all,get,arguments,convert,to,search,method,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException;1378024112;Gets argument types and names for all overloaded methods with the given short form name._@param name method name, may be a short form_@param style name style_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException {_        if (style == null) {_            throw new IllegalArgumentException("Parameters style cannot be null")__        }_        switch (style) {_        case EXACT:_            return getArguments(name)__        case GET:_            return getArguments(convertToGetMethod(name))__        case SEARCH:_            return getArguments(convertToSearchMethod(name))__        case GET_AND_SEARCH:_        default:_            final List<Object> arguments = new ArrayList<Object>()__            arguments.addAll(getArguments(convertToGetMethod(name)))__            arguments.addAll(getArguments(convertToSearchMethod(name)))__            return Collections.unmodifiableList(arguments)__        }_    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,short,form,name,param,name,method,name,may,be,a,short,form,param,style,name,style,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,for,name,style,string,name,facebook,name,style,style,throws,illegal,argument,exception,if,style,null,throw,new,illegal,argument,exception,parameters,style,cannot,be,null,switch,style,case,exact,return,get,arguments,name,case,get,return,get,arguments,convert,to,get,method,name,case,search,return,get,arguments,convert,to,search,method,name,case,default,final,list,object,arguments,new,array,list,object,arguments,add,all,get,arguments,convert,to,get,method,name,arguments,add,all,get,arguments,convert,to,search,method,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException;1378085101;Gets argument types and names for all overloaded methods with the given short form name._@param name method name, may be a short form_@param style name style_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException {_        if (style == null) {_            throw new IllegalArgumentException("Parameters style cannot be null")__        }_        switch (style) {_        case EXACT:_            return getArguments(name)__        case GET:_            return getArguments(convertToGetMethod(name))__        case SEARCH:_            return getArguments(convertToSearchMethod(name))__        case GET_AND_SEARCH:_        default:_            final List<Object> arguments = new ArrayList<Object>()__            arguments.addAll(getArguments(convertToGetMethod(name)))__            arguments.addAll(getArguments(convertToSearchMethod(name)))__            return Collections.unmodifiableList(arguments)__        }_    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,short,form,name,param,name,method,name,may,be,a,short,form,param,style,name,style,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,for,name,style,string,name,facebook,name,style,style,throws,illegal,argument,exception,if,style,null,throw,new,illegal,argument,exception,parameters,style,cannot,be,null,switch,style,case,exact,return,get,arguments,name,case,get,return,get,arguments,convert,to,get,method,name,case,search,return,get,arguments,convert,to,search,method,name,case,default,final,list,object,arguments,new,array,list,object,arguments,add,all,get,arguments,convert,to,get,method,name,arguments,add,all,get,arguments,convert,to,search,method,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException;1461916938;Gets argument types and names for all overloaded methods with the given short form name._@param name method name, may be a short form_@param style name style_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException {_        if (style == null) {_            throw new IllegalArgumentException("Parameters style cannot be null")__        }_        switch (style) {_        case EXACT:_            return getArguments(name)__        case GET:_            return getArguments(convertToGetMethod(name))__        case SEARCH:_            return getArguments(convertToSearchMethod(name))__        case GET_AND_SEARCH:_        default:_            final List<Object> arguments = new ArrayList<Object>()__            arguments.addAll(getArguments(convertToGetMethod(name)))__            arguments.addAll(getArguments(convertToSearchMethod(name)))__            return Collections.unmodifiableList(arguments)__        }_    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,short,form,name,param,name,method,name,may,be,a,short,form,param,style,name,style,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,for,name,style,string,name,facebook,name,style,style,throws,illegal,argument,exception,if,style,null,throw,new,illegal,argument,exception,parameters,style,cannot,be,null,switch,style,case,exact,return,get,arguments,name,case,get,return,get,arguments,convert,to,get,method,name,case,search,return,get,arguments,convert,to,search,method,name,case,default,final,list,object,arguments,new,array,list,object,arguments,add,all,get,arguments,convert,to,get,method,name,arguments,add,all,get,arguments,convert,to,search,method,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException;1513158838;Gets argument types and names for all overloaded methods with the given short form name._@param name method name, may be a short form_@param style name style_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException {_        if (style == null) {_            throw new IllegalArgumentException("Parameters style cannot be null")__        }_        switch (style) {_        case EXACT:_            return getArguments(name)__        case GET:_            return getArguments(convertToGetMethod(name))__        case SEARCH:_            return getArguments(convertToSearchMethod(name))__        case GET_AND_SEARCH:_        default:_            final List<Object> arguments = new ArrayList<Object>()__            arguments.addAll(getArguments(convertToGetMethod(name)))__            arguments.addAll(getArguments(convertToSearchMethod(name)))__            return Collections.unmodifiableList(arguments)__        }_    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,short,form,name,param,name,method,name,may,be,a,short,form,param,style,name,style,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,for,name,style,string,name,facebook,name,style,style,throws,illegal,argument,exception,if,style,null,throw,new,illegal,argument,exception,parameters,style,cannot,be,null,switch,style,case,exact,return,get,arguments,name,case,get,return,get,arguments,convert,to,get,method,name,case,search,return,get,arguments,convert,to,search,method,name,case,default,final,list,object,arguments,new,array,list,object,arguments,add,all,get,arguments,convert,to,get,method,name,arguments,add,all,get,arguments,convert,to,search,method,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException;1523994338;Gets argument types and names for all overloaded methods with the given short form name._@param name method name, may be a short form_@param style name style_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArgumentsForNameStyle(String name, FacebookNameStyle style) throws IllegalArgumentException {_        if (style == null) {_            throw new IllegalArgumentException("Parameters style cannot be null")__        }_        switch (style) {_        case EXACT:_            return getArguments(name)__        case GET:_            return getArguments(convertToGetMethod(name))__        case SEARCH:_            return getArguments(convertToSearchMethod(name))__        case GET_AND_SEARCH:_        default:_            final List<Object> arguments = new ArrayList<>()__            arguments.addAll(getArguments(convertToGetMethod(name)))__            arguments.addAll(getArguments(convertToSearchMethod(name)))__            return Collections.unmodifiableList(arguments)__        }_    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,short,form,name,param,name,method,name,may,be,a,short,form,param,style,name,style,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,for,name,style,string,name,facebook,name,style,style,throws,illegal,argument,exception,if,style,null,throw,new,illegal,argument,exception,parameters,style,cannot,be,null,switch,style,case,exact,return,get,arguments,name,case,get,return,get,arguments,convert,to,get,method,name,case,search,return,get,arguments,convert,to,search,method,name,case,default,final,list,object,arguments,new,array,list,arguments,add,all,get,arguments,convert,to,get,method,name,arguments,add,all,get,arguments,convert,to,search,method,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames);1378019315;Get missing properties._@param methodName method name_@param nameStyle method name style_@param argNames available arguments_@return Set of missing argument names;public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames) {_        final List<Object> argsWithTypes = getArgumentsForNameStyle(methodName, nameStyle)__        final Set<String> missingArgs = new HashSet<String>()___        for (int i = 1_ i < argsWithTypes.size()_ i += 2) {_            final String name = (String) argsWithTypes.get(i)__            if (!argNames.contains(name)) {_                missingArgs.add(name)__            }_        }__        return missingArgs__    };get,missing,properties,param,method,name,method,name,param,name,style,method,name,style,param,arg,names,available,arguments,return,set,of,missing,argument,names;public,static,set,string,get,missing,properties,string,method,name,facebook,name,style,name,style,set,string,arg,names,final,list,object,args,with,types,get,arguments,for,name,style,method,name,name,style,final,set,string,missing,args,new,hash,set,string,for,int,i,1,i,args,with,types,size,i,2,final,string,name,string,args,with,types,get,i,if,arg,names,contains,name,missing,args,add,name,return,missing,args
FacebookMethodsTypeHelper -> public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames);1378021635;Get missing properties._@param methodName method name_@param nameStyle method name style_@param argNames available arguments_@return Set of missing argument names;public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames) {_        final List<Object> argsWithTypes = getArgumentsForNameStyle(methodName, nameStyle)__        final Set<String> missingArgs = new HashSet<String>()___        for (int i = 1_ i < argsWithTypes.size()_ i += 2) {_            final String name = (String) argsWithTypes.get(i)__            if (!argNames.contains(name)) {_                missingArgs.add(name)__            }_        }__        return missingArgs__    };get,missing,properties,param,method,name,method,name,param,name,style,method,name,style,param,arg,names,available,arguments,return,set,of,missing,argument,names;public,static,set,string,get,missing,properties,string,method,name,facebook,name,style,name,style,set,string,arg,names,final,list,object,args,with,types,get,arguments,for,name,style,method,name,name,style,final,set,string,missing,args,new,hash,set,string,for,int,i,1,i,args,with,types,size,i,2,final,string,name,string,args,with,types,get,i,if,arg,names,contains,name,missing,args,add,name,return,missing,args
FacebookMethodsTypeHelper -> public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames);1378024112;Get missing properties._@param methodName method name_@param nameStyle method name style_@param argNames available arguments_@return Set of missing argument names;public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames) {_        final List<Object> argsWithTypes = getArgumentsForNameStyle(methodName, nameStyle)__        final Set<String> missingArgs = new HashSet<String>()___        for (int i = 1_ i < argsWithTypes.size()_ i += 2) {_            final String name = (String) argsWithTypes.get(i)__            if (!argNames.contains(name)) {_                missingArgs.add(name)__            }_        }__        return missingArgs__    };get,missing,properties,param,method,name,method,name,param,name,style,method,name,style,param,arg,names,available,arguments,return,set,of,missing,argument,names;public,static,set,string,get,missing,properties,string,method,name,facebook,name,style,name,style,set,string,arg,names,final,list,object,args,with,types,get,arguments,for,name,style,method,name,name,style,final,set,string,missing,args,new,hash,set,string,for,int,i,1,i,args,with,types,size,i,2,final,string,name,string,args,with,types,get,i,if,arg,names,contains,name,missing,args,add,name,return,missing,args
FacebookMethodsTypeHelper -> public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames);1378085101;Get missing properties._@param methodName method name_@param nameStyle method name style_@param argNames available arguments_@return Set of missing argument names;public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames) {_        final List<Object> argsWithTypes = getArgumentsForNameStyle(methodName, nameStyle)__        final Set<String> missingArgs = new HashSet<String>()___        for (int i = 1_ i < argsWithTypes.size()_ i += 2) {_            final String name = (String) argsWithTypes.get(i)__            if (!argNames.contains(name)) {_                missingArgs.add(name)__            }_        }__        return missingArgs__    };get,missing,properties,param,method,name,method,name,param,name,style,method,name,style,param,arg,names,available,arguments,return,set,of,missing,argument,names;public,static,set,string,get,missing,properties,string,method,name,facebook,name,style,name,style,set,string,arg,names,final,list,object,args,with,types,get,arguments,for,name,style,method,name,name,style,final,set,string,missing,args,new,hash,set,string,for,int,i,1,i,args,with,types,size,i,2,final,string,name,string,args,with,types,get,i,if,arg,names,contains,name,missing,args,add,name,return,missing,args
FacebookMethodsTypeHelper -> public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames);1461916938;Get missing properties._@param methodName method name_@param nameStyle method name style_@param argNames available arguments_@return Set of missing argument names;public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames) {_        final List<Object> argsWithTypes = getArgumentsForNameStyle(methodName, nameStyle)__        final Set<String> missingArgs = new HashSet<String>()___        for (int i = 1_ i < argsWithTypes.size()_ i += 2) {_            final String name = (String) argsWithTypes.get(i)__            if (!argNames.contains(name)) {_                missingArgs.add(name)__            }_        }__        return missingArgs__    };get,missing,properties,param,method,name,method,name,param,name,style,method,name,style,param,arg,names,available,arguments,return,set,of,missing,argument,names;public,static,set,string,get,missing,properties,string,method,name,facebook,name,style,name,style,set,string,arg,names,final,list,object,args,with,types,get,arguments,for,name,style,method,name,name,style,final,set,string,missing,args,new,hash,set,string,for,int,i,1,i,args,with,types,size,i,2,final,string,name,string,args,with,types,get,i,if,arg,names,contains,name,missing,args,add,name,return,missing,args
FacebookMethodsTypeHelper -> public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames);1513158838;Get missing properties._@param methodName method name_@param nameStyle method name style_@param argNames available arguments_@return Set of missing argument names;public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames) {_        final List<Object> argsWithTypes = getArgumentsForNameStyle(methodName, nameStyle)__        final Set<String> missingArgs = new HashSet<String>()___        for (int i = 1_ i < argsWithTypes.size()_ i += 2) {_            final String name = (String) argsWithTypes.get(i)__            if (!argNames.contains(name)) {_                missingArgs.add(name)__            }_        }__        return missingArgs__    };get,missing,properties,param,method,name,method,name,param,name,style,method,name,style,param,arg,names,available,arguments,return,set,of,missing,argument,names;public,static,set,string,get,missing,properties,string,method,name,facebook,name,style,name,style,set,string,arg,names,final,list,object,args,with,types,get,arguments,for,name,style,method,name,name,style,final,set,string,missing,args,new,hash,set,string,for,int,i,1,i,args,with,types,size,i,2,final,string,name,string,args,with,types,get,i,if,arg,names,contains,name,missing,args,add,name,return,missing,args
FacebookMethodsTypeHelper -> public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames);1523994338;Get missing properties._@param methodName method name_@param nameStyle method name style_@param argNames available arguments_@return Set of missing argument names;public static Set<String> getMissingProperties(String methodName, FacebookNameStyle nameStyle, Set<String> argNames) {_        final List<Object> argsWithTypes = getArgumentsForNameStyle(methodName, nameStyle)__        final Set<String> missingArgs = new HashSet<>()___        for (int i = 1_ i < argsWithTypes.size()_ i += 2) {_            final String name = (String) argsWithTypes.get(i)__            if (!argNames.contains(name)) {_                missingArgs.add(name)__            }_        }__        return missingArgs__    };get,missing,properties,param,method,name,method,name,param,name,style,method,name,style,param,arg,names,available,arguments,return,set,of,missing,argument,names;public,static,set,string,get,missing,properties,string,method,name,facebook,name,style,name,style,set,string,arg,names,final,list,object,args,with,types,get,arguments,for,name,style,method,name,name,style,final,set,string,missing,args,new,hash,set,for,int,i,1,i,args,with,types,size,i,2,final,string,name,string,args,with,types,get,i,if,arg,names,contains,name,missing,args,add,name,return,missing,args
FacebookMethodsTypeHelper -> public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)         throws RuntimeCamelException;1378024112;Invokes given method with argument values from given properties.__@param facebook Facebook4J target object for invoke_@param method method to invoke_@param properties Map of arguments_@return result of method invocation_@throws RuntimeCamelException on errors;public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)_        throws RuntimeCamelException {__        LOG.debug("Invoking {} with arguments {}", method.getName(), properties)___        final List<String> argNames = method.getArgNames()__        final Object[] values = new Object[argNames.size()]__        final List<Class<?>> argTypes = method.getArgTypes()__        final Class<?>[] types = argTypes.toArray(new Class[argTypes.size()])__        int index = 0__        for (String name : argNames) {_            Object value = properties.get(name)___            _            if (value != null && types[index].isArray()) {_                Class<?> type = types[index]___                if (value instanceof Collection) {_                    _                    Collection<?> collection = (Collection<?>) value__                    Object array = Array.newInstance(type.getComponentType(), collection.size())__                    if (array instanceof Object[]) {_                        collection.toArray((Object[]) array)__                    } else {_                        int i = 0__                        for (Object el : collection) {_                            Array.set(array, i++, el)__                        }_                    }_                    value = array__                } else if (value.getClass().isArray()_                    && type.getComponentType().isAssignableFrom(value.getClass().getComponentType())) {_                    _                    final int size = Array.getLength(value)__                    Object array = Array.newInstance(type.getComponentType(), size)__                    for (int i = 0_ i < size_ i++) {_                        Array.set(array, i, Array.get(value, i))__                    }_                    value = array__                } else {_                    throw new IllegalArgumentException(_                        String.format("Cannot convert %s to %s", value.getClass(), type))__                }_            }__            values[index++] = value__        }__        try {_            return method.getMethod().invoke(facebook, values)__        } catch (Throwable e) {_            _            String msg__            if (e.getCause() != null && e.getCause() instanceof FacebookException) {_                e = e.getCause()__                msg = ((FacebookException)e).getErrorMessage()__            } else {_                msg = e.getMessage()__            }_            throw new RuntimeCamelException(_                String.format("Error invoking %s with %s: %s", method.getName(), properties, msg), e)__        }_    };invokes,given,method,with,argument,values,from,given,properties,param,facebook,facebook4j,target,object,for,invoke,param,method,method,to,invoke,param,properties,map,of,arguments,return,result,of,method,invocation,throws,runtime,camel,exception,on,errors;public,static,object,invoke,method,facebook,facebook,facebook,methods,type,method,map,string,object,properties,throws,runtime,camel,exception,log,debug,invoking,with,arguments,method,get,name,properties,final,list,string,arg,names,method,get,arg,names,final,object,values,new,object,arg,names,size,final,list,class,arg,types,method,get,arg,types,final,class,types,arg,types,to,array,new,class,arg,types,size,int,index,0,for,string,name,arg,names,object,value,properties,get,name,if,value,null,types,index,is,array,class,type,types,index,if,value,instanceof,collection,collection,collection,collection,value,object,array,array,new,instance,type,get,component,type,collection,size,if,array,instanceof,object,collection,to,array,object,array,else,int,i,0,for,object,el,collection,array,set,array,i,el,value,array,else,if,value,get,class,is,array,type,get,component,type,is,assignable,from,value,get,class,get,component,type,final,int,size,array,get,length,value,object,array,array,new,instance,type,get,component,type,size,for,int,i,0,i,size,i,array,set,array,i,array,get,value,i,value,array,else,throw,new,illegal,argument,exception,string,format,cannot,convert,s,to,s,value,get,class,type,values,index,value,try,return,method,get,method,invoke,facebook,values,catch,throwable,e,string,msg,if,e,get,cause,null,e,get,cause,instanceof,facebook,exception,e,e,get,cause,msg,facebook,exception,e,get,error,message,else,msg,e,get,message,throw,new,runtime,camel,exception,string,format,error,invoking,s,with,s,s,method,get,name,properties,msg,e
FacebookMethodsTypeHelper -> public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)         throws RuntimeCamelException;1378085101;Invokes given method with argument values from given properties.__@param facebook Facebook4J target object for invoke_@param method method to invoke_@param properties Map of arguments_@return result of method invocation_@throws RuntimeCamelException on errors;public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)_        throws RuntimeCamelException {__        LOG.debug("Invoking {} with arguments {}", method.getName(), properties)___        final List<String> argNames = method.getArgNames()__        final Object[] values = new Object[argNames.size()]__        final List<Class<?>> argTypes = method.getArgTypes()__        final Class<?>[] types = argTypes.toArray(new Class[argTypes.size()])__        int index = 0__        for (String name : argNames) {_            Object value = properties.get(name)___            _            if (value != null && types[index].isArray()) {_                Class<?> type = types[index]___                if (value instanceof Collection) {_                    _                    Collection<?> collection = (Collection<?>) value__                    Object array = Array.newInstance(type.getComponentType(), collection.size())__                    if (array instanceof Object[]) {_                        collection.toArray((Object[]) array)__                    } else {_                        int i = 0__                        for (Object el : collection) {_                            Array.set(array, i++, el)__                        }_                    }_                    value = array__                } else if (value.getClass().isArray()_                    && type.getComponentType().isAssignableFrom(value.getClass().getComponentType())) {_                    _                    final int size = Array.getLength(value)__                    Object array = Array.newInstance(type.getComponentType(), size)__                    for (int i = 0_ i < size_ i++) {_                        Array.set(array, i, Array.get(value, i))__                    }_                    value = array__                } else {_                    throw new IllegalArgumentException(_                        String.format("Cannot convert %s to %s", value.getClass(), type))__                }_            }__            values[index++] = value__        }__        try {_            return method.getMethod().invoke(facebook, values)__        } catch (Throwable e) {_            _            String msg__            if (e.getCause() != null && e.getCause() instanceof FacebookException) {_                e = e.getCause()__                msg = ((FacebookException)e).getErrorMessage()__            } else {_                msg = e.getMessage()__            }_            throw new RuntimeCamelException(_                String.format("Error invoking %s with %s: %s", method.getName(), properties, msg), e)__        }_    };invokes,given,method,with,argument,values,from,given,properties,param,facebook,facebook4j,target,object,for,invoke,param,method,method,to,invoke,param,properties,map,of,arguments,return,result,of,method,invocation,throws,runtime,camel,exception,on,errors;public,static,object,invoke,method,facebook,facebook,facebook,methods,type,method,map,string,object,properties,throws,runtime,camel,exception,log,debug,invoking,with,arguments,method,get,name,properties,final,list,string,arg,names,method,get,arg,names,final,object,values,new,object,arg,names,size,final,list,class,arg,types,method,get,arg,types,final,class,types,arg,types,to,array,new,class,arg,types,size,int,index,0,for,string,name,arg,names,object,value,properties,get,name,if,value,null,types,index,is,array,class,type,types,index,if,value,instanceof,collection,collection,collection,collection,value,object,array,array,new,instance,type,get,component,type,collection,size,if,array,instanceof,object,collection,to,array,object,array,else,int,i,0,for,object,el,collection,array,set,array,i,el,value,array,else,if,value,get,class,is,array,type,get,component,type,is,assignable,from,value,get,class,get,component,type,final,int,size,array,get,length,value,object,array,array,new,instance,type,get,component,type,size,for,int,i,0,i,size,i,array,set,array,i,array,get,value,i,value,array,else,throw,new,illegal,argument,exception,string,format,cannot,convert,s,to,s,value,get,class,type,values,index,value,try,return,method,get,method,invoke,facebook,values,catch,throwable,e,string,msg,if,e,get,cause,null,e,get,cause,instanceof,facebook,exception,e,e,get,cause,msg,facebook,exception,e,get,error,message,else,msg,e,get,message,throw,new,runtime,camel,exception,string,format,error,invoking,s,with,s,s,method,get,name,properties,msg,e
FacebookMethodsTypeHelper -> public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)         throws RuntimeCamelException;1461916938;Invokes given method with argument values from given properties.__@param facebook Facebook4J target object for invoke_@param method method to invoke_@param properties Map of arguments_@return result of method invocation_@throws RuntimeCamelException on errors;public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)_        throws RuntimeCamelException {__        LOG.debug("Invoking {} with arguments {}", method.getName(), properties)___        final List<String> argNames = method.getArgNames()__        final Object[] values = new Object[argNames.size()]__        final List<Class<?>> argTypes = method.getArgTypes()__        final Class<?>[] types = argTypes.toArray(new Class[argTypes.size()])__        int index = 0__        for (String name : argNames) {_            Object value = properties.get(name)___            _            if (value != null && types[index].isArray()) {_                Class<?> type = types[index]___                if (value instanceof Collection) {_                    _                    Collection<?> collection = (Collection<?>) value__                    Object array = Array.newInstance(type.getComponentType(), collection.size())__                    if (array instanceof Object[]) {_                        collection.toArray((Object[]) array)__                    } else {_                        int i = 0__                        for (Object el : collection) {_                            Array.set(array, i++, el)__                        }_                    }_                    value = array__                } else if (value.getClass().isArray()_                    && type.getComponentType().isAssignableFrom(value.getClass().getComponentType())) {_                    _                    final int size = Array.getLength(value)__                    Object array = Array.newInstance(type.getComponentType(), size)__                    for (int i = 0_ i < size_ i++) {_                        Array.set(array, i, Array.get(value, i))__                    }_                    value = array__                } else {_                    throw new IllegalArgumentException(_                        String.format("Cannot convert %s to %s", value.getClass(), type))__                }_            }__            values[index++] = value__        }__        try {_            return method.getMethod().invoke(facebook, values)__        } catch (Throwable e) {_            _            String msg__            if (e.getCause() != null && e.getCause() instanceof FacebookException) {_                e = e.getCause()__                msg = ((FacebookException)e).getErrorMessage()__            } else {_                msg = e.getMessage()__            }_            throw new RuntimeCamelException(_                String.format("Error invoking %s with %s: %s", method.getName(), properties, msg), e)__        }_    };invokes,given,method,with,argument,values,from,given,properties,param,facebook,facebook4j,target,object,for,invoke,param,method,method,to,invoke,param,properties,map,of,arguments,return,result,of,method,invocation,throws,runtime,camel,exception,on,errors;public,static,object,invoke,method,facebook,facebook,facebook,methods,type,method,map,string,object,properties,throws,runtime,camel,exception,log,debug,invoking,with,arguments,method,get,name,properties,final,list,string,arg,names,method,get,arg,names,final,object,values,new,object,arg,names,size,final,list,class,arg,types,method,get,arg,types,final,class,types,arg,types,to,array,new,class,arg,types,size,int,index,0,for,string,name,arg,names,object,value,properties,get,name,if,value,null,types,index,is,array,class,type,types,index,if,value,instanceof,collection,collection,collection,collection,value,object,array,array,new,instance,type,get,component,type,collection,size,if,array,instanceof,object,collection,to,array,object,array,else,int,i,0,for,object,el,collection,array,set,array,i,el,value,array,else,if,value,get,class,is,array,type,get,component,type,is,assignable,from,value,get,class,get,component,type,final,int,size,array,get,length,value,object,array,array,new,instance,type,get,component,type,size,for,int,i,0,i,size,i,array,set,array,i,array,get,value,i,value,array,else,throw,new,illegal,argument,exception,string,format,cannot,convert,s,to,s,value,get,class,type,values,index,value,try,return,method,get,method,invoke,facebook,values,catch,throwable,e,string,msg,if,e,get,cause,null,e,get,cause,instanceof,facebook,exception,e,e,get,cause,msg,facebook,exception,e,get,error,message,else,msg,e,get,message,throw,new,runtime,camel,exception,string,format,error,invoking,s,with,s,s,method,get,name,properties,msg,e
FacebookMethodsTypeHelper -> public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)         throws RuntimeCamelException;1513158838;Invokes given method with argument values from given properties.__@param facebook Facebook4J target object for invoke_@param method method to invoke_@param properties Map of arguments_@return result of method invocation_@throws RuntimeCamelException on errors;public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)_        throws RuntimeCamelException {__        LOG.debug("Invoking {} with arguments {}", method.getName(), properties)___        final List<String> argNames = method.getArgNames()__        final Object[] values = new Object[argNames.size()]__        final List<Class<?>> argTypes = method.getArgTypes()__        final Class<?>[] types = argTypes.toArray(new Class[argTypes.size()])__        int index = 0__        for (String name : argNames) {_            Object value = properties.get(name)___            _            if (value != null && types[index].isArray()) {_                Class<?> type = types[index]___                if (value instanceof Collection) {_                    _                    Collection<?> collection = (Collection<?>) value__                    Object array = Array.newInstance(type.getComponentType(), collection.size())__                    if (array instanceof Object[]) {_                        collection.toArray((Object[]) array)__                    } else {_                        int i = 0__                        for (Object el : collection) {_                            Array.set(array, i++, el)__                        }_                    }_                    value = array__                } else if (value.getClass().isArray()_                    && type.getComponentType().isAssignableFrom(value.getClass().getComponentType())) {_                    _                    final int size = Array.getLength(value)__                    Object array = Array.newInstance(type.getComponentType(), size)__                    for (int i = 0_ i < size_ i++) {_                        Array.set(array, i, Array.get(value, i))__                    }_                    value = array__                } else {_                    throw new IllegalArgumentException(_                        String.format("Cannot convert %s to %s", value.getClass(), type))__                }_            }__            values[index++] = value__        }__        try {_            return method.getMethod().invoke(facebook, values)__        } catch (Throwable e) {_            _            String msg__            if (e.getCause() instanceof FacebookException) {_                e = e.getCause()__                msg = ((FacebookException)e).getErrorMessage()__            } else {_                msg = e.getMessage()__            }_            throw new RuntimeCamelException(_                String.format("Error invoking %s with %s: %s", method.getName(), properties, msg), e)__        }_    };invokes,given,method,with,argument,values,from,given,properties,param,facebook,facebook4j,target,object,for,invoke,param,method,method,to,invoke,param,properties,map,of,arguments,return,result,of,method,invocation,throws,runtime,camel,exception,on,errors;public,static,object,invoke,method,facebook,facebook,facebook,methods,type,method,map,string,object,properties,throws,runtime,camel,exception,log,debug,invoking,with,arguments,method,get,name,properties,final,list,string,arg,names,method,get,arg,names,final,object,values,new,object,arg,names,size,final,list,class,arg,types,method,get,arg,types,final,class,types,arg,types,to,array,new,class,arg,types,size,int,index,0,for,string,name,arg,names,object,value,properties,get,name,if,value,null,types,index,is,array,class,type,types,index,if,value,instanceof,collection,collection,collection,collection,value,object,array,array,new,instance,type,get,component,type,collection,size,if,array,instanceof,object,collection,to,array,object,array,else,int,i,0,for,object,el,collection,array,set,array,i,el,value,array,else,if,value,get,class,is,array,type,get,component,type,is,assignable,from,value,get,class,get,component,type,final,int,size,array,get,length,value,object,array,array,new,instance,type,get,component,type,size,for,int,i,0,i,size,i,array,set,array,i,array,get,value,i,value,array,else,throw,new,illegal,argument,exception,string,format,cannot,convert,s,to,s,value,get,class,type,values,index,value,try,return,method,get,method,invoke,facebook,values,catch,throwable,e,string,msg,if,e,get,cause,instanceof,facebook,exception,e,e,get,cause,msg,facebook,exception,e,get,error,message,else,msg,e,get,message,throw,new,runtime,camel,exception,string,format,error,invoking,s,with,s,s,method,get,name,properties,msg,e
FacebookMethodsTypeHelper -> public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)         throws RuntimeCamelException;1523994338;Invokes given method with argument values from given properties.__@param facebook Facebook4J target object for invoke_@param method method to invoke_@param properties Map of arguments_@return result of method invocation_@throws RuntimeCamelException on errors;public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)_        throws RuntimeCamelException {__        LOG.debug("Invoking {} with arguments {}", method.getName(), properties)___        final List<String> argNames = method.getArgNames()__        final Object[] values = new Object[argNames.size()]__        final List<Class<?>> argTypes = method.getArgTypes()__        final Class<?>[] types = argTypes.toArray(new Class[argTypes.size()])__        int index = 0__        for (String name : argNames) {_            Object value = properties.get(name)___            _            if (value != null && types[index].isArray()) {_                Class<?> type = types[index]___                if (value instanceof Collection) {_                    _                    Collection<?> collection = (Collection<?>) value__                    Object array = Array.newInstance(type.getComponentType(), collection.size())__                    if (array instanceof Object[]) {_                        collection.toArray((Object[]) array)__                    } else {_                        int i = 0__                        for (Object el : collection) {_                            Array.set(array, i++, el)__                        }_                    }_                    value = array__                } else if (value.getClass().isArray()_                    && type.getComponentType().isAssignableFrom(value.getClass().getComponentType())) {_                    _                    final int size = Array.getLength(value)__                    Object array = Array.newInstance(type.getComponentType(), size)__                    for (int i = 0_ i < size_ i++) {_                        Array.set(array, i, Array.get(value, i))__                    }_                    value = array__                } else {_                    throw new IllegalArgumentException(_                        String.format("Cannot convert %s to %s", value.getClass(), type))__                }_            }__            values[index++] = value__        }__        try {_            return method.getMethod().invoke(facebook, values)__        } catch (Throwable e) {_            _            String msg__            if (e.getCause() instanceof FacebookException) {_                e = e.getCause()__                msg = ((FacebookException)e).getErrorMessage()__            } else {_                msg = e.getMessage()__            }_            throw new RuntimeCamelException(_                String.format("Error invoking %s with %s: %s", method.getName(), properties, msg), e)__        }_    };invokes,given,method,with,argument,values,from,given,properties,param,facebook,facebook4j,target,object,for,invoke,param,method,method,to,invoke,param,properties,map,of,arguments,return,result,of,method,invocation,throws,runtime,camel,exception,on,errors;public,static,object,invoke,method,facebook,facebook,facebook,methods,type,method,map,string,object,properties,throws,runtime,camel,exception,log,debug,invoking,with,arguments,method,get,name,properties,final,list,string,arg,names,method,get,arg,names,final,object,values,new,object,arg,names,size,final,list,class,arg,types,method,get,arg,types,final,class,types,arg,types,to,array,new,class,arg,types,size,int,index,0,for,string,name,arg,names,object,value,properties,get,name,if,value,null,types,index,is,array,class,type,types,index,if,value,instanceof,collection,collection,collection,collection,value,object,array,array,new,instance,type,get,component,type,collection,size,if,array,instanceof,object,collection,to,array,object,array,else,int,i,0,for,object,el,collection,array,set,array,i,el,value,array,else,if,value,get,class,is,array,type,get,component,type,is,assignable,from,value,get,class,get,component,type,final,int,size,array,get,length,value,object,array,array,new,instance,type,get,component,type,size,for,int,i,0,i,size,i,array,set,array,i,array,get,value,i,value,array,else,throw,new,illegal,argument,exception,string,format,cannot,convert,s,to,s,value,get,class,type,values,index,value,try,return,method,get,method,invoke,facebook,values,catch,throwable,e,string,msg,if,e,get,cause,instanceof,facebook,exception,e,e,get,cause,msg,facebook,exception,e,get,error,message,else,msg,e,get,message,throw,new,runtime,camel,exception,string,format,error,invoking,s,with,s,s,method,get,name,properties,msg,e
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,                                                           String... argNames);1378019315;Filters a list of methods to those that take the given set of arguments.__@param methods list of methods to filter_@param matchType whether the arguments are an exact match, a subset or a super set of method args_@param argNames argument names to filter the list_@return methods with arguments that satisfy the match type.<p/>_For SUPER_SET match, if methods with exact match are found, methods that take a subset are ignored;public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,_                                                          String... argNames) {_        List<String> argsList = Arrays.asList(argNames)__        _        final List<FacebookMethodsType> result = new ArrayList<FacebookMethodsType>()__        final List<FacebookMethodsType> extraArgs = new ArrayList<FacebookMethodsType>()___        for (FacebookMethodsType method : methods) {_            final List<String> methodArgs = method.getArgNames()__            switch (matchType) {_            case EXACT:_                _                if (methodArgs.containsAll(argsList) && argsList.containsAll(methodArgs)) {_                    result.add(method)__                }_                break__            case SUBSET:_                _                if (methodArgs.containsAll(argsList)) {_                    result.add(method)__                }_                break__            default:_            case SUPER_SET:_                _                if (argsList.containsAll(methodArgs)) {_                    if (methodArgs.containsAll(argsList)) {_                        _                        result.add(method)__                    } else {_                        _                        extraArgs.add(method)__                    }_                }_                break__            }_        }__        return Collections.unmodifiableList(result.isEmpty() ? extraArgs : result)__    };filters,a,list,of,methods,to,those,that,take,the,given,set,of,arguments,param,methods,list,of,methods,to,filter,param,match,type,whether,the,arguments,are,an,exact,match,a,subset,or,a,super,set,of,method,args,param,arg,names,argument,names,to,filter,the,list,return,methods,with,arguments,that,satisfy,the,match,type,p,for,match,if,methods,with,exact,match,are,found,methods,that,take,a,subset,are,ignored;public,static,list,facebook,methods,type,filter,methods,list,facebook,methods,type,methods,match,type,match,type,string,arg,names,list,string,args,list,arrays,as,list,arg,names,final,list,facebook,methods,type,result,new,array,list,facebook,methods,type,final,list,facebook,methods,type,extra,args,new,array,list,facebook,methods,type,for,facebook,methods,type,method,methods,final,list,string,method,args,method,get,arg,names,switch,match,type,case,exact,if,method,args,contains,all,args,list,args,list,contains,all,method,args,result,add,method,break,case,subset,if,method,args,contains,all,args,list,result,add,method,break,default,case,if,args,list,contains,all,method,args,if,method,args,contains,all,args,list,result,add,method,else,extra,args,add,method,break,return,collections,unmodifiable,list,result,is,empty,extra,args,result
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,                                                           String... argNames);1378021635;Filters a list of methods to those that take the given set of arguments.__@param methods list of methods to filter_@param matchType whether the arguments are an exact match, a subset or a super set of method args_@param argNames argument names to filter the list_@return methods with arguments that satisfy the match type.<p/>_For SUPER_SET match, if methods with exact match are found, methods that take a subset are ignored;public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,_                                                          String... argNames) {_        List<String> argsList = Arrays.asList(argNames)__        _        final List<FacebookMethodsType> result = new ArrayList<FacebookMethodsType>()__        final List<FacebookMethodsType> extraArgs = new ArrayList<FacebookMethodsType>()___        for (FacebookMethodsType method : methods) {_            final List<String> methodArgs = method.getArgNames()__            switch (matchType) {_            case EXACT:_                _                if (methodArgs.containsAll(argsList) && argsList.containsAll(methodArgs)) {_                    result.add(method)__                }_                break__            case SUBSET:_                _                if (methodArgs.containsAll(argsList)) {_                    result.add(method)__                }_                break__            default:_            case SUPER_SET:_                _                if (argsList.containsAll(methodArgs)) {_                    if (methodArgs.containsAll(argsList)) {_                        _                        result.add(method)__                    } else {_                        _                        extraArgs.add(method)__                    }_                }_                break__            }_        }__        return Collections.unmodifiableList(result.isEmpty() ? extraArgs : result)__    };filters,a,list,of,methods,to,those,that,take,the,given,set,of,arguments,param,methods,list,of,methods,to,filter,param,match,type,whether,the,arguments,are,an,exact,match,a,subset,or,a,super,set,of,method,args,param,arg,names,argument,names,to,filter,the,list,return,methods,with,arguments,that,satisfy,the,match,type,p,for,match,if,methods,with,exact,match,are,found,methods,that,take,a,subset,are,ignored;public,static,list,facebook,methods,type,filter,methods,list,facebook,methods,type,methods,match,type,match,type,string,arg,names,list,string,args,list,arrays,as,list,arg,names,final,list,facebook,methods,type,result,new,array,list,facebook,methods,type,final,list,facebook,methods,type,extra,args,new,array,list,facebook,methods,type,for,facebook,methods,type,method,methods,final,list,string,method,args,method,get,arg,names,switch,match,type,case,exact,if,method,args,contains,all,args,list,args,list,contains,all,method,args,result,add,method,break,case,subset,if,method,args,contains,all,args,list,result,add,method,break,default,case,if,args,list,contains,all,method,args,if,method,args,contains,all,args,list,result,add,method,else,extra,args,add,method,break,return,collections,unmodifiable,list,result,is,empty,extra,args,result
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,                                                           String... argNames);1378024112;Filters a list of methods to those that take the given set of arguments.__@param methods list of methods to filter_@param matchType whether the arguments are an exact match, a subset or a super set of method args_@param argNames argument names to filter the list_@return methods with arguments that satisfy the match type.<p/>_For SUPER_SET match, if methods with exact match are found, methods that take a subset are ignored;public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,_                                                          String... argNames) {_        List<String> argsList = Arrays.asList(argNames)__        _        final List<FacebookMethodsType> result = new ArrayList<FacebookMethodsType>()__        final List<FacebookMethodsType> extraArgs = new ArrayList<FacebookMethodsType>()___        for (FacebookMethodsType method : methods) {_            final List<String> methodArgs = method.getArgNames()__            switch (matchType) {_            case EXACT:_                _                if (methodArgs.containsAll(argsList) && argsList.containsAll(methodArgs)) {_                    result.add(method)__                }_                break__            case SUBSET:_                _                if (methodArgs.containsAll(argsList)) {_                    result.add(method)__                }_                break__            default:_            case SUPER_SET:_                _                if (argsList.containsAll(methodArgs)) {_                    if (methodArgs.containsAll(argsList)) {_                        _                        result.add(method)__                    } else {_                        _                        extraArgs.add(method)__                    }_                }_                break__            }_        }__        return Collections.unmodifiableList(result.isEmpty() ? extraArgs : result)__    };filters,a,list,of,methods,to,those,that,take,the,given,set,of,arguments,param,methods,list,of,methods,to,filter,param,match,type,whether,the,arguments,are,an,exact,match,a,subset,or,a,super,set,of,method,args,param,arg,names,argument,names,to,filter,the,list,return,methods,with,arguments,that,satisfy,the,match,type,p,for,match,if,methods,with,exact,match,are,found,methods,that,take,a,subset,are,ignored;public,static,list,facebook,methods,type,filter,methods,list,facebook,methods,type,methods,match,type,match,type,string,arg,names,list,string,args,list,arrays,as,list,arg,names,final,list,facebook,methods,type,result,new,array,list,facebook,methods,type,final,list,facebook,methods,type,extra,args,new,array,list,facebook,methods,type,for,facebook,methods,type,method,methods,final,list,string,method,args,method,get,arg,names,switch,match,type,case,exact,if,method,args,contains,all,args,list,args,list,contains,all,method,args,result,add,method,break,case,subset,if,method,args,contains,all,args,list,result,add,method,break,default,case,if,args,list,contains,all,method,args,if,method,args,contains,all,args,list,result,add,method,else,extra,args,add,method,break,return,collections,unmodifiable,list,result,is,empty,extra,args,result
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,                                                           String... argNames);1378085101;Filters a list of methods to those that take the given set of arguments.__@param methods list of methods to filter_@param matchType whether the arguments are an exact match, a subset or a super set of method args_@param argNames argument names to filter the list_@return methods with arguments that satisfy the match type.<p/>_For SUPER_SET match, if methods with exact match are found, methods that take a subset are ignored;public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,_                                                          String... argNames) {_        List<String> argsList = Arrays.asList(argNames)__        _        final List<FacebookMethodsType> result = new ArrayList<FacebookMethodsType>()__        final List<FacebookMethodsType> extraArgs = new ArrayList<FacebookMethodsType>()___        for (FacebookMethodsType method : methods) {_            final List<String> methodArgs = method.getArgNames()__            switch (matchType) {_            case EXACT:_                _                if (methodArgs.containsAll(argsList) && argsList.containsAll(methodArgs)) {_                    result.add(method)__                }_                break__            case SUBSET:_                _                if (methodArgs.containsAll(argsList)) {_                    result.add(method)__                }_                break__            default:_            case SUPER_SET:_                _                if (argsList.containsAll(methodArgs)) {_                    if (methodArgs.containsAll(argsList)) {_                        _                        result.add(method)__                    } else {_                        _                        extraArgs.add(method)__                    }_                }_                break__            }_        }__        return Collections.unmodifiableList(result.isEmpty() ? extraArgs : result)__    };filters,a,list,of,methods,to,those,that,take,the,given,set,of,arguments,param,methods,list,of,methods,to,filter,param,match,type,whether,the,arguments,are,an,exact,match,a,subset,or,a,super,set,of,method,args,param,arg,names,argument,names,to,filter,the,list,return,methods,with,arguments,that,satisfy,the,match,type,p,for,match,if,methods,with,exact,match,are,found,methods,that,take,a,subset,are,ignored;public,static,list,facebook,methods,type,filter,methods,list,facebook,methods,type,methods,match,type,match,type,string,arg,names,list,string,args,list,arrays,as,list,arg,names,final,list,facebook,methods,type,result,new,array,list,facebook,methods,type,final,list,facebook,methods,type,extra,args,new,array,list,facebook,methods,type,for,facebook,methods,type,method,methods,final,list,string,method,args,method,get,arg,names,switch,match,type,case,exact,if,method,args,contains,all,args,list,args,list,contains,all,method,args,result,add,method,break,case,subset,if,method,args,contains,all,args,list,result,add,method,break,default,case,if,args,list,contains,all,method,args,if,method,args,contains,all,args,list,result,add,method,else,extra,args,add,method,break,return,collections,unmodifiable,list,result,is,empty,extra,args,result
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,                                                           String... argNames);1461916938;Filters a list of methods to those that take the given set of arguments.__@param methods list of methods to filter_@param matchType whether the arguments are an exact match, a subset or a super set of method args_@param argNames argument names to filter the list_@return methods with arguments that satisfy the match type.<p/>_For SUPER_SET match, if methods with exact match are found, methods that take a subset are ignored;public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,_                                                          String... argNames) {_        List<String> argsList = Arrays.asList(argNames)__        _        final List<FacebookMethodsType> result = new ArrayList<FacebookMethodsType>()__        final List<FacebookMethodsType> extraArgs = new ArrayList<FacebookMethodsType>()___        for (FacebookMethodsType method : methods) {_            final List<String> methodArgs = method.getArgNames()__            switch (matchType) {_            case EXACT:_                _                if (methodArgs.containsAll(argsList) && argsList.containsAll(methodArgs)) {_                    result.add(method)__                }_                break__            case SUBSET:_                _                if (methodArgs.containsAll(argsList)) {_                    result.add(method)__                }_                break__            default:_            case SUPER_SET:_                _                if (argsList.containsAll(methodArgs)) {_                    if (methodArgs.containsAll(argsList)) {_                        _                        result.add(method)__                    } else {_                        _                        extraArgs.add(method)__                    }_                }_                break__            }_        }__        return Collections.unmodifiableList(result.isEmpty() ? extraArgs : result)__    };filters,a,list,of,methods,to,those,that,take,the,given,set,of,arguments,param,methods,list,of,methods,to,filter,param,match,type,whether,the,arguments,are,an,exact,match,a,subset,or,a,super,set,of,method,args,param,arg,names,argument,names,to,filter,the,list,return,methods,with,arguments,that,satisfy,the,match,type,p,for,match,if,methods,with,exact,match,are,found,methods,that,take,a,subset,are,ignored;public,static,list,facebook,methods,type,filter,methods,list,facebook,methods,type,methods,match,type,match,type,string,arg,names,list,string,args,list,arrays,as,list,arg,names,final,list,facebook,methods,type,result,new,array,list,facebook,methods,type,final,list,facebook,methods,type,extra,args,new,array,list,facebook,methods,type,for,facebook,methods,type,method,methods,final,list,string,method,args,method,get,arg,names,switch,match,type,case,exact,if,method,args,contains,all,args,list,args,list,contains,all,method,args,result,add,method,break,case,subset,if,method,args,contains,all,args,list,result,add,method,break,default,case,if,args,list,contains,all,method,args,if,method,args,contains,all,args,list,result,add,method,else,extra,args,add,method,break,return,collections,unmodifiable,list,result,is,empty,extra,args,result
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,                                                           String... argNames);1513158838;Filters a list of methods to those that take the given set of arguments.__@param methods list of methods to filter_@param matchType whether the arguments are an exact match, a subset or a super set of method args_@param argNames argument names to filter the list_@return methods with arguments that satisfy the match type.<p/>_For SUPER_SET match, if methods with exact match are found, methods that take a subset are ignored;public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,_                                                          String... argNames) {_        List<String> argsList = Arrays.asList(argNames)__        _        final List<FacebookMethodsType> result = new ArrayList<FacebookMethodsType>()__        final List<FacebookMethodsType> extraArgs = new ArrayList<FacebookMethodsType>()___        for (FacebookMethodsType method : methods) {_            final List<String> methodArgs = method.getArgNames()__            switch (matchType) {_            case EXACT:_                _                if (methodArgs.containsAll(argsList) && argsList.containsAll(methodArgs)) {_                    result.add(method)__                }_                break__            case SUBSET:_                _                if (methodArgs.containsAll(argsList)) {_                    result.add(method)__                }_                break__            default:_            case SUPER_SET:_                _                if (argsList.containsAll(methodArgs)) {_                    if (methodArgs.containsAll(argsList)) {_                        _                        result.add(method)__                    } else {_                        _                        extraArgs.add(method)__                    }_                }_                break__            }_        }__        return Collections.unmodifiableList(result.isEmpty() ? extraArgs : result)__    };filters,a,list,of,methods,to,those,that,take,the,given,set,of,arguments,param,methods,list,of,methods,to,filter,param,match,type,whether,the,arguments,are,an,exact,match,a,subset,or,a,super,set,of,method,args,param,arg,names,argument,names,to,filter,the,list,return,methods,with,arguments,that,satisfy,the,match,type,p,for,match,if,methods,with,exact,match,are,found,methods,that,take,a,subset,are,ignored;public,static,list,facebook,methods,type,filter,methods,list,facebook,methods,type,methods,match,type,match,type,string,arg,names,list,string,args,list,arrays,as,list,arg,names,final,list,facebook,methods,type,result,new,array,list,facebook,methods,type,final,list,facebook,methods,type,extra,args,new,array,list,facebook,methods,type,for,facebook,methods,type,method,methods,final,list,string,method,args,method,get,arg,names,switch,match,type,case,exact,if,method,args,contains,all,args,list,args,list,contains,all,method,args,result,add,method,break,case,subset,if,method,args,contains,all,args,list,result,add,method,break,default,case,if,args,list,contains,all,method,args,if,method,args,contains,all,args,list,result,add,method,else,extra,args,add,method,break,return,collections,unmodifiable,list,result,is,empty,extra,args,result
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,                                                           String... argNames);1523994338;Filters a list of methods to those that take the given set of arguments.__@param methods list of methods to filter_@param matchType whether the arguments are an exact match, a subset or a super set of method args_@param argNames argument names to filter the list_@return methods with arguments that satisfy the match type.<p/>_For SUPER_SET match, if methods with exact match are found, methods that take a subset are ignored;public static List<FacebookMethodsType> filterMethods(List<FacebookMethodsType> methods, MatchType matchType,_                                                          String... argNames) {_        List<String> argsList = Arrays.asList(argNames)__        _        final List<FacebookMethodsType> result = new ArrayList<>()__        final List<FacebookMethodsType> extraArgs = new ArrayList<>()___        for (FacebookMethodsType method : methods) {_            final List<String> methodArgs = method.getArgNames()__            switch (matchType) {_            case EXACT:_                _                if (methodArgs.containsAll(argsList) && argsList.containsAll(methodArgs)) {_                    result.add(method)__                }_                break__            case SUBSET:_                _                if (methodArgs.containsAll(argsList)) {_                    result.add(method)__                }_                break__            default:_            case SUPER_SET:_                _                if (argsList.containsAll(methodArgs)) {_                    if (methodArgs.containsAll(argsList)) {_                        _                        result.add(method)__                    } else {_                        _                        extraArgs.add(method)__                    }_                }_                break__            }_        }__        return Collections.unmodifiableList(result.isEmpty() ? extraArgs : result)__    };filters,a,list,of,methods,to,those,that,take,the,given,set,of,arguments,param,methods,list,of,methods,to,filter,param,match,type,whether,the,arguments,are,an,exact,match,a,subset,or,a,super,set,of,method,args,param,arg,names,argument,names,to,filter,the,list,return,methods,with,arguments,that,satisfy,the,match,type,p,for,match,if,methods,with,exact,match,are,found,methods,that,take,a,subset,are,ignored;public,static,list,facebook,methods,type,filter,methods,list,facebook,methods,type,methods,match,type,match,type,string,arg,names,list,string,args,list,arrays,as,list,arg,names,final,list,facebook,methods,type,result,new,array,list,final,list,facebook,methods,type,extra,args,new,array,list,for,facebook,methods,type,method,methods,final,list,string,method,args,method,get,arg,names,switch,match,type,case,exact,if,method,args,contains,all,args,list,args,list,contains,all,method,args,result,add,method,break,case,subset,if,method,args,contains,all,args,list,result,add,method,break,default,case,if,args,list,contains,all,method,args,if,method,args,contains,all,args,list,result,add,method,else,extra,args,add,method,break,return,collections,unmodifiable,list,result,is,empty,extra,args,result
FacebookMethodsTypeHelper -> public static List<Object> getArguments(String name) throws IllegalArgumentException;1378019315;Gets argument types and names for all overloaded methods with the given name._@param name method name, must be a long form (i.e. get*, or search*)_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArguments(String name) throws IllegalArgumentException {_        final List<Object> arguments = ARGUMENTS_MAP.get(name)__        if (arguments == null) {_            throw new IllegalArgumentException(name)__        }_        return Collections.unmodifiableList(arguments)__    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,name,param,name,method,name,must,be,a,long,form,i,e,get,or,search,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,string,name,throws,illegal,argument,exception,final,list,object,arguments,get,name,if,arguments,null,throw,new,illegal,argument,exception,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArguments(String name) throws IllegalArgumentException;1378021635;Gets argument types and names for all overloaded methods with the given name._@param name method name, must be a long form (i.e. get*, or search*)_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArguments(String name) throws IllegalArgumentException {_        final List<Object> arguments = ARGUMENTS_MAP.get(name)__        if (arguments == null) {_            throw new IllegalArgumentException(name)__        }_        return Collections.unmodifiableList(arguments)__    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,name,param,name,method,name,must,be,a,long,form,i,e,get,or,search,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,string,name,throws,illegal,argument,exception,final,list,object,arguments,get,name,if,arguments,null,throw,new,illegal,argument,exception,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArguments(String name) throws IllegalArgumentException;1378024112;Gets argument types and names for all overloaded methods with the given name._@param name method name, must be a long form (i.e. get*, or search*)_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArguments(String name) throws IllegalArgumentException {_        final List<Object> arguments = ARGUMENTS_MAP.get(name)__        if (arguments == null) {_            throw new IllegalArgumentException(name)__        }_        return Collections.unmodifiableList(arguments)__    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,name,param,name,method,name,must,be,a,long,form,i,e,get,or,search,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,string,name,throws,illegal,argument,exception,final,list,object,arguments,get,name,if,arguments,null,throw,new,illegal,argument,exception,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArguments(String name) throws IllegalArgumentException;1378085101;Gets argument types and names for all overloaded methods with the given name._@param name method name, must be a long form (i.e. get*, or search*)_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArguments(String name) throws IllegalArgumentException {_        final List<Object> arguments = ARGUMENTS_MAP.get(name)__        if (arguments == null) {_            throw new IllegalArgumentException(name)__        }_        return Collections.unmodifiableList(arguments)__    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,name,param,name,method,name,must,be,a,long,form,i,e,get,or,search,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,string,name,throws,illegal,argument,exception,final,list,object,arguments,get,name,if,arguments,null,throw,new,illegal,argument,exception,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArguments(String name) throws IllegalArgumentException;1461916938;Gets argument types and names for all overloaded methods with the given name._@param name method name, must be a long form (i.e. get*, or search*)_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArguments(String name) throws IllegalArgumentException {_        final List<Object> arguments = ARGUMENTS_MAP.get(name)__        if (arguments == null) {_            throw new IllegalArgumentException(name)__        }_        return Collections.unmodifiableList(arguments)__    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,name,param,name,method,name,must,be,a,long,form,i,e,get,or,search,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,string,name,throws,illegal,argument,exception,final,list,object,arguments,get,name,if,arguments,null,throw,new,illegal,argument,exception,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArguments(String name) throws IllegalArgumentException;1513158838;Gets argument types and names for all overloaded methods with the given name._@param name method name, must be a long form (i.e. get*, or search*)_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArguments(String name) throws IllegalArgumentException {_        final List<Object> arguments = ARGUMENTS_MAP.get(name)__        if (arguments == null) {_            throw new IllegalArgumentException(name)__        }_        return Collections.unmodifiableList(arguments)__    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,name,param,name,method,name,must,be,a,long,form,i,e,get,or,search,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,string,name,throws,illegal,argument,exception,final,list,object,arguments,get,name,if,arguments,null,throw,new,illegal,argument,exception,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static List<Object> getArguments(String name) throws IllegalArgumentException;1523994338;Gets argument types and names for all overloaded methods with the given name._@param name method name, must be a long form (i.e. get*, or search*)_@return list of arguments of the form Class type1, String name1, Class type2, String name2,...;public static List<Object> getArguments(String name) throws IllegalArgumentException {_        final List<Object> arguments = ARGUMENTS_MAP.get(name)__        if (arguments == null) {_            throw new IllegalArgumentException(name)__        }_        return Collections.unmodifiableList(arguments)__    };gets,argument,types,and,names,for,all,overloaded,methods,with,the,given,name,param,name,method,name,must,be,a,long,form,i,e,get,or,search,return,list,of,arguments,of,the,form,class,type1,string,name1,class,type2,string,name2;public,static,list,object,get,arguments,string,name,throws,illegal,argument,exception,final,list,object,arguments,get,name,if,arguments,null,throw,new,illegal,argument,exception,name,return,collections,unmodifiable,list,arguments
FacebookMethodsTypeHelper -> public static Class getType(String argName) throws IllegalArgumentException;1378019315;Get the type for the given argument name._@param argName argument name_@return argument type;public static Class getType(String argName) throws IllegalArgumentException {_        final Class type = VALID_ARGUMENTS.get(argName)__        if (type == null) {_            throw new IllegalArgumentException(argName)__        }_        return type__    };get,the,type,for,the,given,argument,name,param,arg,name,argument,name,return,argument,type;public,static,class,get,type,string,arg,name,throws,illegal,argument,exception,final,class,type,get,arg,name,if,type,null,throw,new,illegal,argument,exception,arg,name,return,type
FacebookMethodsTypeHelper -> public static Class getType(String argName) throws IllegalArgumentException;1378021635;Get the type for the given argument name._@param argName argument name_@return argument type;public static Class getType(String argName) throws IllegalArgumentException {_        final Class type = VALID_ARGUMENTS.get(argName)__        if (type == null) {_            throw new IllegalArgumentException(argName)__        }_        return type__    };get,the,type,for,the,given,argument,name,param,arg,name,argument,name,return,argument,type;public,static,class,get,type,string,arg,name,throws,illegal,argument,exception,final,class,type,get,arg,name,if,type,null,throw,new,illegal,argument,exception,arg,name,return,type
FacebookMethodsTypeHelper -> public static Class<?> getType(String argName) throws IllegalArgumentException;1378024112;Get the type for the given argument name._@param argName argument name_@return argument type;public static Class<?> getType(String argName) throws IllegalArgumentException {_        final Class<?> type = VALID_ARGUMENTS.get(argName)__        if (type == null) {_            throw new IllegalArgumentException(argName)__        }_        return type__    };get,the,type,for,the,given,argument,name,param,arg,name,argument,name,return,argument,type;public,static,class,get,type,string,arg,name,throws,illegal,argument,exception,final,class,type,get,arg,name,if,type,null,throw,new,illegal,argument,exception,arg,name,return,type
FacebookMethodsTypeHelper -> public static Class<?> getType(String argName) throws IllegalArgumentException;1378085101;Get the type for the given argument name._@param argName argument name_@return argument type;public static Class<?> getType(String argName) throws IllegalArgumentException {_        final Class<?> type = VALID_ARGUMENTS.get(argName)__        if (type == null) {_            throw new IllegalArgumentException(argName)__        }_        return type__    };get,the,type,for,the,given,argument,name,param,arg,name,argument,name,return,argument,type;public,static,class,get,type,string,arg,name,throws,illegal,argument,exception,final,class,type,get,arg,name,if,type,null,throw,new,illegal,argument,exception,arg,name,return,type
FacebookMethodsTypeHelper -> public static Class<?> getType(String argName) throws IllegalArgumentException;1461916938;Get the type for the given argument name._@param argName argument name_@return argument type;public static Class<?> getType(String argName) throws IllegalArgumentException {_        final Class<?> type = VALID_ARGUMENTS.get(argName)__        if (type == null) {_            throw new IllegalArgumentException(argName)__        }_        return type__    };get,the,type,for,the,given,argument,name,param,arg,name,argument,name,return,argument,type;public,static,class,get,type,string,arg,name,throws,illegal,argument,exception,final,class,type,get,arg,name,if,type,null,throw,new,illegal,argument,exception,arg,name,return,type
FacebookMethodsTypeHelper -> public static Class<?> getType(String argName) throws IllegalArgumentException;1513158838;Get the type for the given argument name._@param argName argument name_@return argument type;public static Class<?> getType(String argName) throws IllegalArgumentException {_        final Class<?> type = VALID_ARGUMENTS.get(argName)__        if (type == null) {_            throw new IllegalArgumentException(argName)__        }_        return type__    };get,the,type,for,the,given,argument,name,param,arg,name,argument,name,return,argument,type;public,static,class,get,type,string,arg,name,throws,illegal,argument,exception,final,class,type,get,arg,name,if,type,null,throw,new,illegal,argument,exception,arg,name,return,type
FacebookMethodsTypeHelper -> public static Class<?> getType(String argName) throws IllegalArgumentException;1523994338;Get the type for the given argument name._@param argName argument name_@return argument type;public static Class<?> getType(String argName) throws IllegalArgumentException {_        final Class<?> type = VALID_ARGUMENTS.get(argName)__        if (type == null) {_            throw new IllegalArgumentException(argName)__        }_        return type__    };get,the,type,for,the,given,argument,name,param,arg,name,argument,name,return,argument,type;public,static,class,get,type,string,arg,name,throws,illegal,argument,exception,final,class,type,get,arg,name,if,type,null,throw,new,illegal,argument,exception,arg,name,return,type
FacebookMethodsTypeHelper -> public static Map<String, Class> allArguments();1378019315;Get argument types and names used by all methods._@return map with argument names as keys, and types as values;public static Map<String, Class> allArguments() {_        return Collections.unmodifiableMap(VALID_ARGUMENTS)__    };get,argument,types,and,names,used,by,all,methods,return,map,with,argument,names,as,keys,and,types,as,values;public,static,map,string,class,all,arguments,return,collections,unmodifiable,map
FacebookMethodsTypeHelper -> public static Map<String, Class> allArguments();1378021635;Get argument types and names used by all methods._@return map with argument names as keys, and types as values;public static Map<String, Class> allArguments() {_        return Collections.unmodifiableMap(VALID_ARGUMENTS)__    };get,argument,types,and,names,used,by,all,methods,return,map,with,argument,names,as,keys,and,types,as,values;public,static,map,string,class,all,arguments,return,collections,unmodifiable,map
FacebookMethodsTypeHelper -> public static Map<String, Class<?>> allArguments();1378024112;Get argument types and names used by all methods._@return map with argument names as keys, and types as values;public static Map<String, Class<?>> allArguments() {_        return Collections.unmodifiableMap(VALID_ARGUMENTS)__    };get,argument,types,and,names,used,by,all,methods,return,map,with,argument,names,as,keys,and,types,as,values;public,static,map,string,class,all,arguments,return,collections,unmodifiable,map
FacebookMethodsTypeHelper -> public static Map<String, Class<?>> allArguments();1378085101;Get argument types and names used by all methods._@return map with argument names as keys, and types as values;public static Map<String, Class<?>> allArguments() {_        return Collections.unmodifiableMap(VALID_ARGUMENTS)__    };get,argument,types,and,names,used,by,all,methods,return,map,with,argument,names,as,keys,and,types,as,values;public,static,map,string,class,all,arguments,return,collections,unmodifiable,map
FacebookMethodsTypeHelper -> public static Map<String, Class<?>> allArguments();1461916938;Get argument types and names used by all methods._@return map with argument names as keys, and types as values;public static Map<String, Class<?>> allArguments() {_        return Collections.unmodifiableMap(VALID_ARGUMENTS)__    };get,argument,types,and,names,used,by,all,methods,return,map,with,argument,names,as,keys,and,types,as,values;public,static,map,string,class,all,arguments,return,collections,unmodifiable,map
FacebookMethodsTypeHelper -> public static Map<String, Class<?>> allArguments();1513158838;Get argument types and names used by all methods._@return map with argument names as keys, and types as values;public static Map<String, Class<?>> allArguments() {_        return Collections.unmodifiableMap(VALID_ARGUMENTS)__    };get,argument,types,and,names,used,by,all,methods,return,map,with,argument,names,as,keys,and,types,as,values;public,static,map,string,class,all,arguments,return,collections,unmodifiable,map
FacebookMethodsTypeHelper -> public static Map<String, Class<?>> allArguments();1523994338;Get argument types and names used by all methods._@return map with argument names as keys, and types as values;public static Map<String, Class<?>> allArguments() {_        return Collections.unmodifiableMap(VALID_ARGUMENTS)__    };get,argument,types,and,names,used,by,all,methods,return,map,with,argument,names,as,keys,and,types,as,values;public,static,map,string,class,all,arguments,return,collections,unmodifiable,map
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames);1378019315;Gets methods that match the given name and arguments.<p/>_Note that the args list is a required subset of arguments for returned methods._@param name case sensitive full method name to lookup_@param argNames unordered required argument names_@return non-null unmodifiable list of methods that take all of the given arguments, empty if there is no match;public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {_        final List<FacebookMethodsType> methods = METHOD_MAP.get(name)__        if (methods == null) {_            LOG.debug("No matching method for method {}", name)__            return Collections.emptyList()__        }_        int nArgs = argNames != null ? argNames.length : 0__        if (nArgs == 0) {_            LOG.debug("Found {} methods for method {}", methods.size(), name)__            return Collections.unmodifiableList(methods)__        } else {_            final List<FacebookMethodsType> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Found {} filtered methods for {}",_                    filteredSet.size(), name + Arrays.toString(argNames).replace('[', '(').replace(']', ')'))__            }_            return filteredSet__        }_    };gets,methods,that,match,the,given,name,and,arguments,p,note,that,the,args,list,is,a,required,subset,of,arguments,for,returned,methods,param,name,case,sensitive,full,method,name,to,lookup,param,arg,names,unordered,required,argument,names,return,non,null,unmodifiable,list,of,methods,that,take,all,of,the,given,arguments,empty,if,there,is,no,match;public,static,list,facebook,methods,type,get,candidate,methods,string,name,string,arg,names,final,list,facebook,methods,type,methods,get,name,if,methods,null,log,debug,no,matching,method,for,method,name,return,collections,empty,list,int,n,args,arg,names,null,arg,names,length,0,if,n,args,0,log,debug,found,methods,for,method,methods,size,name,return,collections,unmodifiable,list,methods,else,final,list,facebook,methods,type,filtered,set,filter,methods,methods,match,type,subset,arg,names,if,log,is,debug,enabled,log,debug,found,filtered,methods,for,filtered,set,size,name,arrays,to,string,arg,names,replace,replace,return,filtered,set
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames);1378021635;Gets methods that match the given name and arguments.<p/>_Note that the args list is a required subset of arguments for returned methods._@param name case sensitive full method name to lookup_@param argNames unordered required argument names_@return non-null unmodifiable list of methods that take all of the given arguments, empty if there is no match;public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {_        final List<FacebookMethodsType> methods = METHOD_MAP.get(name)__        if (methods == null) {_            LOG.debug("No matching method for method {}", name)__            return Collections.emptyList()__        }_        int nArgs = argNames != null ? argNames.length : 0__        if (nArgs == 0) {_            LOG.debug("Found {} methods for method {}", methods.size(), name)__            return Collections.unmodifiableList(methods)__        } else {_            final List<FacebookMethodsType> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Found {} filtered methods for {}",_                    filteredSet.size(), name + Arrays.toString(argNames).replace('[', '(').replace(']', ')'))__            }_            return filteredSet__        }_    };gets,methods,that,match,the,given,name,and,arguments,p,note,that,the,args,list,is,a,required,subset,of,arguments,for,returned,methods,param,name,case,sensitive,full,method,name,to,lookup,param,arg,names,unordered,required,argument,names,return,non,null,unmodifiable,list,of,methods,that,take,all,of,the,given,arguments,empty,if,there,is,no,match;public,static,list,facebook,methods,type,get,candidate,methods,string,name,string,arg,names,final,list,facebook,methods,type,methods,get,name,if,methods,null,log,debug,no,matching,method,for,method,name,return,collections,empty,list,int,n,args,arg,names,null,arg,names,length,0,if,n,args,0,log,debug,found,methods,for,method,methods,size,name,return,collections,unmodifiable,list,methods,else,final,list,facebook,methods,type,filtered,set,filter,methods,methods,match,type,subset,arg,names,if,log,is,debug,enabled,log,debug,found,filtered,methods,for,filtered,set,size,name,arrays,to,string,arg,names,replace,replace,return,filtered,set
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames);1378024112;Gets methods that match the given name and arguments.<p/>_Note that the args list is a required subset of arguments for returned methods._@param name case sensitive full method name to lookup_@param argNames unordered required argument names_@return non-null unmodifiable list of methods that take all of the given arguments, empty if there is no match;public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {_        final List<FacebookMethodsType> methods = METHOD_MAP.get(name)__        if (methods == null) {_            LOG.debug("No matching method for method {}", name)__            return Collections.emptyList()__        }_        int nArgs = argNames != null ? argNames.length : 0__        if (nArgs == 0) {_            LOG.debug("Found {} methods for method {}", methods.size(), name)__            return Collections.unmodifiableList(methods)__        } else {_            final List<FacebookMethodsType> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Found {} filtered methods for {}",_                    filteredSet.size(), name + Arrays.toString(argNames).replace('[', '(').replace(']', ')'))__            }_            return filteredSet__        }_    };gets,methods,that,match,the,given,name,and,arguments,p,note,that,the,args,list,is,a,required,subset,of,arguments,for,returned,methods,param,name,case,sensitive,full,method,name,to,lookup,param,arg,names,unordered,required,argument,names,return,non,null,unmodifiable,list,of,methods,that,take,all,of,the,given,arguments,empty,if,there,is,no,match;public,static,list,facebook,methods,type,get,candidate,methods,string,name,string,arg,names,final,list,facebook,methods,type,methods,get,name,if,methods,null,log,debug,no,matching,method,for,method,name,return,collections,empty,list,int,n,args,arg,names,null,arg,names,length,0,if,n,args,0,log,debug,found,methods,for,method,methods,size,name,return,collections,unmodifiable,list,methods,else,final,list,facebook,methods,type,filtered,set,filter,methods,methods,match,type,subset,arg,names,if,log,is,debug,enabled,log,debug,found,filtered,methods,for,filtered,set,size,name,arrays,to,string,arg,names,replace,replace,return,filtered,set
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames);1378085101;Gets methods that match the given name and arguments.<p/>_Note that the args list is a required subset of arguments for returned methods._@param name case sensitive full method name to lookup_@param argNames unordered required argument names_@return non-null unmodifiable list of methods that take all of the given arguments, empty if there is no match;public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {_        final List<FacebookMethodsType> methods = METHOD_MAP.get(name)__        if (methods == null) {_            LOG.debug("No matching method for method {}", name)__            return Collections.emptyList()__        }_        int nArgs = argNames != null ? argNames.length : 0__        if (nArgs == 0) {_            LOG.debug("Found {} methods for method {}", methods.size(), name)__            return Collections.unmodifiableList(methods)__        } else {_            final List<FacebookMethodsType> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Found {} filtered methods for {}",_                    filteredSet.size(), name + Arrays.toString(argNames).replace('[', '(').replace(']', ')'))__            }_            return filteredSet__        }_    };gets,methods,that,match,the,given,name,and,arguments,p,note,that,the,args,list,is,a,required,subset,of,arguments,for,returned,methods,param,name,case,sensitive,full,method,name,to,lookup,param,arg,names,unordered,required,argument,names,return,non,null,unmodifiable,list,of,methods,that,take,all,of,the,given,arguments,empty,if,there,is,no,match;public,static,list,facebook,methods,type,get,candidate,methods,string,name,string,arg,names,final,list,facebook,methods,type,methods,get,name,if,methods,null,log,debug,no,matching,method,for,method,name,return,collections,empty,list,int,n,args,arg,names,null,arg,names,length,0,if,n,args,0,log,debug,found,methods,for,method,methods,size,name,return,collections,unmodifiable,list,methods,else,final,list,facebook,methods,type,filtered,set,filter,methods,methods,match,type,subset,arg,names,if,log,is,debug,enabled,log,debug,found,filtered,methods,for,filtered,set,size,name,arrays,to,string,arg,names,replace,replace,return,filtered,set
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames);1461916938;Gets methods that match the given name and arguments.<p/>_Note that the args list is a required subset of arguments for returned methods._@param name case sensitive full method name to lookup_@param argNames unordered required argument names_@return non-null unmodifiable list of methods that take all of the given arguments, empty if there is no match;public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {_        final List<FacebookMethodsType> methods = METHOD_MAP.get(name)__        if (methods == null) {_            LOG.debug("No matching method for method {}", name)__            return Collections.emptyList()__        }_        int nArgs = argNames != null ? argNames.length : 0__        if (nArgs == 0) {_            LOG.debug("Found {} methods for method {}", methods.size(), name)__            return Collections.unmodifiableList(methods)__        } else {_            final List<FacebookMethodsType> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Found {} filtered methods for {}",_                    filteredSet.size(), name + Arrays.toString(argNames).replace('[', '(').replace(']', ')'))__            }_            return filteredSet__        }_    };gets,methods,that,match,the,given,name,and,arguments,p,note,that,the,args,list,is,a,required,subset,of,arguments,for,returned,methods,param,name,case,sensitive,full,method,name,to,lookup,param,arg,names,unordered,required,argument,names,return,non,null,unmodifiable,list,of,methods,that,take,all,of,the,given,arguments,empty,if,there,is,no,match;public,static,list,facebook,methods,type,get,candidate,methods,string,name,string,arg,names,final,list,facebook,methods,type,methods,get,name,if,methods,null,log,debug,no,matching,method,for,method,name,return,collections,empty,list,int,n,args,arg,names,null,arg,names,length,0,if,n,args,0,log,debug,found,methods,for,method,methods,size,name,return,collections,unmodifiable,list,methods,else,final,list,facebook,methods,type,filtered,set,filter,methods,methods,match,type,subset,arg,names,if,log,is,debug,enabled,log,debug,found,filtered,methods,for,filtered,set,size,name,arrays,to,string,arg,names,replace,replace,return,filtered,set
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames);1513158838;Gets methods that match the given name and arguments.<p/>_Note that the args list is a required subset of arguments for returned methods._@param name case sensitive full method name to lookup_@param argNames unordered required argument names_@return non-null unmodifiable list of methods that take all of the given arguments, empty if there is no match;public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {_        final List<FacebookMethodsType> methods = METHOD_MAP.get(name)__        if (methods == null) {_            LOG.debug("No matching method for method {}", name)__            return Collections.emptyList()__        }_        int nArgs = argNames != null ? argNames.length : 0__        if (nArgs == 0) {_            LOG.debug("Found {} methods for method {}", methods.size(), name)__            return Collections.unmodifiableList(methods)__        } else {_            final List<FacebookMethodsType> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Found {} filtered methods for {}",_                    filteredSet.size(), name + Arrays.toString(argNames).replace('[', '(').replace(']', ')'))__            }_            return filteredSet__        }_    };gets,methods,that,match,the,given,name,and,arguments,p,note,that,the,args,list,is,a,required,subset,of,arguments,for,returned,methods,param,name,case,sensitive,full,method,name,to,lookup,param,arg,names,unordered,required,argument,names,return,non,null,unmodifiable,list,of,methods,that,take,all,of,the,given,arguments,empty,if,there,is,no,match;public,static,list,facebook,methods,type,get,candidate,methods,string,name,string,arg,names,final,list,facebook,methods,type,methods,get,name,if,methods,null,log,debug,no,matching,method,for,method,name,return,collections,empty,list,int,n,args,arg,names,null,arg,names,length,0,if,n,args,0,log,debug,found,methods,for,method,methods,size,name,return,collections,unmodifiable,list,methods,else,final,list,facebook,methods,type,filtered,set,filter,methods,methods,match,type,subset,arg,names,if,log,is,debug,enabled,log,debug,found,filtered,methods,for,filtered,set,size,name,arrays,to,string,arg,names,replace,replace,return,filtered,set
FacebookMethodsTypeHelper -> public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames);1523994338;Gets methods that match the given name and arguments.<p/>_Note that the args list is a required subset of arguments for returned methods._@param name case sensitive full method name to lookup_@param argNames unordered required argument names_@return non-null unmodifiable list of methods that take all of the given arguments, empty if there is no match;public static List<FacebookMethodsType> getCandidateMethods(String name, String... argNames) {_        final List<FacebookMethodsType> methods = METHOD_MAP.get(name)__        if (methods == null) {_            LOG.debug("No matching method for method {}", name)__            return Collections.emptyList()__        }_        int nArgs = argNames != null ? argNames.length : 0__        if (nArgs == 0) {_            LOG.debug("Found {} methods for method {}", methods.size(), name)__            return Collections.unmodifiableList(methods)__        } else {_            final List<FacebookMethodsType> filteredSet = filterMethods(methods, MatchType.SUBSET, argNames)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Found {} filtered methods for {}",_                    filteredSet.size(), name + Arrays.toString(argNames).replace('[', '(').replace(']', ')'))__            }_            return filteredSet__        }_    };gets,methods,that,match,the,given,name,and,arguments,p,note,that,the,args,list,is,a,required,subset,of,arguments,for,returned,methods,param,name,case,sensitive,full,method,name,to,lookup,param,arg,names,unordered,required,argument,names,return,non,null,unmodifiable,list,of,methods,that,take,all,of,the,given,arguments,empty,if,there,is,no,match;public,static,list,facebook,methods,type,get,candidate,methods,string,name,string,arg,names,final,list,facebook,methods,type,methods,get,name,if,methods,null,log,debug,no,matching,method,for,method,name,return,collections,empty,list,int,n,args,arg,names,null,arg,names,length,0,if,n,args,0,log,debug,found,methods,for,method,methods,size,name,return,collections,unmodifiable,list,methods,else,final,list,facebook,methods,type,filtered,set,filter,methods,methods,match,type,subset,arg,names,if,log,is,debug,enabled,log,debug,found,filtered,methods,for,filtered,set,size,name,arrays,to,string,arg,names,replace,replace,return,filtered,set
FacebookMethodsTypeHelper -> @SuppressWarnings("unchecked")     public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)         throws RuntimeCamelException;1378019315;Invokes given method with argument values from given properties.__@param facebook Facebook4J target object for invoke_@param method method to invoke_@param properties Map of arguments_@return result of method invocation_@throws RuntimeCamelException on errors;@SuppressWarnings("unchecked")_    public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)_        throws RuntimeCamelException {__        LOG.debug("Invoking {} with arguments {}", method.getName(), properties)___        final List<String> argNames = method.getArgNames()__        final Object[] values = new Object[argNames.size()]__        final List<Class> argTypes = method.getArgTypes()__        final Class[] types = argTypes.toArray(new Class[argTypes.size()])__        int index = 0__        for (String name : argNames) {_            Object value = properties.get(name)___            _            if (value != null && types[index].isArray()) {_                Class type = types[index]___                if (value instanceof Collection) {_                    _                    Collection collection = (Collection) value__                    Object array = Array.newInstance(type.getComponentType(), collection.size())__                    if (array instanceof Object[]) {_                        collection.toArray((Object[]) array)__                    } else {_                        int i = 0__                        for (Object el : collection) {_                            Array.set(array, i++, el)__                        }_                    }_                    value = array__                } else if (value.getClass().isArray()_                    && type.getComponentType().isAssignableFrom(value.getClass().getComponentType())) {_                    _                    final int size = Array.getLength(value)__                    Object array = Array.newInstance(type.getComponentType(), size)__                    for (int i = 0_ i < size_ i++) {_                        Array.set(array, i, Array.get(value, i))__                    }_                    value = array__                } else {_                    throw new IllegalArgumentException(_                        String.format("Cannot convert %s to %s", value.getClass(), type))__                }_            }__            values[index++] = value__        }__        try {_            return method.getMethod().invoke(facebook, values)__        } catch (Throwable e) {_            _            String msg__            if (e.getCause() != null && e.getCause() instanceof FacebookException) {_                e = e.getCause()__                msg = ((FacebookException)e).getErrorMessage()__            } else {_                msg = e.getMessage()__            }_            throw new RuntimeCamelException(_                String.format("Error invoking %s with %s: %s", method.getName(), properties, msg), e)__        }_    };invokes,given,method,with,argument,values,from,given,properties,param,facebook,facebook4j,target,object,for,invoke,param,method,method,to,invoke,param,properties,map,of,arguments,return,result,of,method,invocation,throws,runtime,camel,exception,on,errors;suppress,warnings,unchecked,public,static,object,invoke,method,facebook,facebook,facebook,methods,type,method,map,string,object,properties,throws,runtime,camel,exception,log,debug,invoking,with,arguments,method,get,name,properties,final,list,string,arg,names,method,get,arg,names,final,object,values,new,object,arg,names,size,final,list,class,arg,types,method,get,arg,types,final,class,types,arg,types,to,array,new,class,arg,types,size,int,index,0,for,string,name,arg,names,object,value,properties,get,name,if,value,null,types,index,is,array,class,type,types,index,if,value,instanceof,collection,collection,collection,collection,value,object,array,array,new,instance,type,get,component,type,collection,size,if,array,instanceof,object,collection,to,array,object,array,else,int,i,0,for,object,el,collection,array,set,array,i,el,value,array,else,if,value,get,class,is,array,type,get,component,type,is,assignable,from,value,get,class,get,component,type,final,int,size,array,get,length,value,object,array,array,new,instance,type,get,component,type,size,for,int,i,0,i,size,i,array,set,array,i,array,get,value,i,value,array,else,throw,new,illegal,argument,exception,string,format,cannot,convert,s,to,s,value,get,class,type,values,index,value,try,return,method,get,method,invoke,facebook,values,catch,throwable,e,string,msg,if,e,get,cause,null,e,get,cause,instanceof,facebook,exception,e,e,get,cause,msg,facebook,exception,e,get,error,message,else,msg,e,get,message,throw,new,runtime,camel,exception,string,format,error,invoking,s,with,s,s,method,get,name,properties,msg,e
FacebookMethodsTypeHelper -> @SuppressWarnings("unchecked")     public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)         throws RuntimeCamelException;1378021635;Invokes given method with argument values from given properties.__@param facebook Facebook4J target object for invoke_@param method method to invoke_@param properties Map of arguments_@return result of method invocation_@throws RuntimeCamelException on errors;@SuppressWarnings("unchecked")_    public static Object invokeMethod(Facebook facebook, FacebookMethodsType method, Map<String, Object> properties)_        throws RuntimeCamelException {__        LOG.debug("Invoking {} with arguments {}", method.getName(), properties)___        final List<String> argNames = method.getArgNames()__        final Object[] values = new Object[argNames.size()]__        final List<Class> argTypes = method.getArgTypes()__        final Class[] types = argTypes.toArray(new Class[argTypes.size()])__        int index = 0__        for (String name : argNames) {_            Object value = properties.get(name)___            _            if (value != null && types[index].isArray()) {_                Class type = types[index]___                if (value instanceof Collection) {_                    _                    Collection collection = (Collection) value__                    Object array = Array.newInstance(type.getComponentType(), collection.size())__                    if (array instanceof Object[]) {_                        collection.toArray((Object[]) array)__                    } else {_                        int i = 0__                        for (Object el : collection) {_                            Array.set(array, i++, el)__                        }_                    }_                    value = array__                } else if (value.getClass().isArray()_                    && type.getComponentType().isAssignableFrom(value.getClass().getComponentType())) {_                    _                    final int size = Array.getLength(value)__                    Object array = Array.newInstance(type.getComponentType(), size)__                    for (int i = 0_ i < size_ i++) {_                        Array.set(array, i, Array.get(value, i))__                    }_                    value = array__                } else {_                    throw new IllegalArgumentException(_                        String.format("Cannot convert %s to %s", value.getClass(), type))__                }_            }__            values[index++] = value__        }__        try {_            return method.getMethod().invoke(facebook, values)__        } catch (Throwable e) {_            _            String msg__            if (e.getCause() != null && e.getCause() instanceof FacebookException) {_                e = e.getCause()__                msg = ((FacebookException)e).getErrorMessage()__            } else {_                msg = e.getMessage()__            }_            throw new RuntimeCamelException(_                String.format("Error invoking %s with %s: %s", method.getName(), properties, msg), e)__        }_    };invokes,given,method,with,argument,values,from,given,properties,param,facebook,facebook4j,target,object,for,invoke,param,method,method,to,invoke,param,properties,map,of,arguments,return,result,of,method,invocation,throws,runtime,camel,exception,on,errors;suppress,warnings,unchecked,public,static,object,invoke,method,facebook,facebook,facebook,methods,type,method,map,string,object,properties,throws,runtime,camel,exception,log,debug,invoking,with,arguments,method,get,name,properties,final,list,string,arg,names,method,get,arg,names,final,object,values,new,object,arg,names,size,final,list,class,arg,types,method,get,arg,types,final,class,types,arg,types,to,array,new,class,arg,types,size,int,index,0,for,string,name,arg,names,object,value,properties,get,name,if,value,null,types,index,is,array,class,type,types,index,if,value,instanceof,collection,collection,collection,collection,value,object,array,array,new,instance,type,get,component,type,collection,size,if,array,instanceof,object,collection,to,array,object,array,else,int,i,0,for,object,el,collection,array,set,array,i,el,value,array,else,if,value,get,class,is,array,type,get,component,type,is,assignable,from,value,get,class,get,component,type,final,int,size,array,get,length,value,object,array,array,new,instance,type,get,component,type,size,for,int,i,0,i,size,i,array,set,array,i,array,get,value,i,value,array,else,throw,new,illegal,argument,exception,string,format,cannot,convert,s,to,s,value,get,class,type,values,index,value,try,return,method,get,method,invoke,facebook,values,catch,throwable,e,string,msg,if,e,get,cause,null,e,get,cause,instanceof,facebook,exception,e,e,get,cause,msg,facebook,exception,e,get,error,message,else,msg,e,get,message,throw,new,runtime,camel,exception,string,format,error,invoking,s,with,s,s,method,get,name,properties,msg,e
