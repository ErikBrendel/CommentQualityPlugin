commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;33;/**  * Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}.  * @param configuration endpoint configuration to update  * @param options properties to apply to the reading field in configuration  */ ;/**  * Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}.  * @param configuration endpoint configuration to update  * @param options properties to apply to the reading field in configuration  */ public static void configureReadingProperties(FacebookEndpointConfiguration configuration, Map<String, Object> options) {     final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(options, FacebookConstants.READING_PREFIX).     if (!readingProperties.isEmpty()) {         try {             // add to an existing reading reference?             // NOTE Reading class does not support overwriting properties!!!             Reading reading = configuration.getReading().             if (reading != null) {                 Reading readingUpdate = new Reading().                 ReadingBuilder.setProperties(readingUpdate, readingProperties).                 reading = ReadingBuilder.merge(reading, readingUpdate).             } else {                 reading = new Reading().                 ReadingBuilder.setProperties(reading, readingProperties).             }             // set properties             ReadingBuilder.setProperties(reading, readingProperties).             // update reading in configuration             configuration.setReading(reading).         } catch (Exception e) {             throw new IllegalArgumentException(readingProperties.toString(), e).         }         // add any unknown properties back to options to throw an error later         for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {             options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue()).         }     } }
true;public,static;2;11;/**  * Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.  *  * @param exchange Camel exchange  * @param properties map to collect properties with required prefix  */ ;/**  * Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.  *  * @param exchange Camel exchange  * @param properties map to collect properties with required prefix  */ public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {     int nProperties = 0.     for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {         if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {             properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()), entry.getValue()).             nProperties++.         }     }     LOG.debug("Found {} properties in exchange", nProperties).     return properties. }
false;public,static;2;12;;public static void getEndpointProperties(FacebookEndpointConfiguration configuration, Map<String, Object> properties) {     if (IntrospectionSupport.getProperties(configuration, properties, null, false)) {         final Set<String> names = properties.keySet().         // remove component config properties so we only have endpoint properties         names.removeAll(COMPONENT_CONFIG_FIELDS).     }     if (LOG.isDebugEnabled()) {         final Set<String> names = properties.keySet().         LOG.debug("Found endpoint properties {}", names.retainAll(ENDPOINT_CONFIG_FIELDS)).     } }
false;public,static;1;5;;public static Set<String> getEndpointPropertyNames(FacebookEndpointConfiguration configuration) {     Map<String, Object> properties = new HashMap<>().     getEndpointProperties(configuration, properties).     return Collections.unmodifiableSet(properties.keySet()). }
false;public,static;0;3;;public static Set<String> getValidEndpointProperties() {     return Collections.unmodifiableSet(ENDPOINT_CONFIG_FIELDS). }
