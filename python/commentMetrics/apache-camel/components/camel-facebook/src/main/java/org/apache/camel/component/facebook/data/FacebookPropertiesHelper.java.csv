# id;timestamp;commentText;codeText;commentWords;codeWords
FacebookPropertiesHelper -> public static void configureReadingProperties(FacebookEndpointConfiguration configuration,                                                   Map<String, Object> options);1378019315;Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}._@param configuration endpoint configuration to update_@param options properties to apply to the reading field in configuration;public static void configureReadingProperties(FacebookEndpointConfiguration configuration,_                                                  Map<String, Object> options) {_        final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(_            options, FacebookConstants.READING_PREFIX)__        if (!readingProperties.isEmpty()) {_            try {__                _                _                Reading reading = configuration.getReading()__                if (reading == null) {_                    reading = new Reading()__                } else {_                    reading = ReadingBuilder.copy(reading, false)__                }_                _                ReadingBuilder.setProperties(reading,_                    readingProperties)___                _                configuration.setReading(reading)___            } catch (Exception e) {_                throw new IllegalArgumentException(readingProperties.toString(), e)__            }__            _            for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {_                options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue())__            }_        }_    };apply,properties,for,link,reading,type,to,the,supplied,link,facebook,endpoint,configuration,param,configuration,endpoint,configuration,to,update,param,options,properties,to,apply,to,the,reading,field,in,configuration;public,static,void,configure,reading,properties,facebook,endpoint,configuration,configuration,map,string,object,options,final,map,string,object,reading,properties,introspection,support,extract,properties,options,facebook,constants,if,reading,properties,is,empty,try,reading,reading,configuration,get,reading,if,reading,null,reading,new,reading,else,reading,reading,builder,copy,reading,false,reading,builder,set,properties,reading,reading,properties,configuration,set,reading,reading,catch,exception,e,throw,new,illegal,argument,exception,reading,properties,to,string,e,for,map,entry,string,object,entry,reading,properties,entry,set,options,put,facebook,constants,entry,get,key,entry,get,value
FacebookPropertiesHelper -> public static void configureReadingProperties(FacebookEndpointConfiguration configuration,                                                   Map<String, Object> options);1378021635;Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}._@param configuration endpoint configuration to update_@param options properties to apply to the reading field in configuration;public static void configureReadingProperties(FacebookEndpointConfiguration configuration,_                                                  Map<String, Object> options) {_        final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(_            options, FacebookConstants.READING_PREFIX)__        if (!readingProperties.isEmpty()) {_            try {__                _                _                Reading reading = configuration.getReading()__                if (reading == null) {_                    reading = new Reading()__                } else {_                    reading = ReadingBuilder.copy(reading, false)__                }_                _                ReadingBuilder.setProperties(reading,_                    readingProperties)___                _                configuration.setReading(reading)___            } catch (Exception e) {_                throw new IllegalArgumentException(readingProperties.toString(), e)__            }__            _            for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {_                options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue())__            }_        }_    };apply,properties,for,link,reading,type,to,the,supplied,link,facebook,endpoint,configuration,param,configuration,endpoint,configuration,to,update,param,options,properties,to,apply,to,the,reading,field,in,configuration;public,static,void,configure,reading,properties,facebook,endpoint,configuration,configuration,map,string,object,options,final,map,string,object,reading,properties,introspection,support,extract,properties,options,facebook,constants,if,reading,properties,is,empty,try,reading,reading,configuration,get,reading,if,reading,null,reading,new,reading,else,reading,reading,builder,copy,reading,false,reading,builder,set,properties,reading,reading,properties,configuration,set,reading,reading,catch,exception,e,throw,new,illegal,argument,exception,reading,properties,to,string,e,for,map,entry,string,object,entry,reading,properties,entry,set,options,put,facebook,constants,entry,get,key,entry,get,value
FacebookPropertiesHelper -> public static void configureReadingProperties(FacebookEndpointConfiguration configuration,                                                   Map<String, Object> options);1378085101;Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}._@param configuration endpoint configuration to update_@param options properties to apply to the reading field in configuration;public static void configureReadingProperties(FacebookEndpointConfiguration configuration,_                                                  Map<String, Object> options) {_        final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(_            options, FacebookConstants.READING_PREFIX)__        if (!readingProperties.isEmpty()) {_            try {__                _                _                Reading reading = configuration.getReading()__                if (reading == null) {_                    reading = new Reading()__                } else {_                    reading = ReadingBuilder.copy(reading, false)__                }_                _                ReadingBuilder.setProperties(reading,_                    readingProperties)___                _                configuration.setReading(reading)___            } catch (Exception e) {_                throw new IllegalArgumentException(readingProperties.toString(), e)__            }__            _            for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {_                options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue())__            }_        }_    };apply,properties,for,link,reading,type,to,the,supplied,link,facebook,endpoint,configuration,param,configuration,endpoint,configuration,to,update,param,options,properties,to,apply,to,the,reading,field,in,configuration;public,static,void,configure,reading,properties,facebook,endpoint,configuration,configuration,map,string,object,options,final,map,string,object,reading,properties,introspection,support,extract,properties,options,facebook,constants,if,reading,properties,is,empty,try,reading,reading,configuration,get,reading,if,reading,null,reading,new,reading,else,reading,reading,builder,copy,reading,false,reading,builder,set,properties,reading,reading,properties,configuration,set,reading,reading,catch,exception,e,throw,new,illegal,argument,exception,reading,properties,to,string,e,for,map,entry,string,object,entry,reading,properties,entry,set,options,put,facebook,constants,entry,get,key,entry,get,value
FacebookPropertiesHelper -> public static void configureReadingProperties(FacebookEndpointConfiguration configuration,                                                   Map<String, Object> options);1442343416;Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}._@param configuration endpoint configuration to update_@param options properties to apply to the reading field in configuration;public static void configureReadingProperties(FacebookEndpointConfiguration configuration,_                                                  Map<String, Object> options) {_        final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(_            options, FacebookConstants.READING_PREFIX)__        if (!readingProperties.isEmpty()) {_            try {__                _                _                Reading reading = configuration.getReading()___                if (reading != null) {_                    Reading readingUpdate = new Reading()__                    ReadingBuilder.setProperties(readingUpdate, readingProperties)___                    reading = ReadingBuilder.merge(reading, readingUpdate)__                } else {_                    reading = new Reading()__                    ReadingBuilder.setProperties(reading, readingProperties)__                }_                _                ReadingBuilder.setProperties(reading,_                    readingProperties)___                _                configuration.setReading(reading)___            } catch (Exception e) {_                throw new IllegalArgumentException(readingProperties.toString(), e)__            }__            _            for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {_                options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue())__            }_        }_    };apply,properties,for,link,reading,type,to,the,supplied,link,facebook,endpoint,configuration,param,configuration,endpoint,configuration,to,update,param,options,properties,to,apply,to,the,reading,field,in,configuration;public,static,void,configure,reading,properties,facebook,endpoint,configuration,configuration,map,string,object,options,final,map,string,object,reading,properties,introspection,support,extract,properties,options,facebook,constants,if,reading,properties,is,empty,try,reading,reading,configuration,get,reading,if,reading,null,reading,reading,update,new,reading,reading,builder,set,properties,reading,update,reading,properties,reading,reading,builder,merge,reading,reading,update,else,reading,new,reading,reading,builder,set,properties,reading,reading,properties,reading,builder,set,properties,reading,reading,properties,configuration,set,reading,reading,catch,exception,e,throw,new,illegal,argument,exception,reading,properties,to,string,e,for,map,entry,string,object,entry,reading,properties,entry,set,options,put,facebook,constants,entry,get,key,entry,get,value
FacebookPropertiesHelper -> public static void configureReadingProperties(FacebookEndpointConfiguration configuration,                                                   Map<String, Object> options);1451926419;Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}._@param configuration endpoint configuration to update_@param options properties to apply to the reading field in configuration;public static void configureReadingProperties(FacebookEndpointConfiguration configuration,_                                                  Map<String, Object> options) {_        final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(_            options, FacebookConstants.READING_PREFIX)__        if (!readingProperties.isEmpty()) {_            try {_                configuration.setReadingOptions(readingProperties)___                _                _                Reading reading = configuration.getReading()___                if (reading != null) {_                    Reading readingUpdate = new Reading()__                    ReadingBuilder.setProperties(readingUpdate, readingProperties)___                    reading = ReadingBuilder.merge(reading, readingUpdate)__                } else {_                    reading = new Reading()__                    ReadingBuilder.setProperties(reading, readingProperties)__                }_                _                ReadingBuilder.setProperties(reading,_                    readingProperties)___                _                configuration.setReading(reading)___            } catch (Exception e) {_                throw new IllegalArgumentException(readingProperties.toString(), e)__            }__            _            for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {_                options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue())__            }_        }_    };apply,properties,for,link,reading,type,to,the,supplied,link,facebook,endpoint,configuration,param,configuration,endpoint,configuration,to,update,param,options,properties,to,apply,to,the,reading,field,in,configuration;public,static,void,configure,reading,properties,facebook,endpoint,configuration,configuration,map,string,object,options,final,map,string,object,reading,properties,introspection,support,extract,properties,options,facebook,constants,if,reading,properties,is,empty,try,configuration,set,reading,options,reading,properties,reading,reading,configuration,get,reading,if,reading,null,reading,reading,update,new,reading,reading,builder,set,properties,reading,update,reading,properties,reading,reading,builder,merge,reading,reading,update,else,reading,new,reading,reading,builder,set,properties,reading,reading,properties,reading,builder,set,properties,reading,reading,properties,configuration,set,reading,reading,catch,exception,e,throw,new,illegal,argument,exception,reading,properties,to,string,e,for,map,entry,string,object,entry,reading,properties,entry,set,options,put,facebook,constants,entry,get,key,entry,get,value
FacebookPropertiesHelper -> public static void configureReadingProperties(FacebookEndpointConfiguration configuration,                                                   Map<String, Object> options);1454484721;Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}._@param configuration endpoint configuration to update_@param options properties to apply to the reading field in configuration;public static void configureReadingProperties(FacebookEndpointConfiguration configuration,_                                                  Map<String, Object> options) {_        final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(_            options, FacebookConstants.READING_PREFIX)__        if (!readingProperties.isEmpty()) {_            try {_                _                _                Reading reading = configuration.getReading()___                if (reading != null) {_                    Reading readingUpdate = new Reading()__                    ReadingBuilder.setProperties(readingUpdate, readingProperties)__                    reading = ReadingBuilder.merge(reading, readingUpdate)__                } else {_                    reading = new Reading()__                    ReadingBuilder.setProperties(reading, readingProperties)__                }_                _                ReadingBuilder.setProperties(reading, readingProperties)___                _                configuration.setReading(reading)__            } catch (Exception e) {_                throw new IllegalArgumentException(readingProperties.toString(), e)__            }__            _            for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {_                options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue())__            }_        }_    };apply,properties,for,link,reading,type,to,the,supplied,link,facebook,endpoint,configuration,param,configuration,endpoint,configuration,to,update,param,options,properties,to,apply,to,the,reading,field,in,configuration;public,static,void,configure,reading,properties,facebook,endpoint,configuration,configuration,map,string,object,options,final,map,string,object,reading,properties,introspection,support,extract,properties,options,facebook,constants,if,reading,properties,is,empty,try,reading,reading,configuration,get,reading,if,reading,null,reading,reading,update,new,reading,reading,builder,set,properties,reading,update,reading,properties,reading,reading,builder,merge,reading,reading,update,else,reading,new,reading,reading,builder,set,properties,reading,reading,properties,reading,builder,set,properties,reading,reading,properties,configuration,set,reading,reading,catch,exception,e,throw,new,illegal,argument,exception,reading,properties,to,string,e,for,map,entry,string,object,entry,reading,properties,entry,set,options,put,facebook,constants,entry,get,key,entry,get,value
FacebookPropertiesHelper -> public static void configureReadingProperties(FacebookEndpointConfiguration configuration,                                                   Map<String, Object> options);1523994338;Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}._@param configuration endpoint configuration to update_@param options properties to apply to the reading field in configuration;public static void configureReadingProperties(FacebookEndpointConfiguration configuration,_                                                  Map<String, Object> options) {_        final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(_            options, FacebookConstants.READING_PREFIX)__        if (!readingProperties.isEmpty()) {_            try {_                _                _                Reading reading = configuration.getReading()___                if (reading != null) {_                    Reading readingUpdate = new Reading()__                    ReadingBuilder.setProperties(readingUpdate, readingProperties)__                    reading = ReadingBuilder.merge(reading, readingUpdate)__                } else {_                    reading = new Reading()__                    ReadingBuilder.setProperties(reading, readingProperties)__                }_                _                ReadingBuilder.setProperties(reading, readingProperties)___                _                configuration.setReading(reading)__            } catch (Exception e) {_                throw new IllegalArgumentException(readingProperties.toString(), e)__            }__            _            for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {_                options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue())__            }_        }_    };apply,properties,for,link,reading,type,to,the,supplied,link,facebook,endpoint,configuration,param,configuration,endpoint,configuration,to,update,param,options,properties,to,apply,to,the,reading,field,in,configuration;public,static,void,configure,reading,properties,facebook,endpoint,configuration,configuration,map,string,object,options,final,map,string,object,reading,properties,introspection,support,extract,properties,options,facebook,constants,if,reading,properties,is,empty,try,reading,reading,configuration,get,reading,if,reading,null,reading,reading,update,new,reading,reading,builder,set,properties,reading,update,reading,properties,reading,reading,builder,merge,reading,reading,update,else,reading,new,reading,reading,builder,set,properties,reading,reading,properties,reading,builder,set,properties,reading,reading,properties,configuration,set,reading,reading,catch,exception,e,throw,new,illegal,argument,exception,reading,properties,to,string,e,for,map,entry,string,object,entry,reading,properties,entry,set,options,put,facebook,constants,entry,get,key,entry,get,value
FacebookPropertiesHelper -> public static void configureReadingProperties(FacebookEndpointConfiguration configuration,                                                   Map<String, Object> options);1540108163;Apply properties for {@link Reading} type to the supplied {@link FacebookEndpointConfiguration}._@param configuration endpoint configuration to update_@param options properties to apply to the reading field in configuration;public static void configureReadingProperties(FacebookEndpointConfiguration configuration,_                                                  Map<String, Object> options) {_        final Map<String, Object> readingProperties = IntrospectionSupport.extractProperties(_            options, FacebookConstants.READING_PREFIX)__        if (!readingProperties.isEmpty()) {_            try {_                _                _                Reading reading = configuration.getReading()___                if (reading != null) {_                    Reading readingUpdate = new Reading()__                    ReadingBuilder.setProperties(readingUpdate, readingProperties)__                    reading = ReadingBuilder.merge(reading, readingUpdate)__                } else {_                    reading = new Reading()__                    ReadingBuilder.setProperties(reading, readingProperties)__                }_                _                ReadingBuilder.setProperties(reading, readingProperties)___                _                configuration.setReading(reading)__            } catch (Exception e) {_                throw new IllegalArgumentException(readingProperties.toString(), e)__            }__            _            for (Map.Entry<String, Object> entry : readingProperties.entrySet()) {_                options.put(FacebookConstants.READING_PREFIX + entry.getKey(), entry.getValue())__            }_        }_    };apply,properties,for,link,reading,type,to,the,supplied,link,facebook,endpoint,configuration,param,configuration,endpoint,configuration,to,update,param,options,properties,to,apply,to,the,reading,field,in,configuration;public,static,void,configure,reading,properties,facebook,endpoint,configuration,configuration,map,string,object,options,final,map,string,object,reading,properties,introspection,support,extract,properties,options,facebook,constants,if,reading,properties,is,empty,try,reading,reading,configuration,get,reading,if,reading,null,reading,reading,update,new,reading,reading,builder,set,properties,reading,update,reading,properties,reading,reading,builder,merge,reading,reading,update,else,reading,new,reading,reading,builder,set,properties,reading,reading,properties,reading,builder,set,properties,reading,reading,properties,configuration,set,reading,reading,catch,exception,e,throw,new,illegal,argument,exception,reading,properties,to,string,e,for,map,entry,string,object,entry,reading,properties,entry,set,options,put,facebook,constants,entry,get,key,entry,get,value
FacebookPropertiesHelper -> public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties);1378019315;Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.__@param exchange Camel exchange_@param properties map to collect properties with required prefix;public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {_        int nProperties = 0__        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {_                properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()),_                    entry.getValue())__                nProperties++__            }_        }_        LOG.debug("Found {} properties in exchange", nProperties)__        return properties__    };gets,exchange,header,properties,that,start,with,link,facebook,constants,param,exchange,camel,exchange,param,properties,map,to,collect,properties,with,required,prefix;public,static,map,string,object,get,exchange,properties,exchange,exchange,map,string,object,properties,int,n,properties,0,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,entry,get,key,starts,with,facebook,constants,properties,put,entry,get,key,substring,facebook,constants,length,entry,get,value,n,properties,log,debug,found,properties,in,exchange,n,properties,return,properties
FacebookPropertiesHelper -> public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties);1378021635;Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.__@param exchange Camel exchange_@param properties map to collect properties with required prefix;public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {_        int nProperties = 0__        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {_                properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()),_                    entry.getValue())__                nProperties++__            }_        }_        LOG.debug("Found {} properties in exchange", nProperties)__        return properties__    };gets,exchange,header,properties,that,start,with,link,facebook,constants,param,exchange,camel,exchange,param,properties,map,to,collect,properties,with,required,prefix;public,static,map,string,object,get,exchange,properties,exchange,exchange,map,string,object,properties,int,n,properties,0,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,entry,get,key,starts,with,facebook,constants,properties,put,entry,get,key,substring,facebook,constants,length,entry,get,value,n,properties,log,debug,found,properties,in,exchange,n,properties,return,properties
FacebookPropertiesHelper -> public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties);1378085101;Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.__@param exchange Camel exchange_@param properties map to collect properties with required prefix;public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {_        int nProperties = 0__        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {_                properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()),_                    entry.getValue())__                nProperties++__            }_        }_        LOG.debug("Found {} properties in exchange", nProperties)__        return properties__    };gets,exchange,header,properties,that,start,with,link,facebook,constants,param,exchange,camel,exchange,param,properties,map,to,collect,properties,with,required,prefix;public,static,map,string,object,get,exchange,properties,exchange,exchange,map,string,object,properties,int,n,properties,0,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,entry,get,key,starts,with,facebook,constants,properties,put,entry,get,key,substring,facebook,constants,length,entry,get,value,n,properties,log,debug,found,properties,in,exchange,n,properties,return,properties
FacebookPropertiesHelper -> public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties);1442343416;Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.__@param exchange Camel exchange_@param properties map to collect properties with required prefix;public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {_        int nProperties = 0__        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {_                properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()),_                    entry.getValue())__                nProperties++__            }_        }_        LOG.debug("Found {} properties in exchange", nProperties)__        return properties__    };gets,exchange,header,properties,that,start,with,link,facebook,constants,param,exchange,camel,exchange,param,properties,map,to,collect,properties,with,required,prefix;public,static,map,string,object,get,exchange,properties,exchange,exchange,map,string,object,properties,int,n,properties,0,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,entry,get,key,starts,with,facebook,constants,properties,put,entry,get,key,substring,facebook,constants,length,entry,get,value,n,properties,log,debug,found,properties,in,exchange,n,properties,return,properties
FacebookPropertiesHelper -> public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties);1451926419;Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.__@param exchange Camel exchange_@param properties map to collect properties with required prefix;public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {_        int nProperties = 0__        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {_                properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()),_                    entry.getValue())__                nProperties++__            }_        }_        LOG.debug("Found {} properties in exchange", nProperties)__        return properties__    };gets,exchange,header,properties,that,start,with,link,facebook,constants,param,exchange,camel,exchange,param,properties,map,to,collect,properties,with,required,prefix;public,static,map,string,object,get,exchange,properties,exchange,exchange,map,string,object,properties,int,n,properties,0,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,entry,get,key,starts,with,facebook,constants,properties,put,entry,get,key,substring,facebook,constants,length,entry,get,value,n,properties,log,debug,found,properties,in,exchange,n,properties,return,properties
FacebookPropertiesHelper -> public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties);1454484721;Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.__@param exchange Camel exchange_@param properties map to collect properties with required prefix;public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {_        int nProperties = 0__        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {_                properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()), entry.getValue())__                nProperties++__            }_        }_        LOG.debug("Found {} properties in exchange", nProperties)__        return properties__    };gets,exchange,header,properties,that,start,with,link,facebook,constants,param,exchange,camel,exchange,param,properties,map,to,collect,properties,with,required,prefix;public,static,map,string,object,get,exchange,properties,exchange,exchange,map,string,object,properties,int,n,properties,0,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,entry,get,key,starts,with,facebook,constants,properties,put,entry,get,key,substring,facebook,constants,length,entry,get,value,n,properties,log,debug,found,properties,in,exchange,n,properties,return,properties
FacebookPropertiesHelper -> public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties);1523994338;Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.__@param exchange Camel exchange_@param properties map to collect properties with required prefix;public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {_        int nProperties = 0__        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {_                properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()), entry.getValue())__                nProperties++__            }_        }_        LOG.debug("Found {} properties in exchange", nProperties)__        return properties__    };gets,exchange,header,properties,that,start,with,link,facebook,constants,param,exchange,camel,exchange,param,properties,map,to,collect,properties,with,required,prefix;public,static,map,string,object,get,exchange,properties,exchange,exchange,map,string,object,properties,int,n,properties,0,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,entry,get,key,starts,with,facebook,constants,properties,put,entry,get,key,substring,facebook,constants,length,entry,get,value,n,properties,log,debug,found,properties,in,exchange,n,properties,return,properties
FacebookPropertiesHelper -> public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties);1540108163;Gets exchange header properties that start with {@link FacebookConstants}.FACEBOOK_PROPERTY_PREFIX.__@param exchange Camel exchange_@param properties map to collect properties with required prefix;public static Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {_        int nProperties = 0__        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {_            if (entry.getKey().startsWith(FacebookConstants.FACEBOOK_PROPERTY_PREFIX)) {_                properties.put(entry.getKey().substring(FacebookConstants.FACEBOOK_PROPERTY_PREFIX.length()), entry.getValue())__                nProperties++__            }_        }_        LOG.debug("Found {} properties in exchange", nProperties)__        return properties__    };gets,exchange,header,properties,that,start,with,link,facebook,constants,param,exchange,camel,exchange,param,properties,map,to,collect,properties,with,required,prefix;public,static,map,string,object,get,exchange,properties,exchange,exchange,map,string,object,properties,int,n,properties,0,for,map,entry,string,object,entry,exchange,get,in,get,headers,entry,set,if,entry,get,key,starts,with,facebook,constants,properties,put,entry,get,key,substring,facebook,constants,length,entry,get,value,n,properties,log,debug,found,properties,in,exchange,n,properties,return,properties
