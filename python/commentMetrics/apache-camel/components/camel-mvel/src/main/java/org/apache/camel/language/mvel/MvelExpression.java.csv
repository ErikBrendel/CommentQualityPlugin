commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static MvelExpression mvel(String expression) {     return new MvelExpression(new MvelLanguage(), expression, Object.class). }
false;public;2;8;;public <T> T evaluate(Exchange exchange, Class<T> tClass) {     try {         Object value = org.mvel2.MVEL.executeExpression(compiled, new RootObject(exchange)).         return exchange.getContext().getTypeConverter().convertTo(tClass, value).     } catch (Exception e) {         throw new ExpressionEvaluationException(this, exchange, e).     } }
false;public;1;7;;public Object evaluate(Exchange exchange) {     try {         return org.mvel2.MVEL.executeExpression(compiled, new RootObject(exchange)).     } catch (Exception e) {         throw new ExpressionEvaluationException(this, exchange, e).     } }
false;public;0;3;;public Class<?> getType() {     return type. }
false;protected;1;3;;protected String assertionFailureMessage(Exchange exchange) {     return expressionString. }
false;public;0;4;;@Override public String toString() {     return "Mvel[" + expressionString + "]". }
