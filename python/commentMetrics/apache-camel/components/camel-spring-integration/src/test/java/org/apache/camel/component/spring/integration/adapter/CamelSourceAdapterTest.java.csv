commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void handleMessage(Message<?> message) {     latch.countDown().     assertEquals("We should get the message from channelA", message.getPayload(), "Willem"). }
false;public;0;15;;@Test public void testSendingOneWayMessage() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     DirectChannel channelA = getMandatoryBean(DirectChannel.class, "channelA").     channelA.subscribe(new MessageHandler() {          public void handleMessage(Message<?> message) {             latch.countDown().             assertEquals("We should get the message from channelA", message.getPayload(), "Willem").         }     }).     template.sendBody("direct:OneWay", "Willem").     assertTrue(latch.await(1, TimeUnit.SECONDS)). }
false;public;0;6;;@Test public void testSendingTwoWayMessage() throws Exception {     String result = template.requestBody("direct:TwoWay", "Willem", String.class).     assertEquals("Can't get the right response", result, "Hello Willem"). }
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("/org/apache/camel/component/spring/integration/adapter/CamelSource.xml"). }
