commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSendingOneWayMessage() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedBodiesReceived(MESSAGE_BODY).     MessageChannel outputChannel = getMandatoryBean(MessageChannel.class, "channelA").     outputChannel.send(new GenericMessage<Object>(MESSAGE_BODY)).     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void handleMessage(Message<?> message) {     latch.countDown().     assertEquals("Get the wrong result", MESSAGE_BODY + " is processed", message.getPayload()). }
false;public;0;18;;@Test public void testSendingTwoWayMessage() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     MessageChannel requestChannel = getMandatoryBean(MessageChannel.class, "channelB").     Message<?> message = new GenericMessage<Object>(MESSAGE_BODY).     // Need to subscribe the responseChannel first     DirectChannel responseChannel = getMandatoryBean(DirectChannel.class, "channelC").     responseChannel.subscribe(new MessageHandler() {          public void handleMessage(Message<?> message) {             latch.countDown().             assertEquals("Get the wrong result", MESSAGE_BODY + " is processed", message.getPayload()).         }     }).     requestChannel.send(message).     assertTrue(latch.await(1, TimeUnit.SECONDS)). }
false;public;1;4;;public void handleMessage(Message<?> message) {     latch.countDown().     assertEquals("Get the wrong result", MESSAGE_BODY + " is processed", message.getPayload()). }
false;public;0;19;;@Test public void testSendingTwoWayMessageWithMessageAddress() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     MessageChannel requestChannel = getMandatoryBean(MessageChannel.class, "channelD").     DirectChannel responseChannel = getMandatoryBean(DirectChannel.class, "channelC").     Map<String, Object> headers = new HashMap<>().     headers.put(MessageHeaders.REPLY_CHANNEL, responseChannel).     GenericMessage<String> message = new GenericMessage<>(MESSAGE_BODY, headers).     responseChannel.subscribe(new MessageHandler() {          public void handleMessage(Message<?> message) {             latch.countDown().             assertEquals("Get the wrong result", MESSAGE_BODY + " is processed", message.getPayload()).         }     }).     requestChannel.send(message).     assertTrue(latch.await(1, TimeUnit.SECONDS)). }
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/spring/integration/adapter/CamelTarget.xml"). }
