commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void handleMessage(Message<?> message) {     latch.countDown().     assertEquals("Get the wrong result", MESSAGE_BODY + " is processed", message.getPayload()).     assertEquals("Done", message.getHeaders().get("Status")). }
false;public;0;21;;@Test public void testSendingTwoWayMessage() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     MessageChannel requestChannel = getMandatoryBean(MessageChannel.class, "requestChannel").     Map<String, Object> maps = new HashMap<>().     maps.put(MessageHeaders.REPLY_CHANNEL, "responseChannel").     Message<String> message = new GenericMessage<>(MESSAGE_BODY, maps).     DirectChannel responseChannel = getMandatoryBean(DirectChannel.class, "responseChannel").     responseChannel.subscribe(new MessageHandler() {          public void handleMessage(Message<?> message) {             latch.countDown().             assertEquals("Get the wrong result", MESSAGE_BODY + " is processed", message.getPayload()).             assertEquals("Done", message.getHeaders().get("Status")).         }     }).     requestChannel.send(message).     assertTrue(latch.await(1, TimeUnit.SECONDS)). }
false;public;0;3;;public ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/spring/integration/twoWayConsumer.xml"). }
