commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setMessage(org.springframework.messaging.Message<?> message) {     this.siMessage = message. }
false;public;0;3;;public org.springframework.messaging.Message<?> getMessage() {     return siMessage. }
false;public;1;25;;@Override public void copyFrom(org.apache.camel.Message that) {     if (that == this) {         // the same instance so do not need to copy         return.     }     if (that instanceof CamelContextAware) {         this.setCamelContext(((CamelContextAware) that).getCamelContext()).     }     // cover over exchange if none has been assigned     if (getExchange() == null) {         setExchange(that.getExchange()).     }     setMessageId(that.getMessageId()).     setBody(that.getBody()).     super.getHeaders().putAll(that.getHeaders()).     if (that instanceof SpringIntegrationMessage) {         SpringIntegrationMessage orig = (SpringIntegrationMessage) that.         setMessage(orig.getMessage()).     }     getAttachments().putAll(that.getAttachments()). }
false;public;0;8;;@Override public String toString() {     if (siMessage != null) {         return "SpringIntegrationMessage: " + siMessage.     } else {         return "SpringIntegrationMessage: " + getBody().     } }
false;public;1;7;;public Object getHeader(String name) {     if (siMessage != null) {         return siMessage.getHeaders().get(name).     } else {         return super.getHeader(name).     } }
false;public;0;8;;@Override public Map<String, Object> getHeaders() {     if (siMessage != null) {         return siMessage.getHeaders().     } else {         return super.getHeaders().     } }
false;public;0;6;;@Override public SpringIntegrationMessage newInstance() {     // create new empty message     SpringIntegrationMessage answer = new SpringIntegrationMessage(getCamelContext()).     return answer. }
false;protected;0;4;;@Override protected Object createBody() {     return siMessage.getPayload(). }
