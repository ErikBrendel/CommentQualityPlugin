commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public SpringIntegrationEndpoint getEndpoint() {     return (SpringIntegrationEndpoint) super.getEndpoint(). }
false;protected;0;31;;@Override protected void doStart() throws Exception {     super.doStart().     if (getEndpoint().getMessageChannel() == null) {         String outputChannelName = getEndpoint().getDefaultChannel().         if (ObjectHelper.isEmpty(outputChannelName)) {             outputChannelName = getEndpoint().getInputChannel().         }         StringHelper.notEmpty(outputChannelName, "OutputChannelName", getEndpoint()).         outputChannel = destinationResolver.resolveDestination(outputChannelName).     } else {         outputChannel = getEndpoint().getMessageChannel().     }     if (outputChannel == null) {         throw new IllegalArgumentException("Cannot resolve OutputChannel on " + getEndpoint()).     }     // if we do in-out we need to setup the input channel as well     if (getEndpoint().isInOut()) {         // we need to setup right inputChannel for further processing         StringHelper.notEmpty(getEndpoint().getInputChannel(), "InputChannel", getEndpoint()).         inputChannel = (DirectChannel) destinationResolver.resolveDestination(getEndpoint().getInputChannel()).         if (inputChannel == null) {             throw new IllegalArgumentException("Cannot resolve InputChannel on " + getEndpoint()).         }     } }
false;public;1;4;;public void handleMessage(Message<?> message) {     log.debug("Received {} from InputChannel: {}", message, inputChannel).     SpringIntegrationBinding.storeToCamelMessage(message, exchange.getOut()). }
false;public;1;23;;public void process(final Exchange exchange) throws Exception {     if (exchange.getPattern().isOutCapable()) {         // we want to do in-out so the inputChannel is mandatory (used to receive reply from spring integration)         if (inputChannel == null) {             throw new IllegalArgumentException("InputChannel has not been configured on " + getEndpoint()).         }         exchange.getIn().getHeaders().put(MessageHeaders.REPLY_CHANNEL, inputChannel).         // subscribe so we can receive the reply from spring integration         inputChannel.subscribe(new MessageHandler() {              public void handleMessage(Message<?> message) {                 log.debug("Received {} from InputChannel: {}", message, inputChannel).                 SpringIntegrationBinding.storeToCamelMessage(message, exchange.getOut()).             }         }).     }     org.springframework.messaging.Message<?> siOutmessage = SpringIntegrationBinding.createSpringIntegrationMessage(exchange).     // send the message to spring integration     log.debug("Sending {} to OutputChannel: {}", siOutmessage, outputChannel).     outputChannel.send(siOutmessage). }
