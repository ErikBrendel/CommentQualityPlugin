commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setReplyChannel(MessageChannel channel) {     this.replyChannel = channel. }
false;public;0;3;;public MessageChannel getReplyChannel() {     return replyChannel. }
false;public;0;11;;public ProducerTemplate getCamelTemplate() throws Exception {     if (camelTemplate == null) {         CamelContext ctx = getCamelContext().         if (ctx == null) {             // TODO: This doesnt look good to create a new CamelContext out of the blue             ctx = new DefaultCamelContext().         }         camelTemplate = ctx.createProducerTemplate().     }     return camelTemplate. }
false;public;1;36;;public boolean send(Message<?> message) throws Exception {     boolean result = false.     ExchangePattern pattern.     if (isExpectReply()) {         pattern = ExchangePattern.InOut.     } else {         pattern = ExchangePattern.InOnly.     }     Exchange inExchange = new DefaultExchange(getCamelContext(), pattern).     SpringIntegrationBinding.storeToCamelMessage(message, inExchange.getIn()).     Exchange outExchange = getCamelTemplate().send(getCamelEndpointUri(), inExchange).     org.apache.camel.Message camelMsg = outExchange.hasOut() ? outExchange.getOut() : outExchange.getIn().     if (camelMsg.isFault()) {         result = true.     }     Message<?> response.     if (isExpectReply()) {         // Check the message header for the return address         response = SpringIntegrationBinding.storeToSpringIntegrationMessage(outExchange.getOut()).         if (replyChannel == null) {             MessageChannel messageReplyChannel = (MessageChannel) message.getHeaders().get(MessageHeaders.REPLY_CHANNEL).             if (messageReplyChannel != null) {                 result = messageReplyChannel.send(response).             } else {                 throw new MessageDeliveryException(response, "Cannot resolve ReplyChannel from message: " + message).             }         } else {             result = replyChannel.send(response).         }     }     return result. }
false;public;1;7;;public void handleMessage(Message<?> message) throws MessageDeliveryException {     try {         send(message).     } catch (Exception e) {         throw new MessageDeliveryException(message, "Cannot send message", e).     } }
