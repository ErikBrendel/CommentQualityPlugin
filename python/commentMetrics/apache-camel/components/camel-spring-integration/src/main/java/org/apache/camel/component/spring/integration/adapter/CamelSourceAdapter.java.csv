commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setRequestChannel(MessageChannel channel) {     requestChannel = channel. }
false;public;0;3;;public MessageChannel getChannel() {     return requestChannel. }
false;public;1;3;;public void setReplyChannel(DirectChannel channel) {     replyChannel = channel. }
false;public;1;5;;public void handleMessage(Message<?> message) {     LOG.debug("Received {} from ReplyChannel: {}", message, replyChannel).     // TODO set the correlationID     SpringIntegrationBinding.storeToCamelMessage(message, exchange.getOut()). }
false;public;1;22;;public void process(final Exchange exchange) throws Exception {     org.springframework.messaging.Message<?> request = SpringIntegrationBinding.createSpringIntegrationMessage(exchange).     if (exchange.getPattern().isOutCapable()) {         exchange.getIn().getHeaders().put(MessageHeaders.REPLY_CHANNEL, replyChannel).         // we want to do in-out so the inputChannel is mandatory (used to receive reply from spring integration)         if (replyChannel == null) {             throw new IllegalArgumentException("ReplyChannel has not been configured on: " + this).         }         replyChannel.subscribe(new MessageHandler() {              public void handleMessage(Message<?> message) {                 LOG.debug("Received {} from ReplyChannel: {}", message, replyChannel).                 // TODO set the correlationID                 SpringIntegrationBinding.storeToCamelMessage(message, exchange.getOut()).             }         }).     }     requestChannel.send(request). }
false;public,final;0;5;;public final void afterPropertiesSet() throws Exception {     if (initialized.compareAndSet(false, true)) {         initialize().     } }
false;public;0;5;;public void destroy() throws Exception {     if (consumer != null) {         ServiceHelper.stopAndShutdownService(consumer).     } }
false;protected;0;6;;protected void initialize() throws Exception {     // start the service here     camelEndpoint = getCamelContext().getEndpoint(getCamelEndpointUri()).     consumer = camelEndpoint.createConsumer(new ConsumerProcessor()).     ServiceHelper.startService(consumer). }
