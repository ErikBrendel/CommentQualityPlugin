commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;41;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     LoggingLevel level = getLoggingLevel(parameters).     Logger providedLogger = getLogger(parameters).     if (providedLogger == null) {         // try to look up the logger in registry         Map<String, Logger> availableLoggers = getCamelContext().getRegistry().findByTypeWithName(Logger.class).         if (availableLoggers.size() == 1) {             providedLogger = availableLoggers.values().iterator().next().             log.info("Using custom Logger: {}", providedLogger).         } else if (availableLoggers.size() > 1) {             log.info("More than one {} instance found in the registry. Falling back to creating logger from URI {}.", Logger.class.getName(), uri).         }     }     LogEndpoint endpoint = new LogEndpoint(uri, this).     endpoint.setLevel(level.name()).     setProperties(endpoint, parameters).     if (providedLogger == null) {         endpoint.setLoggerName(remaining).     } else {         endpoint.setProvidedLogger(providedLogger).     }     // first, try to pick up the ExchangeFormatter from the registry     ExchangeFormatter localFormatter = getCamelContext().getRegistry().lookupByNameAndType("logFormatter", ExchangeFormatter.class).     if (localFormatter != null) {         setProperties(localFormatter, parameters).     } else if (localFormatter == null && exchangeFormatter != null) {         // do not set properties, the exchangeFormatter is explicitly set, therefore the         // user would have set its properties explicitly too         localFormatter = exchangeFormatter.     } else {         // if no formatter is available in the Registry, create a local one of the default type, for a single use         localFormatter = new DefaultExchangeFormatter().         setProperties(localFormatter, parameters).     }     endpoint.setLocalFormatter(localFormatter).     return endpoint. }
true;protected;1;4;/**  * Gets the logging level, will default to use INFO if no level parameter provided.  */ ;/**  * Gets the logging level, will default to use INFO if no level parameter provided.  */ protected LoggingLevel getLoggingLevel(Map<String, Object> parameters) {     String levelText = getAndRemoveParameter(parameters, "level", String.class, "INFO").     return LoggingLevel.valueOf(levelText.toUpperCase(Locale.ENGLISH)). }
true;protected;1;3;/**  * Gets optional {@link Logger} instance from parameters. If non-null, the provided instance will be used as  * {@link Logger} in {@link CamelLogger}  *  * @param parameters the parameters  * @return the Logger object from the parameter  */ ;/**  * Gets optional {@link Logger} instance from parameters. If non-null, the provided instance will be used as  * {@link Logger} in {@link CamelLogger}  *  * @param parameters the parameters  * @return the Logger object from the parameter  */ protected Logger getLogger(Map<String, Object> parameters) {     return getAndRemoveOrResolveReferenceParameter(parameters, "logger", Logger.class). }
false;public;0;3;;public ExchangeFormatter getExchangeFormatter() {     return exchangeFormatter. }
true;public;1;3;/**  * Sets a custom {@link ExchangeFormatter} to convert the Exchange to a String suitable for logging.  * <p />  * If not specified, we default to {@link DefaultExchangeFormatter}.  */ ;/**  * Sets a custom {@link ExchangeFormatter} to convert the Exchange to a String suitable for logging.  * <p />  * If not specified, we default to {@link DefaultExchangeFormatter}.  */ public void setExchangeFormatter(ExchangeFormatter exchangeFormatter) {     this.exchangeFormatter = exchangeFormatter. }
