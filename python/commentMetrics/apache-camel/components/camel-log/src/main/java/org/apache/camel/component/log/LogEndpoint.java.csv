# id;timestamp;commentText;codeText;commentWords;codeWords
LogEndpoint -> public String getLevel();1547836605;Logging level to use._<p/>_The default value is INFO.;public String getLevel() {_        return level__    };logging,level,to,use,p,the,default,value,is,info;public,string,get,level,return,level
LogEndpoint -> public String getLevel();1548175645;Logging level to use._<p/>_The default value is INFO.;public String getLevel() {_        return level__    };logging,level,to,use,p,the,default,value,is,info;public,string,get,level,return,level
LogEndpoint -> public String getLevel();1548317621;Logging level to use._<p/>_The default value is INFO.;public String getLevel() {_        return level__    };logging,level,to,use,p,the,default,value,is,info;public,string,get,level,return,level
LogEndpoint -> public Long getGroupInterval();1547836605;If specified will group message stats by this time interval (in millis);public Long getGroupInterval() {_        return groupInterval__    };if,specified,will,group,message,stats,by,this,time,interval,in,millis;public,long,get,group,interval,return,group,interval
LogEndpoint -> public Long getGroupInterval();1548175645;If specified will group message stats by this time interval (in millis);public Long getGroupInterval() {_        return groupInterval__    };if,specified,will,group,message,stats,by,this,time,interval,in,millis;public,long,get,group,interval,return,group,interval
LogEndpoint -> public Long getGroupInterval();1548317621;If specified will group message stats by this time interval (in millis);public Long getGroupInterval() {_        return groupInterval__    };if,specified,will,group,message,stats,by,this,time,interval,in,millis;public,long,get,group,interval,return,group,interval
LogEndpoint -> public void setGroupActiveOnly(Boolean groupActiveOnly);1547836605;If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.;public void setGroupActiveOnly(Boolean groupActiveOnly) {_        this.groupActiveOnly = groupActiveOnly__    };if,true,will,hide,stats,when,no,new,messages,have,been,received,for,a,time,interval,if,false,show,stats,regardless,of,message,traffic;public,void,set,group,active,only,boolean,group,active,only,this,group,active,only,group,active,only
LogEndpoint -> public void setGroupActiveOnly(Boolean groupActiveOnly);1548175645;If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.;public void setGroupActiveOnly(Boolean groupActiveOnly) {_        this.groupActiveOnly = groupActiveOnly__    };if,true,will,hide,stats,when,no,new,messages,have,been,received,for,a,time,interval,if,false,show,stats,regardless,of,message,traffic;public,void,set,group,active,only,boolean,group,active,only,this,group,active,only,group,active,only
LogEndpoint -> public void setGroupActiveOnly(Boolean groupActiveOnly);1548317621;If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.;public void setGroupActiveOnly(Boolean groupActiveOnly) {_        this.groupActiveOnly = groupActiveOnly__    };if,true,will,hide,stats,when,no,new,messages,have,been,received,for,a,time,interval,if,false,show,stats,regardless,of,message,traffic;public,void,set,group,active,only,boolean,group,active,only,this,group,active,only,group,active,only
LogEndpoint -> public void setGroupInterval(Long groupInterval);1547836605;If specified will group message stats by this time interval (in millis);public void setGroupInterval(Long groupInterval) {_        this.groupInterval = groupInterval__    };if,specified,will,group,message,stats,by,this,time,interval,in,millis;public,void,set,group,interval,long,group,interval,this,group,interval,group,interval
LogEndpoint -> public void setGroupInterval(Long groupInterval);1548175645;If specified will group message stats by this time interval (in millis);public void setGroupInterval(Long groupInterval) {_        this.groupInterval = groupInterval__    };if,specified,will,group,message,stats,by,this,time,interval,in,millis;public,void,set,group,interval,long,group,interval,this,group,interval,group,interval
LogEndpoint -> public void setGroupInterval(Long groupInterval);1548317621;If specified will group message stats by this time interval (in millis);public void setGroupInterval(Long groupInterval) {_        this.groupInterval = groupInterval__    };if,specified,will,group,message,stats,by,this,time,interval,in,millis;public,void,set,group,interval,long,group,interval,this,group,interval,group,interval
LogEndpoint -> public void setLoggerName(String loggerName);1547836605;The logger name to use;public void setLoggerName(String loggerName) {_        this.loggerName = loggerName__    };the,logger,name,to,use;public,void,set,logger,name,string,logger,name,this,logger,name,logger,name
LogEndpoint -> public void setLoggerName(String loggerName);1548175645;The logger name to use;public void setLoggerName(String loggerName) {_        this.loggerName = loggerName__    };the,logger,name,to,use;public,void,set,logger,name,string,logger,name,this,logger,name,logger,name
LogEndpoint -> public void setLoggerName(String loggerName);1548317621;The logger name to use;public void setLoggerName(String loggerName) {_        this.loggerName = loggerName__    };the,logger,name,to,use;public,void,set,logger,name,string,logger,name,this,logger,name,logger,name
LogEndpoint -> public void setLevel(String level);1547836605;Logging level to use._<p/>_The default value is INFO.;public void setLevel(String level) {_        this.level = level__    };logging,level,to,use,p,the,default,value,is,info;public,void,set,level,string,level,this,level,level
LogEndpoint -> public void setLevel(String level);1548175645;Logging level to use._<p/>_The default value is INFO.;public void setLevel(String level) {_        this.level = level__    };logging,level,to,use,p,the,default,value,is,info;public,void,set,level,string,level,this,level,level
LogEndpoint -> public void setLevel(String level);1548317621;Logging level to use._<p/>_The default value is INFO.;public void setLevel(String level) {_        this.level = level__    };logging,level,to,use,p,the,default,value,is,info;public,void,set,level,string,level,this,level,level
LogEndpoint -> public Long getGroupDelay();1547836605;Set the initial delay for stats (in millis);public Long getGroupDelay() {_        return groupDelay__    };set,the,initial,delay,for,stats,in,millis;public,long,get,group,delay,return,group,delay
LogEndpoint -> public Long getGroupDelay();1548175645;Set the initial delay for stats (in millis);public Long getGroupDelay() {_        return groupDelay__    };set,the,initial,delay,for,stats,in,millis;public,long,get,group,delay,return,group,delay
LogEndpoint -> public Long getGroupDelay();1548317621;Set the initial delay for stats (in millis);public Long getGroupDelay() {_        return groupDelay__    };set,the,initial,delay,for,stats,in,millis;public,long,get,group,delay,return,group,delay
LogEndpoint -> protected Processor createLogger() throws Exception;1547836605;Creates the logger {@link Processor} to be used.;protected Processor createLogger() throws Exception {_        Processor answer__        _        CamelLogger camelLogger__        LoggingLevel loggingLevel = LoggingLevel.INFO__        if (level != null) {_            loggingLevel = LoggingLevel.valueOf(level)__        }_        if (providedLogger == null) {_            camelLogger = new CamelLogger(loggerName, loggingLevel, getMarker())__        } else {_            camelLogger = new CamelLogger(providedLogger, loggingLevel, getMarker())__        }_        if (getGroupSize() != null) {_            answer = new ThroughputLogger(camelLogger, getGroupSize())__        } else if (getGroupInterval() != null) {_            Boolean groupActiveOnly = getGroupActiveOnly() != null ? getGroupActiveOnly() : Boolean.TRUE__            Long groupDelay = getGroupDelay()__            answer = new ThroughputLogger(camelLogger, this.getCamelContext(), getGroupInterval(), groupDelay, groupActiveOnly)__        } else {_            answer = new CamelLogProcessor(camelLogger, localFormatter, getMaskingFormatter(), getCamelContext().getLogListeners())__        }_        _        setProcessor(answer)__        return answer__    };creates,the,logger,link,processor,to,be,used;protected,processor,create,logger,throws,exception,processor,answer,camel,logger,camel,logger,logging,level,logging,level,logging,level,info,if,level,null,logging,level,logging,level,value,of,level,if,provided,logger,null,camel,logger,new,camel,logger,logger,name,logging,level,get,marker,else,camel,logger,new,camel,logger,provided,logger,logging,level,get,marker,if,get,group,size,null,answer,new,throughput,logger,camel,logger,get,group,size,else,if,get,group,interval,null,boolean,group,active,only,get,group,active,only,null,get,group,active,only,boolean,true,long,group,delay,get,group,delay,answer,new,throughput,logger,camel,logger,this,get,camel,context,get,group,interval,group,delay,group,active,only,else,answer,new,camel,log,processor,camel,logger,local,formatter,get,masking,formatter,get,camel,context,get,log,listeners,set,processor,answer,return,answer
LogEndpoint -> protected Processor createLogger() throws Exception;1548175645;Creates the logger {@link Processor} to be used.;protected Processor createLogger() throws Exception {_        Processor answer__        _        CamelLogger camelLogger__        LoggingLevel loggingLevel = LoggingLevel.INFO__        if (level != null) {_            loggingLevel = LoggingLevel.valueOf(level)__        }_        if (providedLogger == null) {_            camelLogger = new CamelLogger(loggerName, loggingLevel, getMarker())__        } else {_            camelLogger = new CamelLogger(providedLogger, loggingLevel, getMarker())__        }_        if (getGroupSize() != null) {_            answer = new ThroughputLogger(camelLogger, getGroupSize())__        } else if (getGroupInterval() != null) {_            Boolean groupActiveOnly = getGroupActiveOnly() != null ? getGroupActiveOnly() : Boolean.TRUE__            Long groupDelay = getGroupDelay()__            answer = new ThroughputLogger(camelLogger, this.getCamelContext(), getGroupInterval(), groupDelay, groupActiveOnly)__        } else {_            answer = new CamelLogProcessor(camelLogger, localFormatter, getMaskingFormatter(), getCamelContext().getLogListeners())__        }_        _        setProcessor(answer)__        return answer__    };creates,the,logger,link,processor,to,be,used;protected,processor,create,logger,throws,exception,processor,answer,camel,logger,camel,logger,logging,level,logging,level,logging,level,info,if,level,null,logging,level,logging,level,value,of,level,if,provided,logger,null,camel,logger,new,camel,logger,logger,name,logging,level,get,marker,else,camel,logger,new,camel,logger,provided,logger,logging,level,get,marker,if,get,group,size,null,answer,new,throughput,logger,camel,logger,get,group,size,else,if,get,group,interval,null,boolean,group,active,only,get,group,active,only,null,get,group,active,only,boolean,true,long,group,delay,get,group,delay,answer,new,throughput,logger,camel,logger,this,get,camel,context,get,group,interval,group,delay,group,active,only,else,answer,new,camel,log,processor,camel,logger,local,formatter,get,masking,formatter,get,camel,context,get,log,listeners,set,processor,answer,return,answer
LogEndpoint -> protected Processor createLogger() throws Exception;1548317621;Creates the logger {@link Processor} to be used.;protected Processor createLogger() throws Exception {_        Processor answer__        _        CamelLogger camelLogger__        LoggingLevel loggingLevel = LoggingLevel.INFO__        if (level != null) {_            loggingLevel = LoggingLevel.valueOf(level)__        }_        if (providedLogger == null) {_            camelLogger = new CamelLogger(loggerName, loggingLevel, getMarker())__        } else {_            camelLogger = new CamelLogger(providedLogger, loggingLevel, getMarker())__        }_        if (getGroupSize() != null) {_            answer = new ThroughputLogger(camelLogger, getGroupSize())__        } else if (getGroupInterval() != null) {_            Boolean groupActiveOnly = getGroupActiveOnly() != null ? getGroupActiveOnly() : Boolean.TRUE__            Long groupDelay = getGroupDelay()__            answer = new ThroughputLogger(camelLogger, this.getCamelContext(), getGroupInterval(), groupDelay, groupActiveOnly)__        } else {_            answer = new CamelLogProcessor(camelLogger, localFormatter, getMaskingFormatter(), getCamelContext().getLogListeners())__        }_        _        setProcessor(answer)__        return answer__    };creates,the,logger,link,processor,to,be,used;protected,processor,create,logger,throws,exception,processor,answer,camel,logger,camel,logger,logging,level,logging,level,logging,level,info,if,level,null,logging,level,logging,level,value,of,level,if,provided,logger,null,camel,logger,new,camel,logger,logger,name,logging,level,get,marker,else,camel,logger,new,camel,logger,provided,logger,logging,level,get,marker,if,get,group,size,null,answer,new,throughput,logger,camel,logger,get,group,size,else,if,get,group,interval,null,boolean,group,active,only,get,group,active,only,null,get,group,active,only,boolean,true,long,group,delay,get,group,delay,answer,new,throughput,logger,camel,logger,this,get,camel,context,get,group,interval,group,delay,group,active,only,else,answer,new,camel,log,processor,camel,logger,local,formatter,get,masking,formatter,get,camel,context,get,log,listeners,set,processor,answer,return,answer
LogEndpoint -> public String getMarker();1547836605;An optional Marker name to use.;public String getMarker() {_        return marker__    };an,optional,marker,name,to,use;public,string,get,marker,return,marker
LogEndpoint -> public String getMarker();1548175645;An optional Marker name to use.;public String getMarker() {_        return marker__    };an,optional,marker,name,to,use;public,string,get,marker,return,marker
LogEndpoint -> public String getMarker();1548317621;An optional Marker name to use.;public String getMarker() {_        return marker__    };an,optional,marker,name,to,use;public,string,get,marker,return,marker
LogEndpoint -> public Integer getGroupSize();1547836605;An integer that specifies a group size for throughput logging.;public Integer getGroupSize() {_        return groupSize__    };an,integer,that,specifies,a,group,size,for,throughput,logging;public,integer,get,group,size,return,group,size
LogEndpoint -> public Integer getGroupSize();1548175645;An integer that specifies a group size for throughput logging.;public Integer getGroupSize() {_        return groupSize__    };an,integer,that,specifies,a,group,size,for,throughput,logging;public,integer,get,group,size,return,group,size
LogEndpoint -> public Integer getGroupSize();1548317621;An integer that specifies a group size for throughput logging.;public Integer getGroupSize() {_        return groupSize__    };an,integer,that,specifies,a,group,size,for,throughput,logging;public,integer,get,group,size,return,group,size
LogEndpoint -> public void setGroupDelay(Long groupDelay);1547836605;Set the initial delay for stats (in millis);public void setGroupDelay(Long groupDelay) {_        this.groupDelay = groupDelay__    };set,the,initial,delay,for,stats,in,millis;public,void,set,group,delay,long,group,delay,this,group,delay,group,delay
LogEndpoint -> public void setGroupDelay(Long groupDelay);1548175645;Set the initial delay for stats (in millis);public void setGroupDelay(Long groupDelay) {_        this.groupDelay = groupDelay__    };set,the,initial,delay,for,stats,in,millis;public,void,set,group,delay,long,group,delay,this,group,delay,group,delay
LogEndpoint -> public void setGroupDelay(Long groupDelay);1548317621;Set the initial delay for stats (in millis);public void setGroupDelay(Long groupDelay) {_        this.groupDelay = groupDelay__    };set,the,initial,delay,for,stats,in,millis;public,void,set,group,delay,long,group,delay,this,group,delay,group,delay
LogEndpoint -> public String getLoggerName();1547836605;The logger name to use;public String getLoggerName() {_        return loggerName__    };the,logger,name,to,use;public,string,get,logger,name,return,logger,name
LogEndpoint -> public String getLoggerName();1548175645;The logger name to use;public String getLoggerName() {_        return loggerName__    };the,logger,name,to,use;public,string,get,logger,name,return,logger,name
LogEndpoint -> public String getLoggerName();1548317621;The logger name to use;public String getLoggerName() {_        return loggerName__    };the,logger,name,to,use;public,string,get,logger,name,return,logger,name
LogEndpoint -> public void setLogMask(Boolean logMask);1547836605;If true, mask sensitive information like password or passphrase in the log.;public void setLogMask(Boolean logMask) {_        this.logMask = logMask__    };if,true,mask,sensitive,information,like,password,or,passphrase,in,the,log;public,void,set,log,mask,boolean,log,mask,this,log,mask,log,mask
LogEndpoint -> public void setLogMask(Boolean logMask);1548175645;If true, mask sensitive information like password or passphrase in the log.;public void setLogMask(Boolean logMask) {_        this.logMask = logMask__    };if,true,mask,sensitive,information,like,password,or,passphrase,in,the,log;public,void,set,log,mask,boolean,log,mask,this,log,mask,log,mask
LogEndpoint -> public void setLogMask(Boolean logMask);1548317621;If true, mask sensitive information like password or passphrase in the log.;public void setLogMask(Boolean logMask) {_        this.logMask = logMask__    };if,true,mask,sensitive,information,like,password,or,passphrase,in,the,log;public,void,set,log,mask,boolean,log,mask,this,log,mask,log,mask
LogEndpoint -> public void setGroupSize(Integer groupSize);1547836605;An integer that specifies a group size for throughput logging.;public void setGroupSize(Integer groupSize) {_        this.groupSize = groupSize__    };an,integer,that,specifies,a,group,size,for,throughput,logging;public,void,set,group,size,integer,group,size,this,group,size,group,size
LogEndpoint -> public void setGroupSize(Integer groupSize);1548175645;An integer that specifies a group size for throughput logging.;public void setGroupSize(Integer groupSize) {_        this.groupSize = groupSize__    };an,integer,that,specifies,a,group,size,for,throughput,logging;public,void,set,group,size,integer,group,size,this,group,size,group,size
LogEndpoint -> public void setGroupSize(Integer groupSize);1548317621;An integer that specifies a group size for throughput logging.;public void setGroupSize(Integer groupSize) {_        this.groupSize = groupSize__    };an,integer,that,specifies,a,group,size,for,throughput,logging;public,void,set,group,size,integer,group,size,this,group,size,group,size
LogEndpoint -> public void setMarker(String marker);1547836605;An optional Marker name to use.;public void setMarker(String marker) {_        this.marker = marker__    };an,optional,marker,name,to,use;public,void,set,marker,string,marker,this,marker,marker
LogEndpoint -> public void setMarker(String marker);1548175645;An optional Marker name to use.;public void setMarker(String marker) {_        this.marker = marker__    };an,optional,marker,name,to,use;public,void,set,marker,string,marker,this,marker,marker
LogEndpoint -> public void setMarker(String marker);1548317621;An optional Marker name to use.;public void setMarker(String marker) {_        this.marker = marker__    };an,optional,marker,name,to,use;public,void,set,marker,string,marker,this,marker,marker
LogEndpoint -> public Boolean getGroupActiveOnly();1547836605;If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.;public Boolean getGroupActiveOnly() {_        return groupActiveOnly__    };if,true,will,hide,stats,when,no,new,messages,have,been,received,for,a,time,interval,if,false,show,stats,regardless,of,message,traffic;public,boolean,get,group,active,only,return,group,active,only
LogEndpoint -> public Boolean getGroupActiveOnly();1548175645;If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.;public Boolean getGroupActiveOnly() {_        return groupActiveOnly__    };if,true,will,hide,stats,when,no,new,messages,have,been,received,for,a,time,interval,if,false,show,stats,regardless,of,message,traffic;public,boolean,get,group,active,only,return,group,active,only
LogEndpoint -> public Boolean getGroupActiveOnly();1548317621;If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.;public Boolean getGroupActiveOnly() {_        return groupActiveOnly__    };if,true,will,hide,stats,when,no,new,messages,have,been,received,for,a,time,interval,if,false,show,stats,regardless,of,message,traffic;public,boolean,get,group,active,only,return,group,active,only
