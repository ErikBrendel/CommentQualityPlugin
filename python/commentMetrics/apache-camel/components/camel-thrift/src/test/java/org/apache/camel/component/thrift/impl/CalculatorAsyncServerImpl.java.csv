commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override @SuppressWarnings({ "rawtypes", "unchecked" }) public void ping(AsyncMethodCallback resultHandler) throws TException {     resultHandler.onComplete(new Object()). }
false;public;3;4;;@Override public void add(int num1, int num2, AsyncMethodCallback<Integer> resultHandler) throws TException {     resultHandler.onComplete(new Integer(num1 + num2)). }
false;public;3;30;;@Override public void calculate(int logid, Work work, AsyncMethodCallback<Integer> resultHandler) throws TException {     int val = 0.     switch(work.op) {         case ADD:             val = work.num1 + work.num2.             break.         case SUBTRACT:             val = work.num1 - work.num2.             break.         case MULTIPLY:             val = work.num1 * work.num2.             break.         case DIVIDE:             if (work.num2 == 0) {                 InvalidOperation io = new InvalidOperation().                 io.whatOp = work.op.getValue().                 io.why = "Cannot divide by 0".                 resultHandler.onError(io).             }             val = work.num1 / work.num2.             break.         default:             InvalidOperation io = new InvalidOperation().             io.whatOp = work.op.getValue().             io.why = "Unknown operation".             resultHandler.onError(io).     }     resultHandler.onComplete(val). }
false;public;1;5;;@Override @SuppressWarnings({ "rawtypes", "unchecked" }) public void zip(AsyncMethodCallback resultHandler) throws TException {     resultHandler.onComplete(new Object()). }
false;public;2;4;;@Override public void echo(Work w, AsyncMethodCallback<Work> resultHandler) throws TException {     resultHandler.onComplete(w.deepCopy()). }
false;public;13;6;;@Override public void alltypes(boolean v1, byte v2, short v3, int v4, long v5, double v6, String v7, ByteBuffer v8, Work v9, List<Integer> v10, Set<String> v11, Map<String, Long> v12, AsyncMethodCallback<Integer> resultHandler) throws TException {     resultHandler.onComplete(new Integer(1)). }
