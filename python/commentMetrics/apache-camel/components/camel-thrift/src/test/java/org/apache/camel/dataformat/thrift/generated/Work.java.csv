commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;14;/**  * Find the _Fields constant that matches fieldId, or null if its not found.  */ ;/**  * Find the _Fields constant that matches fieldId, or null if its not found.  */ public static _Fields findByThriftId(int fieldId) {     switch(fieldId) {         case // NUM1         1:             return NUM1.         case // NUM2         2:             return NUM2.         case // OP         3:             return OP.         case // COMMENT         4:             return COMMENT.         default:             return null.     } }
true;public,static;1;5;/**  * Find the _Fields constant that matches fieldId, throwing an exception  * if it is not found.  */ ;/**  * Find the _Fields constant that matches fieldId, throwing an exception  * if it is not found.  */ public static _Fields findByThriftIdOrThrow(int fieldId) {     _Fields fields = findByThriftId(fieldId).     if (fields == null)         throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!").     return fields. }
true;public,static;1;3;/**  * Find the _Fields constant that matches name, or null if its not found.  */ ;/**  * Find the _Fields constant that matches name, or null if its not found.  */ public static _Fields findByName(java.lang.String name) {     return byName.get(name). }
false;public;0;3;;public short getThriftFieldId() {     return _thriftId. }
false;public;0;3;;public java.lang.String getFieldName() {     return _fieldName. }
false;public;0;3;;public Work deepCopy() {     return new Work(this). }
false;public;0;9;;@Override public void clear() {     this.num1 = 0.     setNum2IsSet(false).     this.num2 = 0.     this.op = null.     this.comment = null. }
false;public;0;3;;public int getNum1() {     return this.num1. }
false;public;1;5;;public Work setNum1(int num1) {     this.num1 = num1.     setNum1IsSet(true).     return this. }
false;public;0;3;;public void unsetNum1() {     __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID). }
true;public;0;3;/**  * Returns true if field num1 is set (has been assigned a value) and false otherwise  */ ;/**  * Returns true if field num1 is set (has been assigned a value) and false otherwise  */ public boolean isSetNum1() {     return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID). }
false;public;1;3;;public void setNum1IsSet(boolean value) {     __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value). }
false;public;0;3;;public int getNum2() {     return this.num2. }
false;public;1;5;;public Work setNum2(int num2) {     this.num2 = num2.     setNum2IsSet(true).     return this. }
false;public;0;3;;public void unsetNum2() {     __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID). }
true;public;0;3;/**  * Returns true if field num2 is set (has been assigned a value) and false otherwise  */ ;/**  * Returns true if field num2 is set (has been assigned a value) and false otherwise  */ public boolean isSetNum2() {     return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID). }
false;public;1;3;;public void setNum2IsSet(boolean value) {     __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value). }
true;public;0;3;/**  * @see Operation  */ ;/**  * @see Operation  */ public Operation getOp() {     return this.op. }
true;public;1;4;/**  * @see Operation  */ ;/**  * @see Operation  */ public Work setOp(Operation op) {     this.op = op.     return this. }
false;public;0;3;;public void unsetOp() {     this.op = null. }
true;public;0;3;/**  * Returns true if field op is set (has been assigned a value) and false otherwise  */ ;/**  * Returns true if field op is set (has been assigned a value) and false otherwise  */ public boolean isSetOp() {     return this.op != null. }
false;public;1;5;;public void setOpIsSet(boolean value) {     if (!value) {         this.op = null.     } }
false;public;0;3;;public java.lang.String getComment() {     return this.comment. }
false;public;1;4;;public Work setComment(java.lang.String comment) {     this.comment = comment.     return this. }
false;public;0;3;;public void unsetComment() {     this.comment = null. }
true;public;0;3;/**  * Returns true if field comment is set (has been assigned a value) and false otherwise  */ ;/**  * Returns true if field comment is set (has been assigned a value) and false otherwise  */ public boolean isSetComment() {     return this.comment != null. }
false;public;1;5;;public void setCommentIsSet(boolean value) {     if (!value) {         this.comment = null.     } }
false;public;2;36;;public void setFieldValue(_Fields field, java.lang.Object value) {     switch(field) {         case NUM1:             if (value == null) {                 unsetNum1().             } else {                 setNum1((java.lang.Integer) value).             }             break.         case NUM2:             if (value == null) {                 unsetNum2().             } else {                 setNum2((java.lang.Integer) value).             }             break.         case OP:             if (value == null) {                 unsetOp().             } else {                 setOp((Operation) value).             }             break.         case COMMENT:             if (value == null) {                 unsetComment().             } else {                 setComment((java.lang.String) value).             }             break.     } }
false;public;1;17;;public java.lang.Object getFieldValue(_Fields field) {     switch(field) {         case NUM1:             return getNum1().         case NUM2:             return getNum2().         case OP:             return getOp().         case COMMENT:             return getComment().     }     throw new java.lang.IllegalStateException(). }
true;public;1;17;/**  * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise  */ ;/**  * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise  */ public boolean isSet(_Fields field) {     if (field == null) {         throw new java.lang.IllegalArgumentException().     }     switch(field) {         case NUM1:             return isSetNum1().         case NUM2:             return isSetNum2().         case OP:             return isSetOp().         case COMMENT:             return isSetComment().     }     throw new java.lang.IllegalStateException(). }
false;public;1;8;;@Override public boolean equals(java.lang.Object that) {     if (that == null)         return false.     if (that instanceof Work)         return this.equals((Work) that).     return false. }
false;public;1;44;;public boolean equals(Work that) {     if (that == null)         return false.     if (this == that)         return true.     boolean this_present_num1 = true.     boolean that_present_num1 = true.     if (this_present_num1 || that_present_num1) {         if (!(this_present_num1 && that_present_num1))             return false.         if (this.num1 != that.num1)             return false.     }     boolean this_present_num2 = true.     boolean that_present_num2 = true.     if (this_present_num2 || that_present_num2) {         if (!(this_present_num2 && that_present_num2))             return false.         if (this.num2 != that.num2)             return false.     }     boolean this_present_op = true && this.isSetOp().     boolean that_present_op = true && that.isSetOp().     if (this_present_op || that_present_op) {         if (!(this_present_op && that_present_op))             return false.         if (!this.op.equals(that.op))             return false.     }     boolean this_present_comment = true && this.isSetComment().     boolean that_present_comment = true && that.isSetComment().     if (this_present_comment || that_present_comment) {         if (!(this_present_comment && that_present_comment))             return false.         if (!this.comment.equals(that.comment))             return false.     }     return true. }
false;public;0;18;;@Override public int hashCode() {     int hashCode = 1.     hashCode = hashCode * 8191 + num1.     hashCode = hashCode * 8191 + num2.     hashCode = hashCode * 8191 + ((isSetOp()) ? 131071 : 524287).     if (isSetOp())         hashCode = hashCode * 8191 + op.getValue().     hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287).     if (isSetComment())         hashCode = hashCode * 8191 + comment.hashCode().     return hashCode. }
false;public;1;50;;@Override public int compareTo(Work other) {     if (!getClass().equals(other.getClass())) {         return getClass().getName().compareTo(other.getClass().getName()).     }     int lastComparison = 0.     lastComparison = java.lang.Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1()).     if (lastComparison != 0) {         return lastComparison.     }     if (isSetNum1()) {         lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1).         if (lastComparison != 0) {             return lastComparison.         }     }     lastComparison = java.lang.Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2()).     if (lastComparison != 0) {         return lastComparison.     }     if (isSetNum2()) {         lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, other.num2).         if (lastComparison != 0) {             return lastComparison.         }     }     lastComparison = java.lang.Boolean.valueOf(isSetOp()).compareTo(other.isSetOp()).     if (lastComparison != 0) {         return lastComparison.     }     if (isSetOp()) {         lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op).         if (lastComparison != 0) {             return lastComparison.         }     }     lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment()).     if (lastComparison != 0) {         return lastComparison.     }     if (isSetComment()) {         lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment).         if (lastComparison != 0) {             return lastComparison.         }     }     return 0. }
false;public;1;3;;public _Fields fieldForId(int fieldId) {     return _Fields.findByThriftId(fieldId). }
false;public;1;3;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {     scheme(iprot).read(iprot, this). }
false;public;1;3;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {     scheme(oprot).write(oprot, this). }
false;public;0;33;;@Override public java.lang.String toString() {     java.lang.StringBuilder sb = new java.lang.StringBuilder("Work(").     boolean first = true.     sb.append("num1:").     sb.append(this.num1).     first = false.     if (!first)         sb.append(", ").     sb.append("num2:").     sb.append(this.num2).     first = false.     if (!first)         sb.append(", ").     sb.append("op:").     if (this.op == null) {         sb.append("null").     } else {         sb.append(this.op).     }     first = false.     if (isSetComment()) {         if (!first)             sb.append(", ").         sb.append("comment:").         if (this.comment == null) {             sb.append("null").         } else {             sb.append(this.comment).         }         first = false.     }     sb.append(")").     return sb.toString(). }
false;public;0;4;;public void validate() throws org.apache.thrift.TException { // check for required fields // check for sub-struct validity }
false;private;1;7;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {     try {         write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out))).     } catch (org.apache.thrift.TException te) {         throw new java.io.IOException(te).     } }
false;private;1;9;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {     try {         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.         __isset_bitfield = 0.         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in))).     } catch (org.apache.thrift.TException te) {         throw new java.io.IOException(te).     } }
false;public;0;3;;public WorkStandardScheme getScheme() {     return new WorkStandardScheme(). }
false;public;2;52;;public void read(org.apache.thrift.protocol.TProtocol iprot, Work struct) throws org.apache.thrift.TException {     org.apache.thrift.protocol.TField schemeField.     iprot.readStructBegin().     while (true) {         schemeField = iprot.readFieldBegin().         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {             break.         }         switch(schemeField.id) {             case // NUM1             1:                 if (schemeField.type == org.apache.thrift.protocol.TType.I32) {                     struct.num1 = iprot.readI32().                     struct.setNum1IsSet(true).                 } else {                     org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type).                 }                 break.             case // NUM2             2:                 if (schemeField.type == org.apache.thrift.protocol.TType.I32) {                     struct.num2 = iprot.readI32().                     struct.setNum2IsSet(true).                 } else {                     org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type).                 }                 break.             case // OP             3:                 if (schemeField.type == org.apache.thrift.protocol.TType.I32) {                     struct.op = org.apache.camel.dataformat.thrift.generated.Operation.findByValue(iprot.readI32()).                     struct.setOpIsSet(true).                 } else {                     org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type).                 }                 break.             case // COMMENT             4:                 if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {                     struct.comment = iprot.readString().                     struct.setCommentIsSet(true).                 } else {                     org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type).                 }                 break.             default:                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type).         }         iprot.readFieldEnd().     }     iprot.readStructEnd().     // check for required fields of primitive type, which can't be checked in the validate method     struct.validate(). }
false;public;2;25;;public void write(org.apache.thrift.protocol.TProtocol oprot, Work struct) throws org.apache.thrift.TException {     struct.validate().     oprot.writeStructBegin(STRUCT_DESC).     oprot.writeFieldBegin(NUM1_FIELD_DESC).     oprot.writeI32(struct.num1).     oprot.writeFieldEnd().     oprot.writeFieldBegin(NUM2_FIELD_DESC).     oprot.writeI32(struct.num2).     oprot.writeFieldEnd().     if (struct.op != null) {         oprot.writeFieldBegin(OP_FIELD_DESC).         oprot.writeI32(struct.op.getValue()).         oprot.writeFieldEnd().     }     if (struct.comment != null) {         if (struct.isSetComment()) {             oprot.writeFieldBegin(COMMENT_FIELD_DESC).             oprot.writeString(struct.comment).             oprot.writeFieldEnd().         }     }     oprot.writeFieldStop().     oprot.writeStructEnd(). }
false;public;0;3;;public WorkTupleScheme getScheme() {     return new WorkTupleScheme(). }
false;public;2;30;;@Override public void write(org.apache.thrift.protocol.TProtocol prot, Work struct) throws org.apache.thrift.TException {     org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot.     java.util.BitSet optionals = new java.util.BitSet().     if (struct.isSetNum1()) {         optionals.set(0).     }     if (struct.isSetNum2()) {         optionals.set(1).     }     if (struct.isSetOp()) {         optionals.set(2).     }     if (struct.isSetComment()) {         optionals.set(3).     }     oprot.writeBitSet(optionals, 4).     if (struct.isSetNum1()) {         oprot.writeI32(struct.num1).     }     if (struct.isSetNum2()) {         oprot.writeI32(struct.num2).     }     if (struct.isSetOp()) {         oprot.writeI32(struct.op.getValue()).     }     if (struct.isSetComment()) {         oprot.writeString(struct.comment).     } }
false;public;2;21;;@Override public void read(org.apache.thrift.protocol.TProtocol prot, Work struct) throws org.apache.thrift.TException {     org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot.     java.util.BitSet incoming = iprot.readBitSet(4).     if (incoming.get(0)) {         struct.num1 = iprot.readI32().         struct.setNum1IsSet(true).     }     if (incoming.get(1)) {         struct.num2 = iprot.readI32().         struct.setNum2IsSet(true).     }     if (incoming.get(2)) {         struct.op = org.apache.camel.dataformat.thrift.generated.Operation.findByValue(iprot.readI32()).         struct.setOpIsSet(true).     }     if (incoming.get(3)) {         struct.comment = iprot.readString().         struct.setCommentIsSet(true).     } }
false;private,static;1;3;;private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {     return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme(). }
