commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static Integer createId() {     return idCounter.getAndIncrement(). }
false;public,static;0;3;;public static Integer getId() {     return idCounter.get(). }
false;public;0;21;;@Override public void run() throws TTransportException {     TTransport transport = new TSocket("localhost", THRIFT_SYNC_REQUEST_TEST_PORT).     transport.open().     TProtocol protocol = new TBinaryProtocol(new TFramedTransport(transport)).     Calculator.Client client = (new Calculator.Client.Factory()).getClient(protocol).     int instanceId = createId().     int calculateResponse = 0.     try {         calculateResponse = client.calculate(1, new Work(instanceId, THRIFT_TEST_NUM1, Operation.MULTIPLY)).     } catch (TException e) {         LOG.info("Exception", e).     }     assertNotNull("instanceId = " + instanceId, calculateResponse).     assertEquals(instanceId * THRIFT_TEST_NUM1, calculateResponse).     transport.close(). }
false;public;0;29;;@Test public void testSyncWithConcurrentThreads() throws Exception {     RunnableAssert ra = new RunnableAssert("testSyncWithConcurrentThreads") {          @Override         public void run() throws TTransportException {             TTransport transport = new TSocket("localhost", THRIFT_SYNC_REQUEST_TEST_PORT).             transport.open().             TProtocol protocol = new TBinaryProtocol(new TFramedTransport(transport)).             Calculator.Client client = (new Calculator.Client.Factory()).getClient(protocol).             int instanceId = createId().             int calculateResponse = 0.             try {                 calculateResponse = client.calculate(1, new Work(instanceId, THRIFT_TEST_NUM1, Operation.MULTIPLY)).             } catch (TException e) {                 LOG.info("Exception", e).             }             assertNotNull("instanceId = " + instanceId, calculateResponse).             assertEquals(instanceId * THRIFT_TEST_NUM1, calculateResponse).             transport.close().         }     }.     new MultithreadingTester().add(ra).numThreads(CONCURRENT_THREAD_COUNT).numRoundsPerThread(ROUNDS_PER_THREAD_COUNT).run(). }
false;public;0;22;;@Override public void run() throws TTransportException, IOException, InterruptedException {     final CountDownLatch latch = new CountDownLatch(1).     TNonblockingTransport transport = new TNonblockingSocket("localhost", THRIFT_ASYNC_REQUEST_TEST_PORT).     Calculator.AsyncClient client = (new Calculator.AsyncClient.Factory(new TAsyncClientManager(), new TBinaryProtocol.Factory())).getAsyncClient(transport).     int instanceId = createId().     CalculateAsyncMethodCallback calculateCallback = new CalculateAsyncMethodCallback(latch).     try {         client.calculate(1, new Work(instanceId, THRIFT_TEST_NUM1, Operation.MULTIPLY), calculateCallback).     } catch (TException e) {         LOG.info("Exception", e).     }     latch.await(5, TimeUnit.SECONDS).     int calculateResponse = calculateCallback.getCalculateResponse().     assertNotNull("instanceId = " + instanceId, calculateResponse).     assertEquals(instanceId * THRIFT_TEST_NUM1, calculateResponse).     transport.close(). }
false;public;0;30;;@Test public void testAsyncWithConcurrentThreads() throws Exception {     RunnableAssert ra = new RunnableAssert("testAsyncWithConcurrentThreads") {          @Override         public void run() throws TTransportException, IOException, InterruptedException {             final CountDownLatch latch = new CountDownLatch(1).             TNonblockingTransport transport = new TNonblockingSocket("localhost", THRIFT_ASYNC_REQUEST_TEST_PORT).             Calculator.AsyncClient client = (new Calculator.AsyncClient.Factory(new TAsyncClientManager(), new TBinaryProtocol.Factory())).getAsyncClient(transport).             int instanceId = createId().             CalculateAsyncMethodCallback calculateCallback = new CalculateAsyncMethodCallback(latch).             try {                 client.calculate(1, new Work(instanceId, THRIFT_TEST_NUM1, Operation.MULTIPLY), calculateCallback).             } catch (TException e) {                 LOG.info("Exception", e).             }             latch.await(5, TimeUnit.SECONDS).             int calculateResponse = calculateCallback.getCalculateResponse().             assertNotNull("instanceId = " + instanceId, calculateResponse).             assertEquals(instanceId * THRIFT_TEST_NUM1, calculateResponse).             transport.close().         }     }.     new MultithreadingTester().add(ra).numThreads(CONCURRENT_THREAD_COUNT).numRoundsPerThread(ROUNDS_PER_THREAD_COUNT).run(). }
false;public;1;5;;@Override public void onComplete(Integer response) {     calculateResponse = response.     latch.countDown(). }
false;public;1;5;;@Override public void onError(Exception exception) {     LOG.info("Exception", exception).     latch.countDown(). }
false;public;0;3;;public Integer getCalculateResponse() {     return calculateResponse. }
false;public;0;10;;@Override public void configure() {     from("thrift://localhost:" + THRIFT_SYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?synchronous=true").setBody(simple("${body[1]}")).bean(new CalculatorMessageBuilder(), "multiply").     from("thrift://localhost:" + THRIFT_ASYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator").setBody(simple("${body[1]}")).bean(new CalculatorMessageBuilder(), "multiply"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("thrift://localhost:" + THRIFT_SYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?synchronous=true").setBody(simple("${body[1]}")).bean(new CalculatorMessageBuilder(), "multiply").             from("thrift://localhost:" + THRIFT_ASYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator").setBody(simple("${body[1]}")).bean(new CalculatorMessageBuilder(), "multiply").         }     }. }
false;public;1;3;;public Integer multiply(Work work) {     return work.num1 * work.num2. }
