commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/thrift/springDataFormat.xml"). }
false;public;0;4;;@Test public void testMarshalAndUnmarshalWithDataFormat() throws Exception {     marshalAndUnmarshal("direct:in", "direct:back"). }
false;public;0;4;;@Test public void testMarshalAndUnmarshalWithDSL1() throws Exception {     marshalAndUnmarshal("direct:marshal", "direct:unmarshalA"). }
false;public;0;4;;@Test public void testMarshalAndUnmarshalWithDSL2() throws Exception {     marshalAndUnmarshal("direct:marshal", "direct:unmarshalB"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:unmarshalC").unmarshal().thrift(new CamelException("wrong instance")).to("mock:reverse"). }
false;public;0;15;;@Test public void testMarshalAndUnmarshalWithDSL3() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:unmarshalC").unmarshal().thrift(new CamelException("wrong instance")).to("mock:reverse").             }         }).         fail("Expect the exception here").     } catch (Exception ex) {         assertTrue("Expect FailedToCreateRouteException", ex instanceof FailedToCreateRouteException).         assertTrue("Get a wrong reason", ex.getCause() instanceof IllegalArgumentException).     } }
false;private;2;24;;private void marshalAndUnmarshal(String inURI, String outURI) throws Exception {     Work input = new Work().     input.num1 = WORK_TEST_NUM1.     input.num2 = WORK_TEST_NUM2.     input.op = WORK_TEST_OPERATION.     input.comment = WORK_TEST_COMMENT.     MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Work.class).     mock.message(0).body().isEqualTo(input).     Object marshalled = template.requestBody(inURI, input).     template.sendBody(outURI, marshalled).     mock.assertIsSatisfied().     Work output = mock.getReceivedExchanges().get(0).getIn().getBody(Work.class).     assertEquals(WORK_TEST_COMMENT, output.getComment()).     assertEquals(WORK_TEST_OPERATION, output.getOp()).     assertEquals(WORK_TEST_NUM2, output.getNum2()). }
