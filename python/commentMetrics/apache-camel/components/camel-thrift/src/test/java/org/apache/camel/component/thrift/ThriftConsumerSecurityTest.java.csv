commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void startThriftSecureClient() throws IOException, TTransportException {     if (transport == null) {         LOG.info("Connecting to the secured Thrift server on port: {}", THRIFT_TEST_PORT).         TSSLTransportFactory.TSSLTransportParameters sslParams = new TSSLTransportFactory.TSSLTransportParameters().         sslParams.setTrustStore(TRUST_STORE_RESOURCE, SECURITY_STORE_PASSWORD).         transport = TSSLTransportFactory.getClientSocket("localhost", THRIFT_TEST_PORT, THRIFT_CLIENT_TIMEOUT, sslParams).         protocol = new TBinaryProtocol(transport).         thriftClient = new Calculator.Client(protocol).         LOG.info("Connected to the secured Thrift server").     } }
false;public;0;8;;@After public void stopThriftClient() throws Exception {     if (transport != null) {         transport.close().         transport = null.         LOG.info("Connection to the Thrift server closed").     } }
false;protected;0;17;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     SSLContextParameters sslParameters = new SSLContextParameters().     KeyStoreParameters keyStoreParams = new KeyStoreParameters().     keyStoreParams.setResource(KEY_STORE_RESOURCE).     keyStoreParams.setPassword(SECURITY_STORE_PASSWORD).     KeyManagersParameters keyManagerParams = new KeyManagersParameters().     keyManagerParams.setKeyStore(keyStoreParams).     sslParameters.setKeyManagers(keyManagerParams).     jndi.bind("sslParams", sslParameters).     return jndi. }
false;public;0;15;;@Test public void testCalculateMethodInvocation() throws Exception {     LOG.info("Test Calculate method invocation").     Work work = new Work(THRIFT_TEST_NUM1, THRIFT_TEST_NUM2, Operation.MULTIPLY).     int calculateResult = thriftClient.calculate(1, work).     MockEndpoint mockEndpoint = getMockEndpoint("mock:thrift-secure-service").     mockEndpoint.expectedMessageCount(1).     mockEndpoint.expectedHeaderValuesReceivedInAnyOrder(ThriftConstants.THRIFT_METHOD_NAME_HEADER, "calculate").     mockEndpoint.assertIsSatisfied().     assertEquals(THRIFT_TEST_NUM1 * THRIFT_TEST_NUM2, calculateResult). }
false;public;0;16;;@Test public void testEchoMethodInvocation() throws Exception {     LOG.info("Test Echo method invocation").     Work echoResult = thriftClient.echo(new Work(THRIFT_TEST_NUM1, THRIFT_TEST_NUM2, Operation.MULTIPLY)).     MockEndpoint mockEndpoint = getMockEndpoint("mock:thrift-secure-service").     mockEndpoint.expectedMessageCount(1).     mockEndpoint.expectedHeaderValuesReceivedInAnyOrder(ThriftConstants.THRIFT_METHOD_NAME_HEADER, "echo").     mockEndpoint.assertIsSatisfied().     assertNotNull(echoResult).     assertTrue(echoResult instanceof Work).     assertEquals(THRIFT_TEST_NUM1, echoResult.num1).     assertEquals(Operation.MULTIPLY, echoResult.op). }
false;public;0;8;;@Override public void configure() {     from("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?negotiationType=SSL&sslParameters=#sslParams&synchronous=true").to("mock:thrift-secure-service").choice().when(header(ThriftConstants.THRIFT_METHOD_NAME_HEADER).isEqualTo("calculate")).setBody(simple(new Integer(THRIFT_TEST_NUM1 * THRIFT_TEST_NUM2).toString())).when(header(ThriftConstants.THRIFT_METHOD_NAME_HEADER).isEqualTo("echo")).setBody(simple("${body[0]}")).bean(new CalculatorMessageBuilder(), "echo"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?negotiationType=SSL&sslParameters=#sslParams&synchronous=true").to("mock:thrift-secure-service").choice().when(header(ThriftConstants.THRIFT_METHOD_NAME_HEADER).isEqualTo("calculate")).setBody(simple(new Integer(THRIFT_TEST_NUM1 * THRIFT_TEST_NUM2).toString())).when(header(ThriftConstants.THRIFT_METHOD_NAME_HEADER).isEqualTo("echo")).setBody(simple("${body[0]}")).bean(new CalculatorMessageBuilder(), "echo").         }     }. }
false;public;1;3;;public Work echo(Work work) {     return work.deepCopy(). }
