commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override public void ping() throws TException { }
false;public;2;4;;@Override public int add(int num1, int num2) throws TException {     return num1 + num2. }
false;public;2;31;;@Override public int calculate(int logId, Work work) throws InvalidOperation, TException {     int val = 0.     switch(work.op) {         case ADD:             val = work.num1 + work.num2.             break.         case SUBTRACT:             val = work.num1 - work.num2.             break.         case MULTIPLY:             val = work.num1 * work.num2.             break.         case DIVIDE:             if (work.num2 == 0) {                 InvalidOperation io = new InvalidOperation().                 io.whatOp = work.op.getValue().                 io.why = "Cannot divide by 0".                 throw io.             }             val = work.num1 / work.num2.             break.         default:             InvalidOperation io = new InvalidOperation().             io.whatOp = work.op.getValue().             io.why = "Unknown operation".             throw io.     }     return val. }
false;public;0;3;;@Override public void zip() throws TException { }
false;public;1;4;;@Override public Work echo(Work w) throws TException {     return w.deepCopy(). }
false;public;12;5;;@Override public int alltypes(boolean v1, byte v2, short v3, int v4, long v5, double v6, String v7, ByteBuffer v8, Work v9, List<Integer> v10, Set<String> v11, Map<String, Long> v12) throws TException {     return 1. }
