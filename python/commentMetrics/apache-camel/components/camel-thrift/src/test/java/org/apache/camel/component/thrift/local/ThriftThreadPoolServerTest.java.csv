commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Before @SuppressWarnings({ "unchecked", "rawtypes" }) public void startThriftServer() throws Exception {     processor = new Calculator.Processor(new CalculatorSyncServerImpl()).     TSSLTransportFactory.TSSLTransportParameters sslParams = new TSSLTransportFactory.TSSLTransportParameters().     sslParams.setKeyStore(KEY_STORE_PATH, SECURITY_STORE_PASSWORD).     serverTransport = TSSLTransportFactory.getServerSocket(THRIFT_TEST_PORT, THRIFT_CLIENT_TIMEOUT, InetAddress.getByName("localhost"), sslParams).     ThriftThreadPoolServer.Args args = new ThriftThreadPoolServer.Args(serverTransport).     args.processor(processor).     args.executorService(this.context().getExecutorServiceManager().newThreadPool(this, "test-server-invoker", 1, 10)).     args.startThreadPool(this.context().getExecutorServiceManager().newSingleThreadExecutor(this, "test-start-thread")).     args.context(this.context()).     server = new ThriftThreadPoolServer(args).     server.serve().     LOG.info("Thrift secured server started on port: {}", THRIFT_TEST_PORT). }
false;public;0;8;;@After public void stopThriftServer() throws IOException {     if (server != null) {         server.stop().         serverTransport.close().         LOG.info("Thrift secured server stoped").     } }
false;public;0;12;;@Test public void clientConnectionTest() throws TException {     TSSLTransportFactory.TSSLTransportParameters sslParams = new TSSLTransportFactory.TSSLTransportParameters().     sslParams.setTrustStore(TRUST_STORE_PATH, SECURITY_STORE_PASSWORD).     clientTransport = TSSLTransportFactory.getClientSocket("localhost", THRIFT_TEST_PORT, 1000, sslParams).     protocol = new TBinaryProtocol(clientTransport).     Calculator.Client client = new Calculator.Client(protocol).     int addResult = client.add(THRIFT_TEST_NUM1, THRIFT_TEST_NUM2).     assertEquals(addResult, THRIFT_TEST_NUM1 + THRIFT_TEST_NUM2). }
