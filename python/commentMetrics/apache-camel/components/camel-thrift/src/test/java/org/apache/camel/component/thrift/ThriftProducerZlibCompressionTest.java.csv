commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void run() {     LOG.info("Thrift server with zlib compression started on port: {}", THRIFT_TEST_PORT).     server.serve(). }
false;public,static;0;20;;@BeforeClass @SuppressWarnings({ "unchecked", "rawtypes" }) public static void startThriftServer() throws Exception {     processor = new Calculator.Processor(new CalculatorSyncServerImpl()).     serverTransport = new TServerSocket(new InetSocketAddress(InetAddress.getByName("localhost"), THRIFT_TEST_PORT), THRIFT_CLIENT_TIMEOUT).     TThreadPoolServer.Args args = new TThreadPoolServer.Args(serverTransport).     args.processor(processor).     args.protocolFactory(new TBinaryProtocol.Factory()).     args.transportFactory(new TZlibTransport.Factory()).     server = new TThreadPoolServer(args).     Runnable simple = new Runnable() {          public void run() {             LOG.info("Thrift server with zlib compression started on port: {}", THRIFT_TEST_PORT).             server.serve().         }     }.     new Thread(simple).start(). }
false;public,static;0;8;;@AfterClass public static void stopThriftServer() throws IOException {     if (server != null) {         server.stop().         serverTransport.close().         LOG.info("Thrift server with zlib compression stoped").     } }
false;public;0;16;;@Test @SuppressWarnings({ "rawtypes", "unchecked" }) public void testCalculateMethodInvocation() throws Exception {     LOG.info("Thrift calculate method sync test start").     List requestBody = new ArrayList().     requestBody.add(1).     requestBody.add(new Work(THRIFT_TEST_NUM1, THRIFT_TEST_NUM2, Operation.MULTIPLY)).     Object responseBody = template.requestBody("direct:thrift-zlib-calculate", requestBody).     assertNotNull(responseBody).     assertTrue(responseBody instanceof Integer).     assertEquals(THRIFT_TEST_NUM1 * THRIFT_TEST_NUM2, responseBody). }
false;public;0;8;;@Test public void testVoidMethodInvocation() throws Exception {     LOG.info("Thrift method with empty parameters and void output sync test start").     Object requestBody = null.     Object responseBody = template.requestBody("direct:thrift-zlib-ping", requestBody).     assertNull(responseBody). }
false;public;0;7;;@Override public void configure() {     from("direct:thrift-zlib-calculate").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?method=calculate&compressionType=ZLIB&synchronous=true").     from("direct:thrift-zlib-ping").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?method=ping&compressionType=ZLIB&synchronous=true"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:thrift-zlib-calculate").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?method=calculate&compressionType=ZLIB&synchronous=true").             from("direct:thrift-zlib-ping").to("thrift://localhost:" + THRIFT_TEST_PORT + "/org.apache.camel.component.thrift.generated.Calculator?method=ping&compressionType=ZLIB&synchronous=true").         }     }. }
