commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;15;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     ThriftConfiguration config = new ThriftConfiguration().     config = parseConfiguration(config, uri, parameters).     SSLContextParameters sslParameters = config.getSslParameters().     if (config.getNegotiationType() == ThriftNegotiationType.SSL && sslParameters == null) {         sslParameters = retrieveGlobalSslContextParameters().         config.setSslParameters(sslParameters).     }     setProperties(config, parameters).     Endpoint endpoint = new ThriftEndpoint(uri, this, config).     return endpoint. }
true;protected;3;4;/**  * Parses the configuration  *  * @return the parsed and valid configuration to use  */ ;/**  * Parses the configuration  *  * @return the parsed and valid configuration to use  */ protected ThriftConfiguration parseConfiguration(ThriftConfiguration configuration, String remaining, Map<String, Object> parameters) throws Exception {     configuration.parseURI(new URI(remaining), parameters, this).     return configuration. }
true;public;0;4;/**  * Determine if the thrift component is using global SSL context parameters  */ ;/**  * Determine if the thrift component is using global SSL context parameters  */ @Override public boolean isUseGlobalSslContextParameters() {     return useGlobalSslContextParameters. }
false;public;1;4;;@Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
