commented;modifiers;parameterAmount;loc;comment;code
false;public;4;63;;@Override @SuppressWarnings({ "unchecked", "rawtypes" }) public Object invoke(Object self, Method thisMethod, Method proceed, Object[] args) throws Throwable {     if (proceed == null) {         // {org.apache.thrift.async.AsyncMethodCallback}         if (args.length > 0 && args[args.length - 1] instanceof AsyncMethodCallback) {             AsyncMethodCallback callback = (AsyncMethodCallback) args[args.length - 1].             Exchange exchange = endpoint.createExchange().             if (args.length >= 2) {                 exchange.getIn().setBody(Arrays.asList(Arrays.copyOfRange(args, 0, args.length - 1))).             } else {                 exchange.getIn().setBody(null).             }             exchange.getIn().setHeader(ThriftConstants.THRIFT_METHOD_NAME_HEADER, thisMethod.getName()).             consumer.process(exchange, doneSync -> {                 Message message = null.                 Object response = null.                 Exception exception = exchange.getException().                 if (exception != null) {                     callback.onError(exception).                 }                 if (exchange.hasOut()) {                     message = exchange.getOut().                 } else {                     message = exchange.getIn().                 }                 if (message != null) {                     Class returnType = ThriftUtils.findMethodReturnType(args[args.length - 1].getClass(), "onComplete").                     if (returnType != null) {                         response = message.getBody(returnType).                     } else {                         callback.onError(new TException("Unable to detect method return type")).                     }                 } else {                     callback.onError(new TException("Unable process null message")).                 }                 callback.onComplete(response).             }).         } else {             Exchange exchange = endpoint.createExchange().             exchange.getIn().setBody(Arrays.asList(args)).             exchange.getIn().setHeader(ThriftConstants.THRIFT_METHOD_NAME_HEADER, thisMethod.getName()).             consumer.getProcessor().process(exchange).             Object responseBody = exchange.getIn().getBody(thisMethod.getReturnType()).             if (responseBody == null && !thisMethod.getReturnType().equals(Void.TYPE)) {                 throw new TApplicationException("Return type requires not empty body").             }             return responseBody.         }         return null.     } else {         return proceed.invoke(self, args).     } }
