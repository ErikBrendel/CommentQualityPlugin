commented;modifiers;parameterAmount;loc;comment;code
false;public;2;18;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     Message message = exchange.getIn().     try {         ThriftUtils.invokeAsyncMethod(thriftClient, configuration.getMethod(), message.getBody(), new AsyncClientMethodCallback(exchange, callback)).     } catch (Exception e) {         if (e.getCause() instanceof TException) {             exchange.setException(e.getCause()).         } else {             exchange.setException(e).         }         callback.done(true).         return true.     }     return false. }
false;public;1;14;;@Override public void process(Exchange exchange) throws Exception {     Message message = exchange.getIn().     try {         Object outBody = ThriftUtils.invokeSyncMethod(thriftClient, configuration.getMethod(), message.getBody()).         exchange.getOut().setBody(outBody).     } catch (Exception e) {         if (e.getCause() instanceof TException) {             exchange.setException(e.getCause()).         } else {             throw new Exception(e).         }     } }
false;protected;0;35;;@Override protected void doStart() throws Exception {     super.doStart().     if (configuration.getNegotiationType() == ThriftNegotiationType.SSL) {         if (!endpoint.isSynchronous()) {             throw new IllegalArgumentException("The SSL negotiation type requires to set syncronous communication mode").         }         if (syncTransport == null) {             initializeSslTransport().             log.info("Getting synchronous secured client implementation").             thriftClient = ThriftUtils.constructClientInstance(endpoint.getServicePackage(), endpoint.getServiceName(), syncTransport, configuration.getExchangeProtocol(), configuration.getNegotiationType(), configuration.getCompressionType(), endpoint.getCamelContext()).         }     } else if (endpoint.isSynchronous()) {         if (syncTransport == null) {             initializeSyncTransport().             log.info("Getting synchronous client implementation").             thriftClient = ThriftUtils.constructClientInstance(endpoint.getServicePackage(), endpoint.getServiceName(), syncTransport, configuration.getExchangeProtocol(), configuration.getNegotiationType(), configuration.getCompressionType(), endpoint.getCamelContext()).         }     } else {         if (asyncTransport == null) {             initializeAsyncTransport().             log.info("Getting asynchronous client implementation").             thriftClient = ThriftUtils.constructAsyncClientInstance(endpoint.getServicePackage(), endpoint.getServiceName(), asyncTransport, configuration.getExchangeProtocol(), endpoint.getCamelContext()).         }     } }
false;protected;0;13;;@Override protected void doStop() throws Exception {     if (syncTransport != null) {         log.debug("Terminating synchronous transport the remote Thrift server").         syncTransport.close().         syncTransport = null.     } else if (asyncTransport != null) {         log.debug("Terminating asynchronous transport the remote Thrift server").         asyncTransport.close().         asyncTransport = null.     }     super.doStop(). }
false;protected;0;9;;protected void initializeSyncTransport() throws TTransportException {     if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {         log.info("Creating transport to the remote Thrift server {}:{}", configuration.getHost(), configuration.getPort()).         syncTransport = new TSocket(configuration.getHost(), configuration.getPort()).     } else {         throw new IllegalArgumentException("No connection properties (host, port) specified").     }     syncTransport.open(). }
false;protected;0;8;;protected void initializeAsyncTransport() throws IOException, TTransportException {     if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {         log.info("Creating transport to the remote Thrift server {}:{}", configuration.getHost(), configuration.getPort()).         asyncTransport = new TNonblockingSocket(configuration.getHost(), configuration.getPort()).     } else {         throw new IllegalArgumentException("No connection properties (host, port) specified").     } }
false;protected;0;34;;protected void initializeSslTransport() throws TTransportException, IOException {     if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {         SSLContextParameters sslParameters = configuration.getSslParameters().         if (sslParameters == null) {             throw new IllegalArgumentException("SSL parameters must be initialized if negotiation type is set to " + configuration.getNegotiationType()).         }         ObjectHelper.notNull(sslParameters.getSecureSocketProtocol(), "Security protocol").         ObjectHelper.notNull(sslParameters.getTrustManagers().getKeyStore().getResource(), "Trust store path").         ObjectHelper.notNull(sslParameters.getTrustManagers().getKeyStore().getPassword(), "Trust store password").         log.info("Creating secured transport to the remote Thrift server {}:{}", configuration.getHost(), configuration.getPort()).         TSSLTransportFactory.TSSLTransportParameters sslParams.         ClassResolver classResolver = endpoint.getCamelContext().getClassResolver().         sslParams = new TSSLTransportFactory.TSSLTransportParameters(sslParameters.getSecureSocketProtocol(), sslParameters.getCipherSuites() == null ? null : sslParameters.getCipherSuites().getCipherSuite().stream().toArray(String[]::new)).         if (ObjectHelper.isNotEmpty(sslParameters.getTrustManagers().getProvider()) && ObjectHelper.isNotEmpty(sslParameters.getTrustManagers().getKeyStore().getType())) {             sslParams.setTrustStore(ResourceHelper.resolveResourceAsInputStream(classResolver, sslParameters.getTrustManagers().getKeyStore().getResource()), sslParameters.getTrustManagers().getKeyStore().getPassword(), sslParameters.getTrustManagers().getProvider(), sslParameters.getTrustManagers().getKeyStore().getType()).         } else {             sslParams.setTrustStore(sslParameters.getTrustManagers().getKeyStore().getResource(), sslParameters.getTrustManagers().getKeyStore().getPassword()).         }         syncTransport = TSSLTransportFactory.getClientSocket(configuration.getHost(), configuration.getPort(), configuration.getClientTimeout(), sslParams).     } else {         throw new IllegalArgumentException("No connection properties (host, port) specified").     } }
