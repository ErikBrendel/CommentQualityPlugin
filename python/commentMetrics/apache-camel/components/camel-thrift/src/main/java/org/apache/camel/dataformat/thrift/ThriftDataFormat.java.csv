commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "thrift". }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;1;4;;@SuppressWarnings("rawtypes") public void setDefaultInstance(TBase instance) {     this.defaultInstance = instance. }
false;public;1;8;;@SuppressWarnings("rawtypes") public void setDefaultInstance(Object instance) {     if (instance instanceof TBase) {         this.defaultInstance = (TBase) instance.     } else {         throw new IllegalArgumentException("The argument for setDefaultInstance should be subClass of org.apache.thrift.TBase").     } }
false;public;1;4;;public void setInstanceClass(String className) throws Exception {     ObjectHelper.notNull(className, "ThriftDataFormat instaceClass").     instanceClassName = className. }
false;public;1;3;;public void setContentTypeHeader(boolean contentTypeHeader) {     this.contentTypeHeader = contentTypeHeader. }
false;public;0;3;;public boolean isContentTypeHeader() {     return contentTypeHeader. }
true;public;1;4;/*      * Defines a content type format in which thrift message will be      * serialized/deserialized from(to) the Java been. It can be native thrift      * format or JSON fields representation. The default value is 'native'.      */ ;/*      * Defines a content type format in which thrift message will be      * serialized/deserialized from(to) the Java been. It can be native thrift      * format or JSON fields representation. The default value is 'native'.      */ public void setContentTypeFormat(String contentTypeFormat) {     StringHelper.notEmpty(contentTypeFormat, "ThriftDataFormat contentTypeFormat").     this.contentTypeFormat = contentTypeFormat. }
true;public;3;28;/*      * (non-Javadoc)      * @see org.apache.camel.spi.DataFormat#marshal(org.apache.camel.Exchange,      * java.lang.Object, java.io.OutputStream)      */ ;/*      * (non-Javadoc)      * @see org.apache.camel.spi.DataFormat#marshal(org.apache.camel.Exchange,      * java.lang.Object, java.io.OutputStream)      */ @SuppressWarnings("rawtypes") public void marshal(final Exchange exchange, final Object graph, final OutputStream outputStream) throws Exception {     String contentTypeHeader = CONTENT_TYPE_HEADER_NATIVE.     TSerializer serializer.     if (contentTypeFormat.equals(CONTENT_TYPE_FORMAT_JSON)) {         serializer = new TSerializer(new TJSONProtocol.Factory()).         IOUtils.write(serializer.toString((TBase) graph, "UTF-8"), outputStream, "UTF-8").         contentTypeHeader = CONTENT_TYPE_HEADER_JSON.     } else if (contentTypeFormat.equals(CONTENT_TYPE_FORMAT_SIMPLE_JSON)) {         serializer = new TSerializer(new TSimpleJSONProtocol.Factory()).         IOUtils.write(serializer.toString((TBase) graph, "UTF-8"), outputStream, "UTF-8").         contentTypeHeader = CONTENT_TYPE_HEADER_JSON.     } else if (contentTypeFormat.equals(CONTENT_TYPE_FORMAT_BINARY)) {         serializer = new TSerializer(new TBinaryProtocol.Factory()).         IOUtils.write(serializer.serialize((TBase) graph), outputStream).     } else {         throw new CamelException("Invalid thrift content type format: " + contentTypeFormat).     }     if (isContentTypeHeader()) {         if (exchange.hasOut()) {             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, contentTypeHeader).         } else {             exchange.getIn().setHeader(Exchange.CONTENT_TYPE, contentTypeHeader).         }     } }
true;public;2;18;/*      * (non-Javadoc)      * @see org.apache.camel.spi.DataFormat#unmarshal(org.apache.camel.Exchange,      * java.io.InputStream)      */ ;/*      * (non-Javadoc)      * @see org.apache.camel.spi.DataFormat#unmarshal(org.apache.camel.Exchange,      * java.io.InputStream)      */ public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {     TDeserializer deserializer.     ObjectHelper.notNull(defaultInstance, "defaultInstance or instanceClassName must be set", this).     if (contentTypeFormat.equals(CONTENT_TYPE_FORMAT_JSON)) {         deserializer = new TDeserializer(new TJSONProtocol.Factory()).         deserializer.deserialize(defaultInstance, IOUtils.toByteArray(inputStream)).     } else if (contentTypeFormat.equals(CONTENT_TYPE_FORMAT_BINARY)) {         deserializer = new TDeserializer(new TBinaryProtocol.Factory()).         deserializer.deserialize(defaultInstance, IOUtils.toByteArray(inputStream)).     } else if (contentTypeFormat.equals(CONTENT_TYPE_FORMAT_SIMPLE_JSON)) {         throw new CamelException("Simple JSON format is avalable for the message marshalling only").     } else {         throw new CamelException("Invalid thrift content type format: " + contentTypeFormat).     }     return defaultInstance. }
false;protected;2;14;;@SuppressWarnings("rawtypes") protected TBase loadDefaultInstance(final String className, final CamelContext context) throws CamelException, ClassNotFoundException {     Class<?> instanceClass = context.getClassResolver().resolveMandatoryClass(className).     if (TBase.class.isAssignableFrom(instanceClass)) {         try {             return (TBase) instanceClass.newInstance().         } catch (final Exception ex) {             throw new CamelException("Can't set the defaultInstance of ThriftDataFormat with " + className + ", caused by " + ex).         }     } else {         throw new CamelException("Can't set the defaultInstance of ThriftDataFormat with " + className + ", as the class is not a subClass of org.apache.thrift.TBase").     } }
false;protected;0;6;;@Override protected void doStart() throws Exception {     if (defaultInstance == null && instanceClassName != null) {         defaultInstance = loadDefaultInstance(instanceClassName, getCamelContext()).     } }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
