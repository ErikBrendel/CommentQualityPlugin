# id;timestamp;commentText;codeText;commentWords;codeWords
ThriftThreadPoolServer -> WorkerProcess -> private WorkerProcess(TTransport client);1507041470;Default constructor.__@param client Transport to process;private WorkerProcess(TTransport client) {_            this.client = client__        };default,constructor,param,client,transport,to,process;private,worker,process,ttransport,client,this,client,client
ThriftThreadPoolServer -> WorkerProcess -> private WorkerProcess(TTransport client);1516092194;Default constructor.__@param client Transport to process;private WorkerProcess(TTransport client) {_            this.client = client__        };default,constructor,param,client,transport,to,process;private,worker,process,ttransport,client,this,client,client
ThriftThreadPoolServer -> WorkerProcess -> private WorkerProcess(TTransport client);1524063209;Default constructor.__@param client Transport to process;private WorkerProcess(TTransport client) {_            this.client = client__        };default,constructor,param,client,transport,to,process;private,worker,process,ttransport,client,this,client,client
ThriftThreadPoolServer -> WorkerProcess -> public void run();1507041470;Loops on processing a client forever;public void run() {_            TProcessor processor = null__            TTransport inputTransport = null__            TTransport outputTransport = null__            TProtocol inputProtocol = null__            TProtocol outputProtocol = null___            TServerEventHandler eventHandler = null__            ServerContext connectionContext = null___            try {_                processor = processorFactory_.getProcessor(client)__                inputTransport = inputTransportFactory_.getTransport(client)__                outputTransport = outputTransportFactory_.getTransport(client)__                inputProtocol = inputProtocolFactory_.getProtocol(inputTransport)__                outputProtocol = outputProtocolFactory_.getProtocol(outputTransport)___                eventHandler = getEventHandler()__                if (eventHandler != null) {_                    connectionContext = eventHandler.createContext(inputProtocol, outputProtocol)__                }_                _                _                _                while (true) {__                    if (eventHandler != null) {_                        eventHandler.processContext(connectionContext, inputTransport, outputTransport)__                    }__                    if (stopped_ || !processor.process(inputProtocol, outputProtocol)) {_                        break__                    }_                }_            } catch (TSaslTransportException ttx) {_                _            } catch (TTransportException ttx) {_                _            } catch (TException tx) {_                LOGGER.error("Thrift error occurred during processing of message.", tx)__            } catch (Exception x) {_                LOGGER.error("Error occurred during processing of message.", x)__            } finally {_                if (eventHandler != null) {_                    eventHandler.deleteContext(connectionContext, inputProtocol, outputProtocol)__                }_                if (inputTransport != null) {_                    inputTransport.close()__                }_                if (outputTransport != null) {_                    outputTransport.close()__                }_                if (client.isOpen()) {_                    client.close()__                }_            }_        };loops,on,processing,a,client,forever;public,void,run,tprocessor,processor,null,ttransport,input,transport,null,ttransport,output,transport,null,tprotocol,input,protocol,null,tprotocol,output,protocol,null,tserver,event,handler,event,handler,null,server,context,connection,context,null,try,processor,get,processor,client,input,transport,get,transport,client,output,transport,get,transport,client,input,protocol,get,protocol,input,transport,output,protocol,get,protocol,output,transport,event,handler,get,event,handler,if,event,handler,null,connection,context,event,handler,create,context,input,protocol,output,protocol,while,true,if,event,handler,null,event,handler,process,context,connection,context,input,transport,output,transport,if,processor,process,input,protocol,output,protocol,break,catch,tsasl,transport,exception,ttx,catch,ttransport,exception,ttx,catch,texception,tx,logger,error,thrift,error,occurred,during,processing,of,message,tx,catch,exception,x,logger,error,error,occurred,during,processing,of,message,x,finally,if,event,handler,null,event,handler,delete,context,connection,context,input,protocol,output,protocol,if,input,transport,null,input,transport,close,if,output,transport,null,output,transport,close,if,client,is,open,client,close
ThriftThreadPoolServer -> WorkerProcess -> public void run();1516092194;Loops on processing a client forever;public void run() {_            TProcessor processor = null__            TTransport inputTransport = null__            TTransport outputTransport = null__            TProtocol inputProtocol = null__            TProtocol outputProtocol = null___            TServerEventHandler eventHandler = null__            ServerContext connectionContext = null___            try {_                processor = processorFactory_.getProcessor(client)__                inputTransport = inputTransportFactory_.getTransport(client)__                outputTransport = outputTransportFactory_.getTransport(client)__                inputProtocol = inputProtocolFactory_.getProtocol(inputTransport)__                outputProtocol = outputProtocolFactory_.getProtocol(outputTransport)___                eventHandler = getEventHandler()__                if (eventHandler != null) {_                    connectionContext = eventHandler.createContext(inputProtocol, outputProtocol)__                }_                _                _                _                while (true) {__                    if (eventHandler != null) {_                        eventHandler.processContext(connectionContext, inputTransport, outputTransport)__                    }__                    if (stopped_ || !processor.process(inputProtocol, outputProtocol)) {_                        break__                    }_                }_            } catch (TSaslTransportException ttx) {_                _            } catch (TTransportException ttx) {_                _            } catch (TException tx) {_                LOGGER.error("Thrift error occurred during processing of message.", tx)__            } catch (Exception x) {_                LOGGER.error("Error occurred during processing of message.", x)__            } finally {_                if (eventHandler != null) {_                    eventHandler.deleteContext(connectionContext, inputProtocol, outputProtocol)__                }_                if (inputTransport != null) {_                    inputTransport.close()__                }_                if (outputTransport != null) {_                    outputTransport.close()__                }_                if (client.isOpen()) {_                    client.close()__                }_            }_        };loops,on,processing,a,client,forever;public,void,run,tprocessor,processor,null,ttransport,input,transport,null,ttransport,output,transport,null,tprotocol,input,protocol,null,tprotocol,output,protocol,null,tserver,event,handler,event,handler,null,server,context,connection,context,null,try,processor,get,processor,client,input,transport,get,transport,client,output,transport,get,transport,client,input,protocol,get,protocol,input,transport,output,protocol,get,protocol,output,transport,event,handler,get,event,handler,if,event,handler,null,connection,context,event,handler,create,context,input,protocol,output,protocol,while,true,if,event,handler,null,event,handler,process,context,connection,context,input,transport,output,transport,if,processor,process,input,protocol,output,protocol,break,catch,tsasl,transport,exception,ttx,catch,ttransport,exception,ttx,catch,texception,tx,logger,error,thrift,error,occurred,during,processing,of,message,tx,catch,exception,x,logger,error,error,occurred,during,processing,of,message,x,finally,if,event,handler,null,event,handler,delete,context,connection,context,input,protocol,output,protocol,if,input,transport,null,input,transport,close,if,output,transport,null,output,transport,close,if,client,is,open,client,close
ThriftThreadPoolServer -> WorkerProcess -> public void run();1524063209;Loops on processing a client forever;public void run() {_            TProcessor processor = null__            TTransport inputTransport = null__            TTransport outputTransport = null__            TProtocol inputProtocol = null__            TProtocol outputProtocol = null___            TServerEventHandler eventHandler = null__            ServerContext connectionContext = null___            try {_                processor = processorFactory_.getProcessor(client)__                inputTransport = inputTransportFactory_.getTransport(client)__                outputTransport = outputTransportFactory_.getTransport(client)__                inputProtocol = inputProtocolFactory_.getProtocol(inputTransport)__                outputProtocol = outputProtocolFactory_.getProtocol(outputTransport)___                eventHandler = getEventHandler()__                if (eventHandler != null) {_                    connectionContext = eventHandler.createContext(inputProtocol, outputProtocol)__                }_                _                _                _                while (true) {__                    if (eventHandler != null) {_                        eventHandler.processContext(connectionContext, inputTransport, outputTransport)__                    }__                    if (stopped_ || !processor.process(inputProtocol, outputProtocol)) {_                        break__                    }_                }_            } catch (TSaslTransportException ttx) {_                _            } catch (TTransportException ttx) {_                _            } catch (TException tx) {_                LOGGER.error("Thrift error occurred during processing of message.", tx)__            } catch (Exception x) {_                LOGGER.error("Error occurred during processing of message.", x)__            } finally {_                if (eventHandler != null) {_                    eventHandler.deleteContext(connectionContext, inputProtocol, outputProtocol)__                }_                if (inputTransport != null) {_                    inputTransport.close()__                }_                if (outputTransport != null) {_                    outputTransport.close()__                }_                if (client.isOpen()) {_                    client.close()__                }_            }_        };loops,on,processing,a,client,forever;public,void,run,tprocessor,processor,null,ttransport,input,transport,null,ttransport,output,transport,null,tprotocol,input,protocol,null,tprotocol,output,protocol,null,tserver,event,handler,event,handler,null,server,context,connection,context,null,try,processor,get,processor,client,input,transport,get,transport,client,output,transport,get,transport,client,input,protocol,get,protocol,input,transport,output,protocol,get,protocol,output,transport,event,handler,get,event,handler,if,event,handler,null,connection,context,event,handler,create,context,input,protocol,output,protocol,while,true,if,event,handler,null,event,handler,process,context,connection,context,input,transport,output,transport,if,processor,process,input,protocol,output,protocol,break,catch,tsasl,transport,exception,ttx,catch,ttransport,exception,ttx,catch,texception,tx,logger,error,thrift,error,occurred,during,processing,of,message,tx,catch,exception,x,logger,error,error,occurred,during,processing,of,message,x,finally,if,event,handler,null,event,handler,delete,context,connection,context,input,protocol,output,protocol,if,input,transport,null,input,transport,close,if,output,transport,null,output,transport,close,if,client,is,open,client,close
