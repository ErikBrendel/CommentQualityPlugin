commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Fully qualified service name from the thrift descriptor file  * (package dot service definition name)  */ ;/**  * Fully qualified service name from the thrift descriptor file  * (package dot service definition name)  */ public String getService() {     return service. }
false;public;1;3;;public void setService(String service) {     this.service = service. }
true;public;0;3;/**  * The Thrift invoked method name  */ ;/**  * The Thrift invoked method name  */ public String getMethod() {     return method. }
false;public;1;3;;public void setMethod(String method) {     this.method = method. }
true;public;0;3;/**  * Exchange protocol serialization type  */ ;/**  * Exchange protocol serialization type  */ public ThriftExchangeProtocol getExchangeProtocol() {     return exchangeProtocol. }
false;public;1;3;;public void setExchangeProtocol(ThriftExchangeProtocol exchangeProtocol) {     this.exchangeProtocol = exchangeProtocol. }
true;public;0;3;/**  * Security negotiation type  */ ;/**  * Security negotiation type  */ public ThriftNegotiationType getNegotiationType() {     return negotiationType. }
false;public;1;3;;public void setNegotiationType(ThriftNegotiationType negotiationType) {     this.negotiationType = negotiationType. }
true;public;0;3;/**  * Configuration parameters for SSL/TLS security negotiation  */ ;/**  * Configuration parameters for SSL/TLS security negotiation  */ public SSLContextParameters getSslParameters() {     return sslParameters. }
false;public;1;3;;public void setSslParameters(SSLContextParameters sslParameters) {     this.sslParameters = sslParameters. }
true;public;0;3;/**  * Protocol compression mechanism type  */ ;/**  * Protocol compression mechanism type  */ public ThriftCompressionType getCompressionType() {     return compressionType. }
false;public;1;3;;public void setCompressionType(ThriftCompressionType compressionType) {     this.compressionType = compressionType. }
true;public;0;3;/**  * The Thrift server host name. This is localhost or 0.0.0.0 (if not  * defined) when being a consumer or remote server host name when using  * producer.  */ ;/**  * The Thrift server host name. This is localhost or 0.0.0.0 (if not  * defined) when being a consumer or remote server host name when using  * producer.  */ public String getHost() {     return host. }
false;public;1;3;;public void setHost(String host) {     this.host = host. }
true;public;0;3;/**  * The Thrift server port  */ ;/**  * The Thrift server port  */ public int getPort() {     return port. }
false;public;1;3;;public void setPort(int port) {     this.port = port. }
true;public;0;3;/**  * Client timeout for consumers  */ ;/**  * Client timeout for consumers  */ public int getClientTimeout() {     return clientTimeout. }
false;public;1;3;;public void setClientTimeout(int clientTimeout) {     this.clientTimeout = clientTimeout. }
true;public;0;3;/**  * The Thrift server consumer initial thread pool size  */ ;/**  * The Thrift server consumer initial thread pool size  */ public int getPoolSize() {     return poolSize. }
false;public;1;3;;public void setPoolSize(int poolSize) {     this.poolSize = poolSize. }
true;public;0;3;/**  * The Thrift server consumer max thread pool size  */ ;/**  * The Thrift server consumer max thread pool size  */ public int getMaxPoolSize() {     return maxPoolSize. }
false;public;1;3;;public void setMaxPoolSize(int maxPoolSize) {     this.maxPoolSize = maxPoolSize. }
false;public;3;9;;public void parseURI(URI uri, Map<String, Object> parameters, ThriftComponent component) {     setHost(uri.getHost()).     if (uri.getPort() != -1) {         setPort(uri.getPort()).     }     setService(uri.getPath().substring(1)). }
