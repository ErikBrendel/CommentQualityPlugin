commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     // Simulate message that takes a while to receive.     // 150% of TIMEOUT.     Thread.sleep(TIMEOUT * 1500L). }
false;public;0;21;;@Test public void defaultsToDisabled() throws Exception {     this.mock.expectedMessageCount(1).     this.mock.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // Simulate message that takes a while to receive.             // 150% of TIMEOUT.             Thread.sleep(TIMEOUT * 1500L).         }     }).     Message message = new Message().     message.setBody("Message 1").     message.setMD5OfBody("6a1559560f67c5e7a7d5d838bf0272ee").     message.setMessageId("f6fb6f99-5eb2-4be4-9b15-144774141458").     message.setReceiptHandle(RECEIPT_HANDLE).     this.clientMock.messages.add(message).     // Wait for message to arrive.     assertMockEndpointsSatisfied().     assertTrue("Expected no changeMessageVisibility requests.", this.clientMock.changeMessageVisibilityRequests.size() == 0). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     this.clientMock = new AmazonSQSClientMock().     registry.bind("amazonSQSClient", this.clientMock).     return registry. }
false;public;0;5;;@Override public void configure() throws Exception {     from("aws-sqs://MyQueue?amazonSQSClient=#amazonSQSClient").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("aws-sqs://MyQueue?amazonSQSClient=#amazonSQSClient").to("mock:result").         }     }. }
