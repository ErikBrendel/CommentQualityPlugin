commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public ListQueuesResult listQueues() throws AmazonServiceException, AmazonClientException {     ListQueuesResult result = new ListQueuesResult().     return result. }
false;public;1;8;;@Override public CreateQueueResult createQueue(CreateQueueRequest createQueueRequest) throws AmazonServiceException, AmazonClientException {     String queueName = "https://queue.amazonaws.com/541925086079/" + createQueueRequest.getQueueName().     queues.put(queueName, createQueueRequest).     CreateQueueResult result = new CreateQueueResult().     result.setQueueUrl(queueName).     return result. }
false;public;1;18;;@Override public SendMessageResult sendMessage(SendMessageRequest sendMessageRequest) throws AmazonServiceException, AmazonClientException {     Message message = new Message().     message.setBody(sendMessageRequest.getMessageBody()).     message.setMD5OfBody("6a1559560f67c5e7a7d5d838bf0272ee").     message.setMessageId("f6fb6f99-5eb2-4be4-9b15-144774141458").     message.setReceiptHandle("0NNAq8PwvXsyZkR6yu4nQ07FGxNmOBWi5zC9+4QMqJZ0DJ3gVOmjI2Gh/oFnb0IeJqy5Zc8kH4JX7GVpfjcEDjaAPSeOkXQZRcaBqt" + "4lOtyfj0kcclVV/zS7aenhfhX5Ixfgz/rHhsJwtCPPvTAdgQFGYrqaHly+etJiawiNPVc=").     synchronized (messages) {         messages.add(message).     }     SendMessageResult result = new SendMessageResult().     result.setMessageId("f6fb6f99-5eb2-4be4-9b15-144774141458").     result.setMD5OfMessageBody("6a1559560f67c5e7a7d5d838bf0272ee").     return result. }
false;public;1;19;;@Override public ReceiveMessageResult receiveMessage(ReceiveMessageRequest receiveMessageRequest) throws AmazonServiceException, AmazonClientException {     Integer maxNumberOfMessages = receiveMessageRequest.getMaxNumberOfMessages() != null ? receiveMessageRequest.getMaxNumberOfMessages() : Integer.MAX_VALUE.     ReceiveMessageResult result = new ReceiveMessageResult().     Collection<Message> resultMessages = new ArrayList<>().     synchronized (messages) {         int fetchSize = 0.         for (Iterator<Message> iterator = messages.iterator(). iterator.hasNext() && fetchSize < maxNumberOfMessages. fetchSize++) {             Message rc = iterator.next().             resultMessages.add(rc).             iterator.remove().             scheduleCancelInflight(receiveMessageRequest.getQueueUrl(), rc).         }     }     result.setMessages(resultMessages).     return result. }
false;public;0;7;;@Override public void run() {     synchronized (messages) {         // put it back!         messages.add(message).     } }
true;private;2;18;/*      * Cancel (put back onto queue) in flight messages if the visibility time has expired      * and has not been manually deleted (ack'd)      */ ;/*      * Cancel (put back onto queue) in flight messages if the visibility time has expired      * and has not been manually deleted (ack'd)      */ private void scheduleCancelInflight(final String queueUrl, final Message message) {     if (scheduler != null) {         int visibility = getVisibilityForQueue(queueUrl).         if (visibility > 0) {             ScheduledFuture<?> task = scheduler.schedule(new Runnable() {                  @Override                 public void run() {                     synchronized (messages) {                         // put it back!                         messages.add(message).                     }                 }             }, visibility, TimeUnit.SECONDS).             inFlight.put(message.getReceiptHandle(), task).         }     } }
false;private;1;7;;private int getVisibilityForQueue(String queueUrl) {     Map<String, String> queueAttr = queues.get(queueUrl).getAttributes().     if (queueAttr.containsKey("VisibilityTimeout")) {         return Integer.parseInt(queueAttr.get("VisibilityTimeout")).     }     return 0. }
false;public;0;3;;public ScheduledExecutorService getScheduler() {     return scheduler. }
false;public;1;3;;public void setScheduler(ScheduledExecutorService scheduler) {     this.scheduler = scheduler. }
false;public;1;9;;@Override public DeleteMessageResult deleteMessage(DeleteMessageRequest deleteMessageRequest) throws AmazonClientException {     String receiptHandle = deleteMessageRequest.getReceiptHandle().     if (inFlight.containsKey(receiptHandle)) {         ScheduledFuture<?> inFlightTask = inFlight.get(receiptHandle).         inFlightTask.cancel(true).     }     return new DeleteMessageResult(). }
false;public;1;12;;@Override public SetQueueAttributesResult setQueueAttributes(SetQueueAttributesRequest setQueueAttributesRequest) throws AmazonServiceException, AmazonClientException {     synchronized (queueAttributes) {         if (!queueAttributes.containsKey(setQueueAttributesRequest.getQueueUrl())) {             queueAttributes.put(setQueueAttributesRequest.getQueueUrl(), new HashMap<String, String>()).         }         for (final Map.Entry<String, String> entry : setQueueAttributesRequest.getAttributes().entrySet()) {             queueAttributes.get(setQueueAttributesRequest.getQueueUrl()).put(entry.getKey(), entry.getValue()).         }     }     return new SetQueueAttributesResult(). }
false;public;1;5;;@Override public ChangeMessageVisibilityResult changeMessageVisibility(ChangeMessageVisibilityRequest changeMessageVisibilityRequest) throws AmazonServiceException, AmazonClientException {     this.changeMessageVisibilityRequests.add(changeMessageVisibilityRequest).     return new ChangeMessageVisibilityResult(). }
