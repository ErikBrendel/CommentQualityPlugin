commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;44;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     final SqsConfiguration configuration = this.configuration.copy().     setProperties(configuration, parameters).     if (remaining == null || remaining.trim().length() == 0) {         throw new IllegalArgumentException("Queue name must be specified.").     }     if (remaining.startsWith("arn:")) {         String[] parts = remaining.split(":").         if (parts.length != 6 || !parts[2].equals("sqs")) {             throw new IllegalArgumentException("Queue arn must be in format arn:aws:sqs:region:account:name.").         }         configuration.setRegion(Regions.fromName(parts[3]).toString()).         configuration.setQueueOwnerAWSAccountId(parts[4]).         configuration.setQueueName(parts[5]).     } else {         configuration.setQueueName(remaining).     }     if (ObjectHelper.isEmpty(configuration.getAccessKey())) {         setAccessKey(accessKey).     }     if (ObjectHelper.isEmpty(configuration.getSecretKey())) {         setSecretKey(secretKey).     }     if (ObjectHelper.isEmpty(configuration.getRegion())) {         setRegion(region).     }     if (configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null)) {         throw new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.").     }     // Verify that visibilityTimeout is set if extendMessageVisibility is set to true.     if (configuration.isExtendMessageVisibility() && (configuration.getVisibilityTimeout() == null)) {         throw new IllegalArgumentException("Extending message visibility (extendMessageVisibility) requires visibilityTimeout to be set on the Endpoint.").     }     SqsEndpoint sqsEndpoint = new SqsEndpoint(uri, this, configuration).     sqsEndpoint.setConsumerProperties(parameters).     return sqsEndpoint. }
false;public;0;3;;public SqsConfiguration getConfiguration() {     return configuration. }
true;public;1;3;/**  * The AWS SQS default configuration  */ ;/**  * The AWS SQS default configuration  */ public void setConfiguration(SqsConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public String getAccessKey() {     return configuration.getAccessKey(). }
true;public;1;3;/**  * Amazon AWS Access Key  */ ;/**  * Amazon AWS Access Key  */ public void setAccessKey(String accessKey) {     configuration.setAccessKey(accessKey). }
false;public;0;3;;public String getSecretKey() {     return configuration.getSecretKey(). }
true;public;1;3;/**  * Amazon AWS Secret Key  */ ;/**  * Amazon AWS Secret Key  */ public void setSecretKey(String secretKey) {     configuration.setSecretKey(secretKey). }
false;public;0;3;;public String getRegion() {     return configuration.getRegion(). }
true;public;1;3;/**  * Specify the queue region which could be used with queueOwnerAWSAccountId to build the service URL.  */ ;/**  * Specify the queue region which could be used with queueOwnerAWSAccountId to build the service URL.  */ public void setRegion(String region) {     configuration.setRegion(region). }
