commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public HeaderFilterStrategy getHeaderFilterStrategy() {     return headerFilterStrategy. }
true;public;1;3;/**  * To use a custom HeaderFilterStrategy to map headers to/from Camel.  */ ;/**  * To use a custom HeaderFilterStrategy to map headers to/from Camel.  */ public void setHeaderFilterStrategy(HeaderFilterStrategy strategy) {     this.headerFilterStrategy = strategy. }
false;public;0;3;;public Producer createProducer() throws Exception {     return new SqsProducer(this). }
false;public;1;9;;public Consumer createConsumer(Processor processor) throws Exception {     SqsConsumer sqsConsumer = new SqsConsumer(this, processor).     configureConsumer(sqsConsumer).     sqsConsumer.setMaxMessagesPerPoll(maxMessagesPerPoll).     DefaultScheduledPollConsumerScheduler scheduler = new DefaultScheduledPollConsumerScheduler().     scheduler.setConcurrentTasks(configuration.getConcurrentConsumers()).     sqsConsumer.setScheduler(scheduler).     return sqsConsumer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;46;;@Override protected void doStart() throws Exception {     client = getConfiguration().getAmazonSQSClient() != null ? getConfiguration().getAmazonSQSClient() : getClient().     // check the setting the headerFilterStrategy     if (headerFilterStrategy == null) {         headerFilterStrategy = new SqsHeaderFilterStrategy().     }     if (configuration.getQueueUrl() != null) {         queueUrl = configuration.getQueueUrl().     } else {         // This allows accessing queues where you don't have permission to list queues or query queues         if (configuration.getRegion() != null && configuration.getQueueOwnerAWSAccountId() != null) {             String host = configuration.getAmazonAWSHost().             host = FileUtil.stripTrailingSeparator(host).             queueUrl = "https://sqs." + Regions.valueOf(configuration.getRegion()).getName() + "." + host + "/" + configuration.getQueueOwnerAWSAccountId() + "/" + configuration.getQueueName().         } else if (configuration.getQueueOwnerAWSAccountId() != null) {             GetQueueUrlRequest getQueueUrlRequest = new GetQueueUrlRequest().             getQueueUrlRequest.setQueueName(configuration.getQueueName()).             getQueueUrlRequest.setQueueOwnerAWSAccountId(configuration.getQueueOwnerAWSAccountId()).             GetQueueUrlResult getQueueUrlResult = client.getQueueUrl(getQueueUrlRequest).             queueUrl = getQueueUrlResult.getQueueUrl().         } else {             // check whether the queue already exists             ListQueuesResult listQueuesResult = client.listQueues().             for (String url : listQueuesResult.getQueueUrls()) {                 if (url.endsWith("/" + configuration.getQueueName())) {                     queueUrl = url.                     log.trace("Queue available at '{}'.", queueUrl).                     break.                 }             }         }     }     if (queueUrl == null) {         createQueue(client).     } else {         log.debug("Using Amazon SQS queue url: {}", queueUrl).         updateQueueAttributes(client).     } }
false;protected;1;46;;protected void createQueue(AmazonSQS client) {     log.trace("Queue '{}' doesn't exist. Will create it...", configuration.getQueueName()).     // creates a new queue, or returns the URL of an existing one     CreateQueueRequest request = new CreateQueueRequest(configuration.getQueueName()).     if (getConfiguration().isFifoQueue()) {         request.getAttributes().put(QueueAttributeName.FifoQueue.name(), String.valueOf(true)).         boolean useContentBasedDeduplication = getConfiguration().getMessageDeduplicationIdStrategy() instanceof NullMessageDeduplicationIdStrategy.         request.getAttributes().put(QueueAttributeName.ContentBasedDeduplication.name(), String.valueOf(useContentBasedDeduplication)).     }     if (getConfiguration().getDefaultVisibilityTimeout() != null) {         request.getAttributes().put(QueueAttributeName.VisibilityTimeout.name(), String.valueOf(getConfiguration().getDefaultVisibilityTimeout())).     }     if (getConfiguration().getMaximumMessageSize() != null) {         request.getAttributes().put(QueueAttributeName.MaximumMessageSize.name(), String.valueOf(getConfiguration().getMaximumMessageSize())).     }     if (getConfiguration().getMessageRetentionPeriod() != null) {         request.getAttributes().put(QueueAttributeName.MessageRetentionPeriod.name(), String.valueOf(getConfiguration().getMessageRetentionPeriod())).     }     if (getConfiguration().getPolicy() != null) {         request.getAttributes().put(QueueAttributeName.Policy.name(), String.valueOf(getConfiguration().getPolicy())).     }     if (getConfiguration().getReceiveMessageWaitTimeSeconds() != null) {         request.getAttributes().put(QueueAttributeName.ReceiveMessageWaitTimeSeconds.name(), String.valueOf(getConfiguration().getReceiveMessageWaitTimeSeconds())).     }     if (getConfiguration().getDelaySeconds() != null && getConfiguration().isDelayQueue()) {         request.getAttributes().put(QueueAttributeName.DelaySeconds.name(), String.valueOf(getConfiguration().getDelaySeconds())).     }     if (getConfiguration().getRedrivePolicy() != null) {         request.getAttributes().put(QueueAttributeName.RedrivePolicy.name(), getConfiguration().getRedrivePolicy()).     }     if (getConfiguration().isServerSideEncryptionEnabled()) {         if (getConfiguration().getKmsMasterKeyId() != null) {             request.getAttributes().put(QueueAttributeName.KmsMasterKeyId.name(), getConfiguration().getKmsMasterKeyId()).         }         if (getConfiguration().getKmsDataKeyReusePeriodSeconds() != null) {             request.getAttributes().put(QueueAttributeName.KmsDataKeyReusePeriodSeconds.name(), String.valueOf(getConfiguration().getKmsDataKeyReusePeriodSeconds())).         }     }     log.trace("Creating queue [{}] with request [{}]...", configuration.getQueueName(), request).     CreateQueueResult queueResult = client.createQueue(request).     queueUrl = queueResult.getQueueUrl().     log.trace("Queue created and available at: {}", queueUrl). }
false;private;1;38;;private void updateQueueAttributes(AmazonSQS client) {     SetQueueAttributesRequest request = new SetQueueAttributesRequest().     request.setQueueUrl(queueUrl).     if (getConfiguration().getDefaultVisibilityTimeout() != null) {         request.getAttributes().put(QueueAttributeName.VisibilityTimeout.name(), String.valueOf(getConfiguration().getDefaultVisibilityTimeout())).     }     if (getConfiguration().getMaximumMessageSize() != null) {         request.getAttributes().put(QueueAttributeName.MaximumMessageSize.name(), String.valueOf(getConfiguration().getMaximumMessageSize())).     }     if (getConfiguration().getMessageRetentionPeriod() != null) {         request.getAttributes().put(QueueAttributeName.MessageRetentionPeriod.name(), String.valueOf(getConfiguration().getMessageRetentionPeriod())).     }     if (getConfiguration().getPolicy() != null) {         request.getAttributes().put(QueueAttributeName.Policy.name(), String.valueOf(getConfiguration().getPolicy())).     }     if (getConfiguration().getReceiveMessageWaitTimeSeconds() != null) {         request.getAttributes().put(QueueAttributeName.ReceiveMessageWaitTimeSeconds.name(), String.valueOf(getConfiguration().getReceiveMessageWaitTimeSeconds())).     }     if (getConfiguration().getDelaySeconds() != null && getConfiguration().isDelayQueue()) {         request.getAttributes().put(QueueAttributeName.DelaySeconds.name(), String.valueOf(getConfiguration().getDelaySeconds())).     }     if (getConfiguration().getRedrivePolicy() != null) {         request.getAttributes().put(QueueAttributeName.RedrivePolicy.name(), getConfiguration().getRedrivePolicy()).     }     if (getConfiguration().isServerSideEncryptionEnabled()) {         if (getConfiguration().getKmsMasterKeyId() != null) {             request.getAttributes().put(QueueAttributeName.KmsMasterKeyId.name(), getConfiguration().getKmsMasterKeyId()).         }         if (getConfiguration().getKmsDataKeyReusePeriodSeconds() != null) {             request.getAttributes().put(QueueAttributeName.KmsDataKeyReusePeriodSeconds.name(), String.valueOf(getConfiguration().getKmsDataKeyReusePeriodSeconds())).         }     }     if (!request.getAttributes().isEmpty()) {         log.trace("Updating queue '{}' with the provided queue attributes...", configuration.getQueueName()).         client.setQueueAttributes(request).         log.trace("Queue '{}' updated and available at {}'", configuration.getQueueName(), queueUrl).     } }
false;public;0;9;;@Override public void doStop() throws Exception {     if (ObjectHelper.isEmpty(configuration.getAmazonSQSClient())) {         if (client != null) {             client.shutdown().         }     }     super.doStop(). }
false;public;1;3;;public Exchange createExchange(com.amazonaws.services.sqs.model.Message msg) {     return createExchange(getExchangePattern(), msg). }
false;private;2;24;;private Exchange createExchange(ExchangePattern pattern, com.amazonaws.services.sqs.model.Message msg) {     Exchange exchange = super.createExchange(pattern).     Message message = exchange.getIn().     message.setBody(msg.getBody()).     message.setHeaders(new HashMap<String, Object>(msg.getAttributes())).     message.setHeader(SqsConstants.MESSAGE_ID, msg.getMessageId()).     message.setHeader(SqsConstants.MD5_OF_BODY, msg.getMD5OfBody()).     message.setHeader(SqsConstants.RECEIPT_HANDLE, msg.getReceiptHandle()).     message.setHeader(SqsConstants.ATTRIBUTES, msg.getAttributes()).     message.setHeader(SqsConstants.MESSAGE_ATTRIBUTES, msg.getMessageAttributes()).     // Need to apply the SqsHeaderFilterStrategy this time     HeaderFilterStrategy headerFilterStrategy = getHeaderFilterStrategy().     // the Sqs class MessageAttributeValue will not leak to the client     for (Entry<String, MessageAttributeValue> entry : msg.getMessageAttributes().entrySet()) {         String header = entry.getKey().         Object value = translateValue(entry.getValue()).         if (!headerFilterStrategy.applyFilterToExternalHeaders(header, value, exchange)) {             message.setHeader(header, value).         }     }     return exchange. }
false;public;0;3;;public SqsConfiguration getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(SqsConfiguration configuration) {     this.configuration = configuration. }
false;public;0;6;;public AmazonSQS getClient() {     if (client == null) {         client = createClient().     }     return client. }
false;public;1;3;;public void setClient(AmazonSQS client) {     this.client = client. }
true;;0;32;/**  * Provide the possibility to override this method for an mock implementation  * @return AmazonSQSClient  */ ;/**  * Provide the possibility to override this method for an mock implementation  * @return AmazonSQSClient  */ AmazonSQS createClient() {     AmazonSQS client = null.     AmazonSQSClientBuilder clientBuilder = null.     ClientConfiguration clientConfiguration = null.     boolean isClientConfigFound = false.     if (ObjectHelper.isNotEmpty(configuration.getProxyHost()) && ObjectHelper.isNotEmpty(configuration.getProxyPort())) {         clientConfiguration = new ClientConfiguration().         clientConfiguration.setProxyHost(configuration.getProxyHost()).         clientConfiguration.setProxyPort(configuration.getProxyPort()).         isClientConfigFound = true.     }     if (configuration.getAccessKey() != null && configuration.getSecretKey() != null) {         AWSCredentials credentials = new BasicAWSCredentials(configuration.getAccessKey(), configuration.getSecretKey()).         AWSCredentialsProvider credentialsProvider = new AWSStaticCredentialsProvider(credentials).         if (isClientConfigFound) {             clientBuilder = AmazonSQSClientBuilder.standard().withClientConfiguration(clientConfiguration).withCredentials(credentialsProvider).         } else {             clientBuilder = AmazonSQSClientBuilder.standard().withCredentials(credentialsProvider).         }     } else {         if (isClientConfigFound) {             clientBuilder = AmazonSQSClientBuilder.standard().         } else {             clientBuilder = AmazonSQSClientBuilder.standard().withClientConfiguration(clientConfiguration).         }     }     if (ObjectHelper.isNotEmpty(configuration.getRegion())) {         clientBuilder = clientBuilder.withRegion(Regions.valueOf(configuration.getRegion())).     }     client = clientBuilder.build().     return client. }
false;protected;0;3;;protected String getQueueUrl() {     return queueUrl. }
false;public;0;3;;public int getMaxMessagesPerPoll() {     return maxMessagesPerPoll. }
true;public;1;3;/**  * Gets the maximum number of messages as a limit to poll at each polling.  * <p/>  * Is default unlimited, but use 0 or negative number to disable it as unlimited.  */ ;/**  * Gets the maximum number of messages as a limit to poll at each polling.  * <p/>  * Is default unlimited, but use 0 or negative number to disable it as unlimited.  */ public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {     this.maxMessagesPerPoll = maxMessagesPerPoll. }
false;private;1;9;;private Object translateValue(MessageAttributeValue mav) {     Object result = null.     if (mav.getStringValue() != null) {         result = mav.getStringValue().     } else if (mav.getBinaryValue() != null) {         result = mav.getBinaryValue().     }     return result. }
