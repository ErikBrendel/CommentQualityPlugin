commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     SendMessageRequest request = new SendMessageRequest(getQueueUrl(), body).     request.setMessageAttributes(translateAttributes(exchange.getIn().getHeaders(), exchange)).     addDelay(request, exchange).     configureFifoAttributes(request, exchange).     log.trace("Sending request [{}] from exchange [{}]...", request, exchange).     SendMessageResult result = getClient().sendMessage(request).     log.trace("Received result [{}]", result).     Message message = getMessageForResponse(exchange).     message.setHeader(SqsConstants.MESSAGE_ID, result.getMessageId()).     message.setHeader(SqsConstants.MD5_OF_BODY, result.getMD5OfMessageBody()). }
false;private;2;13;;private void configureFifoAttributes(SendMessageRequest request, Exchange exchange) {     if (getEndpoint().getConfiguration().isFifoQueue()) {         // use strategies         MessageGroupIdStrategy messageGroupIdStrategy = getEndpoint().getConfiguration().getMessageGroupIdStrategy().         String messageGroupId = messageGroupIdStrategy.getMessageGroupId(exchange).         request.setMessageGroupId(messageGroupId).         MessageDeduplicationIdStrategy messageDeduplicationIdStrategy = getEndpoint().getConfiguration().getMessageDeduplicationIdStrategy().         String messageDeduplicationId = messageDeduplicationIdStrategy.getMessageDeduplicationId(exchange).         request.setMessageDeduplicationId(messageDeduplicationId).     } }
false;private;2;13;;private void addDelay(SendMessageRequest request, Exchange exchange) {     Integer headerValue = exchange.getIn().getHeader(SqsConstants.DELAY_HEADER, Integer.class).     Integer delayValue.     if (headerValue == null) {         log.trace("Using the config delay").         delayValue = getEndpoint().getConfiguration().getDelaySeconds().     } else {         log.trace("Using the header delay").         delayValue = headerValue.     }     log.trace("found delay: {}", delayValue).     request.setDelaySeconds(delayValue == null ? Integer.valueOf(0) : delayValue). }
false;protected;0;3;;protected AmazonSQS getClient() {     return getEndpoint().getClient(). }
false;protected;0;3;;protected String getQueueUrl() {     return getEndpoint().getQueueUrl(). }
false;public;0;4;;@Override public SqsEndpoint getEndpoint() {     return (SqsEndpoint) super.getEndpoint(). }
false;public;0;7;;@Override public String toString() {     if (sqsProducerToString == null) {         sqsProducerToString = "SqsProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return sqsProducerToString. }
false;;2;56;;Map<String, MessageAttributeValue> translateAttributes(Map<String, Object> headers, Exchange exchange) {     Map<String, MessageAttributeValue> result = new HashMap<>().     HeaderFilterStrategy headerFilterStrategy = getEndpoint().getHeaderFilterStrategy().     for (Entry<String, Object> entry : headers.entrySet()) {         // only put the message header which is not filtered into the message attribute         if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {             Object value = entry.getValue().             if (value instanceof String && !((String) value).isEmpty()) {                 MessageAttributeValue mav = new MessageAttributeValue().                 mav.setDataType("String").                 mav.withStringValue((String) value).                 result.put(entry.getKey(), mav).             } else if (value instanceof ByteBuffer) {                 MessageAttributeValue mav = new MessageAttributeValue().                 mav.setDataType("Binary").                 mav.withBinaryValue((ByteBuffer) value).                 result.put(entry.getKey(), mav).             } else if (value instanceof Boolean) {                 MessageAttributeValue mav = new MessageAttributeValue().                 mav.setDataType("Number.Boolean").                 mav.withStringValue(((Boolean) value) ? "1" : "0").                 result.put(entry.getKey(), mav).             } else if (value instanceof Number) {                 MessageAttributeValue mav = new MessageAttributeValue().                 final String dataType.                 if (value instanceof Integer) {                     dataType = "Number.int".                 } else if (value instanceof Byte) {                     dataType = "Number.byte".                 } else if (value instanceof Double) {                     dataType = "Number.double".                 } else if (value instanceof Float) {                     dataType = "Number.float".                 } else if (value instanceof Long) {                     dataType = "Number.long".                 } else if (value instanceof Short) {                     dataType = "Number.short".                 } else {                     dataType = "Number".                 }                 mav.setDataType(dataType).                 mav.withStringValue(((Number) value).toString()).                 result.put(entry.getKey(), mav).             } else if (value instanceof Date) {                 MessageAttributeValue mav = new MessageAttributeValue().                 mav.setDataType("String").                 mav.withStringValue(value.toString()).                 result.put(entry.getKey(), mav).             } else {                 // cannot translate the message header to message attribute value                 log.warn("Cannot put the message header key={}, value={} into Sqs MessageAttribute", entry.getKey(), entry.getValue()).             }         }     }     return result. }
false;public,static;1;8;;public static Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
