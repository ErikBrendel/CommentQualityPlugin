# id;timestamp;commentText;codeText;commentWords;codeWords
WebsocketComponent -> public void setPort(Integer port);1434280088;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1434443829;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1434443939;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1446028357;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1448188322;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1448188568;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1461151138;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1461151185;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1461153577;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1461307084;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1461851621;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1461921869;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1462533190;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1462533351;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1462536369;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1462793702;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1462794002;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1474957882;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1480858365;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1482077817;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1482335925;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1489596811;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1491316490;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1491585298;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1491919259;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1491919462;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1491919462;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1491919462;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1524063209;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1535969486;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1536517284;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1537290824;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1540108158;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1540108163;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1547241305;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> public void setPort(Integer port);1548665653;The port number. The default value is <tt>9292</tt>;public void setPort(Integer port) {_        this.port = port__    };the,port,number,the,default,value,is,tt,9292,tt;public,void,set,port,integer,port,this,port,port
WebsocketComponent -> @Override     public void doStop() throws Exception;1325845474;@see org.apache.camel.impl.DefaultComponent#doStop();@Override_    public void doStop() throws Exception {_        if (server != null) {_            server.stop()__        }_    };see,org,apache,camel,impl,default,component,do,stop;override,public,void,do,stop,throws,exception,if,server,null,server,stop
WebsocketComponent -> @Override     public void doStop() throws Exception;1328266073;@see org.apache.camel.impl.DefaultComponent#doStop();@Override_    public void doStop() throws Exception {_        if (server != null) {_            server.stop()__        }_    };see,org,apache,camel,impl,default,component,do,stop;override,public,void,do,stop,throws,exception,if,server,null,server,stop
WebsocketComponent -> @Override     public void doStop() throws Exception;1328440238;@see org.apache.camel.impl.DefaultComponent#doStop();@Override_    public void doStop() throws Exception {_        if (server != null) {_            server.stop()__        }_    };see,org,apache,camel,impl,default,component,do,stop;override,public,void,do,stop,throws,exception,if,server,null,server,stop
WebsocketComponent -> public void setHost(String host);1325845474;@param host_the host to set;public void setHost(String host) {_        this.host = host__    };param,host,the,host,to,set;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1328266073;@param host_the host to set;public void setHost(String host) {_        this.host = host__    };param,host,the,host,to,set;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1328440238;@param host_the host to set;public void setHost(String host) {_        this.host = host__    };param,host,the,host,to,set;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1434280088;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1434443829;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1434443939;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1446028357;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1448188322;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1448188568;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1461151138;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1461151185;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1461153577;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1461307084;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1461851621;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1461921869;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1462533190;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1462533351;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1462536369;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1462793702;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1462794002;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1474957882;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1480858365;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1482077817;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1482335925;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1489596811;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1491316490;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1491585298;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1491919259;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1491919462;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1491919462;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1491919462;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1524063209;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1535969486;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1536517284;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1537290824;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1540108158;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1540108163;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1547241305;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setHost(String host);1548665653;The hostname. The default value is <tt>0.0.0.0</tt>;public void setHost(String host) {_        this.host = host__    };the,hostname,the,default,value,is,tt,0,0,0,0,tt;public,void,set,host,string,host,this,host,host
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1434280088;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1434443829;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1434443939;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1446028357;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1448188322;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1448188568;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1461151138;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1461151185;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1461153577;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1461307084;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1461851621;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1461921869;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1462533190;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1462533351;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1462536369;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1462793702;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1462794002;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1474957882;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1480858365;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1482077817;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1482335925;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1489596811;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1491316490;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1491585298;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1491919259;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1491919462;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1491919462;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1491919462;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1524063209;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1535969486;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1536517284;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1537290824;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1540108158;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1540108163;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1547241305;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslContextParameters(SSLContextParameters sslContextParameters);1548665653;To configure security using SSLContextParameters;public void setSslContextParameters(SSLContextParameters sslContextParameters) {_        this.sslContextParameters = sslContextParameters__    };to,configure,security,using,sslcontext,parameters;public,void,set,ssl,context,parameters,sslcontext,parameters,ssl,context,parameters,this,ssl,context,parameters,ssl,context,parameters
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1434280088;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1434443829;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1434443939;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1446028357;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1448188322;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1448188568;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1461151138;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1461151185;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1461153577;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1461307084;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1461851621;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1461921869;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1462533190;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1462533351;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1462536369;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1462793702;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1462794002;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1474957882;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1480858365;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1482077817;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1482335925;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1489596811;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1491316490;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1491585298;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1491919259;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1491919462;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1491919462;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1491919462;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1524063209;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1535969486;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1536517284;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1537290824;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1540108158;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1540108163;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1547241305;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setSslKeyPassword(String sslKeyPassword);1548665653;The password for the keystore when using SSL.;public void setSslKeyPassword(String sslKeyPassword) {_        this.sslKeyPassword = sslKeyPassword__    };the,password,for,the,keystore,when,using,ssl;public,void,set,ssl,key,password,string,ssl,key,password,this,ssl,key,password,ssl,key,password
WebsocketComponent -> public void setPort(int port);1325845474;@param port_the port to set;public void setPort(int port) {_        this.port = port__    };param,port,the,port,to,set;public,void,set,port,int,port,this,port,port
WebsocketComponent -> public void setPort(int port);1328266073;@param port_the port to set;public void setPort(int port) {_        this.port = port__    };param,port,the,port,to,set;public,void,set,port,int,port,this,port,port
WebsocketComponent -> public void setPort(int port);1328440238;@param port_the port to set;public void setPort(int port) {_        this.port = port__    };param,port,the,port,to,set;public,void,set,port,int,port,this,port,port
WebsocketComponent -> public void setSslPassword(String sslPassword);1434280088;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1434443829;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1434443939;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1446028357;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1448188322;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1448188568;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1461151138;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1461151185;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1461153577;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1461307084;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1461851621;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1461921869;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1462533190;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1462533351;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1462536369;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1462793702;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1462794002;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1474957882;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1480858365;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1482077817;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1482335925;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1489596811;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1491316490;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1491585298;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1491919259;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1491919462;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1491919462;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1491919462;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1524063209;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1535969486;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1536517284;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1537290824;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1540108158;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1540108163;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1547241305;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void setSslPassword(String sslPassword);1548665653;The password when using SSL.;public void setSslPassword(String sslPassword) {_        this.sslPassword = sslPassword__    };the,password,when,using,ssl;public,void,set,ssl,password,string,ssl,password,this,ssl,password,ssl,password
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1337851764;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {__        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = "websocket" + ":" + endpoint.getHost() + ":" + endpoint.getPort()___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    connectorRef.connector.stop()__                    connectorRef.server.stop()__                    CONNECTORS.remove(CONNECTORS)__                }_            }_        }__    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,websocket,endpoint,get,host,endpoint,get,port,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connectors
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1337871358;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {__        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = "websocket" + ":" + endpoint.getHost() + ":" + endpoint.getPort()___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    connectorRef.connector.stop()__                    connectorRef.server.stop()__                    CONNECTORS.remove(CONNECTORS)__                }_            }_        }__    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,websocket,endpoint,get,host,endpoint,get,port,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connectors
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1337942455;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    connectorRef.connector.stop()__                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1337951157;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    connectorRef.connector.stop()__                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1337952571;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    connectorRef.connector.stop()__                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1337954816;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    connectorRef.connector.stop()__                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1337970529;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    connectorRef.connector.stop()__                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1338471142;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    connectorRef.connector.stop()__                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1339147255;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1339492643;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1339609252;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1340007507;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1356359436;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1357140814;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1369503011;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1370610941;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1379403530;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1392400400;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1405374721;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1420453324;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1434280088;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1434443829;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1434443939;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1446028357;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}"_                            , connectorRef.connector.getHost()_                            , connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1448188322;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}"_                            , connectorRef.connector.getHost()_                            , connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                	((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1448188568;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}"_                            , connectorRef.connector.getHost()_                            , connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.removeBean(connectorRef.server)__                        mbContainer.removeBean(connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,remove,bean,connector,ref,server,mb,container,remove,bean,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1461151138;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}"_                            , connectorRef.connector.getHost()_                            , connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null,connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1461151185;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}"_                            , connectorRef.connector.getHost()_                            , connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null,connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1461153577;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}"_                            , connectorRef.connector.getHost()_                            , connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1461307084;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}"_                            , connectorRef.connector.getHost()_                            , connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1461851621;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}"_                            , connectorRef.connector.getHost()_                            , connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1461921869;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1462533190;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1462533351;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1462536369;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1462793702;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1462794002;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1474957882;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1480858365;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1482077817;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1482335925;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1489596811;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1491316490;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1491585298;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1491919259;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1491919462;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1491919462;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1491919462;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1524063209;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1535969486;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1536517284;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1537290824;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1540108158;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1540108163;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1547241305;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void disconnect(WebsocketProducerConsumer prodcon) throws Exception;1548665653;Disconnects the URL specified on the endpoint from the specified_processor.;public void disconnect(WebsocketProducerConsumer prodcon) throws Exception {_        _        WebsocketEndpoint endpoint = prodcon.getEndpoint()__        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef != null) {_                if (connectorRef.decrement() == 0) {_                    LOG.info("Stopping Jetty Server as the last connector is disconnecting: {}:{}", connectorRef.connector.getHost(), connectorRef.connector.getPort())__                    servlets.remove(createPathSpec(endpoint.getResourceUri()))__                    connectorRef.server.removeConnector(connectorRef.connector)__                    if (connectorRef.connector != null) {_                        _                        connectorRef.connector.stop()__                    }_                    connectorRef.server.stop()__                    connectorRef.memoryStore.stop()__                    CONNECTORS.remove(connectorKey)__                    _                    _                    if (mbContainer != null) {_                        mbContainer.beanRemoved(null, connectorRef.server)__                        mbContainer.beanRemoved(null, connectorRef.connector)__                    }_                }_                if (prodcon instanceof WebsocketConsumer) {_                    connectorRef.servlet.disconnect((WebsocketConsumer) prodcon)__                }_                if (prodcon instanceof WebsocketProducer) {_                    ((WebsocketProducer) prodcon).setStore(null)__                }_            }_        }_    };disconnects,the,url,specified,on,the,endpoint,from,the,specified,processor;public,void,disconnect,websocket,producer,consumer,prodcon,throws,exception,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,if,connector,ref,decrement,0,log,info,stopping,jetty,server,as,the,last,connector,is,disconnecting,connector,ref,connector,get,host,connector,ref,connector,get,port,servlets,remove,create,path,spec,endpoint,get,resource,uri,connector,ref,server,remove,connector,connector,ref,connector,if,connector,ref,connector,null,connector,ref,connector,stop,connector,ref,server,stop,connector,ref,memory,store,stop,connectors,remove,connector,key,if,mb,container,null,mb,container,bean,removed,null,connector,ref,server,mb,container,bean,removed,null,connector,ref,connector,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,disconnect,websocket,consumer,prodcon,if,prodcon,instanceof,websocket,producer,websocket,producer,prodcon,set,store,null
WebsocketComponent -> public void setMinThreads(Integer minThreads);1434280088;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1434443829;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1434443939;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1446028357;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1448188322;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1448188568;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1461151138;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1461151185;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1461153577;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1461307084;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1461851621;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1461921869;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1462533190;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1462533351;To set a value for minimum number of threads in server thread pool.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1462536369;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1462793702;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1462794002;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1474957882;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1480858365;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1482077817;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1482335925;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1489596811;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1491316490;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1491585298;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1491919259;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1491919462;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1491919462;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1491919462;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1524063209;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1535969486;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1536517284;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1537290824;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1540108158;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1540108163;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1547241305;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> public void setMinThreads(Integer minThreads);1548665653;To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for minThreads is 1.;public void setMinThreads(Integer minThreads) {_        this.minThreads = minThreads__    };to,set,a,value,for,minimum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,min,threads,is,1;public,void,set,min,threads,integer,min,threads,this,min,threads,min,threads
WebsocketComponent -> protected void startMbContainer();1337942455;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1337951157;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1337952571;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1337954816;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1337970529;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1338471142;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1339147255;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1339492643;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1339609252;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1340007507;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1356359436;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1357140814;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1369503011;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1370610941;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1379403530;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1392400400;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1405374721;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1420453324;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1434280088;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1434443829;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1434443939;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1446028357;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1448188322;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> protected void startMbContainer();1448188568;Starts {@link #mbContainer} and registers the container with itself as a managed bean_logging an error if there is a problem starting the container._Does nothing if {@link #mbContainer} is {@code null}.;protected void startMbContainer() {_        if (mbContainer != null && !mbContainer.isStarted()) {_            try {_                mbContainer.start()__                _                _                mbContainer.addBean(mbContainer)__            } catch (Throwable e) {_                LOG.warn("Could not start JettyWebSocket MBeanContainer. Jetty JMX extensions will remain disabled.", e)__            }_        }_    };starts,link,mb,container,and,registers,the,container,with,itself,as,a,managed,bean,logging,an,error,if,there,is,a,problem,starting,the,container,does,nothing,if,link,mb,container,is,code,null;protected,void,start,mb,container,if,mb,container,null,mb,container,is,started,try,mb,container,start,mb,container,add,bean,mb,container,catch,throwable,e,log,warn,could,not,start,jetty,web,socket,mbean,container,jetty,jmx,extensions,will,remain,disabled,e
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1434280088;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1434443829;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1434443939;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1446028357;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1448188322;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1448188568;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1461151138;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1461151185;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1461153577;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1461307084;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1461851621;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1461921869;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1462533190;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1462533351;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1462536369;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1462793702;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1462794002;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1474957882;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1480858365;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1482077817;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1482335925;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1489596811;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1491316490;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1491585298;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1491919259;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1491919462;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1491919462;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1491919462;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1524063209;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1535969486;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1536517284;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1537290824;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1540108158;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1540108163;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1547241305;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setSslKeystore(String sslKeystore);1548665653;The path to the keystore.;public void setSslKeystore(String sslKeystore) {_        this.sslKeystore = sslKeystore__    };the,path,to,the,keystore;public,void,set,ssl,keystore,string,ssl,keystore,this,ssl,keystore,ssl,keystore
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1434280088;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1434443829;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1434443939;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1446028357;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1448188322;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1448188568;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1461151138;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1461151185;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1461153577;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1461307084;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1461851621;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1461921869;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1462533190;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1462533351;To set a value for maximum number of threads in server thread pool.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1462536369;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1462793702;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1462794002;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1474957882;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1480858365;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1482077817;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1482335925;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1489596811;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1491316490;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1491585298;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1491919259;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1491919462;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1491919462;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1491919462;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1524063209;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1535969486;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1536517284;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1537290824;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1540108158;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1540108163;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1547241305;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> public void setMaxThreads(Integer maxThreads);1548665653;To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9._The default values for maxThreads is 1 + 2 * noCores.;public void setMaxThreads(Integer maxThreads) {_        this.maxThreads = maxThreads__    };to,set,a,value,for,maximum,number,of,threads,in,server,thread,pool,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9,the,default,values,for,max,threads,is,1,2,no,cores;public,void,set,max,threads,integer,max,threads,this,max,threads,max,threads
WebsocketComponent -> @Override     protected void doStart() throws Exception;1325845474;@see org.apache.camel.impl.DefaultComponent#doStart();@Override_    protected void doStart() throws Exception {_        super.doStart()__        LOG.info("Staring server {}:{}_ static resources: {}", new Object[] {host, port, staticResources})__        context = createContext()__        server = createServer(context, host, port, staticResources)__        server.start()__    };see,org,apache,camel,impl,default,component,do,start;override,protected,void,do,start,throws,exception,super,do,start,log,info,staring,server,static,resources,new,object,host,port,static,resources,context,create,context,server,create,server,context,host,port,static,resources,server,start
WebsocketComponent -> @Override     protected void doStart() throws Exception;1328266073;@see org.apache.camel.impl.DefaultComponent#doStart();@Override_    protected void doStart() throws Exception {_        super.doStart()__        LOG.info("Starting server {}:{}_ static resources: {}", new Object[] {host, port, staticResources})__        context = createContext()__        server = createServer(context, host, port, staticResources)__        server.start()__    };see,org,apache,camel,impl,default,component,do,start;override,protected,void,do,start,throws,exception,super,do,start,log,info,starting,server,static,resources,new,object,host,port,static,resources,context,create,context,server,create,server,context,host,port,static,resources,server,start
WebsocketComponent -> @Override     protected void doStart() throws Exception;1328440238;@see org.apache.camel.impl.DefaultComponent#doStart();@Override_    protected void doStart() throws Exception {_        super.doStart()__        LOG.info("Starting server {}:{}_ static resources: {}", new Object[] {host, port, staticResources})__        context = createContext()__        server = createServer(context, host, port, staticResources)__        server.start()__    };see,org,apache,camel,impl,default,component,do,start;override,protected,void,do,start,throws,exception,super,do,start,log,info,starting,server,static,resources,new,object,host,port,static,resources,context,create,context,server,create,server,context,host,port,static,resources,server,start
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1434280088;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1434443829;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1434443939;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1446028357;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1448188322;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1448188568;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1461151138;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1461151185;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1461153577;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1461307084;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1461851621;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1461921869;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1462533190;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1462533351;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1462536369;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1462793702;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1462794002;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1474957882;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1480858365;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1482077817;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1482335925;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1489596811;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1491316490;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1491585298;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1491919259;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1491919462;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1491919462;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1491919462;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1524063209;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1535969486;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1536517284;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1537290824;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1540108158;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1540108163;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1547241305;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setEnableJmx(boolean enableJmx);1548665653;If this option is true, Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.;public void setEnableJmx(boolean enableJmx) {_        this.enableJmx = enableJmx__    };if,this,option,is,true,jetty,jmx,support,will,be,enabled,for,this,endpoint,see,jetty,jmx,support,for,more,details;public,void,set,enable,jmx,boolean,enable,jmx,this,enable,jmx,enable,jmx
WebsocketComponent -> public void setStaticResources(String staticResources);1325845474;@param staticResources_the staticResources to set;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };param,static,resources,the,static,resources,to,set;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1328266073;@param staticResources_the staticResources to set;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };param,static,resources,the,static,resources,to,set;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1328440238;@param staticResources_the staticResources to set;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };param,static,resources,the,static,resources,to,set;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1332949488;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1337851764;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1337871358;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1337942455;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1337951157;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1337952571;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1337954816;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1337970529;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1338471142;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1339147255;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1339492643;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1339609252;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1340007507;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1356359436;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1357140814;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1369503011;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1370610941;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1379403530;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1392400400;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1405374721;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1420453324;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.__@param staticResources the base path;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use,param,static,resources,the,base,path;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1434280088;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1434443829;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1434443939;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1446028357;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1448188322;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1448188568;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1461151138;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1461151185;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1461153577;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1461307084;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1461851621;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1461921869;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1462533190;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1462533351;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1462536369;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1462793702;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1462794002;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1474957882;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1480858365;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1482077817;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1482335925;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1489596811;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1491316490;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1491585298;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1491919259;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1491919462;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1491919462;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1491919462;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1524063209;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1535969486;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1536517284;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1537290824;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1540108158;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1540108163;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1547241305;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setStaticResources(String staticResources);1548665653;Set a resource path for static resources (such as .html files etc)._<p/>_The resources can be loaded from classpath, if you prefix with <tt>classpath:</tt>,_otherwise the resources is loaded from file system or from JAR files._<p/>_For example to load from root classpath use <tt>classpath:.</tt>, or_<tt>classpath:WEB-INF/static</tt>_<p/>_If not configured (eg <tt>null</tt>) then no static resource is in use.;public void setStaticResources(String staticResources) {_        this.staticResources = staticResources__    };set,a,resource,path,for,static,resources,such,as,html,files,etc,p,the,resources,can,be,loaded,from,classpath,if,you,prefix,with,tt,classpath,tt,otherwise,the,resources,is,loaded,from,file,system,or,from,jar,files,p,for,example,to,load,from,root,classpath,use,tt,classpath,tt,or,tt,classpath,web,inf,static,tt,p,if,not,configured,eg,tt,null,tt,then,no,static,resource,is,in,use;public,void,set,static,resources,string,static,resources,this,static,resources,static,resources
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1434443939;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1446028357;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1448188322;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1448188568;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1461151138;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1461151185;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1461153577;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1461307084;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1461851621;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1461921869;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1462533190;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1462533351;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1462536369;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1462793702;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1462794002;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1474957882;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1480858365;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1482077817;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1482335925;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1489596811;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1491316490;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1491585298;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1491919259;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1491919462;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1491919462;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1491919462;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1524063209;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1535969486;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1536517284;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1537290824;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1540108158;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1540108163;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1547241305;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> public void setSocketFactory(Map<String, WebSocketFactory> socketFactory);1548665653;To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol._<p/>_The <tt>default</tt> key is reserved for the default implementation.;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {_        this.socketFactory = socketFactory___        if (!this.socketFactory.containsKey("default")) {_            this.socketFactory.put("default", new DefaultWebsocketFactory())__        }_    };to,configure,a,map,which,contains,custom,web,socket,factory,for,sub,protocols,the,key,in,the,map,is,the,sub,protocol,p,the,tt,default,tt,key,is,reserved,for,the,default,implementation;public,void,set,socket,factory,map,string,web,socket,factory,socket,factory,this,socket,factory,socket,factory,if,this,socket,factory,contains,key,default,this,socket,factory,put,default,new,default,websocket,factory
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1491919462;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1524063209;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1535969486;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1536517284;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1537290824;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1540108158;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1540108163;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1547241305;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1548665653;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1337851764;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        DefaultServlet defaultServlet = null__        String baseResource = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = "websocket" + ":" + endpoint.getHost() + ":" + endpoint.getPort()___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                if (port != null) {_                    connector.setPort(port)__                } else {_                    connector.setPort(endpoint.getPort())__                }__                if (host != null) {_                    connector.setHost(host)__                } else {_                    connector.setHost(endpoint.getHost())__                }__                connector.setHost(endpoint.getHost())___                _                context.setContextPath("/")___                SessionManager sm = new HashSessionManager()__                SessionHandler sh = new SessionHandler(sm)__                context.setSessionHandler(sh)___                if (endpoint.getHome() != null) {_                    if (endpoint.getHome().startsWith("classpath:")) {_                        baseResource = ObjectHelper.after(endpoint.getHome(), "classpath:")__                        LOG.debug("Using base resource from classpath: {}", baseResource)__                        context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), baseResource))__                    } else {_                        LOG.debug("Using base resource: {}", baseResource)__                        context.setResourceBase(baseResource)__                    }_                    defaultServlet = new DefaultServlet()__                    ServletHolder holder = new ServletHolder(defaultServlet)___                    _                    _                    holder.setInitParameter("useFileMappedBuffer", "false")__                    context.addServlet(holder, "/")__                }__                _                server = new Server()__                server.addConnector(connector)__                server.setHandler(context)___                connectorRef = new ConnectorRef(server, connector, defaultServlet)__                CONNECTORS.put(connectorKey, connectorRef)___                server.start()___            } else {_                connectorRef.increment()__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,default,servlet,default,servlet,null,string,base,resource,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,websocket,endpoint,get,host,endpoint,get,port,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,if,port,null,connector,set,port,port,else,connector,set,port,endpoint,get,port,if,host,null,connector,set,host,host,else,connector,set,host,endpoint,get,host,connector,set,host,endpoint,get,host,context,set,context,path,session,manager,sm,new,hash,session,manager,session,handler,sh,new,session,handler,sm,context,set,session,handler,sh,if,endpoint,get,home,null,if,endpoint,get,home,starts,with,classpath,base,resource,object,helper,after,endpoint,get,home,classpath,log,debug,using,base,resource,from,classpath,base,resource,context,set,base,resource,new,jetty,class,path,resource,get,camel,context,get,class,resolver,base,resource,else,log,debug,using,base,resource,base,resource,context,set,resource,base,base,resource,default,servlet,new,default,servlet,servlet,holder,holder,new,servlet,holder,default,servlet,holder,set,init,parameter,use,file,mapped,buffer,false,context,add,servlet,holder,server,new,server,server,add,connector,connector,server,set,handler,context,connector,ref,new,connector,ref,server,connector,default,servlet,connectors,put,connector,key,connector,ref,server,start,else,connector,ref,increment
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1337871358;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        DefaultServlet defaultServlet = null__        String baseResource = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = "websocket" + ":" + endpoint.getHost() + ":" + endpoint.getPort()___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.debug("Jetty Connector added : " + connector.getName())___                if (port != null) {_                    connector.setPort(port)__                } else {_                    connector.setPort(endpoint.getPort())__                }__                if (host != null) {_                    connector.setHost(host)__                } else {_                    connector.setHost(endpoint.getHost())__                }__                connector.setHost(endpoint.getHost())___                _                context.setContextPath("/")___                SessionManager sm = new HashSessionManager()__                SessionHandler sh = new SessionHandler(sm)__                context.setSessionHandler(sh)___                if (endpoint.getHome() != null) {_                    if (endpoint.getHome().startsWith("classpath:")) {_                        baseResource = ObjectHelper.after(endpoint.getHome(), "classpath:")__                        LOG.debug("Using base resource from classpath: {}", baseResource)__                        context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), baseResource))__                    } else {_                        LOG.debug("Using base resource: {}", baseResource)__                        context.setResourceBase(baseResource)__                    }_                    defaultServlet = new DefaultServlet()__                    ServletHolder holder = new ServletHolder(defaultServlet)___                    _                    _                    holder.setInitParameter("useFileMappedBuffer", "false")__                    context.addServlet(holder, "/")__                }__                _                server = new Server()__                server.addConnector(connector)__                server.setHandler(context)___                connectorRef = new ConnectorRef(server, connector, defaultServlet)__                CONNECTORS.put(connectorKey, connectorRef)___                LOG.debug("Jetty Server started for host : " + connector.getHost() + ", on port : " + connector.getPort())__                server.start()___            } else {_                connectorRef.increment()__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,default,servlet,default,servlet,null,string,base,resource,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,websocket,endpoint,get,host,endpoint,get,port,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,debug,jetty,connector,added,connector,get,name,if,port,null,connector,set,port,port,else,connector,set,port,endpoint,get,port,if,host,null,connector,set,host,host,else,connector,set,host,endpoint,get,host,connector,set,host,endpoint,get,host,context,set,context,path,session,manager,sm,new,hash,session,manager,session,handler,sh,new,session,handler,sm,context,set,session,handler,sh,if,endpoint,get,home,null,if,endpoint,get,home,starts,with,classpath,base,resource,object,helper,after,endpoint,get,home,classpath,log,debug,using,base,resource,from,classpath,base,resource,context,set,base,resource,new,jetty,class,path,resource,get,camel,context,get,class,resolver,base,resource,else,log,debug,using,base,resource,base,resource,context,set,resource,base,base,resource,default,servlet,new,default,servlet,servlet,holder,holder,new,servlet,holder,default,servlet,holder,set,init,parameter,use,file,mapped,buffer,false,context,add,servlet,holder,server,new,server,server,add,connector,connector,server,set,handler,context,connector,ref,new,connector,ref,server,connector,default,servlet,connectors,put,connector,key,connector,ref,log,debug,jetty,server,started,for,host,connector,get,host,on,port,connector,get,port,server,start,else,connector,ref,increment
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1337942455;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        String baseResource = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.debug("Jetty Connector added : " + connector.getName())___                if (port != null) {_                    connector.setPort(port)__                } else {_                    connector.setPort(endpoint.getPort())__                }__                if (host != null) {_                    connector.setHost(host)__                } else {_                    connector.setHost(endpoint.getHost())__                }__                connector.setHost(endpoint.getHost())___                _                if (endpoint.getHome() != null) {__                    ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS)___                    if (endpoint.getHome().startsWith("classpath:")) {_                        baseResource = ObjectHelper.after(endpoint.getHome(), "classpath:")__                        LOG.debug("Using base resource from classpath: {}", baseResource)__                        context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), baseResource))__                    } else {_                        LOG.debug("Using base resource: {}", baseResource)__                        context.setResourceBase(baseResource)__                    }_                    DefaultServlet defaultServlet = new DefaultServlet()__                    ServletHolder holder = new ServletHolder(defaultServlet)___                    _                    _                    holder.setInitParameter("useFileMappedBuffer", "false")__                    context.addServlet(holder, "/")__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }__                server.addConnector(connector)___                _                context = createContext(server,connector,endpoint.getHandlers())___                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___                LOG.debug("Jetty Server started for host : " + connector.getHost() + ", on port : " + connector.getPort())__                server.start()___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            _            _            _            __        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,string,base,resource,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,debug,jetty,connector,added,connector,get,name,if,port,null,connector,set,port,port,else,connector,set,port,endpoint,get,port,if,host,null,connector,set,host,host,else,connector,set,host,endpoint,get,host,connector,set,host,endpoint,get,host,if,endpoint,get,home,null,servlet,context,handler,context,new,servlet,context,handler,server,servlet,context,handler,servlet,context,handler,if,endpoint,get,home,starts,with,classpath,base,resource,object,helper,after,endpoint,get,home,classpath,log,debug,using,base,resource,from,classpath,base,resource,context,set,base,resource,new,jetty,class,path,resource,get,camel,context,get,class,resolver,base,resource,else,log,debug,using,base,resource,base,resource,context,set,resource,base,base,resource,default,servlet,default,servlet,new,default,servlet,servlet,holder,holder,new,servlet,holder,default,servlet,holder,set,init,parameter,use,file,mapped,buffer,false,context,add,servlet,holder,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,context,create,context,server,connector,endpoint,get,handlers,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,connector,ref,server,start,connectors,put,connector,key,connector,ref,log,debug,jetty,server,started,for,host,connector,get,host,on,port,connector,get,port,server,start,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1337951157;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        String baseResource = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.debug("Jetty Connector added : " + connector.getName())___                if (port != null) {_                    connector.setPort(port)__                } else {_                    connector.setPort(endpoint.getPort())__                }__                if (host != null) {_                    connector.setHost(host)__                } else {_                    connector.setHost(endpoint.getHost())__                }__                connector.setHost(endpoint.getHost())___                _                if (endpoint.getHome() != null) {__                    ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS)___                    if (endpoint.getHome().startsWith("classpath:")) {_                        baseResource = ObjectHelper.after(endpoint.getHome(), "classpath:")__                        LOG.debug("Using base resource from classpath: {}", baseResource)__                        context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), baseResource))__                    } else {_                        LOG.debug("Using base resource: {}", baseResource)__                        context.setResourceBase(baseResource)__                    }_                    DefaultServlet defaultServlet = new DefaultServlet()__                    ServletHolder holder = new ServletHolder(defaultServlet)___                    _                    _                    holder.setInitParameter("useFileMappedBuffer", "false")__                    context.addServlet(holder, "/")__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }__                server.addConnector(connector)___                _                context = createContext(server,connector,endpoint.getHandlers())__                server.setHandler(context)___                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___                LOG.debug("Jetty Server started for host : " + connector.getHost() + ", on port : " + connector.getPort())__                server.start()___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            _            _            _            __        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,string,base,resource,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,debug,jetty,connector,added,connector,get,name,if,port,null,connector,set,port,port,else,connector,set,port,endpoint,get,port,if,host,null,connector,set,host,host,else,connector,set,host,endpoint,get,host,connector,set,host,endpoint,get,host,if,endpoint,get,home,null,servlet,context,handler,context,new,servlet,context,handler,server,servlet,context,handler,servlet,context,handler,if,endpoint,get,home,starts,with,classpath,base,resource,object,helper,after,endpoint,get,home,classpath,log,debug,using,base,resource,from,classpath,base,resource,context,set,base,resource,new,jetty,class,path,resource,get,camel,context,get,class,resolver,base,resource,else,log,debug,using,base,resource,base,resource,context,set,resource,base,base,resource,default,servlet,default,servlet,new,default,servlet,servlet,holder,holder,new,servlet,holder,default,servlet,holder,set,init,parameter,use,file,mapped,buffer,false,context,add,servlet,holder,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,connector,ref,server,start,connectors,put,connector,key,connector,ref,log,debug,jetty,server,started,for,host,connector,get,host,on,port,connector,get,port,server,start,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1337952571;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        String baseResource = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.debug("Jetty Connector added : " + connector.getName())___                if (port != null) {_                    connector.setPort(port)__                } else {_                    connector.setPort(endpoint.getPort())__                }__                if (host != null) {_                    connector.setHost(host)__                } else {_                    connector.setHost(endpoint.getHost())__                }__                connector.setHost(endpoint.getHost())___                _                if (endpoint.getHome() != null) {__                    ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS)___                    if (endpoint.getHome().startsWith("classpath:")) {_                        baseResource = ObjectHelper.after(endpoint.getHome(), "classpath:")__                        LOG.debug("Using base resource from classpath: {}", baseResource)__                        context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), baseResource))__                    } else {_                        LOG.debug("Using base resource: {}", baseResource)__                        context.setResourceBase(baseResource)__                    }_                    DefaultServlet defaultServlet = new DefaultServlet()__                    ServletHolder holder = new ServletHolder(defaultServlet)___                    _                    _                    holder.setInitParameter("useFileMappedBuffer", "false")__                    context.addServlet(holder, "/")__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }__                server.addConnector(connector)___                _                context = createContext(server,connector,endpoint.getHandlers())__                server.setHandler(context)___                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___                LOG.debug("Jetty Server started for host : " + connector.getHost() + ", on port : " + connector.getPort())__                server.start()___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            _            _            _            _            __        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,string,base,resource,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,debug,jetty,connector,added,connector,get,name,if,port,null,connector,set,port,port,else,connector,set,port,endpoint,get,port,if,host,null,connector,set,host,host,else,connector,set,host,endpoint,get,host,connector,set,host,endpoint,get,host,if,endpoint,get,home,null,servlet,context,handler,context,new,servlet,context,handler,server,servlet,context,handler,servlet,context,handler,if,endpoint,get,home,starts,with,classpath,base,resource,object,helper,after,endpoint,get,home,classpath,log,debug,using,base,resource,from,classpath,base,resource,context,set,base,resource,new,jetty,class,path,resource,get,camel,context,get,class,resolver,base,resource,else,log,debug,using,base,resource,base,resource,context,set,resource,base,base,resource,default,servlet,default,servlet,new,default,servlet,servlet,holder,holder,new,servlet,holder,default,servlet,holder,set,init,parameter,use,file,mapped,buffer,false,context,add,servlet,holder,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,connector,ref,server,start,connectors,put,connector,key,connector,ref,log,debug,jetty,server,started,for,host,connector,get,host,on,port,connector,get,port,server,start,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1337954816;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        String baseResource = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.debug("Jetty Connector added : " + connector.getName())___                if (port != null) {_                    connector.setPort(port)__                } else {_                    connector.setPort(endpoint.getPort())__                }__                if (host != null) {_                    connector.setHost(host)__                } else {_                    connector.setHost(endpoint.getHost())__                }__                connector.setHost(endpoint.getHost())___                _                if (endpoint.getHome() != null) {__                    ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS)___                    if (endpoint.getHome().startsWith("classpath:")) {_                        baseResource = ObjectHelper.after(endpoint.getHome(), "classpath:")__                        LOG.debug("Using base resource from classpath: {}", baseResource)__                        context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), baseResource))__                    } else {_                        LOG.debug("Using base resource: {}", baseResource)__                        context.setResourceBase(baseResource)__                    }_                    DefaultServlet defaultServlet = new DefaultServlet()__                    ServletHolder holder = new ServletHolder(defaultServlet)___                    _                    _                    holder.setInitParameter("useFileMappedBuffer", "false")__                    context.addServlet(holder, "/")__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }__                server.addConnector(connector)___                _                context = createContext(server,connector,endpoint.getHandlers())__                server.setHandler(context)___                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___                LOG.debug("Jetty Server started for host : " + connector.getHost() + ", on port : " + connector.getPort())__                server.start()___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            _            _            _            _            __        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,string,base,resource,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,debug,jetty,connector,added,connector,get,name,if,port,null,connector,set,port,port,else,connector,set,port,endpoint,get,port,if,host,null,connector,set,host,host,else,connector,set,host,endpoint,get,host,connector,set,host,endpoint,get,host,if,endpoint,get,home,null,servlet,context,handler,context,new,servlet,context,handler,server,servlet,context,handler,servlet,context,handler,if,endpoint,get,home,starts,with,classpath,base,resource,object,helper,after,endpoint,get,home,classpath,log,debug,using,base,resource,from,classpath,base,resource,context,set,base,resource,new,jetty,class,path,resource,get,camel,context,get,class,resolver,base,resource,else,log,debug,using,base,resource,base,resource,context,set,resource,base,base,resource,default,servlet,default,servlet,new,default,servlet,servlet,holder,holder,new,servlet,holder,default,servlet,holder,set,init,parameter,use,file,mapped,buffer,false,context,add,servlet,holder,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,connector,ref,server,start,connectors,put,connector,key,connector,ref,log,debug,jetty,server,started,for,host,connector,get,host,on,port,connector,get,port,server,start,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1337970529;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        String baseResource = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.debug("Jetty Connector added : " + connector.getName())___                if (port != null) {_                    connector.setPort(port)__                } else {_                    connector.setPort(endpoint.getPort())__                }__                if (host != null) {_                    connector.setHost(host)__                } else {_                    connector.setHost(endpoint.getHost())__                }__                connector.setHost(endpoint.getHost())___                _                if (endpoint.getHome() != null) {__                    ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS)___                    if (endpoint.getHome().startsWith("classpath:")) {_                        baseResource = ObjectHelper.after(endpoint.getHome(), "classpath:")__                        LOG.debug("Using base resource from classpath: {}", baseResource)__                        context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), baseResource))__                    } else {_                        LOG.debug("Using base resource: {}", baseResource)__                        context.setResourceBase(baseResource)__                    }_                    DefaultServlet defaultServlet = new DefaultServlet()__                    ServletHolder holder = new ServletHolder(defaultServlet)___                    _                    _                    holder.setInitParameter("useFileMappedBuffer", "false")__                    context.addServlet(holder, "/")__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }__                server.addConnector(connector)___                _                context = createContext(server,connector,endpoint.getHandlers())__                server.setHandler(context)___                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___                LOG.debug("Jetty Server started for host : " + connector.getHost() + ", on port : " + connector.getPort())__                server.start()___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            _            _            _            _            __        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,string,base,resource,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,debug,jetty,connector,added,connector,get,name,if,port,null,connector,set,port,port,else,connector,set,port,endpoint,get,port,if,host,null,connector,set,host,host,else,connector,set,host,endpoint,get,host,connector,set,host,endpoint,get,host,if,endpoint,get,home,null,servlet,context,handler,context,new,servlet,context,handler,server,servlet,context,handler,servlet,context,handler,if,endpoint,get,home,starts,with,classpath,base,resource,object,helper,after,endpoint,get,home,classpath,log,debug,using,base,resource,from,classpath,base,resource,context,set,base,resource,new,jetty,class,path,resource,get,camel,context,get,class,resolver,base,resource,else,log,debug,using,base,resource,base,resource,context,set,resource,base,base,resource,default,servlet,default,servlet,new,default,servlet,servlet,holder,holder,new,servlet,holder,default,servlet,holder,set,init,parameter,use,file,mapped,buffer,false,context,add,servlet,holder,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,connector,ref,server,start,connectors,put,connector,key,connector,ref,log,debug,jetty,server,started,for,host,connector,get,host,on,port,connector,get,port,server,start,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1338471142;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        String baseResource = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.debug("Jetty Connector added : " + connector.getName())___                if (port != null) {_                    connector.setPort(port)__                } else {_                    connector.setPort(endpoint.getPort())__                }__                if (host != null) {_                    connector.setHost(host)__                } else {_                    connector.setHost(endpoint.getHost())__                }__                connector.setHost(endpoint.getHost())___                _                if (endpoint.getHome() != null) {__                    ServletContextHandler context = new ServletContextHandler(server, "/", ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS)___                    if (endpoint.getHome().startsWith("classpath:")) {_                        baseResource = ObjectHelper.after(endpoint.getHome(), "classpath:")__                        LOG.debug("Using base resource from classpath: {}", baseResource)__                        context.setBaseResource(new JettyClassPathResource(getCamelContext().getClassResolver(), baseResource))__                    } else {_                        LOG.debug("Using base resource: {}", baseResource)__                        context.setResourceBase(baseResource)__                    }_                    DefaultServlet defaultServlet = new DefaultServlet()__                    ServletHolder holder = new ServletHolder(defaultServlet)___                    _                    _                    holder.setInitParameter("useFileMappedBuffer", "false")__                    context.addServlet(holder, "/")__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }__                server.addConnector(connector)___                _                context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___                LOG.debug("Jetty Server started for host : " + connector.getHost() + ", on port : " + connector.getPort())__                server.start()___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            _            _            _            _            __        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,string,base,resource,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,debug,jetty,connector,added,connector,get,name,if,port,null,connector,set,port,port,else,connector,set,port,endpoint,get,port,if,host,null,connector,set,host,host,else,connector,set,host,endpoint,get,host,connector,set,host,endpoint,get,host,if,endpoint,get,home,null,servlet,context,handler,context,new,servlet,context,handler,server,servlet,context,handler,servlet,context,handler,if,endpoint,get,home,starts,with,classpath,base,resource,object,helper,after,endpoint,get,home,classpath,log,debug,using,base,resource,from,classpath,base,resource,context,set,base,resource,new,jetty,class,path,resource,get,camel,context,get,class,resolver,base,resource,else,log,debug,using,base,resource,base,resource,context,set,resource,base,base,resource,default,servlet,default,servlet,new,default,servlet,servlet,holder,holder,new,servlet,holder,default,servlet,holder,set,init,parameter,use,file,mapped,buffer,false,context,add,servlet,holder,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,connector,ref,server,start,connectors,put,connector,key,connector,ref,log,debug,jetty,server,started,for,host,connector,get,host,on,port,connector,get,port,server,start,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1339147255;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            if (prodcon instanceof WebsocketConsumer) {_                _                connectorRef.servlet.connect((WebsocketConsumer) prodcon)__            }_        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,connect,websocket,consumer,prodcon
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1339492643;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            if (prodcon instanceof WebsocketConsumer) {_                _                connectorRef.servlet.connect((WebsocketConsumer) prodcon)__            }_        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,connect,websocket,consumer,prodcon
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1339609252;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            if (prodcon instanceof WebsocketConsumer) {_                _                connectorRef.servlet.connect((WebsocketConsumer) prodcon)__            }_        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,connect,websocket,consumer,prodcon
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1340007507;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            if (prodcon instanceof WebsocketConsumer) {_                _                connectorRef.servlet.connect((WebsocketConsumer) prodcon)__            }_        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,if,prodcon,instanceof,websocket,consumer,connector,ref,servlet,connect,websocket,consumer,prodcon
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1356359436;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1357140814;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1369503011;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1370610941;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1379403530;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1392400400;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1405374721;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1420453324;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1434280088;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1434443829;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1434443939;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                LOG.trace("Jetty Connector added: {}", connector.getName())___                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,log,trace,jetty,connector,added,connector,get,name,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1446028357;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                _                connectorRef = new ConnectorRef(server, connector, null)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            WebsocketComponentServlet servlet = addServlet(endpoint.getNodeSynchronization(), prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }__        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,connector,ref,new,connector,ref,server,connector,null,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,websocket,component,servlet,servlet,add,servlet,endpoint,get,node,synchronization,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1448188322;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)_            _            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_            	WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__            	producer.setStore(connectorRef.memoryStore)__            }_        }__    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1448188568;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                Connector connector__                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(endpoint.getSslContextParameters())__                } else {_                    connector = new SelectChannelConnector()__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,connector,connector,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,endpoint,get,ssl,context,parameters,else,connector,new,select,channel,connector,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1461151138;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1461151185;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1461153577;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1461307084;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1461851621;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1461921869;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1462533190;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1462533351;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1462536369;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)__                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1462793702;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1462794002;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1474957882;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1480858365;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1482077817;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1482335925;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1489596811;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1491316490;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1491585298;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1491919259;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1491919462;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1491919462;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1491919462;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1524063209;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1535969486;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1536517284;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1537290824;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1540108158;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1540108163;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1547241305;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void connect(WebsocketProducerConsumer prodcon) throws Exception;1548665653;Connects the URL specified on the endpoint to the specified processor.;public void connect(WebsocketProducerConsumer prodcon) throws Exception {__        Server server = null__        WebsocketEndpoint endpoint = prodcon.getEndpoint()___        String connectorKey = getConnectorKey(endpoint)___        synchronized (CONNECTORS) {_            ConnectorRef connectorRef = CONNECTORS.get(connectorKey)__            if (connectorRef == null) {_                ServerConnector connector__                _                server = createServer()__                if (endpoint.isEnableJmx()) {_                    enableJmx(server)__                }_                if (endpoint.getSslContextParameters() != null) {_                    connector = getSslSocketConnector(server, endpoint.getSslContextParameters())__                } else {_                    connector = new ServerConnector(server)__                }__                if (endpoint.getPort() != null) {_                    connector.setPort(endpoint.getPort())__                } else {_                    connector.setPort(port)__                }__                if (endpoint.getHost() != null) {_                    connector.setHost(endpoint.getHost())__                } else {_                    connector.setHost(host)__                }__                server.addConnector(connector)___                LOG.trace("Jetty Connector added: {}", connector.getName())___                _                ServletContextHandler context = createContext(server, connector, endpoint.getHandlers())__                _                setWebSocketComponentServletInitialParameter(context, endpoint)__                server.setHandler(context)___                _                applyCrossOriginFiltering(endpoint, context)___                _                if (endpoint.getStaticResources() != null) {_                    server = createStaticResourcesServer(server, context, endpoint.getStaticResources())__                }__                MemoryWebsocketStore memoryStore = new MemoryWebsocketStore()__                _                _                connectorRef = new ConnectorRef(server, connector, null, memoryStore)___                _                if (endpoint.isSessionSupport()) {_                    enableSessionSupport(connectorRef.server, connectorKey)__                }_                LOG.info("Jetty Server starting on host: {}:{}", connector.getHost(), connector.getPort())__                connectorRef.memoryStore.start()__                connectorRef.server.start()___                CONNECTORS.put(connectorKey, connectorRef)___            } else {_                connectorRef.increment()__            }__            _            if (endpoint.isSessionSupport()) {_                enableSessionSupport(connectorRef.server, connectorKey)__            }__            NodeSynchronization sync = new DefaultNodeSynchronization(connectorRef.memoryStore)__            WebsocketComponentServlet servlet = addServlet(sync, prodcon, endpoint.getResourceUri())__            if (prodcon instanceof WebsocketConsumer) {_                WebsocketConsumer consumer = WebsocketConsumer.class.cast(prodcon)__                if (servlet.getConsumer() == null) {_                    servlet.setConsumer(consumer)__                }_                _                servlet.connect(consumer)__            }_            if (prodcon instanceof WebsocketProducer) {_                WebsocketProducer producer = WebsocketProducer.class.cast(prodcon)__                producer.setStore(connectorRef.memoryStore)__            }_            _        }_    };connects,the,url,specified,on,the,endpoint,to,the,specified,processor;public,void,connect,websocket,producer,consumer,prodcon,throws,exception,server,server,null,websocket,endpoint,endpoint,prodcon,get,endpoint,string,connector,key,get,connector,key,endpoint,synchronized,connectors,connector,ref,connector,ref,connectors,get,connector,key,if,connector,ref,null,server,connector,connector,server,create,server,if,endpoint,is,enable,jmx,enable,jmx,server,if,endpoint,get,ssl,context,parameters,null,connector,get,ssl,socket,connector,server,endpoint,get,ssl,context,parameters,else,connector,new,server,connector,server,if,endpoint,get,port,null,connector,set,port,endpoint,get,port,else,connector,set,port,port,if,endpoint,get,host,null,connector,set,host,endpoint,get,host,else,connector,set,host,host,server,add,connector,connector,log,trace,jetty,connector,added,connector,get,name,servlet,context,handler,context,create,context,server,connector,endpoint,get,handlers,set,web,socket,component,servlet,initial,parameter,context,endpoint,server,set,handler,context,apply,cross,origin,filtering,endpoint,context,if,endpoint,get,static,resources,null,server,create,static,resources,server,server,context,endpoint,get,static,resources,memory,websocket,store,memory,store,new,memory,websocket,store,connector,ref,new,connector,ref,server,connector,null,memory,store,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,log,info,jetty,server,starting,on,host,connector,get,host,connector,get,port,connector,ref,memory,store,start,connector,ref,server,start,connectors,put,connector,key,connector,ref,else,connector,ref,increment,if,endpoint,is,session,support,enable,session,support,connector,ref,server,connector,key,node,synchronization,sync,new,default,node,synchronization,connector,ref,memory,store,websocket,component,servlet,servlet,add,servlet,sync,prodcon,endpoint,get,resource,uri,if,prodcon,instanceof,websocket,consumer,websocket,consumer,consumer,websocket,consumer,class,cast,prodcon,if,servlet,get,consumer,null,servlet,set,consumer,consumer,servlet,connect,consumer,if,prodcon,instanceof,websocket,producer,websocket,producer,producer,websocket,producer,class,cast,prodcon,producer,set,store,connector,ref,memory,store
WebsocketComponent -> public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1491919259;Enable usage of Camel global SSL context parameters;public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,camel,global,ssl,context,parameters;public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1491919462;Enable usage of Camel global SSL context parameters;public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,camel,global,ssl,context,parameters;public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1434280088;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1434443829;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1434443939;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1446028357;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1448188322;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1448188568;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1461151138;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1461151185;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1461153577;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1461307084;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1461851621;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1461921869;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1462533190;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1462533351;To use a custom thread pool for the server.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1462536369;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1462793702;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1462794002;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1474957882;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1480858365;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1482077817;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1482335925;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1489596811;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1491316490;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1491585298;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1491919259;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1491919462;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1491919462;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1491919462;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1524063209;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1535969486;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1536517284;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1537290824;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1540108158;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1540108163;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1547241305;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
WebsocketComponent -> public void setThreadPool(ThreadPool threadPool);1548665653;To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.;public void setThreadPool(ThreadPool threadPool) {_        this.threadPool = threadPool__    };to,use,a,custom,thread,pool,for,the,server,max,threads,min,threads,or,thread,pool,fields,are,required,due,to,switch,to,jetty9;public,void,set,thread,pool,thread,pool,thread,pool,this,thread,pool,thread,pool
