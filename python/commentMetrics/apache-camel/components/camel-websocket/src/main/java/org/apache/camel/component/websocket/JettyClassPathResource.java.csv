commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean isContainedIn(Resource r) throws MalformedURLException {     return false. }
false;public;0;8;;@Override public boolean exists() {     InputStream is = resolver.loadResourceAsStream(path).     if (is != null) {         IOHelper.close(is).     }     return is != null. }
false;public;0;4;;@Override public boolean isDirectory() {     return exists() && path.endsWith("/"). }
false;public;0;4;;@Override public long lastModified() {     return 0. }
false;public;0;4;;@Override public long length() {     return -1. }
false;public;0;4;;@Override public URL getURL() {     return resolver.loadResourceAsURL(path). }
false;public;0;8;;@Override public File getFile() throws IOException {     URL url = getURL().     if (url != null) {         return new File(url.getFile()).     }     return null. }
false;public;0;4;;@Override public String getName() {     return path. }
false;public;0;4;;@Override public InputStream getInputStream() throws IOException {     return resolver.loadResourceAsStream(path). }
false;public;0;4;;@Override public boolean delete() throws SecurityException {     return false. }
false;public;1;4;;@Override public boolean renameTo(Resource dest) throws SecurityException {     return false. }
false;public;0;4;;@Override public String[] list() {     return new String[0]. }
false;public;1;4;;@Override public Resource addPath(String path) throws IOException {     return new JettyClassPathResource(resolver, this.path + "/" + path). }
false;public;0;4;;@Override public void close() { // noop }
false;public;0;4;;@Override public ReadableByteChannel getReadableByteChannel() throws IOException {     return null. }
