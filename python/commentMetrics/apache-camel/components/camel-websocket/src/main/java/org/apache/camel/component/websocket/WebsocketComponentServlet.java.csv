commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public WebsocketConsumer getConsumer() {     return consumer. }
false;public;1;3;;public void setConsumer(WebsocketConsumer consumer) {     this.consumer = consumer. }
false;public;1;4;;public void connect(WebsocketConsumer consumer) {     log.debug("Connecting consumer: {}", consumer).     consumers.put(consumer.getPath(), consumer). }
false;public;1;4;;public void disconnect(WebsocketConsumer consumer) {     log.debug("Disconnecting consumer: {}", consumer).     consumers.remove(consumer.getPath()). }
false;public;2;13;;public DefaultWebsocket doWebSocketConnect(ServletUpgradeRequest request, String protocol) {     String protocolKey = protocol.     if (protocol == null || !socketFactory.containsKey(protocol)) {         log.debug("No factory found for the socket protocol: {}, returning default implementation", protocol).         protocolKey = "default".     }     WebSocketFactory factory = socketFactory.get(protocolKey).     return factory.newInstance(request, protocolKey, (consumer != null && consumer.getEndpoint() != null) ? WebsocketComponent.createPathSpec(consumer.getEndpoint().getResourceUri()) : null, sync, consumer). }
false;public;0;3;;public Map<String, WebSocketFactory> getSocketFactory() {     return socketFactory. }
false;public;1;3;;public void setSocketFactory(Map<String, WebSocketFactory> socketFactory) {     this.socketFactory = socketFactory. }
false;public;2;6;;@Override public Object createWebSocket(ServletUpgradeRequest req, ServletUpgradeResponse resp) {     String protocolKey = "default".     WebSocketFactory factory = socketFactory.get(protocolKey).     return factory.newInstance(req, protocolKey, pathSpec, sync, consumer). }
false;public;1;11;;@Override public void configure(WebSocketServletFactory factory) {     factory.setCreator(new WebSocketCreator() {          @Override         public Object createWebSocket(ServletUpgradeRequest req, ServletUpgradeResponse resp) {             String protocolKey = "default".             WebSocketFactory factory = socketFactory.get(protocolKey).             return factory.newInstance(req, protocolKey, pathSpec, sync, consumer).         }     }). }
