commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setUp() throws Exception {     store1 = new MemoryWebsocketStore().     websocket1 = new DefaultWebsocket(sync, null, consumer).     websocket1.setConnectionKey(KEY_1).     websocket2 = new DefaultWebsocket(sync, null, consumer).     websocket2.setConnectionKey(KEY_2). }
true;public;0;10;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#addSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#addSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ @Test public void testAddSocketMemoryAndGlobal() {     sync = new DefaultNodeSynchronization(store1).     sync.addSocket(websocket1).     assertEquals(websocket1, store1.get(KEY_1)).     sync.addSocket(websocket2).     assertEquals(websocket2, store1.get(KEY_2)). }
true;public;0;7;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#addSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#addSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ @Test public void testAddSocketMemoryOnly() {     sync = new DefaultNodeSynchronization(store1).     sync.addSocket(websocket1).     assertEquals(websocket1, store1.get(KEY_1)). }
true;public;0;4;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#addSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#addSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ @Test(expected = NullPointerException.class) public void testAddNullValue() {     sync.addSocket(null). }
true;public;0;20;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ @Test public void testRemoveDefaultWebsocket() {     sync = new DefaultNodeSynchronization(store1).     // first call of websocket1.getConnectionKey()     sync.addSocket(websocket1).     assertEquals(websocket1, store1.get(KEY_1)).     sync.addSocket(websocket2).     assertEquals(websocket2, store1.get(KEY_2)).     // second call of websocket1.getConnectionKey()     sync.removeSocket(websocket1).     assertNull(store1.get(KEY_1)).     assertNotNull(store1.get(KEY_2)).     sync.removeSocket(websocket2).     assertNull(store1.get(KEY_2)). }
true;public;0;19;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ @Test public void testRemoveDefaultWebsocketKeyNotSet() {     sync = new DefaultNodeSynchronization(store1).     // first call of websocket1.getConnectionKey()     sync.addSocket(websocket1).     assertEquals(websocket1, store1.get(KEY_1)).     // setConnectionKey(null) after sync.addSocket()- otherwise npe     websocket1.setConnectionKey(null).     try {         // second call of websocket1.getConnectionKey()         sync.removeSocket(websocket1).         fail("Exception expected").     } catch (Exception e) {         assertEquals(NullPointerException.class, e.getClass()).     } }
true;public;0;14;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(org.apache.camel.component.websocket.DefaultWebsocket)} .  */ @Test public void testRemoveNotExisting() {     sync = new DefaultNodeSynchronization(store1).     // first call of websocket1.getConnectionKey()     sync.addSocket(websocket1).     assertEquals(websocket1, store1.get(KEY_1)).     assertNull(store1.get(KEY_2)).     sync.removeSocket(websocket2).     assertEquals(websocket1, store1.get(KEY_1)).     assertNull(store1.get(KEY_2)). }
true;public;0;20;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(String)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(String)} .  */ @Test public void testRemoveString() {     sync = new DefaultNodeSynchronization(store1).     // first call of websocket1.getConnectionKey()     sync.addSocket(websocket1).     assertEquals(websocket1, store1.get(KEY_1)).     sync.addSocket(websocket2).     assertEquals(websocket2, store1.get(KEY_2)).     // second call of websocket1.getConnectionKey()     sync.removeSocket(KEY_1).     assertNull(store1.get(KEY_1)).     assertNotNull(store1.get(KEY_2)).     sync.removeSocket(KEY_2).     assertNull(store1.get(KEY_2)). }
true;public;0;16;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(String)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.NodeSynchronization#removeSocket(String)} .  */ @Test public void testRemoveStringNotExisting() {     sync = new DefaultNodeSynchronization(store1).     // first call of websocket1.getConnectionKey()     sync.addSocket(websocket1).     assertEquals(websocket1, store1.get(KEY_1)).     assertNull(store1.get(KEY_3)).     sync.removeSocket(KEY_3).     assertEquals(websocket1, store1.get(KEY_1)).     assertNull(store1.get(KEY_3)). }
