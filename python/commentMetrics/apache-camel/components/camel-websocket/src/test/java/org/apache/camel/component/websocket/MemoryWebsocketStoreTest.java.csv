commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     store = new MemoryWebsocketStore().     when(websocket1.getConnectionKey()).thenReturn(KEY_1).     when(websocket2.getConnectionKey()).thenReturn(KEY_2). }
false;public;0;10;;@Test public void testAdd() {     assertNotNull(websocket1.getConnectionKey()).     store.add(websocket1).     assertEquals(websocket1, store.get(KEY_1)).     store.add(websocket2).     assertEquals(websocket2, store.get(KEY_2)). }
false;public;0;4;;@Test(expected = NullPointerException.class) public void testAddNullValue() {     store.add(null). }
false;public;0;9;;@Test public void testRemoveDefaultWebsocket() {     // first call of websocket1.getConnectionKey()     store.add(websocket1).     assertEquals(websocket1, store.get(KEY_1)).     // second call of websocket1.getConnectionKey()     store.remove(websocket1).     assertNull(store.get(KEY_1)). }
false;public;0;17;;@Test public void testRemoveDefaultWebsocketKeyNotSet() {     // first call of websocket1.getConnectionKey()     store.add(websocket1).     // overload getConnectionKey() after store.add() - otherwise npe     when(websocket1.getConnectionKey()).thenReturn(null).     assertEquals(websocket1, store.get(KEY_1)).     try {         store.remove(websocket1).         fail("Exception expected").     } catch (Exception e) {         assertEquals(NullPointerException.class, e.getClass()).     } }
false;public;0;10;;@Test public void testRemoveNotExisting() {     websocket1.setConnectionKey(KEY_1).     store.add(websocket1).     assertEquals(websocket1, store.get(KEY_1)).     assertNull(store.get(KEY_2)).     store.remove(websocket2).     assertEquals(websocket1, store.get(KEY_1)).     assertNull(store.get(KEY_2)). }
false;public;0;8;;@Test public void testRemoveString() {     websocket1.setConnectionKey(KEY_1).     store.add(websocket1).     assertEquals(websocket1, store.get(KEY_1)).     store.remove(KEY_1).     assertNull(store.get(KEY_1)). }
false;public;0;10;;@Test public void testRemoveStringNotExisting() {     websocket1.setConnectionKey(KEY_1).     store.add(websocket1).     assertEquals(websocket1, store.get(KEY_1)).     assertNull(store.get(KEY_2)).     store.remove(KEY_2).     assertEquals(websocket1, store.get(KEY_1)).     assertNull(store.get(KEY_2)). }
false;public;0;11;;@Test public void testGetString() {     websocket1.setConnectionKey(KEY_1).     store.add(websocket1).     assertEquals(websocket1, store.get(KEY_1)).     assertNull(store.get(KEY_2)).     websocket2.setConnectionKey(KEY_2).     store.add(websocket2).     assertEquals(websocket1, store.get(KEY_1)).     assertEquals(websocket2, store.get(KEY_2)). }
false;public;0;21;;@Test public void testGetAll() {     Collection<DefaultWebsocket> sockets = store.getAll().     assertNotNull(sockets).     assertEquals(0, sockets.size()).     websocket1.setConnectionKey(KEY_1).     store.add(websocket1).     sockets = store.getAll().     assertNotNull(sockets).     assertEquals(1, sockets.size()).     assertTrue(sockets.contains(websocket1)).     websocket2.setConnectionKey(KEY_2).     store.add(websocket2).     sockets = store.getAll().     assertNotNull(sockets).     assertEquals(2, sockets.size()).     assertTrue(sockets.contains(websocket1)).     assertTrue(sockets.contains(websocket2)). }
