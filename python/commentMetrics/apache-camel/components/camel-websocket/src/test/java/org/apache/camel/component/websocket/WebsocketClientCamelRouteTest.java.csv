commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     port = AvailablePortFinder.getNextAvailable(16200).     super.setUp(). }
false;public;1;6;;@Override public void onMessage(String message) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;1;3;;@Override public void onClose(WebSocket websocket) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;0;44;;@Test public void testWSHttpCall() throws Exception {     AsyncHttpClient c = new DefaultAsyncHttpClient().     WebSocket websocket = c.prepareGet("ws://127.0.0.1:" + port + "/test").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {          @Override         public void onMessage(String message) {             received.add(message).             log.info("received --> " + message).             latch.countDown().         }          @Override         public void onOpen(WebSocket websocket) {         }          @Override         public void onClose(WebSocket websocket) {         }          @Override         public void onError(Throwable t) {             t.printStackTrace().         }     }).build()).get().     getMockEndpoint("mock:client").expectedBodiesReceived("Hello from WS client").     websocket.sendMessage("Hello from WS client").     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied().     assertEquals(10, received.size()).     for (int i = 0. i < 10. i++) {         assertEquals(">> Welcome on board!", received.get(i)).     }     websocket.close().     c.close(). }
false;public;0;13;;public void configure() {     WebsocketComponent websocketComponent = getContext().getComponent("websocket", WebsocketComponent.class).     websocketComponent.setPort(port).     websocketComponent.setMinThreads(1).     websocketComponent.setMaxThreads(25).     from("websocket://test").log(">>> Message received from WebSocket Client : ${body}").to("mock:client").loop(10).setBody().constant(">> Welcome on board!").to("websocket://test"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             WebsocketComponent websocketComponent = getContext().getComponent("websocket", WebsocketComponent.class).             websocketComponent.setPort(port).             websocketComponent.setMinThreads(1).             websocketComponent.setMaxThreads(25).             from("websocket://test").log(">>> Message received from WebSocket Client : ${body}").to("mock:client").loop(10).setBody().constant(">> Welcome on board!").to("websocket://test").         }     }. }
