commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     port = AvailablePortFinder.getNextAvailable(16310).     super.setUp(). }
false;public;1;6;;@Override public void onMessage(String message) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;1;3;;@Override public void onClose(WebSocket websocket) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;1;6;;@Override public void onMessage(String message) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;1;3;;@Override public void onClose(WebSocket websocket) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;0;82;;@Test public void testWSHttpCallEcho() throws Exception {     // We call the route WebSocket BAR     received.clear().     latch = new CountDownLatch(1).     AsyncHttpClient c = new DefaultAsyncHttpClient().     WebSocket websocket = c.prepareGet("ws://localhost:" + port + "/bar").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {          @Override         public void onMessage(String message) {             received.add(message).             log.info("received --> " + message).             latch.countDown().         }          @Override         public void onOpen(WebSocket websocket) {         }          @Override         public void onClose(WebSocket websocket) {         }          @Override         public void onError(Throwable t) {             t.printStackTrace().         }     }).build()).get().     websocket.sendMessage("Beer").     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertEquals(1, received.size()).     assertEquals("The bar has Beer", received.get(0)).     websocket.close().     c.close().     // We call the route WebSocket PUB     received.clear().     latch = new CountDownLatch(1).     c = new DefaultAsyncHttpClient().     websocket = c.prepareGet("ws://localhost:" + port + "/pub").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {          @Override         public void onMessage(String message) {             received.add(message).             log.info("received --> " + message).             latch.countDown().         }          @Override         public void onOpen(WebSocket websocket) {         }          @Override         public void onClose(WebSocket websocket) {         }          @Override         public void onError(Throwable t) {             t.printStackTrace().         }     }).build()).get().     websocket.sendMessage("wine").     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertEquals(1, received.size()).     assertEquals("The pub has wine", received.get(0)).     websocket.close().     c.close(). }
false;public;0;15;;public void configure() {     WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent("websocket").     websocketComponent.setMinThreads(1).     websocketComponent.setMaxThreads(25).     from("websocket://localhost:" + port + "/bar").log(">>> Message received from BAR WebSocket Client : ${body}").transform().simple("The bar has ${body}").to("websocket://localhost:" + port + "/bar").     from("websocket://localhost:" + port + "/pub").log(">>> Message received from PUB WebSocket Client : ${body}").transform().simple("The pub has ${body}").to("websocket://localhost:" + port + "/pub"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent("websocket").             websocketComponent.setMinThreads(1).             websocketComponent.setMaxThreads(25).             from("websocket://localhost:" + port + "/bar").log(">>> Message received from BAR WebSocket Client : ${body}").transform().simple("The bar has ${body}").to("websocket://localhost:" + port + "/bar").             from("websocket://localhost:" + port + "/pub").log(">>> Message received from PUB WebSocket Client : ${body}").transform().simple("The pub has ${body}").to("websocket://localhost:" + port + "/pub").         }     }. }
