commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     websocketEndpoint = new WebsocketEndpoint(component, URI, REMAINING, null).     component = new WebsocketComponent().     component.setPort(1988).     component.setHost("localhost").     component.createServer(). }
true;public;0;17;/**  * Test method for {@link org.apache.camel.component.websocket.WebsocketEndpoint#createConsumer(org.apache.camel.Processor)} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.WebsocketEndpoint#createConsumer(org.apache.camel.Processor)} .  */ @Test public void testCreateConsumer() throws Exception {     Consumer consumer = websocketEndpoint.createConsumer(processor).     component.connect((WebsocketProducerConsumer) consumer).     assertNotNull(consumer).     assertEquals(WebsocketConsumer.class, consumer.getClass()).     InOrder inOrder = inOrder(component, processor).     ArgumentCaptor<NodeSynchronization> synchronizationCaptor = ArgumentCaptor.forClass(NodeSynchronization.class).     ArgumentCaptor<WebsocketConsumer> consumerCaptor = ArgumentCaptor.forClass(WebsocketConsumer.class).     inOrder.verify(component, times(1)).addServlet(synchronizationCaptor.capture(), consumerCaptor.capture(), eq(REMAINING)).     inOrder.verifyNoMoreInteractions().     assertEquals(DefaultNodeSynchronization.class, synchronizationCaptor.getValue().getClass()).     assertEquals(consumer, consumerCaptor.getValue()). }
true;public;0;14;/**  * Test method for {@link org.apache.camel.component.websocket.WebsocketEndpoint#createProducer()} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.WebsocketEndpoint#createProducer()} .  */ @Test public void testCreateProducer() throws Exception {     Producer producer = websocketEndpoint.createProducer().     component.connect((WebsocketProducerConsumer) producer).     assertNotNull(producer).     assertEquals(WebsocketProducer.class, producer.getClass()).     InOrder inOrder = inOrder(component, processor).     ArgumentCaptor<NodeSynchronization> synchronizationCaptor = ArgumentCaptor.forClass(NodeSynchronization.class).     inOrder.verify(component, times(1)).addServlet(synchronizationCaptor.capture(), (WebsocketConsumer) isNull(), eq(REMAINING)).     inOrder.verifyNoMoreInteractions().     assertEquals(DefaultNodeSynchronization.class, synchronizationCaptor.getValue().getClass()). }
true;public;0;4;/**  * Test method for {@link org.apache.camel.component.websocket.WebsocketEndpoint#isSingleton()} .  */ ;/**  * Test method for {@link org.apache.camel.component.websocket.WebsocketEndpoint#isSingleton()} .  */ @Test public void testIsSingleton() {     assertTrue(websocketEndpoint.isSingleton()). }
