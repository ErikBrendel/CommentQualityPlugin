commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     socketFactory = new HashMap<>().     socketFactory.put("default", new DefaultWebsocketFactory()).     websocketComponentServlet = new WebsocketComponentServlet(sync, null, socketFactory).     when(session.getRemoteAddress()).thenReturn(ADDRESS). }
false;public;0;6;;@Test public void testGetConsumer() {     assertNull(websocketComponentServlet.getConsumer()).     websocketComponentServlet.setConsumer(consumer).     assertEquals(consumer, websocketComponentServlet.getConsumer()). }
false;public;0;4;;@Test public void testSetConsumer() {     testGetConsumer(). }
false;public;0;14;;@Test public void testDoWebSocketConnect() {     websocketComponentServlet.setConsumer(consumer).     DefaultWebsocket webSocket = websocketComponentServlet.doWebSocketConnect(request, PROTOCOL).     assertNotNull(webSocket).     assertEquals(DefaultWebsocket.class, webSocket.getClass()).     DefaultWebsocket defaultWebsocket = webSocket.     defaultWebsocket.setConnectionKey(CONNECTION_KEY).     defaultWebsocket.setSession(session).     defaultWebsocket.onMessage(MESSAGE).     InOrder inOrder = inOrder(consumer, sync, request).     inOrder.verify(consumer, times(1)).sendMessage(CONNECTION_KEY, MESSAGE, ADDRESS).     inOrder.verifyNoMoreInteractions(). }
false;public;0;11;;@Test public void testDoWebSocketConnectConsumerIsNull() {     DefaultWebsocket webSocket = websocketComponentServlet.doWebSocketConnect(request, PROTOCOL).     assertNotNull(webSocket).     assertEquals(DefaultWebsocket.class, webSocket.getClass()).     DefaultWebsocket defaultWebsocket = webSocket.     defaultWebsocket.setConnectionKey(CONNECTION_KEY).     defaultWebsocket.onMessage(MESSAGE).     InOrder inOrder = inOrder(consumer, sync, request).     inOrder.verifyNoMoreInteractions(). }
