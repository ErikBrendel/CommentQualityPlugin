commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     websocketProducer = new WebsocketProducer(endpoint).     websocketProducer.setStore(store).     sockets = Arrays.asList(defaultWebsocket1, defaultWebsocket2). }
false;public;0;25;;@Test public void testProcessSingleMessage() throws Exception {     when(exchange.getIn()).thenReturn(inMessage).     when(inMessage.getMandatoryBody()).thenReturn(MESSAGE).     when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class)).thenReturn(false).     when(inMessage.getHeader(WebsocketConstants.CONNECTION_KEY, String.class)).thenReturn(SESSION_KEY).     when(store.get(SESSION_KEY)).thenReturn(defaultWebsocket1).     when(defaultWebsocket1.getSession()).thenReturn(session).     when(session.isOpen()).thenReturn(true).     when(session.getRemote()).thenReturn(remoteEndpoint).     websocketProducer.process(exchange).     InOrder inOrder = inOrder(endpoint, store, session, defaultWebsocket1, defaultWebsocket2, exchange, inMessage, remoteEndpoint).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(inMessage, times(1)).getMandatoryBody().     inOrder.verify(inMessage, times(1)).getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class).     inOrder.verify(inMessage, times(1)).getHeader(WebsocketConstants.CONNECTION_KEY, String.class).     inOrder.verify(store, times(1)).get(SESSION_KEY).     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verifyNoMoreInteractions(). }
false;public;0;32;;@Test public void testProcessSingleMessageWithException() throws Exception {     when(exchange.getIn()).thenReturn(inMessage).     when(inMessage.getMandatoryBody()).thenReturn(MESSAGE).     when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class)).thenReturn(false).     when(inMessage.getHeader(WebsocketConstants.CONNECTION_KEY, String.class)).thenReturn(SESSION_KEY).     when(store.get(SESSION_KEY)).thenReturn(defaultWebsocket1).     when(defaultWebsocket1.getSession()).thenReturn(session).     when(session.isOpen()).thenReturn(true).     when(session.getRemote()).thenReturn(remoteEndpoint).     when(remoteEndpoint.sendStringByFuture(MESSAGE)).thenReturn(future).     try {         websocketProducer.process(exchange).         fail("Exception expected").     } catch (Exception e) {     // expected     }     InOrder inOrder = inOrder(endpoint, store, session, defaultWebsocket1, defaultWebsocket2, exchange, inMessage, remoteEndpoint).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(inMessage, times(1)).getMandatoryBody().     inOrder.verify(inMessage, times(1)).getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class).     inOrder.verify(inMessage, times(1)).getHeader(WebsocketConstants.CONNECTION_KEY, String.class).     inOrder.verify(store, times(1)).get(SESSION_KEY).     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verify(endpoint, times(1)).getSendTimeout().     inOrder.verifyNoMoreInteractions(). }
false;public;0;29;;@Test public void testProcessMultipleMessages() throws Exception {     when(exchange.getIn()).thenReturn(inMessage).     when(inMessage.getMandatoryBody()).thenReturn(MESSAGE).     when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class)).thenReturn(true).     when(store.getAll()).thenReturn(sockets).     when(defaultWebsocket1.getSession()).thenReturn(session).     when(defaultWebsocket2.getSession()).thenReturn(session).     when(session.isOpen()).thenReturn(true).     when(session.getRemote()).thenReturn(remoteEndpoint).     websocketProducer.process(exchange).     InOrder inOrder = inOrder(endpoint, store, session, defaultWebsocket1, defaultWebsocket2, exchange, inMessage, remoteEndpoint).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(inMessage, times(1)).getMandatoryBody().     inOrder.verify(inMessage, times(1)).getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class).     inOrder.verify(store, times(1)).getAll().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verify(defaultWebsocket2, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket2, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verify(endpoint, times(1)).getSendTimeout().     inOrder.verifyNoMoreInteractions(). }
false;public;0;22;;@Test public void testProcessSingleMessageNoConnectionKey() throws Exception {     when(exchange.getIn()).thenReturn(inMessage).     when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class)).thenReturn(false).     when(inMessage.getHeader(WebsocketConstants.CONNECTION_KEY, String.class)).thenReturn(null).     try {         websocketProducer.process(exchange).         fail("Exception expected").     } catch (Exception e) {         assertEquals(WebsocketSendException.class, e.getClass()).         assertNotNull(e.getMessage()).         assertNull(e.getCause()).     }     InOrder inOrder = inOrder(endpoint, store, session, defaultWebsocket1, defaultWebsocket2, exchange, inMessage).     inOrder.verify(exchange, times(1)).getIn().     inOrder.verify(inMessage, times(1)).getMandatoryBody().     inOrder.verify(inMessage, times(1)).getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class).     inOrder.verify(inMessage, times(1)).getHeader(WebsocketConstants.CONNECTION_KEY, String.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;15;;@Test public void testSendMessage() throws Exception {     when(defaultWebsocket1.getSession()).thenReturn(session).     when(session.isOpen()).thenReturn(true).     when(session.getRemote()).thenReturn(remoteEndpoint).     websocketProducer.sendMessage(defaultWebsocket1, MESSAGE).     InOrder inOrder = inOrder(endpoint, store, session, defaultWebsocket1, defaultWebsocket2, exchange, inMessage, remoteEndpoint).     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verifyNoMoreInteractions(). }
false;public;0;12;;@Test public void testSendMessageConnetionIsClosed() throws Exception {     when(defaultWebsocket1.getSession()).thenReturn(session).     when(session.isOpen()).thenReturn(false).     websocketProducer.sendMessage(defaultWebsocket1, MESSAGE).     InOrder inOrder = inOrder(endpoint, store, session, defaultWebsocket1, defaultWebsocket2, exchange, inMessage, remoteEndpoint).     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verifyNoMoreInteractions(). }
false;public;0;9;;@Test public void testIsSendToAllSet() {     when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class)).thenReturn(true, false).     assertTrue(websocketProducer.isSendToAllSet(inMessage)).     assertFalse(websocketProducer.isSendToAllSet(inMessage)).     InOrder inOrder = inOrder(inMessage).     inOrder.verify(inMessage, times(2)).getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;8;;@Test public void testIsSendToAllSetHeaderNull() {     when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class)).thenReturn(null).     assertFalse(websocketProducer.isSendToAllSet(inMessage)).     InOrder inOrder = inOrder(inMessage).     inOrder.verify(inMessage, times(1)).getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class).     inOrder.verifyNoMoreInteractions(). }
false;public;0;22;;@Test public void testSendToAll() throws Exception {     when(store.getAll()).thenReturn(sockets).     when(defaultWebsocket1.getSession()).thenReturn(session).     when(defaultWebsocket2.getSession()).thenReturn(session).     when(session.getRemote()).thenReturn(remoteEndpoint).     when(session.isOpen()).thenReturn(true).     websocketProducer.sendToAll(store, MESSAGE, exchange).     InOrder inOrder = inOrder(store, session, defaultWebsocket1, defaultWebsocket2, remoteEndpoint).     inOrder.verify(store, times(1)).getAll().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verify(defaultWebsocket2, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket2, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verifyNoMoreInteractions(). }
false;public;0;31;;@Test public void testSendToAllWithException() throws Exception {     when(exchange.getIn()).thenReturn(inMessage).     when(inMessage.getMandatoryBody()).thenReturn(MESSAGE).     when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL, false, Boolean.class)).thenReturn(true).     when(store.getAll()).thenReturn(sockets).     when(defaultWebsocket1.getSession()).thenReturn(session).     when(defaultWebsocket2.getSession()).thenReturn(session).     when(session.getRemote()).thenReturn(remoteEndpoint).     when(session.isOpen()).thenReturn(true).     when(remoteEndpoint.sendStringByFuture(MESSAGE)).thenReturn(future).     try {         websocketProducer.process(exchange).         fail("Exception expected").     } catch (Exception e) {     // expected     }     InOrder inOrder = inOrder(store, session, defaultWebsocket1, defaultWebsocket2, remoteEndpoint).     inOrder.verify(store, times(1)).getAll().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket1, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verify(defaultWebsocket2, times(1)).getSession().     inOrder.verify(session, times(1)).isOpen().     inOrder.verify(defaultWebsocket2, times(1)).getSession().     inOrder.verify(remoteEndpoint, times(1)).sendStringByFuture(MESSAGE).     inOrder.verifyNoMoreInteractions(). }
