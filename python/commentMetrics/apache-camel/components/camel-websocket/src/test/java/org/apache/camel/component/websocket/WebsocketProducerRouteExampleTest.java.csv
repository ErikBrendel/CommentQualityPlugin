commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     port = AvailablePortFinder.getNextAvailable(16200).     super.setUp().     received.clear().     latch = new CountDownLatch(1). }
false;public;1;6;;@Override public void onMessage(String message) {     received.add(message).     log.info("received --> " + message).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;1;3;;@Override public void onClose(WebSocket websocket) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;0;42;;@Test public void testWSHttpCall() throws Exception {     AsyncHttpClient c = new DefaultAsyncHttpClient().     WebSocket websocket = c.prepareGet("ws://localhost:" + port + "/shop").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {          @Override         public void onMessage(String message) {             received.add(message).             log.info("received --> " + message).             latch.countDown().         }          @Override         public void onOpen(WebSocket websocket) {         }          @Override         public void onClose(WebSocket websocket) {         }          @Override         public void onError(Throwable t) {             t.printStackTrace().         }     }).build()).get().     // Send message to the direct endpoint     producer.sendBodyAndHeader("Beer on stock at Apache Mall", WebsocketConstants.SEND_TO_ALL, "true").     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertEquals(1, received.size()).     Object r = received.get(0).     assertTrue(r instanceof String).     assertEquals("Beer on stock at Apache Mall", r).     websocket.close().     c.close(). }
false;public;1;6;;@Override public void onMessage(byte[] message) {     received.add(message).     log.info("received --> " + Arrays.toString(message)).     latch.countDown(). }
false;public;1;3;;@Override public void onOpen(WebSocket websocket) { }
false;public;1;3;;@Override public void onClose(WebSocket websocket) { }
false;public;1;4;;@Override public void onError(Throwable t) {     t.printStackTrace(). }
false;public;0;43;;@Test public void testWSBytesHttpCall() throws Exception {     AsyncHttpClient c = new DefaultAsyncHttpClient().     WebSocket websocket = c.prepareGet("ws://localhost:" + port + "/shop").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {          @Override         public void onMessage(byte[] message) {             received.add(message).             log.info("received --> " + Arrays.toString(message)).             latch.countDown().         }          @Override         public void onOpen(WebSocket websocket) {         }          @Override         public void onClose(WebSocket websocket) {         }          @Override         public void onError(Throwable t) {             t.printStackTrace().         }     }).build()).get().     // Send message to the direct endpoint     byte[] testmessage = "Beer on stock at Apache Mall".getBytes("utf-8").     producer.sendBodyAndHeader(testmessage, WebsocketConstants.SEND_TO_ALL, "true").     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertEquals(1, received.size()).     Object r = received.get(0).     assertTrue(r instanceof byte[]).     assertArrayEquals(testmessage, (byte[]) r).     websocket.close().     c.close(). }
false;public;0;8;;public void configure() {     WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent("websocket").     websocketComponent.setMaxThreads(25).     websocketComponent.setMinThreads(1).     from("direct:shop").log(">>> Message received from Shopping center : ${body}").to("websocket://localhost:" + port + "/shop"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent("websocket").             websocketComponent.setMaxThreads(25).             websocketComponent.setMinThreads(1).             from("direct:shop").log(">>> Message received from Shopping center : ${body}").to("websocket://localhost:" + port + "/shop").         }     }. }
