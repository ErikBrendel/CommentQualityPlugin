commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSoapPayloadBean() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().contains("<inputReportIncident>").     mock.message(0).body().contains("<incidentId>01</incidentId>").     mock.message(0).body().contains("<givenName>John</givenName>").     mock.message(0).body().endsWith("</inputReportIncident></payload>").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file:src/test/resources/?fileName=payload.xml&noop=true").bean(SoapPayloadBean.class).to("log:xml", "mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:src/test/resources/?fileName=payload.xml&noop=true").bean(SoapPayloadBean.class).to("log:xml", "mock:result").         }     }. }
