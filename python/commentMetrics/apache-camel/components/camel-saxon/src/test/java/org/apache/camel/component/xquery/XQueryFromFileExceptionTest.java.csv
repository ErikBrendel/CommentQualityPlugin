commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/xquery").     super.setUp(). }
false;public;0;19;;@Test public void testXQueryFromFileExceptionOk() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(0).     String body = "<person user='James'><firstName>James</firstName>" + "<lastName>Strachan</lastName><city>London</city></person>".     template.sendBodyAndHeader("file:target/xquery", body, Exchange.FILE_NAME, "hello.xml").     assertMockEndpointsSatisfied().     Thread.sleep(500).     File file = new File("target/xquery/hello.xml").     assertFalse("File should not exists " + file, file.exists()).     file = new File("target/xquery/ok/hello.xml").     assertTrue("File should exists " + file, file.exists()). }
false;public;0;20;;@Test public void testXQueryFromFileExceptionFail() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:error").expectedMessageCount(1).     // the last tag is not ended properly     String body = "<person user='James'><firstName>James</firstName>" + "<lastName>Strachan</lastName><city>London</city></person".     template.sendBodyAndHeader("file:target/xquery", body, Exchange.FILE_NAME, "hello2.xml").     assertMockEndpointsSatisfied().     Thread.sleep(500).     File file = new File("target/xquery/hello2.xml").     assertFalse("File should not exists " + file, file.exists()).     file = new File("target/xquery/error/hello2.xml").     assertTrue("File should exists " + file, file.exists()). }
false;public;0;9;;@Override public void configure() throws Exception {     from("file:target/xquery?moveFailed=error&move=ok").onException(Exception.class).to("mock:error").end().to("xquery:org/apache/camel/component/xquery/myTransform.xquery").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/xquery?moveFailed=error&move=ok").onException(Exception.class).to("mock:error").end().to("xquery:org/apache/camel/component/xquery/myTransform.xquery").to("mock:result").         }     }. }
