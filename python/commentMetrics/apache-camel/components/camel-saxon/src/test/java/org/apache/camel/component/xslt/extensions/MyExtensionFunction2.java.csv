commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public StructuredQName getFunctionQName() {     return new StructuredQName("", "http://mytest/", "myExtensionFunction2"). }
false;public;0;4;;@Override public int getMinimumNumberOfArguments() {     return 1. }
false;public;0;4;;@Override public int getMaximumNumberOfArguments() {     return 2. }
false;public;0;4;;@Override public SequenceType[] getArgumentTypes() {     return new SequenceType[] { SequenceType.SINGLE_STRING, SequenceType.OPTIONAL_STRING }. }
false;public;1;5;;@Override public SequenceType getResultType(SequenceType[] suppliedArgumentTypes) {     int resultCardinality = 1.     return SequenceType.makeSequenceType(SequenceType.SINGLE_STRING.getPrimaryType(), resultCardinality). }
false;public;2;19;;@Override public Sequence call(XPathContext xPathContext, Sequence[] arguments) throws XPathException {     // 1st argument (mandatory, index 0)     StringValue arg1 = (StringValue) arguments[0].iterate().next().     String arg1Str = arg1.getStringValue().     // 2nd argument (optional, index 1)     String arg2Str = "".     if (arguments.length > 1) {         StringValue arg2 = (StringValue) arguments[1].iterate().next().         arg2Str = arg2.getStringValue().     }     // Functionality goes here     String resultStr = arg1Str + arg2Str.     Item result = new StringValue(resultStr).     return SequenceTool.toLazySequence(SingletonIterator.makeIterator(result)). }
false;public;0;26;;@Override public ExtensionFunctionCall makeCallExpression() {     return new ExtensionFunctionCall() {          private static final long serialVersionUID = 1L.          @Override         public Sequence call(XPathContext xPathContext, Sequence[] arguments) throws XPathException {             // 1st argument (mandatory, index 0)             StringValue arg1 = (StringValue) arguments[0].iterate().next().             String arg1Str = arg1.getStringValue().             // 2nd argument (optional, index 1)             String arg2Str = "".             if (arguments.length > 1) {                 StringValue arg2 = (StringValue) arguments[1].iterate().next().                 arg2Str = arg2.getStringValue().             }             // Functionality goes here             String resultStr = arg1Str + arg2Str.             Item result = new StringValue(resultStr).             return SequenceTool.toLazySequence(SingletonIterator.makeIterator(result)).         }     }. }
