commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void run() {     int start = threadCount * 200.     for (int i = 0. i < 200. i++) {         try {             // do some random sleep to simulate spread in user activity             Thread.sleep(new Random().nextInt(10)).         } catch (InterruptedException e) {         // ignore         }         template.sendBody(uri, "<person><id>" + (start + i + 1) + "</id><name>James</name></person>").     } }
false;public;0;34;;@Test public void testConcurrency() throws Exception {     int total = 1000.     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(total).     // setup a task executor to be able send the messages in parallel     ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor().     executor.setCorePoolSize(5).     executor.afterPropertiesSet().     for (int i = 0. i < 5. i++) {         final int threadCount = i.         executor.execute(new Runnable() {              public void run() {                 int start = threadCount * 200.                 for (int i = 0. i < 200. i++) {                     try {                         // do some random sleep to simulate spread in user activity                         Thread.sleep(new Random().nextInt(10)).                     } catch (InterruptedException e) {                     // ignore                     }                     template.sendBody(uri, "<person><id>" + (start + i + 1) + "</id><name>James</name></person>").                 }             }         }).     }     mock.assertNoDuplicates(body()).     assertMockEndpointsSatisfied().     executor.shutdown(). }
false;public;0;8;;public void configure() throws Exception {     // no retry as we want every failure to submerge     errorHandler(noErrorHandler()).     from(uri).transform().xquery("/person/id", String.class).to("mock:result"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // no retry as we want every failure to submerge             errorHandler(noErrorHandler()).             from(uri).transform().xquery("/person/id", String.class).to("mock:result").         }     }. }
