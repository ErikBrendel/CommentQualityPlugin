commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testSendMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(1).     template.sendBody("direct:start", "<person name='James' city='London'/>").     resultEndpoint.assertIsSatisfied(). }
false;public;0;9;;@Test public void testSendNotMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(0).     template.sendBody("direct:start", "<person name='Hiram' city='Tampa'/>").     resultEndpoint.assertIsSatisfied(). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;5;;public void configure() {     // START SNIPPET: example     from("direct:start").filter().xquery("/person[@name='James']").to("mock:result"). // END SNIPPET: example }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:start").filter().xquery("/person[@name='James']").to("mock:result").         // END SNIPPET: example         }     }. }
