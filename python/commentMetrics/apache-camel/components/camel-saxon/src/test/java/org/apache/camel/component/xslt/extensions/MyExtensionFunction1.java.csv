commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public StructuredQName getFunctionQName() {     return new StructuredQName("", "http://mytest/", "myExtensionFunction1"). }
false;public;0;4;;@Override public int getMinimumNumberOfArguments() {     return 2. }
false;public;0;4;;@Override public int getMaximumNumberOfArguments() {     return 2. }
false;public;0;4;;@Override public SequenceType[] getArgumentTypes() {     return new SequenceType[] { SequenceType.SINGLE_INTEGER, SequenceType.SINGLE_INTEGER }. }
false;public;1;5;;@Override public SequenceType getResultType(SequenceType[] suppliedArgumentTypes) {     int resultCardinality = 1.     return SequenceType.makeSequenceType(SequenceType.SINGLE_INTEGER.getPrimaryType(), resultCardinality). }
false;public;2;16;;@Override public Sequence call(XPathContext xPathContext, Sequence[] arguments) throws XPathException {     // 1st argument (mandatory, index 0)     Int64Value arg1 = (Int64Value) arguments[0].iterate().next().     int arg1Int = arg1.getDecimalValue().toBigInteger().intValue().     // 2nd argument (mandatory, index 1)     Int64Value arg2 = (Int64Value) arguments[1].iterate().next().     int arg2Int = arg2.getDecimalValue().toBigInteger().intValue().     // Functionality goes here     int resultInt = arg1Int + arg2Int.     Item result = new Int64Value(resultInt).     return SequenceTool.toLazySequence(SingletonIterator.makeIterator(result)). }
false;public;0;23;;@Override public ExtensionFunctionCall makeCallExpression() {     return new ExtensionFunctionCall() {          private static final long serialVersionUID = 1L.          @Override         public Sequence call(XPathContext xPathContext, Sequence[] arguments) throws XPathException {             // 1st argument (mandatory, index 0)             Int64Value arg1 = (Int64Value) arguments[0].iterate().next().             int arg1Int = arg1.getDecimalValue().toBigInteger().intValue().             // 2nd argument (mandatory, index 1)             Int64Value arg2 = (Int64Value) arguments[1].iterate().next().             int arg2Int = arg2.getDecimalValue().toBigInteger().intValue().             // Functionality goes here             int resultInt = arg1Int + arg2Int.             Item result = new Int64Value(resultInt).             return SequenceTool.toLazySequence(SingletonIterator.makeIterator(result)).         }     }. }
