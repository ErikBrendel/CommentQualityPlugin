# id;timestamp;commentText;codeText;commentWords;codeWords
ParameterDynamicTest -> @Test     public void testBooleanParameter() throws Exception;1516611917;This is what Camel XQueryBuilder should execute to allow Saxon to bind the parameter type properly.;@Test_    public void testBooleanParameter() throws Exception {_        context.setParameter(StructuredQName.fromClarkName("extParam"), BooleanValue.TRUE)__        Item result = query.iterator(context).next()__        assertTrue(result instanceof BooleanValue)__        assertEquals(true, ((BooleanValue) result).getBooleanValue())__    };this,is,what,camel,xquery,builder,should,execute,to,allow,saxon,to,bind,the,parameter,type,properly;test,public,void,test,boolean,parameter,throws,exception,context,set,parameter,structured,qname,from,clark,name,ext,param,boolean,value,true,item,result,query,iterator,context,next,assert,true,result,instanceof,boolean,value,assert,equals,true,boolean,value,result,get,boolean,value
ParameterDynamicTest -> @Test     public void testBooleanParameter() throws Exception;1516611917;This is what Camel XQueryBuilder should execute to allow Saxon to bind the parameter type properly.;@Test_    public void testBooleanParameter() throws Exception {_        context.setParameter(StructuredQName.fromClarkName("extParam"), BooleanValue.TRUE)__        Item result = query.iterator(context).next()__        assertTrue(result instanceof BooleanValue)__        assertEquals(true, ((BooleanValue) result).getBooleanValue())__    };this,is,what,camel,xquery,builder,should,execute,to,allow,saxon,to,bind,the,parameter,type,properly;test,public,void,test,boolean,parameter,throws,exception,context,set,parameter,structured,qname,from,clark,name,ext,param,boolean,value,true,item,result,query,iterator,context,next,assert,true,result,instanceof,boolean,value,assert,equals,true,boolean,value,result,get,boolean,value
ParameterDynamicTest -> @Test     public void testBooleanParameter() throws Exception;1540108163;This is what Camel XQueryBuilder should execute to allow Saxon to bind the parameter type properly.;@Test_    public void testBooleanParameter() throws Exception {_        context.setParameter(StructuredQName.fromClarkName("extParam"), BooleanValue.TRUE)__        Item result = query.iterator(context).next()__        assertTrue(result instanceof BooleanValue)__        assertEquals(true, ((BooleanValue) result).getBooleanValue())__    };this,is,what,camel,xquery,builder,should,execute,to,allow,saxon,to,bind,the,parameter,type,properly;test,public,void,test,boolean,parameter,throws,exception,context,set,parameter,structured,qname,from,clark,name,ext,param,boolean,value,true,item,result,query,iterator,context,next,assert,true,result,instanceof,boolean,value,assert,equals,true,boolean,value,result,get,boolean,value
ParameterDynamicTest -> @Test     public void testObjectParameter() throws Exception;1516611917;This is what Camel XQueryBuilder executes, which leads to a parameter binding type error.;@Test_    public void testObjectParameter() throws Exception {_        context.setParameter(StructuredQName.fromClarkName("extParam"), new ObjectValue<>(true))__        try {_            Item result = query.iterator(context).next()__            fail("Should have thrown an exception")__            assertTrue(result instanceof BooleanValue)__            assertEquals(true, ((BooleanValue) result).getBooleanValue())__        } catch (Exception e) {_            _        }_    };this,is,what,camel,xquery,builder,executes,which,leads,to,a,parameter,binding,type,error;test,public,void,test,object,parameter,throws,exception,context,set,parameter,structured,qname,from,clark,name,ext,param,new,object,value,true,try,item,result,query,iterator,context,next,fail,should,have,thrown,an,exception,assert,true,result,instanceof,boolean,value,assert,equals,true,boolean,value,result,get,boolean,value,catch,exception,e
ParameterDynamicTest -> @Test     public void testObjectParameter() throws Exception;1516611917;This is what Camel XQueryBuilder executes, which leads to a parameter binding type error.;@Test_    public void testObjectParameter() throws Exception {_        context.setParameter(StructuredQName.fromClarkName("extParam"), new ObjectValue<>(true))__        try {_            Item result = query.iterator(context).next()__            fail("Should have thrown an exception")__            assertTrue(result instanceof BooleanValue)__            assertEquals(true, ((BooleanValue) result).getBooleanValue())__        } catch (Exception e) {_            _        }_    };this,is,what,camel,xquery,builder,executes,which,leads,to,a,parameter,binding,type,error;test,public,void,test,object,parameter,throws,exception,context,set,parameter,structured,qname,from,clark,name,ext,param,new,object,value,true,try,item,result,query,iterator,context,next,fail,should,have,thrown,an,exception,assert,true,result,instanceof,boolean,value,assert,equals,true,boolean,value,result,get,boolean,value,catch,exception,e
ParameterDynamicTest -> @Test     public void testObjectParameter() throws Exception;1540108163;This is what Camel XQueryBuilder executes, which leads to a parameter binding type error.;@Test_    public void testObjectParameter() throws Exception {_        context.setParameter(StructuredQName.fromClarkName("extParam"), new ObjectValue<>(true))__        try {_            Item result = query.iterator(context).next()__            fail("Should have thrown an exception")__            assertTrue(result instanceof BooleanValue)__            assertEquals(true, ((BooleanValue) result).getBooleanValue())__        } catch (Exception e) {_            _        }_    };this,is,what,camel,xquery,builder,executes,which,leads,to,a,parameter,binding,type,error;test,public,void,test,object,parameter,throws,exception,context,set,parameter,structured,qname,from,clark,name,ext,param,new,object,value,true,try,item,result,query,iterator,context,next,fail,should,have,thrown,an,exception,assert,true,result,instanceof,boolean,value,assert,equals,true,boolean,value,result,get,boolean,value,catch,exception,e
