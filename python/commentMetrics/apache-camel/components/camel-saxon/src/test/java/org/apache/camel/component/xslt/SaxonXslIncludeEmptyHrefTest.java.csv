commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;// @Ignore("To Fix") ;// TODO: fix // @Ignore("To Fix") @Test public void testXsltOutput() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><MyDate>February</MyDate>").     mock.message(0).body().isInstanceOf(String.class).     template.sendBody("direct:start", "<root>1</root>").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("xslt:org/apache/camel/component/xslt/transform_includes_data.xsl").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("xslt:org/apache/camel/component/xslt/transform_includes_data.xsl").to("mock:result").         }     }. }
