commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     conf = new Configuration().     conf.registerExtensionFunction(new SimpleExtension()).     jndi.bind("saxonConf", conf).     return jndi. }
false;public;0;9;;@Test public void testWithExtension() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<transformed extension-function-render=\"arg1[test]\"/>").     template.sendBody("direct:start", "<body>test</body>").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("xquery:org/apache/camel/component/xquery/transformWithExtension.xquery?configuration=#saxonConf").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("xquery:org/apache/camel/component/xquery/transformWithExtension.xquery?configuration=#saxonConf").to("mock:result").         }     }. }
false;public;0;4;;@Override public SequenceType[] getArgumentTypes() {     return new SequenceType[] { SequenceType.SINGLE_STRING }. }
false;public;1;4;;@Override public SequenceType getResultType(SequenceType[] suppliedArgumentTypes) {     return SequenceType.SINGLE_STRING. }
false;public;0;4;;@Override public StructuredQName getFunctionQName() {     return new StructuredQName("efx", "http://test/saxon/ext", "simple"). }
false;public;2;9;;@Override public Sequence call(XPathContext xPathContext, Sequence[] sequences) throws XPathException {     // get value of first arg passed to the function     Item arg1 = sequences[0].head().     String arg1Val = arg1.getStringValue().     // return a altered version of the first arg     return new StringValue("arg1[" + arg1Val + "]"). }
false;public;0;17;;@Override public ExtensionFunctionCall makeCallExpression() {     return new ExtensionFunctionCall() {          private static final long serialVersionUID = 1L.          @Override         public Sequence call(XPathContext xPathContext, Sequence[] sequences) throws XPathException {             // get value of first arg passed to the function             Item arg1 = sequences[0].head().             String arg1Val = arg1.getStringValue().             // return a altered version of the first arg             return new StringValue("arg1[" + arg1Val + "]").         }     }. }
