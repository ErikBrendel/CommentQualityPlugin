commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testXQueryFromFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file:target/xquery", "<mail><subject>Hey</subject><body>Hello world!</body></mail>", Exchange.FILE_NAME, "body.xml").     assertMockEndpointsSatisfied().     List<Exchange> list = mock.getReceivedExchanges().     Exchange exchange = list.get(0).     String xml = exchange.getIn().getBody(String.class).     assertNotNull("The transformed XML should not be null", xml).     assertEquals("transformed", "<transformed subject=\"Hey\"><mail><subject>Hey</subject>" + "<body>Hello world!</body></mail></transformed>", xml). }
false;public;0;5;;@Before public void setUp() throws Exception {     deleteDirectory("target/xquery").     super.setUp(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file:target/xquery").to("xquery:org/apache/camel/component/xquery/transform.xquery").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/xquery").to("xquery:org/apache/camel/component/xquery/transform.xquery").to("mock:result").         }     }. }
