commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override @Before public void setUp() throws Exception {     if (!isJavaVendor("ibm")) {         // Force using the JAXP default implementation, because having Saxon in the classpath will automatically make JAXP use it         // because of Service Provider discovery (this does not happen in OSGi because the META-INF/services package is not exported         oldPropertyValue = System.setProperty(KEY, "com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl").     } else {         jvmAdequate = false.     }     super.setUp(). }
false;public;0;10;;@Override @After public void tearDown() throws Exception {     if (oldPropertyValue != null) {         System.setProperty(KEY, oldPropertyValue).     } else {         System.clearProperty(KEY).     }     super.tearDown(). }
false;protected;0;3;;protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/language/xpath/XPathLanguageTest.xml"). }
false;public;0;16;;@Test public void testSpringDSLXPathSaxonFlag() throws Exception {     if (!jvmAdequate) {         return.     }     MockEndpoint mockEndpoint = getMockEndpoint("mock:testSaxonWithFlagResult").     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:testSaxonWithFlag", "<a>Hello|there|Camel</a>").     assertMockEndpointsSatisfied().     Exchange received = mockEndpoint.getExchanges().get(0).     Object body = received.getIn().getBody().     assertEquals("Hello", body). }
false;public;0;16;;@Test public void testSpringDSLXPathFactory() throws Exception {     if (!jvmAdequate) {         return.     }     MockEndpoint mockEndpoint = getMockEndpoint("mock:testSaxonWithFactoryResult").     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:testSaxonWithFactory", "<a>Hello|there|Camel</a>").     assertMockEndpointsSatisfied().     Exchange received = mockEndpoint.getExchanges().get(0).     Object body = received.getIn().getBody().     assertEquals("Hello", body). }
false;public;0;17;;@Ignore("See http://www.saxonica.com/documentation/index.html#!xpath-api/jaxp-xpath/factory") @Test public void testSpringDSLXPathObjectModel() throws Exception {     if (!jvmAdequate) {         return.     }     MockEndpoint mockEndpoint = getMockEndpoint("mock:testSaxonWithObjectModelResult").     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:testSaxonWithObjectModel", "<a>Hello|there|Camel</a>").     assertMockEndpointsSatisfied().     Exchange received = mockEndpoint.getExchanges().get(0).     Object body = received.getIn().getBody().     assertEquals("Hello", body). }
false;public;0;13;;@Test public void testSpringDSLXPathSaxonFlagPredicate() throws Exception {     if (!jvmAdequate) {         return.     }     MockEndpoint mockEndpoint = getMockEndpoint("mock:testSaxonWithFlagResultPredicate").     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:testSaxonWithFlagPredicate", "<a>Hello|there|Camel</a>").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testSpringDSLXPathFactoryPredicate() throws Exception {     if (!jvmAdequate) {         return.     }     MockEndpoint mockEndpoint = getMockEndpoint("mock:testSaxonWithFactoryResultPredicate").     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:testSaxonWithFactoryPredicate", "<a>Hello|there|Camel</a>").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Ignore("See http://www.saxonica.com/documentation/index.html#!xpath-api/jaxp-xpath/factory") @Test public void testSpringDSLXPathObjectModelPredicate() throws Exception {     if (!jvmAdequate) {         return.     }     MockEndpoint mockEndpoint = getMockEndpoint("mock:testSaxonWithObjectModelResultPredicate").     mockEndpoint.expectedMessageCount(1).     template.sendBody("direct:testSaxonWithObjectModelPredicate", "<a>Hello|there|Camel</a>").     assertMockEndpointsSatisfied(). }
