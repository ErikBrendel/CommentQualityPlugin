commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override @Before public void setUp() throws Exception {     if (!isJavaVendor("ibm")) {         // Force using the JAXP default implementation, because having Saxon in the classpath will automatically make JAXP use it         // because of Service Provider discovery (this does not happen in OSGi because the META-INF/services package is not exported         oldPropertyValue = System.setProperty(KEY, "com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl").     } else {         jvmAdequate = false.     }     super.setUp(). }
false;public;0;10;;@Override @After public void tearDown() throws Exception {     if (oldPropertyValue != null) {         System.setProperty(KEY, oldPropertyValue).     } else {         System.clearProperty(KEY).     }     super.tearDown(). }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/language/xpath/XPathLanguageDefaultSettingsTest.xml"). }
false;public;0;16;;@Test public void testSpringDSLXPathLanguageDefaultSettings() throws Exception {     if (!jvmAdequate) {         return.     }     MockEndpoint mockEndpointResult = getMockEndpoint("mock:testDefaultXPathSettingsResult").     MockEndpoint mockEndpointException = getMockEndpoint("mock:testDefaultXPathSettingsResultException").     mockEndpointResult.expectedMessageCount(1).     mockEndpointException.expectedMessageCount(0).     template.sendBody("seda:testDefaultXPathSettings", "<a>Hello|there|Camel</a>").     assertMockEndpointsSatisfied(). }
