# id;timestamp;commentText;codeText;commentWords;codeWords
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1195064179;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = in.getBody(Item.class)__        Source source = null__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        }_        else {_            source = in.getBody(Source.class)__            if (source == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,source,source,null,if,item,null,dynamic,query,context,set,context,item,item,else,source,in,get,body,source,class,if,source,null,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1206580891;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = in.getBody(Item.class)__        Source source = null__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            source = in.getBody(Source.class)__            if (source == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,source,source,null,if,item,null,dynamic,query,context,set,context,item,item,else,source,in,get,body,source,class,if,source,null,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1215613182;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = in.getBody(Item.class)__        Source source = null__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            source = in.getBody(Source.class)__            if (source == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,source,source,null,if,item,null,dynamic,query,context,set,context,item,item,else,source,in,get,body,source,class,if,source,null,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1215768330;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = in.getBody(Item.class)__        Source source = null__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            source = in.getBody(Source.class)__            if (source == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,source,source,null,if,item,null,dynamic,query,context,set,context,item,item,else,source,in,get,body,source,class,if,source,null,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1216027291;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = in.getBody(Item.class)__        Source source = null__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            source = in.getBody(Source.class)__            if (source == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,source,source,null,if,item,null,dynamic,query,context,set,context,item,item,else,source,in,get,body,source,class,if,source,null,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1216030661;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = in.getBody(Item.class)__        Source source = null__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            source = in.getBody(Source.class)__            if (source == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,source,source,null,if,item,null,dynamic,query,context,set,context,item,item,else,source,in,get,body,source,class,if,source,null,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1216034160;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = in.getBody(Item.class)__        Source source = null__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            source = in.getBody(Source.class)__            if (source == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,source,source,null,if,item,null,dynamic,query,context,set,context,item,item,else,source,in,get,body,source,class,if,source,null,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1216109058;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = in.getBody(Item.class)__        Source source = null__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            source = in.getBody(Source.class)__            if (source == null) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,source,source,null,if,item,null,dynamic,query,context,set,context,item,item,else,source,in,get,body,source,class,if,source,null,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1222332323;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Source source = null__        try {_            Item item = in.getBody(Item.class)__            dynamicQueryContext.setContextItem(item)__        } catch (NoTypeConversionAvailableException e) {_            try {_                source = in.getBody(Source.class)__            } catch (NoTypeConversionAvailableException e2) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,source,source,null,try,item,item,in,get,body,item,class,dynamic,query,context,set,context,item,item,catch,no,type,conversion,available,exception,e,try,source,in,get,body,source,class,catch,no,type,conversion,available,exception,e2,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1222531060;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Source source = null__        try {_            Item item = in.getBody(Item.class)__            dynamicQueryContext.setContextItem(item)__        } catch (NoTypeConversionAvailableException e) {_            try {_                source = in.getBody(Source.class)__            } catch (NoTypeConversionAvailableException e2) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,source,source,null,try,item,item,in,get,body,item,class,dynamic,query,context,set,context,item,item,catch,no,type,conversion,available,exception,e,try,source,in,get,body,source,class,catch,no,type,conversion,available,exception,e2,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1225498898;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Source source = null__        try {_            Item item = in.getBody(Item.class)__            dynamicQueryContext.setContextItem(item)__        } catch (NoTypeConversionAvailableException e) {_            try {_                source = in.getBody(Source.class)__            } catch (NoTypeConversionAvailableException e2) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,source,source,null,try,item,item,in,get,body,item,class,dynamic,query,context,set,context,item,item,catch,no,type,conversion,available,exception,e,try,source,in,get,body,source,class,catch,no,type,conversion,available,exception,e2,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1226063471;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Source source = null__        try {_            Item item = in.getBody(Item.class)__            dynamicQueryContext.setContextItem(item)__        } catch (NoTypeConversionAvailableException e) {_            try {_                source = in.getBody(Source.class)__            } catch (NoTypeConversionAvailableException e2) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,source,source,null,try,item,item,in,get,body,item,class,dynamic,query,context,set,context,item,item,catch,no,type,conversion,available,exception,e,try,source,in,get,body,source,class,catch,no,type,conversion,available,exception,e2,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1233739159;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Source source = null__        try {_            Item item = in.getBody(Item.class)__            dynamicQueryContext.setContextItem(item)__        } catch (NoTypeConversionAvailableException e) {_            try {_                source = in.getBody(Source.class)__            } catch (NoTypeConversionAvailableException e2) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,source,source,null,try,item,item,in,get,body,item,class,dynamic,query,context,set,context,item,item,catch,no,type,conversion,available,exception,e,try,source,in,get,body,source,class,catch,no,type,conversion,available,exception,e2,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1234358169;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Source source = null__        try {_            Item item = in.getBody(Item.class)__            dynamicQueryContext.setContextItem(item)__        } catch (NoTypeConversionAvailableException e) {_            try {_                source = in.getBody(Source.class)__            } catch (NoTypeConversionAvailableException e2) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }__        configureQuery(dynamicQueryContext, exchange)__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,source,source,null,try,item,item,in,get,body,item,class,dynamic,query,context,set,context,item,item,catch,no,type,conversion,available,exception,e,try,source,in,get,body,source,class,catch,no,type,conversion,available,exception,e2,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1234492551;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Source source = null__        try {_            Item item = in.getBody(Item.class)__            dynamicQueryContext.setContextItem(item)__        } catch (NoTypeConversionAvailableException e) {_            try {_                source = in.getBody(Source.class)__            } catch (NoTypeConversionAvailableException e2) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,source,source,null,try,item,item,in,get,body,item,class,dynamic,query,context,set,context,item,item,catch,no,type,conversion,available,exception,e,try,source,in,get,body,source,class,catch,no,type,conversion,available,exception,e2,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1234604144;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Source source = null__        try {_            Item item = in.getBody(Item.class)__            dynamicQueryContext.setContextItem(item)__        } catch (NoTypeConversionAvailableException e) {_            try {_                source = in.getBody(Source.class)__            } catch (NoTypeConversionAvailableException e2) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("No body available on exchange so using an empty document: " + exchange)__                }_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,source,source,null,try,item,item,in,get,body,item,class,dynamic,query,context,set,context,item,item,catch,no,type,conversion,available,exception,e,try,source,in,get,body,source,class,catch,no,type,conversion,available,exception,e2,if,log,is,debug,enabled,log,debug,no,body,available,on,exchange,so,using,an,empty,document,exchange,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1237457114;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1240035322;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1240575841;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1240578555;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1240935335;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1255544144;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1257986501;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1265799465;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1272423433;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,source,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1274693059;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toDOMSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,domsource,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1294395638;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toDOMSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,domsource,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1296546062;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toDOMSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,domsource,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1297975937;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                source = converter.toDOMSource(converter.createDocument())__            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,source,converter,to,domsource,converter,create,document,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1302256207;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getMandatoryBody(Source.class)__            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,mandatory,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1302257515;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                Object body = in.getBody()___                _                if (body instanceof GenericFile) {_                    _                    InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body)__                    source = converter.toDOMSource(is)__                } else if (body instanceof BeanInvocation) {_                    _                    BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                    if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                        _                        source = null__                    }_                } else if (body instanceof String) {_                    source = converter.toDOMSource(body.toString())__                } else {_                    _                    InputStream is = in.getBody(InputStream.class)__                    if (is != null) {_                        source = converter.toDOMSource(is)__                    }_                    _                    if (source == null) {_                        String s = in.getBody(String.class)__                        if (s != null) {_                            source = converter.toDOMSource(s)__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }_            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,object,body,in,get,body,if,body,instanceof,generic,file,input,stream,is,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,source,converter,to,domsource,is,else,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,else,if,body,instanceof,string,source,converter,to,domsource,body,to,string,else,input,stream,is,in,get,body,input,stream,class,if,is,null,source,converter,to,domsource,is,if,source,null,string,s,in,get,body,string,class,if,s,null,source,converter,to,domsource,s,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1307685726;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                Object body = in.getBody()___                _                if (body instanceof GenericFile) {_                    _                    InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body)__                    source = converter.toDOMSource(is)__                } else if (body instanceof BeanInvocation) {_                    _                    BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                    if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                        _                        source = null__                    }_                } else if (body instanceof String) {_                    source = converter.toDOMSource(body.toString())__                } else {_                    _                    InputStream is = in.getBody(InputStream.class)__                    if (is != null) {_                        source = converter.toDOMSource(is)__                    }_                    _                    if (source == null) {_                        String s = in.getBody(String.class)__                        if (s != null) {_                            source = converter.toDOMSource(s)__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }_            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,object,body,in,get,body,if,body,instanceof,generic,file,input,stream,is,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,source,converter,to,domsource,is,else,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,else,if,body,instanceof,string,source,converter,to,domsource,body,to,string,else,input,stream,is,in,get,body,input,stream,class,if,is,null,source,converter,to,domsource,is,if,source,null,string,s,in,get,body,string,class,if,s,null,source,converter,to,domsource,s,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1312113354;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                Object body = in.getBody()___                _                if (body instanceof GenericFile) {_                    _                    InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body)__                    source = converter.toDOMSource(is)__                } else if (body instanceof BeanInvocation) {_                    _                    BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                    if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                        _                        source = null__                    }_                } else if (body instanceof String) {_                    source = converter.toDOMSource(body.toString())__                } else {_                    _                    InputStream is = in.getBody(InputStream.class)__                    if (is != null) {_                        source = converter.toDOMSource(is)__                    }_                    _                    if (source == null) {_                        String s = in.getBody(String.class)__                        if (s != null) {_                            source = converter.toDOMSource(s)__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }_            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,object,body,in,get,body,if,body,instanceof,generic,file,input,stream,is,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,source,converter,to,domsource,is,else,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,else,if,body,instanceof,string,source,converter,to,domsource,body,to,string,else,input,stream,is,in,get,body,input,stream,class,if,is,null,source,converter,to,domsource,is,if,source,null,string,s,in,get,body,string,class,if,s,null,source,converter,to,domsource,s,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1314283234;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                Object body = in.getBody()___                _                if (body instanceof GenericFile) {_                    _                    InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body)__                    source = converter.toDOMSource(is)__                } else if (body instanceof BeanInvocation) {_                    _                    BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                    if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                        _                        source = null__                    }_                } else if (body instanceof String) {_                    source = converter.toDOMSource(body.toString())__                } else {_                    _                    InputStream is = in.getBody(InputStream.class)__                    if (is != null) {_                        source = converter.toDOMSource(is)__                    }_                    _                    if (source == null) {_                        String s = in.getBody(String.class)__                        if (s != null) {_                            source = converter.toDOMSource(s)__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }_            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,object,body,in,get,body,if,body,instanceof,generic,file,input,stream,is,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,source,converter,to,domsource,is,else,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,else,if,body,instanceof,string,source,converter,to,domsource,body,to,string,else,input,stream,is,in,get,body,input,stream,class,if,is,null,source,converter,to,domsource,is,if,source,null,string,s,in,get,body,string,class,if,s,null,source,converter,to,domsource,s,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1314622821;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                Object body = in.getBody()___                _                if (body instanceof WrappedFile) {_                    _                    InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body)__                    source = converter.toDOMSource(is)__                } else if (body instanceof BeanInvocation) {_                    _                    BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                    if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                        _                        source = null__                    }_                } else if (body instanceof String) {_                    source = converter.toDOMSource(body.toString())__                } else {_                    _                    InputStream is = in.getBody(InputStream.class)__                    if (is != null) {_                        source = converter.toDOMSource(is)__                    }_                    _                    if (source == null) {_                        String s = in.getBody(String.class)__                        if (s != null) {_                            source = converter.toDOMSource(s)__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }_            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,object,body,in,get,body,if,body,instanceof,wrapped,file,input,stream,is,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,source,converter,to,domsource,is,else,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,else,if,body,instanceof,string,source,converter,to,domsource,body,to,string,else,input,stream,is,in,get,body,input,stream,class,if,is,null,source,converter,to,domsource,is,if,source,null,string,s,in,get,body,string,class,if,s,null,source,converter,to,domsource,s,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1314627998;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Source source = in.getBody(Source.class)__            if (source == null) {_                Object body = in.getBody()___                _                if (body instanceof WrappedFile) {_                    _                    InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body)__                    source = converter.toDOMSource(is)__                } else if (body instanceof BeanInvocation) {_                    _                    BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                    if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                        _                        source = null__                    }_                } else if (body instanceof String) {_                    source = converter.toDOMSource(body.toString())__                } else {_                    _                    InputStream is = in.getBody(InputStream.class)__                    if (is != null) {_                        source = converter.toDOMSource(is)__                    }_                    _                    if (source == null) {_                        String s = in.getBody(String.class)__                        if (s != null) {_                            source = converter.toDOMSource(s)__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }_            }_            DocumentInfo doc = getStaticQueryContext().buildDocument(source)__            dynamicQueryContext.setContextItem(doc)__        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,source,source,in,get,body,source,class,if,source,null,object,body,in,get,body,if,body,instanceof,wrapped,file,input,stream,is,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,source,converter,to,domsource,is,else,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,else,if,body,instanceof,string,source,converter,to,domsource,body,to,string,else,input,stream,is,in,get,body,input,stream,class,if,is,null,source,converter,to,domsource,is,if,source,null,string,s,in,get,body,string,class,if,s,null,source,converter,to,domsource,s,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1319571820;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof WrappedFile) {_                        _                        is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body)__                        source = converter.toDOMSource(is)__                    } else if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = getStaticQueryContext().buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,wrapped,file,is,exchange,get,context,get,type,converter,convert,to,input,stream,class,body,source,converter,to,domsource,is,else,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1319573041;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = getStaticQueryContext().buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1319705571;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = getStaticQueryContext().buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1324569391;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = getStaticQueryContext().buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1324591487;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = getStaticQueryContext().buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1326499990;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = getStaticQueryContext().buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1326623920;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = getStaticQueryContext().buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,get,static,query,context,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1326863193;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1334502428;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1345895340;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()___        Item<?> item = in.getBody(Item.class)__        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = in.getBody()___            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    is = exchange.getIn().getBody(InputStream.class)__                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1346056951;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1346246562;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item<?> item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1346401388;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1346641726;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item<?> item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1347273355;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1353506545;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1373790062;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1373791789;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1376549254;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1474456231;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1474702999;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1475193520;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1480447219;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1482517045;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1486725737;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1516611917;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1516611917;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1524063178;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1537290824;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1540108161;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1540108163;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1544174887;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1545052029;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception;1548679023;Creates a dynamic context for the given exchange;protected DynamicQueryContext createDynamicContext(Exchange exchange) throws Exception {_        Configuration config = getConfiguration()__        DynamicQueryContext dynamicQueryContext = new DynamicQueryContext(config)___        Message in = exchange.getIn()__        Item item = null__        if (ObjectHelper.isNotEmpty(getHeaderName())) {_            item = in.getHeader(getHeaderName(), Item.class)__        } else {_            item = in.getBody(Item.class)__        }_        if (item != null) {_            dynamicQueryContext.setContextItem(item)__        } else {_            Object body = null__            if (ObjectHelper.isNotEmpty(getHeaderName())) {_                body = in.getHeader(getHeaderName())__            } else {_                body = in.getBody()__            }__            _            InputStream is = null__            try {_                Source source__                _                if (isInputStreamNeeded(exchange)) {_                    if (ObjectHelper.isNotEmpty(getHeaderName())) {_                        is = exchange.getIn().getHeader(getHeaderName(), InputStream.class)__                    } else {_                        is = exchange.getIn().getBody(InputStream.class)__                    }_                    source = getSource(exchange, is)__                } else {_                    source = getSource(exchange, body)__                }__                _                if (source == null) {_                    if (body instanceof BeanInvocation) {_                        _                        BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, body)__                        if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {_                            _                            source = null__                        }_                    }_                }__                if (source == null) {_                    _                    throw new NoTypeConversionAvailableException(body, Source.class)__                }__                DocumentInfo doc = config.buildDocument(source)__                dynamicQueryContext.setContextItem(doc)__            } finally {_                _                IOHelper.close(is)__            }_        }_        _        configureQuery(dynamicQueryContext, exchange)__        _        MessageHelper.resetStreamCache(exchange.getIn())__        return dynamicQueryContext__    };creates,a,dynamic,context,for,the,given,exchange;protected,dynamic,query,context,create,dynamic,context,exchange,exchange,throws,exception,configuration,config,get,configuration,dynamic,query,context,dynamic,query,context,new,dynamic,query,context,config,message,in,exchange,get,in,item,item,null,if,object,helper,is,not,empty,get,header,name,item,in,get,header,get,header,name,item,class,else,item,in,get,body,item,class,if,item,null,dynamic,query,context,set,context,item,item,else,object,body,null,if,object,helper,is,not,empty,get,header,name,body,in,get,header,get,header,name,else,body,in,get,body,input,stream,is,null,try,source,source,if,is,input,stream,needed,exchange,if,object,helper,is,not,empty,get,header,name,is,exchange,get,in,get,header,get,header,name,input,stream,class,else,is,exchange,get,in,get,body,input,stream,class,source,get,source,exchange,is,else,source,get,source,exchange,body,if,source,null,if,body,instanceof,bean,invocation,bean,invocation,bi,exchange,get,context,get,type,converter,convert,to,bean,invocation,class,body,if,bi,get,args,null,bi,get,args,length,1,bi,get,args,0,null,source,null,if,source,null,throw,new,no,type,conversion,available,exception,body,source,class,document,info,doc,config,build,document,source,dynamic,query,context,set,context,item,doc,finally,iohelper,close,is,configure,query,dynamic,query,context,exchange,message,helper,reset,stream,cache,exchange,get,in,return,dynamic,query,context
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1233739159;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1234358169;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1234492551;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1234604144;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1237457114;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1240035322;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1240575841;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1240578555;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1240935335;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1255544144;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1257986501;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1265799465;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1272423433;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1274693059;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1294395638;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1296546062;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1297975937;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1302256207;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1302257515;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1307685726;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1312113354;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1314283234;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1314622821;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1314627998;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1319571820;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1319573041;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1319705571;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1324569391;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1324591487;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1326499990;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1326623920;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,new,static,query,context,get,configuration,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1326863193;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1334502428;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1345895340;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1346056951;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1346246562;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1346401388;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1346641726;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1347273355;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1353506545;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)__            configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)___            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1373790062;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setHostLanguage(Configuration.XQUERY)__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}")__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,else,log,debug,using,existing,configuration,configuration,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1373791789;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setHostLanguage(Configuration.XQUERY)__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1376549254;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setHostLanguage(Configuration.XQUERY)__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,host,language,configuration,xquery,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1474456231;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                _                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1474702999;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                _                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1475193520;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                _                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1480447219;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                _                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1482517045;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1486725737;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1516611917;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1516611917;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1524063178;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1537290824;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1540108161;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1540108163;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE)__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,set,strips,white,space,is,strips,all,white,space,whitespace,all,whitespace,ignorable,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1544174887;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.getParseOptions().setSpaceStrippingRule(isStripsAllWhiteSpace() ? AllElementsSpaceStrippingRule.getInstance() : IgnorableSpaceStrippingRule.getInstance())__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,get,parse,options,set,space,stripping,rule,is,strips,all,white,space,all,elements,space,stripping,rule,get,instance,ignorable,space,stripping,rule,get,instance,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1545052029;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.getParseOptions().setSpaceStrippingRule(isStripsAllWhiteSpace() ? AllElementsSpaceStrippingRule.getInstance() : IgnorableSpaceStrippingRule.getInstance())__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                _                boolean invalid = "xml".equals(prefix) || "xmlns".equals(prefix)__                if (!invalid) {_                    LOG.debug("Declaring namespace [prefix: {}, uri: {}]", prefix, uri)__                    staticQueryContext.declareNamespace(prefix, uri)__                    staticQueryContext.setInheritNamespaces(true)__                }_            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,get,parse,options,set,space,stripping,rule,is,strips,all,white,space,all,elements,space,stripping,rule,get,instance,ignorable,space,stripping,rule,get,instance,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,boolean,invalid,xml,equals,prefix,xmlns,equals,prefix,if,invalid,log,debug,declaring,namespace,prefix,uri,prefix,uri,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected synchronized void initialize(Exchange exchange) throws XPathException, IOException;1548679023;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize(Exchange exchange) throws XPathException, IOException {_        _        if (!initialized.get()) {_            LOG.debug("Initializing XQueryBuilder {}", this)__            if (configuration == null) {_                configuration = new Configuration()__                configuration.getParseOptions().setSpaceStrippingRule(isStripsAllWhiteSpace() ? AllElementsSpaceStrippingRule.getInstance() : IgnorableSpaceStrippingRule.getInstance())__                LOG.debug("Created new Configuration {}", configuration)__            } else {_                LOG.debug("Using existing Configuration {}", configuration)__            }__            if (configurationProperties != null && !configurationProperties.isEmpty()) {_                for (Map.Entry<String, Object> entry : configurationProperties.entrySet()) {_                    configuration.setConfigurationProperty(entry.getKey(), entry.getValue())__                }_            }_            staticQueryContext = getConfiguration().newStaticQueryContext()__            if (moduleURIResolver != null) {_                staticQueryContext.setModuleURIResolver(moduleURIResolver)__            }__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                _                boolean invalid = "xml".equals(prefix) || "xmlns".equals(prefix)__                if (!invalid) {_                    LOG.debug("Declaring namespace [prefix: {}, uri: {}]", prefix, uri)__                    staticQueryContext.declareNamespace(prefix, uri)__                    staticQueryContext.setInheritNamespaces(true)__                }_            }_            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }__        _        _        exchange.setProperty("CamelSaxonConfiguration", configuration)__    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,exchange,exchange,throws,xpath,exception,ioexception,if,initialized,get,log,debug,initializing,xquery,builder,this,if,configuration,null,configuration,new,configuration,configuration,get,parse,options,set,space,stripping,rule,is,strips,all,white,space,all,elements,space,stripping,rule,get,instance,ignorable,space,stripping,rule,get,instance,log,debug,created,new,configuration,configuration,else,log,debug,using,existing,configuration,configuration,if,configuration,properties,null,configuration,properties,is,empty,for,map,entry,string,object,entry,configuration,properties,entry,set,configuration,set,configuration,property,entry,get,key,entry,get,value,static,query,context,get,configuration,new,static,query,context,if,module,uriresolver,null,static,query,context,set,module,uriresolver,module,uriresolver,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,boolean,invalid,xml,equals,prefix,xmlns,equals,prefix,if,invalid,log,debug,declaring,namespace,prefix,uri,prefix,uri,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true,exchange,set,property,camel,saxon,configuration,configuration
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1216034160;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", exchange.getOut())__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1216109058;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", exchange.getOut())__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1222332323;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", exchange.getOut())__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1222531060;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", exchange.getOut())__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1225498898;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", exchange.getOut())__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1226063471;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", out)__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1233739159;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", out)__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1234358169;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", out)__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1234492551;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", out)__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1234604144;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", out)__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1237457114;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", out)__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1240035322;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", out)__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1240575841;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", out)__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1240578555;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        Message out = exchange.getOut(false)__        if (out != null && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", out.getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,message,out,exchange,get,out,false,if,out,null,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1240935335;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1255544144;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1257986501;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1265799465;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1272423433;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1274693059;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1294395638;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1296546062;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1297975937;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1302256207;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1302257515;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1307685726;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1312113354;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1314283234;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1314622821;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1314627998;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1319571820;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1319573041;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1319705571;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1324569391;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1324591487;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1326499990;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1326623920;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1326863193;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1334502428;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1345895340;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1346056951;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1346246562;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1346401388;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1346641726;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1347273355;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1353506545;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1373790062;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1373791789;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1376549254;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter("in.body", exchange.getIn().getBody())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out.body", exchange.getOut().getBody())__            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,in,body,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,body,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1474456231;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            new ObjectValue(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            new ObjectValue(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                new ObjectValue(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,new,object,value,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,new,object,value,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,new,object,value,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1474702999;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            new ObjectValue(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            new ObjectValue(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                new ObjectValue(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,new,object,value,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,new,object,value,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,new,object,value,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1475193520;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            new ObjectValue(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            new ObjectValue(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                new ObjectValue(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,new,object,value,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,new,object,value,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,new,object,value,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1480447219;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            new ObjectValue(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            new ObjectValue(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                new ObjectValue(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,new,object,value,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,new,object,value,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,new,object,value,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1482517045;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            new ObjectValue(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            new ObjectValue(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                new ObjectValue(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,new,object,value,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,new,object,value,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,new,object,value,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1486725737;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            new ObjectValue(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            new ObjectValue(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                new ObjectValue(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,new,object,value,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,new,object,value,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,new,object,value,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1516611917;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1516611917;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1524063178;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1537290824;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1540108161;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1540108163;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1544174887;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1545052029;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)         throws Exception;1548679023;Configures the dynamic context with exchange specific parameters;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange)_        throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders(), "in.headers.")__        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("in.body"),_            getAsParameter(exchange.getIn().getBody())_        )___        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter(_            StructuredQName.fromClarkName("exchange"),_            getAsParameter(exchange)_        )__        if (exchange.hasOut() && exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter(_                StructuredQName.fromClarkName("out.body"),_                getAsParameter(exchange.getOut().getBody())_            )___            addParameters(dynamicQueryContext, exchange.getOut().getHeaders(), "out.headers.")__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,in,headers,dynamic,query,context,set,parameter,structured,qname,from,clark,name,in,body,get,as,parameter,exchange,get,in,get,body,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,structured,qname,from,clark,name,exchange,get,as,parameter,exchange,if,exchange,has,out,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,structured,qname,from,clark,name,out,body,get,as,parameter,exchange,get,out,get,body,add,parameters,dynamic,query,context,exchange,get,out,get,headers,out,headers
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1319571820;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof Document) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,document,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1319573041;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof Document) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,document,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1319705571;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1324569391;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1324591487;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1326499990;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1326623920;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1326863193;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1334502428;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1345895340;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1346056951;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1346246562;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1346401388;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1346641726;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1347273355;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1353506545;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1373790062;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1373791789;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1376549254;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1474456231;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1474702999;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1475193520;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1480447219;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1482517045;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1486725737;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1516611917;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1516611917;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1524063178;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1537290824;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1540108161;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1540108163;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1544174887;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1545052029;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> protected boolean isInputStreamNeeded(Exchange exchange);1548679023;Checks whether we need an {@link InputStream} to access the message body._<p/>_Depending on the content in the message body, we may not need to convert_to {@link InputStream}.__@param exchange the current exchange_@return <tt>true</tt> to convert to {@link InputStream} beforehand converting to {@link Source} afterwards.;protected boolean isInputStreamNeeded(Exchange exchange) {_        Object body = exchange.getIn().getBody()__        if (body == null) {_            return false__        }__        if (body instanceof Source) {_            return false__        } else if (body instanceof String) {_            return false__        } else if (body instanceof byte[]) {_            return false__        } else if (body instanceof Node) {_            return false__        }__        _        return true__    };checks,whether,we,need,an,link,input,stream,to,access,the,message,body,p,depending,on,the,content,in,the,message,body,we,may,not,need,to,convert,to,link,input,stream,param,exchange,the,current,exchange,return,tt,true,tt,to,convert,to,link,input,stream,beforehand,converting,to,link,source,afterwards;protected,boolean,is,input,stream,needed,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,false,if,body,instanceof,source,return,false,else,if,body,instanceof,string,return,false,else,if,body,instanceof,byte,return,false,else,if,body,instanceof,node,return,false,return,true
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1195064179;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1206580891;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1215613182;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1215768330;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1216027291;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1216030661;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1216034160;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1216109058;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1222332323;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1222531060;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1225498898;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1226063471;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1233739159;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1234358169;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1234492551;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1234604144;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1237457114;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1240035322;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1240575841;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1240578555;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1240935335;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1255544144;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1257986501;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1265799465;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1272423433;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1274693059;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1294395638;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1296546062;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1297975937;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1302256207;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1302257515;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1307685726;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1312113354;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1314283234;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1314622821;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1314627998;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1319571820;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1319573041;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1319705571;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1324569391;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1324591487;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1326499990;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1326623920;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1326863193;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1334502428;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1345895340;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1346056951;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1346246562;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1346401388;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1346641726;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1347273355;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1353506545;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1373790062;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1373791789;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1376549254;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1474456231;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1474702999;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1475193520;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1480447219;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1482517045;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1486725737;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1516611917;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1516611917;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1524063178;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1537290824;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1540108161;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1540108163;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1544174887;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1545052029;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> public void setNamespaces(Map<String, String> namespaces);1548679023;Configures the namespace context from the given DOM element;public void setNamespaces(Map<String, String> namespaces) {_        namespacePrefixes.putAll(namespaces)__        _        initialized.set(false)__    };configures,the,namespace,context,from,the,given,dom,element;public,void,set,namespaces,map,string,string,namespaces,namespace,prefixes,put,all,namespaces,initialized,set,false
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1319571820;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1319573041;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1319705571;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1324569391;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1324591487;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1326499990;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1326623920;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1326863193;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().convertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().convertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1334502428;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1345895340;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1346056951;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1346246562;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1346401388;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1346641726;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1347273355;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1353506545;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1373790062;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1373791789;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1376549254;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1474456231;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1474702999;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1475193520;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1480447219;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1482517045;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1486725737;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1516611917;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1516611917;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1524063178;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1537290824;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1540108161;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1540108163;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1544174887;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1545052029;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected Source getSource(Exchange exchange, Object body);1548679023;Converts the inbound body to a {@link Source}, if the body is <b>not</b> already a {@link Source}._<p/>_This implementation will prefer to source in the following order:_<ul>_<li>StAX - Is StAX is allowed</li>_<li>SAX - SAX as 2nd choice</li>_<li>Stream - Stream as 3rd choice</li>_<li>DOM - DOM as 4th choice</li>_</ul>;protected Source getSource(Exchange exchange, Object body) {_        _        if (body instanceof Source) {_            return (Source) body__        }__        Source source = null__        if (isAllowStAX()) {_            source = exchange.getContext().getTypeConverter().tryConvertTo(StAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(SAXSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(StreamSource.class, exchange, body)__        }_        if (source == null) {_            _            source = exchange.getContext().getTypeConverter().tryConvertTo(DOMSource.class, exchange, body)__        }_        return source__    };converts,the,inbound,body,to,a,link,source,if,the,body,is,b,not,b,already,a,link,source,p,this,implementation,will,prefer,to,source,in,the,following,order,ul,li,st,ax,is,st,ax,is,allowed,li,li,sax,sax,as,2nd,choice,li,li,stream,stream,as,3rd,choice,li,li,dom,dom,as,4th,choice,li,ul;protected,source,get,source,exchange,exchange,object,body,if,body,instanceof,source,return,source,body,source,source,null,if,is,allow,st,ax,source,exchange,get,context,get,type,converter,try,convert,to,st,axsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,saxsource,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,stream,source,class,exchange,body,if,source,null,source,exchange,get,context,get,type,converter,try,convert,to,domsource,class,exchange,body,return,source
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1216034160;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1216109058;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1222332323;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1222531060;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1225498898;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1226063471;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1233739159;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1234358169;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1234492551;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1234604144;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1237457114;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1240035322;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1240575841;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1240578555;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1240935335;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1255544144;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1257986501;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1265799465;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1272423433;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1274693059;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1294395638;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1296546062;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1297975937;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1302256207;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1302257515;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1307685726;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1312113354;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1314283234;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1314622821;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1314627998;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1319571820;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1319573041;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1319705571;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1324569391;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1324591487;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1326499990;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1326623920;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1326863193;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1334502428;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1345895340;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1346056951;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1346246562;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1346401388;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1346641726;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1347273355;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1353506545;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1373790062;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1373791789;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1376549254;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1474456231;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1474702999;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1475193520;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1480447219;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1482517045;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1486725737;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1516611917;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1516611917;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1524063178;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1537290824;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1540108161;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1540108163;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1544174887;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1545052029;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)         throws XPathException, IOException_;1548679023;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext)_        throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception;1195064179;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        dynamicQueryContext.setParameter("in", exchange.getIn())__        dynamicQueryContext.setParameter("out", exchange.getOut())__    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,dynamic,query,context,set,parameter,in,exchange,get,in,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception;1206580891;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        dynamicQueryContext.setParameter("in", exchange.getIn())__        dynamicQueryContext.setParameter("out", exchange.getOut())__    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,dynamic,query,context,set,parameter,in,exchange,get,in,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception;1215613182;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        dynamicQueryContext.setParameter("in", exchange.getIn())__        dynamicQueryContext.setParameter("out", exchange.getOut())__    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,dynamic,query,context,set,parameter,in,exchange,get,in,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception;1215768330;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", exchange.getOut())__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception;1216027291;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", exchange.getOut())__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception;1216030661;Configures the dynamic context with exchange specific parameters__@param dynamicQueryContext_@param exchange_@throws Exception;protected void configureQuery(DynamicQueryContext dynamicQueryContext, Exchange exchange) throws Exception {_        addParameters(dynamicQueryContext, exchange.getProperties())__        addParameters(dynamicQueryContext, exchange.getIn().getHeaders())__        addParameters(dynamicQueryContext, getParameters())___        dynamicQueryContext.setParameter("exchange", exchange)__        if (exchange.getPattern().isOutCapable()) {_            dynamicQueryContext.setParameter("out", exchange.getOut())__        }_    };configures,the,dynamic,context,with,exchange,specific,parameters,param,dynamic,query,context,param,exchange,throws,exception;protected,void,configure,query,dynamic,query,context,dynamic,query,context,exchange,exchange,throws,exception,add,parameters,dynamic,query,context,exchange,get,properties,add,parameters,dynamic,query,context,exchange,get,in,get,headers,add,parameters,dynamic,query,context,get,parameters,dynamic,query,context,set,parameter,exchange,exchange,if,exchange,get,pattern,is,out,capable,dynamic,query,context,set,parameter,out,exchange,get,out
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;1195064179;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;1206580891;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;1215613182;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;1215768330;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;1216027291;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;1216030661;A factory method to create the XQuery expression;protected abstract XQueryExpression createQueryExpression(StaticQueryContext staticQueryContext) throws XPathException, IOException_;a,factory,method,to,create,the,xquery,expression;protected,abstract,xquery,expression,create,query,expression,static,query,context,static,query,context,throws,xpath,exception,ioexception
XQueryBuilder -> protected synchronized void initialize() throws XPathException, IOException;1216034160;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize() throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }_    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true
XQueryBuilder -> protected synchronized void initialize() throws XPathException, IOException;1216109058;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize() throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }_    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true
XQueryBuilder -> protected synchronized void initialize() throws XPathException, IOException;1222332323;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize() throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }_    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true
XQueryBuilder -> protected synchronized void initialize() throws XPathException, IOException;1222531060;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize() throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }_    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true
XQueryBuilder -> protected synchronized void initialize() throws XPathException, IOException;1225498898;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize() throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }_    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true
XQueryBuilder -> protected synchronized void initialize() throws XPathException, IOException;1226063471;Initializes this builder - <b>Must be invoked before evaluation</b>.;protected synchronized void initialize() throws XPathException, IOException {_        _        if (!initialized.get()) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Initializing XQueryBuilder " + this)__            }_            configuration = new Configuration()__            configuration.setHostLanguage(Configuration.XQUERY)___            staticQueryContext = new StaticQueryContext(getConfiguration())__            Set<Map.Entry<String, String>> entries = namespacePrefixes.entrySet()__            for (Map.Entry<String, String> entry : entries) {_                String prefix = entry.getKey()__                String uri = entry.getValue()__                staticQueryContext.declareNamespace(prefix, uri)__                staticQueryContext.setInheritNamespaces(true)__            }__            expression = createQueryExpression(staticQueryContext)___            initialized.set(true)__        }_    };initializes,this,builder,b,must,be,invoked,before,evaluation,b;protected,synchronized,void,initialize,throws,xpath,exception,ioexception,if,initialized,get,if,log,is,debug,enabled,log,debug,initializing,xquery,builder,this,configuration,new,configuration,configuration,set,host,language,configuration,xquery,static,query,context,new,static,query,context,get,configuration,set,map,entry,string,string,entries,namespace,prefixes,entry,set,for,map,entry,string,string,entry,entries,string,prefix,entry,get,key,string,uri,entry,get,value,static,query,context,declare,namespace,prefix,uri,static,query,context,set,inherit,namespaces,true,expression,create,query,expression,static,query,context,initialized,set,true
XQueryBuilder -> protected void clearBuilderReferences();1195064179;To avoid keeping around any unnecessary objects after the expresion has_been created lets nullify references here;protected void clearBuilderReferences() {_        staticQueryContext = null__        configuration = null__    };to,avoid,keeping,around,any,unnecessary,objects,after,the,expresion,has,been,created,lets,nullify,references,here;protected,void,clear,builder,references,static,query,context,null,configuration,null
XQueryBuilder -> protected void clearBuilderReferences();1206580891;To avoid keeping around any unnecessary objects after the expresion has_been created lets nullify references here;protected void clearBuilderReferences() {_        staticQueryContext = null__        configuration = null__    };to,avoid,keeping,around,any,unnecessary,objects,after,the,expresion,has,been,created,lets,nullify,references,here;protected,void,clear,builder,references,static,query,context,null,configuration,null
XQueryBuilder -> protected void clearBuilderReferences();1215613182;To avoid keeping around any unnecessary objects after the expression has_been created lets nullify references here;protected void clearBuilderReferences() {_        staticQueryContext = null__        configuration = null__    };to,avoid,keeping,around,any,unnecessary,objects,after,the,expression,has,been,created,lets,nullify,references,here;protected,void,clear,builder,references,static,query,context,null,configuration,null
XQueryBuilder -> protected void clearBuilderReferences();1215768330;To avoid keeping around any unnecessary objects after the expression has_been created lets nullify references here;protected void clearBuilderReferences() {_        staticQueryContext = null__        configuration = null__    };to,avoid,keeping,around,any,unnecessary,objects,after,the,expression,has,been,created,lets,nullify,references,here;protected,void,clear,builder,references,static,query,context,null,configuration,null
XQueryBuilder -> protected void clearBuilderReferences();1216027291;To avoid keeping around any unnecessary objects after the expression has_been created lets nullify references here;protected void clearBuilderReferences() {_        _        _        _    };to,avoid,keeping,around,any,unnecessary,objects,after,the,expression,has,been,created,lets,nullify,references,here;protected,void,clear,builder,references
XQueryBuilder -> protected void clearBuilderReferences();1216030661;To avoid keeping around any unnecessary objects after the expression has_been created lets nullify references here;protected void clearBuilderReferences() {_        staticQueryContext = null__        configuration = null__    };to,avoid,keeping,around,any,unnecessary,objects,after,the,expression,has,been,created,lets,nullify,references,here;protected,void,clear,builder,references,static,query,context,null,configuration,null
XQueryBuilder -> public XQueryBuilder allowStAX();1319571820;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1319573041;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1319705571;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1324569391;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1324591487;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1326499990;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1326623920;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1326863193;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1334502428;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1345895340;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1346056951;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1346246562;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1346401388;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1346641726;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1347273355;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1353506545;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1373790062;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1373791789;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1376549254;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1474456231;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1474702999;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1475193520;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1480447219;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1482517045;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1486725737;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1516611917;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1516611917;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1524063178;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1537290824;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1540108161;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1540108163;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1544174887;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1545052029;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
XQueryBuilder -> public XQueryBuilder allowStAX();1548679023;Enables to allow using StAX._<p/>_When enabled StAX is preferred as the first choice as {@link Source}.;public XQueryBuilder allowStAX() {_        setAllowStAX(true)__        return this__    };enables,to,allow,using,st,ax,p,when,enabled,st,ax,is,preferred,as,the,first,choice,as,link,source;public,xquery,builder,allow,st,ax,set,allow,st,ax,true,return,this
