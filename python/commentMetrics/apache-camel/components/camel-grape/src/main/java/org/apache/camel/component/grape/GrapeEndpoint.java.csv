commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;public void doCall(String it) {     MavenCoordinates coordinates = MavenCoordinates.parseMavenCoordinates(it).     LinkedHashMap<String, Object> map = new LinkedHashMap<String, Object>(5).     map.put("classLoader", classLoader).     map.put("group", coordinates.getGroupId()).     map.put("module", coordinates.getArtifactId()).     map.put("version", coordinates.getVersion()).     map.put("classifier", coordinates.getClassifier()).     Grape.grab(map). }
false;public;0;3;;public void doCall() {     doCall(null). }
false;public,static;1;21;;public static List<String> loadPatches(CamelContext camelContext) {     final ClassLoader classLoader = camelContext.getApplicationContextClassLoader().     PatchesRepository patchesRepository = camelContext.getComponent("grape", GrapeComponent.class).getPatchesRepository().     return DefaultGroovyMethods.each(patchesRepository.listPatches(), new Closure<Object>(null, null) {          public void doCall(String it) {             MavenCoordinates coordinates = MavenCoordinates.parseMavenCoordinates(it).             LinkedHashMap<String, Object> map = new LinkedHashMap<String, Object>(5).             map.put("classLoader", classLoader).             map.put("group", coordinates.getGroupId()).             map.put("module", coordinates.getArtifactId()).             map.put("version", coordinates.getVersion()).             map.put("classifier", coordinates.getClassifier()).             Grape.grab(map).         }          public void doCall() {             doCall(null).         }     }). }
false;public;0;4;;@Override public Producer createProducer() {     return new GrapeProducer(this). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) {     throw new UnsupportedOperationException("Grape component supports only the producer side of the route."). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public String getDefaultCoordinates() {     return defaultCoordinates. }
false;public;0;4;;@Override public GrapeComponent getComponent() {     return DefaultGroovyMethods.asType(super.getComponent(), GrapeComponent.class). }
