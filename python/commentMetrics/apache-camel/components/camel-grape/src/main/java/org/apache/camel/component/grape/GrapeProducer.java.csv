commented;modifiers;parameterAmount;loc;comment;code
false;public;1;42;;@Override public void process(Exchange exchange) {     GrapeCommand command = exchange.getIn().getHeader(GrapeConstants.GRAPE_COMMAND, GrapeCommand.grab, GrapeCommand.class).     switch(command) {         case grab:             ClassLoader classLoader = exchange.getContext().getApplicationContextClassLoader().             String rawCoordinates = exchange.getIn().getBody(String.class).             LinkedHashMap<String, Object> map = new LinkedHashMap<String, Object>(5).             try {                 MavenCoordinates coordinates = MavenCoordinates.parseMavenCoordinates(rawCoordinates).                 map.put("classLoader", classLoader).                 map.put("group", coordinates.getGroupId()).                 map.put("module", coordinates.getArtifactId()).                 map.put("version", coordinates.getVersion()).                 map.put("classifier", coordinates.getClassifier()).                 Grape.grab(map).                 getEndpoint().getComponent().getPatchesRepository().install(rawCoordinates).             } catch (IllegalArgumentException ex) {                 MavenCoordinates coordinates = MavenCoordinates.parseMavenCoordinates(getEndpoint().getDefaultCoordinates()).                 map.put("classLoader", classLoader).                 map.put("group", coordinates.getGroupId()).                 map.put("module", coordinates.getArtifactId()).                 map.put("version", coordinates.getVersion()).                 map.put("classifier", coordinates.getClassifier()).                 Grape.grab(map).                 getEndpoint().getComponent().getPatchesRepository().install(getEndpoint().getDefaultCoordinates()).             }             break.         case listPatches:             List<String> patches = getEndpoint().getComponent().getPatchesRepository().listPatches().             exchange.getIn().setBody(patches).             break.         case clearPatches:             getEndpoint().getComponent().getPatchesRepository().clear().             break.         default:             break.     } }
false;public;0;4;;@Override public GrapeEndpoint getEndpoint() {     return (GrapeEndpoint) super.getEndpoint(). }
