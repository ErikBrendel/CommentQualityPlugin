commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testMarshal() throws Exception {     List<Employee> employees = getEmployees().     MockEndpoint mock = getMockEndpoint("mock:beanio-marshal").     mock.expectedBodiesReceived(FIXED_DATA).     template.sendBody("direct:marshal", employees).     mock.assertIsSatisfied(). }
false;public;0;11;;@Test public void testUnmarshal() throws Exception {     List<Employee> employees = getEmployees().     MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal").     mock.expectedBodiesReceived(employees).     template.sendBody("direct:unmarshal", FIXED_DATA).     mock.assertIsSatisfied(). }
false;public;0;15;;@Test public void testUnmarshalFail() throws Exception {     // there should be 1 splitted that failed we get also     MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal").     mock.expectedMessageCount(3).     mock.message(0).body().isInstanceOf(Employee.class).     mock.message(1).body().isInstanceOf(Employee.class).     mock.message(2).body().isInstanceOf(MyErrorDto.class).     template.sendBody("direct:unmarshal", FIXED_FAIL_DATA).     mock.assertIsSatisfied().     assertEquals("employee", mock.getReceivedExchanges().get(2).getIn().getBody(MyErrorDto.class).getRecord()). }
false;public;0;25;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // setup beanio data format using the mapping file, loaded from the classpath     BeanIODataFormat format = new BeanIODataFormat("org/apache/camel/dataformat/beanio/mappings.xml", "employeeFile").     // use our custom error handler     format.setBeanReaderErrorHandlerType(MyErrorHandler.class).     // a route which uses the bean io data format to format a CSV data     // to java objects     from("direct:unmarshal").unmarshal(format).split(body()).to("mock:beanio-unmarshal").     // convert list of java objects back to flat format     from("direct:marshal").marshal(format).to("mock:beanio-marshal"). // END SNIPPET: e1 }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // setup beanio data format using the mapping file, loaded from the classpath             BeanIODataFormat format = new BeanIODataFormat("org/apache/camel/dataformat/beanio/mappings.xml", "employeeFile").             // use our custom error handler             format.setBeanReaderErrorHandlerType(MyErrorHandler.class).             // a route which uses the bean io data format to format a CSV data             // to java objects             from("direct:unmarshal").unmarshal(format).split(body()).to("mock:beanio-unmarshal").             // convert list of java objects back to flat format             from("direct:marshal").marshal(format).to("mock:beanio-marshal").         // END SNIPPET: e1         }     }. }
false;private;0;27;;private List<Employee> getEmployees() throws ParseException {     List<Employee> employees = new ArrayList<>().     Employee one = new Employee().     one.setFirstName("Joe").     one.setLastName("Smith").     one.setTitle("Developer").     one.setSalary(75000).     one.setHireDate(new SimpleDateFormat("MMddyyyy").parse("10012009")).     employees.add(one).     Employee two = new Employee().     two.setFirstName("Jane").     two.setLastName("Doe").     two.setTitle("Architect").     two.setSalary(80000).     two.setHireDate(new SimpleDateFormat("MMddyyyy").parse("01152008")).     employees.add(two).     Employee three = new Employee().     three.setFirstName("Jon").     three.setLastName("Anderson").     three.setTitle("Manager").     three.setSalary(85000).     three.setHireDate(new SimpleDateFormat("MMddyyyy").parse("03182007")).     employees.add(three).     return employees. }
