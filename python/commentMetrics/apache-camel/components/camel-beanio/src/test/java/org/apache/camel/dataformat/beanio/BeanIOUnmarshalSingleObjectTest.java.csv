commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testMultiLineContentUnmarshal() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:unmarshal", INPUT).     mock.assertIsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     Map body = (Map) exchange.getIn().getBody().     assertEquals(":", body.get("separator")).     assertEquals("1234", body.get("key")).     assertEquals(INPUT.substring(5), body.get("value")). }
false;public;0;15;;@Override public void configure() throws Exception {     BeanIODataFormat format = new BeanIODataFormat("org/apache/camel/dataformat/beanio/single-object-mapping.xml", "keyValueStream").     // turn on single mode     format.setUnmarshalSingleObject(true).     from("direct:unmarshal").unmarshal(format).process(new Processor() {          public void process(Exchange exchange) throws Exception {             Map body = (Map) exchange.getIn().getBody().             assertEquals(":", body.get("separator")).             assertEquals("1234", body.get("key")).             assertEquals(INPUT.substring(5), body.get("value")).         }     }).marshal(format).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             BeanIODataFormat format = new BeanIODataFormat("org/apache/camel/dataformat/beanio/single-object-mapping.xml", "keyValueStream").             // turn on single mode             format.setUnmarshalSingleObject(true).             from("direct:unmarshal").unmarshal(format).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Map body = (Map) exchange.getIn().getBody().                     assertEquals(":", body.get("separator")).                     assertEquals("1234", body.get("key")).                     assertEquals(INPUT.substring(5), body.get("value")).                 }             }).marshal(format).to("mock:result").         }     }. }
