commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;/*     @Test     public void testMarshal() throws Exception {         List<Employee> employees = getEmployees().          MockEndpoint mock = getMockEndpoint("mock:beanio-marshal").         mock.expectedBodiesReceived(FIXED_DATA).          template.sendBody("direct:marshal", employees).          mock.assertIsSatisfied().     } */ @Test public void testUnmarshal() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal").     mock.expectedMessageCount(2).     template.sendBody("direct:unmarshal", FIXED_DATA).     mock.assertIsSatisfied().     List<Exchange> exchanges = mock.getExchanges().     if (verbose) {         for (Exchange exchange : exchanges) {             Object body = exchange.getIn().getBody().             log.info("received message {} of class {}", body, body.getClass().getName()).         }     }     List<Map> results = new ArrayList<>().     for (Exchange exchange : exchanges) {         Map body = exchange.getIn().getBody(Map.class).         if (body != null) {             results.add(body).         }     }     assertRecord(results, 0, "James", "Strachan", 22).     assertRecord(results, 1, "Claus", "Ibsen", 21). }
false;protected,static;5;10;;protected static void assertRecord(List<Map> results, int index, String expectedFirstName, String expectedLastName, int expectedAge) {     assertTrue("Not enough Map messages received: " + results.size(), results.size() > index).     Map map = results.get(index).     assertNotNull("No map result found for index " + index, map).     String text = "bodyAsMap(" + index + ") ".     assertEquals(text + "firstName", expectedFirstName, map.get("firstName")).     assertEquals(text + "lastName", expectedLastName, map.get("lastName")).     assertEquals(text + "age", expectedAge, map.get("age")). }
false;public;0;22;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // setup beanio data format using the mapping file, loaded from the classpath     DataFormat format = new BeanIODataFormat("org/apache/camel/dataformat/beanio/csv/mappings.xml", "stream1").     // a route which uses the bean io data format to format a CSV data     // to java objects     from("direct:unmarshal").unmarshal(format).split(body()).to("mock:beanio-unmarshal").     // convert list of java objects back to flat format     from("direct:marshal").marshal(format).to("mock:beanio-marshal"). // END SNIPPET: e1 }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // setup beanio data format using the mapping file, loaded from the classpath             DataFormat format = new BeanIODataFormat("org/apache/camel/dataformat/beanio/csv/mappings.xml", "stream1").             // a route which uses the bean io data format to format a CSV data             // to java objects             from("direct:unmarshal").unmarshal(format).split(body()).to("mock:beanio-unmarshal").             // convert list of java objects back to flat format             from("direct:marshal").marshal(format).to("mock:beanio-marshal").         // END SNIPPET: e1         }     }. }
