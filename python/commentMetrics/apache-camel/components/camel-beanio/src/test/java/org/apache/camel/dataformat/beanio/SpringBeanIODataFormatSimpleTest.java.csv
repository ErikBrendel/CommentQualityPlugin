commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/dataformat/beanio/SpringBeanIODataFormatSimpleTest.xml"). }
false;public;0;11;;@Test public void testMarshal() throws Exception {     List<Employee> employees = getEmployees().     MockEndpoint mock = getMockEndpoint("mock:beanio-marshal").     mock.expectedBodiesReceived(FIXED_DATA).     template.sendBody("direct:marshal", employees).     mock.assertIsSatisfied(). }
false;public;0;11;;@Test public void testUnmarshal() throws Exception {     List<Employee> employees = getEmployees().     MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal").     mock.expectedBodiesReceived(employees).     template.sendBody("direct:unmarshal", FIXED_DATA).     mock.assertIsSatisfied(). }
false;private;0;27;;private List<Employee> getEmployees() throws ParseException {     List<Employee> employees = new ArrayList<>().     Employee one = new Employee().     one.setFirstName("Joe").     one.setLastName("Smith").     one.setTitle("Developer").     one.setSalary(75000).     one.setHireDate(new SimpleDateFormat("MMddyyyy").parse("10012009")).     employees.add(one).     Employee two = new Employee().     two.setFirstName("Jane").     two.setLastName("Doe").     two.setTitle("Architect").     two.setSalary(80000).     two.setHireDate(new SimpleDateFormat("MMddyyyy").parse("01152008")).     employees.add(two).     Employee three = new Employee().     three.setFirstName("Jon").     three.setLastName("Anderson").     three.setTitle("Manager").     three.setSalary(85000).     three.setHireDate(new SimpleDateFormat("MMddyyyy").parse("03182007")).     employees.add(three).     return employees. }
