commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@BeforeClass public static void setLocale() {     if (!Locale.getDefault().equals(Locale.ENGLISH)) {         // the Locale used for the number formatting of the above data is         // english which could be other than the default locale         defaultLocale = Locale.getDefault().         Locale.setDefault(Locale.ENGLISH).     } }
false;public,static;0;6;;@AfterClass public static void resetLocale() {     if (defaultLocale != null) {         Locale.setDefault(defaultLocale).     } }
false;public;0;9;;@Test public void testMarshal() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:beanio-marshal").     mock.expectedBodiesReceived(data).     template.sendBody("direct:marshal", createTestData(false)).     mock.assertIsSatisfied(). }
false;public;0;10;;@Test public void testUnmarshal() throws Exception {     context.setTracing(true).     MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal").     mock.expectedBodiesReceived(createTestData(false)).     template.sendBody("direct:unmarshal", data).     mock.assertIsSatisfied(). }
false;public;0;12;;@Test public void testUnmarshalUnexpected() throws Exception {     Throwable ex = null.     try {         template.sendBody("direct:unmarshal", unExpectedData).     } catch (Exception e) {         ex = e.getCause().     }     assertIsInstanceOf(UnexpectedRecordException.class, ex). }
false;public;0;12;;@Test public void testUnmarshalInvalid() throws Exception {     Throwable ex = null.     try {         template.sendBody("direct:unmarshal", invalidData).     } catch (Exception e) {         ex = e.getCause().     }     assertIsInstanceOf(InvalidRecordException.class, ex). }
false;public;0;7;;@Test public void testUnmarshalUnidentifiedIgnore() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal").     mock.expectedBodiesReceived(createTestData(false)).     template.sendBody("direct:unmarshal-forgiving", unidentifiedData).     mock.assertIsSatisfied(). }
false;public;0;7;;@Test public void testUnmarshalUnexpectedIgnore() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal").     mock.expectedBodiesReceived(createTestData(false)).     template.sendBody("direct:unmarshal-forgiving", unExpectedData).     mock.assertIsSatisfied(). }
false;public;0;8;;@Test public void testUnmarshalInvalidIgnore() throws Exception {     context.setTracing(true).     MockEndpoint mock = getMockEndpoint("mock:beanio-unmarshal").     mock.expectedBodiesReceived(createTestData(true)).     template.sendBody("direct:unmarshal-forgiving", invalidData).     mock.assertIsSatisfied(). }
false;public;0;12;;@Test public void testUnmarshalUnidentified() throws Exception {     Throwable ex = null.     try {         template.sendBody("direct:unmarshal", unidentifiedData).     } catch (Exception e) {         ex = e.getCause().     }     assertIsInstanceOf(UnidentifiedRecordException.class, ex). }
false;private;1;37;;private List<Object> createTestData(boolean skipB1header) throws ParseException {     String source = "camel-beanio".     List<Object> body = new ArrayList<>().     Date date = new SimpleDateFormat("ddMMyy").parse("030808").     Header hFirst = new Header("A1", date, "PRICE").     Header hSecond = new Header("B1", date, "SECURITY").     Separator headerEnd = new Separator("HEADER END").     A1Record first = new A1Record("0001917", source, 12345.678900).     A1Record second = new A1Record("0002374", source, 59303290.020).     B1Record third = new B1Record("0015219", source, "SECURITY ONE").     Separator sectionEnd = new Separator("END OF SECTION 1").     A1Record fourth = new A1Record("0076647", source, 0.0000000001).     A1Record fifth = new A1Record("0135515", source, 999999999999d).     B1Record sixth = new B1Record("2000815", source, "SECURITY TWO").     B1Record seventh = new B1Record("2207122", source, "SECURITY THR").     body.add(hFirst).     if (!skipB1header) {         body.add(hSecond).     }     body.add(headerEnd).     body.add(first).     body.add(second).     body.add(third).     body.add(sectionEnd).     body.add(fourth).     body.add(fifth).     body.add(sixth).     body.add(seventh).     Trailer trailer = new Trailer(7).     body.add(trailer).     return body. }
false;public;0;15;;@Override public void configure() throws Exception {     BeanIODataFormat format = new BeanIODataFormat("org/apache/camel/dataformat/beanio/mappings.xml", "securityData").     BeanIODataFormat forgivingFormat = new BeanIODataFormat("org/apache/camel/dataformat/beanio/mappings.xml", "securityData").     forgivingFormat.setIgnoreInvalidRecords(true).     forgivingFormat.setIgnoreUnexpectedRecords(true).     forgivingFormat.setIgnoreUnidentifiedRecords(true).     from("direct:unmarshal").unmarshal(format).split(simple("${body}")).to("mock:beanio-unmarshal").     from("direct:unmarshal-forgiving").unmarshal(forgivingFormat).split(simple("${body}")).to("mock:beanio-unmarshal").     from("direct:marshal").marshal(format).to("mock:beanio-marshal"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             BeanIODataFormat format = new BeanIODataFormat("org/apache/camel/dataformat/beanio/mappings.xml", "securityData").             BeanIODataFormat forgivingFormat = new BeanIODataFormat("org/apache/camel/dataformat/beanio/mappings.xml", "securityData").             forgivingFormat.setIgnoreInvalidRecords(true).             forgivingFormat.setIgnoreUnexpectedRecords(true).             forgivingFormat.setIgnoreUnidentifiedRecords(true).             from("direct:unmarshal").unmarshal(format).split(simple("${body}")).to("mock:beanio-unmarshal").             from("direct:unmarshal-forgiving").unmarshal(forgivingFormat).split(simple("${body}")).to("mock:beanio-unmarshal").             from("direct:marshal").marshal(format).to("mock:beanio-marshal").         }     }. }
