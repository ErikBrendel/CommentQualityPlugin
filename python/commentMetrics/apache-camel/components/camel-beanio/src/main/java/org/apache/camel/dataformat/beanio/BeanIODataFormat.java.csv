commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "beanio". }
false;protected;0;20;;@Override protected void doStart() throws Exception {     org.apache.camel.util.ObjectHelper.notNull(getStreamName(), "Stream name not configured.").     if (factory == null) {         // Create the stream factory that will be used to read/write objects.         factory = StreamFactory.newInstance().         // Load the mapping file using the resource helper to ensure it can be loaded in OSGi and other environments         InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(getCamelContext(), getMapping()).         try {             if (getProperties() != null) {                 factory.load(is, getProperties()).             } else {                 factory.load(is).             }         } finally {             IOHelper.close(is).         }     } }
false;protected;0;4;;@Override protected void doStop() throws Exception {     factory = null. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;;0;3;;StreamFactory getFactory() {     return factory. }
false;public;3;4;;public void marshal(Exchange exchange, Object body, OutputStream stream) throws Exception {     List<Object> models = getModels(exchange, body).     writeModels(stream, models). }
false;public;2;7;;public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     if (isUnmarshalSingleObject()) {         return readSingleModel(exchange, stream).     } else {         return readModels(exchange, stream).     } }
false;private;2;11;;@SuppressWarnings("unchecked") private List<Object> getModels(Exchange exchange, Object body) {     List<Object> models.     if ((models = exchange.getContext().getTypeConverter().convertTo(List.class, body)) == null) {         models = new ArrayList<>().         for (Object model : ObjectHelper.createIterable(body)) {             models.add(model).         }     }     return models. }
false;private;2;11;;private void writeModels(OutputStream stream, List<Object> models) {     BufferedWriter streamWriter = IOHelper.buffered(new OutputStreamWriter(stream, getEncoding())).     BeanWriter out = factory.createWriter(getStreamName(), streamWriter).     for (Object obj : models) {         out.write(obj).     }     out.flush().     out.close(). }
false;private;2;23;;private List<Object> readModels(Exchange exchange, InputStream stream) throws Exception {     List<Object> results = new ArrayList<>().     BufferedReader streamReader = IOHelper.buffered(new InputStreamReader(stream, getEncoding())).     BeanReader in = factory.createReader(getStreamName(), streamReader).     BeanReaderErrorHandler errorHandler = getOrCreateBeanReaderErrorHandler(configuration, exchange, results, null).     in.setErrorHandler(errorHandler).     try {         Object readObject.         while ((readObject = in.read()) != null) {             if (readObject instanceof BeanIOHeader) {                 exchange.getOut().getHeaders().putAll(((BeanIOHeader) readObject).getHeaders()).             }             results.add(readObject).         }     } finally {         in.close().     }     return results. }
false;private;2;10;;private Object readSingleModel(Exchange exchange, InputStream stream) throws NoTypeConversionAvailableException {     BufferedReader streamReader = IOHelper.buffered(new InputStreamReader(stream, getEncoding())).     try {         String data = exchange.getContext().getTypeConverter().mandatoryConvertTo(String.class, exchange, streamReader).         Unmarshaller unmarshaller = factory.createUnmarshaller(getStreamName()).         return unmarshaller.unmarshal(data).     } finally {         IOHelper.close(stream).     } }
false;public;0;3;;public String getMapping() {     return configuration.getMapping(). }
false;public;1;3;;public void setIgnoreUnexpectedRecords(boolean ignoreUnexpectedRecords) {     configuration.setIgnoreUnexpectedRecords(ignoreUnexpectedRecords). }
false;public;1;3;;public void setProperties(Properties properties) {     configuration.setProperties(properties). }
false;public;1;3;;public void setStreamName(String streamName) {     configuration.setStreamName(streamName). }
false;public;0;3;;public boolean isIgnoreUnidentifiedRecords() {     return configuration.isIgnoreUnidentifiedRecords(). }
false;public;0;3;;public boolean isIgnoreInvalidRecords() {     return configuration.isIgnoreInvalidRecords(). }
false;public;1;3;;public void setIgnoreInvalidRecords(boolean ignoreInvalidRecords) {     configuration.setIgnoreInvalidRecords(ignoreInvalidRecords). }
false;public;1;3;;public void setEncoding(String encoding) {     setEncoding(Charset.forName(encoding)). }
false;public;1;6;;public void setEncoding(Charset encoding) {     if (encoding == null) {         throw new IllegalArgumentException("Charset encoding is null").     }     configuration.setEncoding(encoding). }
false;public;0;3;;public boolean isIgnoreUnexpectedRecords() {     return configuration.isIgnoreUnexpectedRecords(). }
false;public;0;3;;public Properties getProperties() {     return configuration.getProperties(). }
false;public;0;3;;public String getStreamName() {     return configuration.getStreamName(). }
false;public;1;3;;public void setMapping(String mapping) {     configuration.setMapping(mapping). }
false;public;1;3;;public void setIgnoreUnidentifiedRecords(boolean ignoreUnidentifiedRecords) {     configuration.setIgnoreUnidentifiedRecords(ignoreUnidentifiedRecords). }
false;public;0;3;;public Charset getEncoding() {     return configuration.getEncoding(). }
false;public;0;3;;public BeanReaderErrorHandler getBeanReaderErrorHandler() {     return configuration.getBeanReaderErrorHandler(). }
false;public;1;3;;public void setBeanReaderErrorHandler(BeanReaderErrorHandler beanReaderErrorHandler) {     configuration.setBeanReaderErrorHandler(beanReaderErrorHandler). }
false;public;0;3;;public String getBeanReaderErrorHandlerType() {     return configuration.getBeanReaderErrorHandlerType(). }
false;public;1;3;;public void setBeanReaderErrorHandlerType(String beanReaderErrorHandlerType) {     configuration.setBeanReaderErrorHandlerType(beanReaderErrorHandlerType). }
false;public;1;3;;public void setBeanReaderErrorHandlerType(Class<?> beanReaderErrorHandlerType) {     configuration.setBeanReaderErrorHandlerType(beanReaderErrorHandlerType). }
false;public;0;3;;public boolean isUnmarshalSingleObject() {     return configuration.isUnmarshalSingleObject(). }
false;public;1;3;;public void setUnmarshalSingleObject(boolean unmarshalSingleObject) {     configuration.setUnmarshalSingleObject(unmarshalSingleObject). }
