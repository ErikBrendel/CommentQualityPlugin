commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public void process(Exchange exchange) throws Exception {     Object body = exchange.getIn().getBody().     InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body).     String jobName = exchange.getIn().getHeader(PrinterEndpoint.JOB_NAME, "Camel: lpr", String.class).     print(is, jobName). }
false;private;2;6;;private void print(InputStream body, String jobName) throws PrintException {     if (printerOperations.getPrintService().isDocFlavorSupported(printerOperations.getFlavor())) {         PrintDocument printDoc = new PrintDocument(body, printerOperations.getFlavor()).         printerOperations.print(printDoc, config.isSendToPrinter(), config.getMimeType(), jobName).     } }
false;private;0;3;;private DocFlavor assignDocFlavor() throws Exception {     return config.getDocFlavor(). }
false;private;0;23;;private PrintRequestAttributeSet assignPrintAttributes() throws PrintException {     PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet().     if (config.getCopies() >= 1) {         printRequestAttributeSet.add(new Copies(config.getCopies())).     } else {         throw new PrintException("Number of print copies should be greater than zero").     }     printRequestAttributeSet.add(config.getMediaSizeName()).     printRequestAttributeSet.add(config.getInternalSides()).     printRequestAttributeSet.add(config.getInternalOrientation()).     if (config.getMediaTray() != null) {         MediaTray mediaTray = resolveMediaTray(config.getMediaTray()).         if (mediaTray == null) {             throw new PrintException("mediatray not found " + config.getMediaTray()).         }         printRequestAttributeSet.add(mediaTray).     }     return printRequestAttributeSet. }
false;private;1;21;;private MediaTray resolveMediaTray(String tray) {     Media[] medias = (Media[]) getPrintService().getSupportedAttributeValues(Media.class, null, null).     if (medias == null) {         return null.     } else {         for (Media media : medias) {             if (media instanceof MediaTray) {                 MediaTray mediaTray = (MediaTray) media.                 String trayName = mediaTray.toString().trim().                 if (trayName.contains(" ")) {                     trayName = trayName.replace(' ', '_').                 }                 if (trayName.equals(tray)) {                     return mediaTray.                 }             }         }         return null.     } }
false;private;0;28;;private PrintService assignPrintService() throws PrintException {     PrintService printService.     if ((config.getHostname().equalsIgnoreCase("localhost")) && (config.getPrintername().equalsIgnoreCase("default"))) {         printService = PrintServiceLookup.lookupDefaultPrintService().     } else {         PrintService[] services = PrintServiceLookup.lookupPrintServices(null, null).         String name.         if (config.getHostname().equalsIgnoreCase("localhost")) {             // no hostname for localhost printers             name = config.getPrintername().         } else {             name = config.getHostname() + "/" + config.getPrintername().             if (config.getPrinterPrefix() != null) {                 name = config.getPrinterPrefix() + name.             }         }         log.debug("Using printer name: {}", name).         setPrinter(name).         int position = findPrinter(services, printer).         if (position < 0) {             throw new PrintException("No printer found with name: " + printer + ". Please verify that the host and printer are registered and reachable from this machine.").         }         printService = services[position].     }     return printService. }
false;private;2;18;;private int findPrinter(PrintService[] services, String printer) {     int position = -1.     // align slashes so we match / or \     printer = printer.toLowerCase(Locale.US).     printer = printer.replace('\\', '/').     for (int i = 0. i < services.length. i++) {         String printerName = services[i].getName().         log.debug("Printer service printer name: {}", printerName).         // align slashes so we match / or \         printerName = printerName.toLowerCase(Locale.US).         printerName = printerName.replace('\\', '/').         if (printer.endsWith(printerName)) {             position = i.             break.         }     }     return position. }
false;public;0;3;;public PrinterConfiguration getConfig() {     return config. }
false;public;0;3;;public PrinterOperations getPrinterOperations() {     return printerOperations. }
false;public;1;3;;public void setPrinterOperations(PrinterOperations printerOperations) {     this.printerOperations = printerOperations. }
false;public;0;3;;public PrintService getPrintService() {     return printService. }
false;public;1;3;;public void setPrintService(PrintService printService) {     this.printService = printService. }
false;public;0;3;;public String getPrinter() {     return printer. }
false;public;1;3;;public void setPrinter(String printer) {     this.printer = printer. }
false;protected;0;12;;@Override protected void doStart() throws Exception {     if (printService == null) {         printService = assignPrintService().     }     ObjectHelper.notNull(printService, "PrintService", this).     if (printerOperations == null) {         printerOperations = new PrinterOperations(printService, assignDocFlavor(), assignPrintAttributes()).     }     super.doStart(). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     super.doStop(). }
