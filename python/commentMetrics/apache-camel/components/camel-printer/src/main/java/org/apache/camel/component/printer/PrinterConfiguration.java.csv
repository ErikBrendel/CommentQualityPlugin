commented;modifiers;parameterAmount;loc;comment;code
false;public;1;43;;public void parseURI(URI uri) throws Exception {     String protocol = uri.getScheme().     if (!protocol.equalsIgnoreCase("lpr")) {         throw new IllegalArgumentException("Unrecognized Print protocol: " + protocol + " for uri: " + uri).     }     setUri(uri).     setHostname(uri.getHost()).     setPort(uri.getPort()).     // use path as printer name, but without any leading slashes     String path = uri.getPath().     path = StringHelper.removeStartingCharacters(path, '/').     path = StringHelper.removeStartingCharacters(path, '\\').     setPrintername(path).     Map<String, Object> printSettings = URISupport.parseParameters(uri).     setFlavor((String) printSettings.get("flavor")).     setMimeType((String) printSettings.get("mimeType")).     setDocFlavor(assignDocFlavor(flavor, mimeType)).     setPrinterPrefix((String) printSettings.get("printerPrefix")).     if (printSettings.containsKey("copies")) {         setCopies(Integer.valueOf((String) printSettings.get("copies"))).     }     setMediaSize((String) printSettings.get("mediaSize")).     setSides((String) printSettings.get("sides")).     setOrientation((String) printSettings.get("orientation")).     setMediaSizeName(assignMediaSize(mediaSize)).     setInternalSides(assignSides(sides)).     setInternalOrientation(assignOrientation(orientation)).     if (printSettings.containsKey("sendToPrinter")) {         if (!(Boolean.valueOf((String) printSettings.get("sendToPrinter")))) {             setSendToPrinter(false).         }     }     if (printSettings.containsKey("mediaTray")) {         setMediaTray((String) printSettings.get("mediaTray")).     } }
false;private;2;61;;private DocFlavor assignDocFlavor(String flavor, String mimeType) throws Exception {     // defaults     if (mimeType == null) {         mimeType = "AUTOSENSE".     }     if (flavor == null) {         flavor = "DocFlavor.BYTE_ARRAY".     }     DocFlavor d = DocFlavor.BYTE_ARRAY.AUTOSENSE.     DocFlavorAssigner docFlavorAssigner = new DocFlavorAssigner().     if (mimeType.equalsIgnoreCase("AUTOSENSE")) {         d = docFlavorAssigner.forMimeTypeAUTOSENSE(flavor).     } else if (mimeType.equalsIgnoreCase("GIF")) {         d = docFlavorAssigner.forMimeTypeGIF(flavor).     } else if (mimeType.equalsIgnoreCase("JPEG")) {         d = docFlavorAssigner.forMimeTypeJPEG(flavor).     } else if (mimeType.equalsIgnoreCase("PDF")) {         d = docFlavorAssigner.forMimeTypePDF(flavor).     } else if (mimeType.equalsIgnoreCase("PCL")) {         d = docFlavorAssigner.forMimeTypePCL(flavor).     } else if (mimeType.equalsIgnoreCase("POSTSCRIPT")) {         d = docFlavorAssigner.forMimeTypePOSTSCRIPT(flavor).     } else if (mimeType.equalsIgnoreCase("TEXT_HTML_HOST")) {         d = docFlavorAssigner.forMimeTypeHOST(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_HTML_US_ASCII")) {         d = docFlavorAssigner.forMimeTypeUSASCII(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_HTML_UTF_16")) {         d = docFlavorAssigner.forMimeTypeUTF16(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_HTML_UTF_16LE")) {         d = docFlavorAssigner.forMimeTypeUTF16LE(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_HTML_UTF_16BE")) {         d = docFlavorAssigner.forMimeTypeUTF16BE(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_HTML_UTF_8")) {         d = docFlavorAssigner.forMimeTypeUTF8(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_PLAIN_HOST")) {         d = docFlavorAssigner.forMimeTypeHOST(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_PLAIN_US_ASCII")) {         d = docFlavorAssigner.forMimeTypeUSASCII(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_PLAIN_UTF_16")) {         d = docFlavorAssigner.forMimeTypeUTF16(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_PLAIN_UTF_16LE")) {         d = docFlavorAssigner.forMimeTypeUTF16LE(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_PLAIN_UTF_16BE")) {         d = docFlavorAssigner.forMimeTypeUTF16BE(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_PLAIN_UTF_8")) {         d = docFlavorAssigner.forMimeTypeUTF8(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_HTML")) {         d = docFlavorAssigner.forMimeTypeBasic(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("TEXT_PLAIN")) {         d = docFlavorAssigner.forMimeTypeBasic(flavor, mimeType).     } else if (mimeType.equalsIgnoreCase("PAGEABLE")) {         d = docFlavorAssigner.forMimeTypePAGEABLE(flavor).     } else if (mimeType.equalsIgnoreCase("PRINTABLE")) {         d = docFlavorAssigner.forMimeTypePRINTABLE(flavor).     } else if (mimeType.equalsIgnoreCase("RENDERABLE_IMAGE")) {         d = docFlavorAssigner.forMimeTypeRENDERABLEIMAGE(flavor).     }     return d. }
false;private;1;20;;private MediaSizeName assignMediaSize(String size) {     MediaSizeAssigner mediaSizeAssigner = new MediaSizeAssigner().     MediaSizeName answer.     if (size == null) {         // default to NA letter if no size configured         answer = MediaSizeName.NA_LETTER.     } else if (size.toLowerCase().startsWith("iso")) {         answer = mediaSizeAssigner.selectMediaSizeNameISO(size).     } else if (size.startsWith("jis")) {         answer = mediaSizeAssigner.selectMediaSizeNameJIS(size).     } else if (size.startsWith("na")) {         answer = mediaSizeAssigner.selectMediaSizeNameNA(size).     } else {         answer = mediaSizeAssigner.selectMediaSizeNameOther(size).     }     return answer. }
false;public;1;22;;public Sides assignSides(String sidesString) {     Sides answer.     if (sidesString == null) {         // default to one side if no slides configured         answer = Sides.ONE_SIDED.     } else if (sidesString.equalsIgnoreCase("one-sided")) {         answer = Sides.ONE_SIDED.     } else if (sidesString.equalsIgnoreCase("duplex")) {         answer = Sides.DUPLEX.     } else if (sidesString.equalsIgnoreCase("tumble")) {         answer = Sides.TUMBLE.     } else if (sidesString.equalsIgnoreCase("two-sided-short-edge")) {         answer = Sides.TWO_SIDED_SHORT_EDGE.     } else if (sidesString.equalsIgnoreCase("two-sided-long-edge")) {         answer = Sides.TWO_SIDED_LONG_EDGE.     } else {         answer = Sides.ONE_SIDED.     }     return answer. }
false;public;1;20;;public OrientationRequested assignOrientation(final String orientation) {     OrientationRequested answer.     if (orientation == null) {         // default to portrait         answer = OrientationRequested.PORTRAIT.     } else if (orientation.equalsIgnoreCase("portrait")) {         answer = OrientationRequested.PORTRAIT.     } else if (orientation.equalsIgnoreCase("landscape")) {         answer = OrientationRequested.LANDSCAPE.     } else if (orientation.equalsIgnoreCase("reverse-portrait")) {         answer = OrientationRequested.REVERSE_PORTRAIT.     } else if (orientation.equalsIgnoreCase("reverse-landscape")) {         answer = OrientationRequested.REVERSE_LANDSCAPE.     } else {         answer = OrientationRequested.PORTRAIT.     }     return answer. }
false;public;0;3;;public URI getUri() {     return uri. }
false;public;1;3;;public void setUri(URI uri) {     this.uri = uri. }
false;public;0;3;;public String getHostname() {     return hostname. }
true;public;1;3;/**  * Hostname of the printer  */ ;/**  * Hostname of the printer  */ public void setHostname(String hostname) {     this.hostname = hostname. }
false;public;0;3;;public int getPort() {     return port. }
true;public;1;3;/**  * Port number of the printer  */ ;/**  * Port number of the printer  */ public void setPort(int port) {     this.port = port. }
false;public;0;3;;public String getPrintername() {     return printername. }
true;public;1;3;/**  * Name of the printer  */ ;/**  * Name of the printer  */ public void setPrintername(String printername) {     this.printername = printername. }
false;public;0;3;;public int getCopies() {     return copies. }
true;public;1;3;/**  * Number of copies to print  */ ;/**  * Number of copies to print  */ public void setCopies(int copies) {     this.copies = copies. }
false;public;0;3;;public String getFlavor() {     return flavor. }
true;public;1;3;/**  * Sets DocFlavor to use.  */ ;/**  * Sets DocFlavor to use.  */ public void setFlavor(String flavor) {     this.flavor = flavor. }
false;public;0;3;;public DocFlavor getDocFlavor() {     return docFlavor. }
true;public;1;3;/**  * Sets DocFlavor to use.  */ ;/**  * Sets DocFlavor to use.  */ public void setDocFlavor(DocFlavor docFlavor) {     this.docFlavor = docFlavor. }
false;public;0;3;;public String getMediaSize() {     return mediaSize. }
true;public;1;3;/**  * Sets the stationary as defined by enumeration names in the javax.print.attribute.standard.MediaSizeName API.  * The default setting is to use North American Letter sized stationary.  * The value's case is ignored, e.g. values of iso_a4 and ISO_A4 may be used.  */ ;/**  * Sets the stationary as defined by enumeration names in the javax.print.attribute.standard.MediaSizeName API.  * The default setting is to use North American Letter sized stationary.  * The value's case is ignored, e.g. values of iso_a4 and ISO_A4 may be used.  */ public void setMediaSize(String mediaSize) {     this.mediaSize = mediaSize. }
false;public;0;3;;public String getSides() {     return sides. }
true;public;1;3;/**  * Sets one sided or two sided printing based on the javax.print.attribute.standard.Sides API  */ ;/**  * Sets one sided or two sided printing based on the javax.print.attribute.standard.Sides API  */ public void setSides(String sides) {     this.sides = sides. }
false;public;0;3;;public MediaSizeName getMediaSizeName() {     return mediaSizeName. }
false;public;1;3;;public void setMediaSizeName(MediaSizeName mediaSizeName) {     this.mediaSizeName = mediaSizeName. }
false;public;0;3;;public Sides getInternalSides() {     return internalSides. }
false;public;1;3;;public void setInternalSides(Sides internalSides) {     this.internalSides = internalSides. }
false;public;0;3;;public OrientationRequested getInternalOrientation() {     return internalOrientation. }
false;public;1;3;;public void setInternalOrientation(OrientationRequested internalOrientation) {     this.internalOrientation = internalOrientation. }
false;public;0;3;;public String getOrientation() {     return orientation. }
true;public;1;3;/**  * Sets the page orientation.  */ ;/**  * Sets the page orientation.  */ public void setOrientation(String orientation) {     this.orientation = orientation. }
false;public;0;3;;public String getMimeType() {     return mimeType. }
true;public;1;3;/**  * Sets mimeTypes supported by the javax.print.DocFlavor API  */ ;/**  * Sets mimeTypes supported by the javax.print.DocFlavor API  */ public void setMimeType(String mimeType) {     this.mimeType = mimeType. }
false;public;0;3;;public boolean isSendToPrinter() {     return sendToPrinter. }
true;public;1;3;/**  * etting this option to false prevents sending of the print data to the printer  */ ;/**  * etting this option to false prevents sending of the print data to the printer  */ public void setSendToPrinter(boolean sendToPrinter) {     this.sendToPrinter = sendToPrinter. }
false;public;0;3;;public String getMediaTray() {     return mediaTray. }
true;public;1;3;/**  * Sets MediaTray supported by the javax.print.DocFlavor API, for example upper,middle etc.  */ ;/**  * Sets MediaTray supported by the javax.print.DocFlavor API, for example upper,middle etc.  */ public void setMediaTray(String mediaTray) {     this.mediaTray = mediaTray. }
false;public;0;3;;public String getPrinterPrefix() {     return printerPrefix. }
true;public;1;3;/**  * Sets the prefix name of the printer, it is useful when the printer name does not start with //hostname/printer  */ ;/**  * Sets the prefix name of the printer, it is useful when the printer name does not start with //hostname/printer  */ public void setPrinterPrefix(String printerPrefix) {     this.printerPrefix = printerPrefix. }
