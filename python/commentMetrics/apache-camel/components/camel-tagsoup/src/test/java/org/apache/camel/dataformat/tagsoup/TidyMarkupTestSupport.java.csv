commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;14;;public static String loadFileAsString(File file) throws Exception {     StringBuilder fileContent = new StringBuilder().     BufferedReader input = IOHelper.buffered(new FileReader(file)).     try {         String line = null.         while ((line = input.readLine()) != null) {             fileContent.append(line).             fileContent.append(System.lineSeparator()).         }     } finally {         input.close().     }     return fileContent.toString(). }
true;public,static;1;3;/**  * Convert XML String to a Document.  *  * @param xmlString  * @return document Document  * @throws IOException  * @throws SAXException  * @throws ParserConfigurationException  */ ;/**  * Convert XML String to a Document.  *  * @param xmlString  * @return document Document  * @throws IOException  * @throws SAXException  * @throws ParserConfigurationException  */ public static Document stringToXml(String xmlString) throws SAXException, IOException, ParserConfigurationException {     return createDocumentBuilder().parse(new InputSource(new StringReader(xmlString))). }
true;public,static;0;10;/**  * Static to generate a documentBuilder  *  * @return  * @throws ParserConfigurationException  */ ;/**  * Static to generate a documentBuilder  *  * @return  * @throws ParserConfigurationException  */ public static DocumentBuilder createDocumentBuilder() throws ParserConfigurationException {     DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance().     docBuilderFactory.setIgnoringComments(true).     docBuilderFactory.setIgnoringElementContentWhitespace(true).     docBuilderFactory.setCoalescing(true).     docBuilderFactory.setExpandEntityReferences(true).     docBuilderFactory.setNamespaceAware(true).     return docBuilderFactory.newDocumentBuilder(). }
