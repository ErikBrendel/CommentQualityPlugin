commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;@Test public void testUnMarshalToStringOfXml() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(2).     /*          * each of these files has a <p>TidyMarkupNode section. (no closing tag)          *           * See the route below, we send the tidyMarkup to xpath and boolean that out.          */     String badHtml = TidyMarkupTestSupport.loadFileAsString(new File("src/test/resources/org/apache/camel/dataformat/tagsoup/testfile1.html")).     String evilHtml = TidyMarkupTestSupport.loadFileAsString(new File("src/test/resources/org/apache/camel/dataformat/tagsoup/testfile2-evilHtml.html")).     template.sendBody("direct:start", badHtml).     template.sendBody("direct:start", evilHtml).     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     for (Exchange exchange : list) {         Message in = exchange.getIn().         String response = in.getBody(String.class).         log.debug("Received " + response).         assertNotNull("Should be able to convert received body to a string", response).         try {             /*                  * our route xpaths the existence of our signature "<p>TidyMarkupNode"                  * but of course, by the xpath time, it is well formed                  */             assertTrue(response.equals("true")).         } catch (Exception e) {             fail("Failed to convert the resulting String to XML: " + e.getLocalizedMessage()).         }     } }
false;public;0;4;;public void configure() {     from("direct:start").unmarshal().tidyMarkup().setBody().xpath("boolean(//p[contains(text(),'TidyMarkupNode')])", String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").unmarshal().tidyMarkup().setBody().xpath("boolean(//p[contains(text(),'TidyMarkupNode')])", String.class).to("mock:result").         }     }. }
