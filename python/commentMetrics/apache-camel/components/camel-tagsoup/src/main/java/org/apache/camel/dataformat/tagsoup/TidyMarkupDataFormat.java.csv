commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "tidyMarkup". }
true;public;3;4;/**  * Unsupported operation. We cannot create ugly HTML.  */ ;/**  * Unsupported operation. We cannot create ugly HTML.  */ public void marshal(Exchange exchange, Object object, OutputStream outputStream) throws Exception {     throw new CamelException("Marshalling from Well Formed HTML to ugly HTML is not supported." + " Only unmarshal is supported"). }
true;public;2;13;/**  * Unmarshal the data  */ ;/**  * Unmarshal the data  */ public Object unmarshal(Exchange exchange, InputStream inputStream) throws Exception {     ObjectHelper.notNull(dataObjectType, "dataObjectType", this).     if (dataObjectType.isAssignableFrom(Node.class)) {         return asNodeTidyMarkup(inputStream).     } else if (dataObjectType.isAssignableFrom(String.class)) {         return asStringTidyMarkup(inputStream).     } else {         throw new IllegalArgumentException("The return type [" + dataObjectType.getCanonicalName() + "] is unsupported").     } }
true;public;1;20;/**  * Return the tidy markup as a string  *  * @param inputStream  * @return String of XML  * @throws CamelException  */ ;/**  * Return the tidy markup as a string  *  * @param inputStream  * @return String of XML  * @throws CamelException  */ public String asStringTidyMarkup(InputStream inputStream) throws CamelException {     XMLReader parser = createTagSoupParser().     StringWriter w = new StringWriter().     parser.setContentHandler(createContentHandler(w)).     try {         parser.parse(new InputSource(inputStream)).         return w.toString().     } catch (Exception e) {         throw new CamelException("Failed to convert the HTML to tidy Markup", e).     } finally {         try {             inputStream.close().         } catch (Exception e) {             LOG.warn("Failed to close the inputStream").         }     } }
true;public;1;16;/**  * Return the HTML Markup as an {@link org.w3c.dom.Node}  *  * @param inputStream  *            The input Stream to convert  * @return org.w3c.dom.Node The HTML Markup as a DOM Node  * @throws CamelException  */ ;/**  * Return the HTML Markup as an {@link org.w3c.dom.Node}  *  * @param inputStream  *            The input Stream to convert  * @return org.w3c.dom.Node The HTML Markup as a DOM Node  * @throws CamelException  */ public Node asNodeTidyMarkup(InputStream inputStream) throws CamelException {     XMLReader parser = createTagSoupParser().     StringWriter w = new StringWriter().     parser.setContentHandler(createContentHandler(w)).     try {         TransformerFactory transformerFactory = TransformerFactory.newInstance().         transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).         Transformer transformer = transformerFactory.newTransformer().         DOMResult result = new DOMResult().         transformer.transform(new SAXSource(parser, new InputSource(inputStream)), result).         return result.getNode().     } catch (Exception e) {         throw new CamelException("Failed to convert the HTML to tidy Markup", e).     } }
true;protected;0;41;/**  * Create the tagSoup Parser  */ ;/**  * Create the tagSoup Parser  */ protected XMLReader createTagSoupParser() throws CamelException {     XMLReader reader = new Parser().     try {         reader.setFeature(Parser.namespacesFeature, false).         reader.setFeature(Parser.namespacePrefixesFeature, false).         if (getParserFeatures() != null) {             for (Entry<String, Boolean> e : getParserFeatures().entrySet()) {                 reader.setFeature(e.getKey(), e.getValue()).             }         }         if (getParserProperties() != null) {             for (Entry<String, Object> e : getParserProperties().entrySet()) {                 reader.setProperty(e.getKey(), e.getValue()).             }         }         /*              * default the schema to HTML              */         if (this.getParsingSchema() != null) {             reader.setProperty(Parser.schemaProperty, getParsingSchema()).         }     } catch (Exception e) {         throw new IllegalArgumentException("Problem configuring the parser", e).     }     return reader. }
false;protected;1;19;;protected ContentHandler createContentHandler(Writer w) {     XMLWriter xmlWriter = new XMLWriter(w).     // for a default well formed Html generator     if (getMethod() != null) {         xmlWriter.setOutputProperty(XMLWriter.METHOD, getMethod()).     } else {         xmlWriter.setOutputProperty(XMLWriter.METHOD, XML).     }     if (omitXmlDeclaration) {         xmlWriter.setOutputProperty(XMLWriter.OMIT_XML_DECLARATION, YES).     } else {         xmlWriter.setOutputProperty(XMLWriter.OMIT_XML_DECLARATION, NO).     }     return xmlWriter. }
false;public;1;3;;public void setParsingSchema(Schema schema) {     this.parsingSchema = schema. }
false;public;0;6;;public Schema getParsingSchema() {     if (parsingSchema == null) {         this.parsingSchema = new HTMLSchema().     }     return parsingSchema. }
false;public;0;3;;public boolean isOmitXmlDeclaration() {     return omitXmlDeclaration. }
false;public;1;3;;public void setOmitXmlDeclaration(boolean omitXmlDeclaration) {     this.omitXmlDeclaration = omitXmlDeclaration. }
false;public;1;3;;public void setParserFeatures(Map<String, Boolean> parserFeatures) {     this.parserFeatures = parserFeatures. }
false;public;0;3;;public Map<String, Boolean> getParserFeatures() {     return parserFeatures. }
false;public;1;3;;public void setParserProperties(Map<String, Object> parserProperties) {     this.parserProperties = parserProperties. }
false;public;0;3;;public Map<String, Object> getParserProperties() {     return parserProperties. }
false;public;1;3;;public void setMethod(String method) {     this.method = method. }
false;public;0;3;;public String getMethod() {     return method. }
false;public;0;3;;public Class<?> getDataObjectType() {     return dataObjectType. }
false;public;1;3;;public void setDataObjectType(Class<?> dataObjectType) {     this.dataObjectType = dataObjectType. }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
