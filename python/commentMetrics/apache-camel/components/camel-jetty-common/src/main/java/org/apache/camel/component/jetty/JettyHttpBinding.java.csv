commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Parses the response from the Jetty client.  *  * @param exchange     the Exchange which to populate with the response  * @param httpExchange the response from the Jetty client  * @throws Exception is thrown if error parsing response  */ ;/**  * Parses the response from the Jetty client.  *  * @param exchange     the Exchange which to populate with the response  * @param httpExchange the response from the Jetty client  * @throws Exception is thrown if error parsing response  */ void populateResponse(Exchange exchange, JettyContentExchange httpExchange) throws Exception.
true;;0;1;/**  * Gets the header filter strategy  *  * @return the strategy  */ ;/**  * Gets the header filter strategy  *  * @return the strategy  */ HeaderFilterStrategy getHeaderFilterStrategy().
true;;1;1;/**  * Sets the header filter strategy to use.  * <p/>  * Will default use {@link org.apache.camel.http.common.HttpHeaderFilterStrategy}  *  * @param headerFilterStrategy the custom strategy  */ ;/**  * Sets the header filter strategy to use.  * <p/>  * Will default use {@link org.apache.camel.http.common.HttpHeaderFilterStrategy}  *  * @param headerFilterStrategy the custom strategy  */ void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy).
true;;1;1;/**  * Whether to throw {@link org.apache.camel.http.common.HttpOperationFailedException}  * in case of response code != 200.  *  * @param throwExceptionOnFailure <tt>true</tt> to throw exception  */ ;/**  * Whether to throw {@link org.apache.camel.http.common.HttpOperationFailedException}  * in case of response code != 200.  *  * @param throwExceptionOnFailure <tt>true</tt> to throw exception  */ void setThrowExceptionOnFailure(boolean throwExceptionOnFailure).
true;;0;1;/**  * Whether to throw {@link org.apache.camel.http.common.HttpOperationFailedException}  * in case of response code != 200.  *  * @return <tt>true</tt> to throw exception  */ ;/**  * Whether to throw {@link org.apache.camel.http.common.HttpOperationFailedException}  * in case of response code != 200.  *  * @return <tt>true</tt> to throw exception  */ boolean isThrowExceptionOnFailure().
true;;1;1;/**  * Whether to transfer exception back as a serialized java object  * if processing failed due to an exception  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  *  * @param transferException <tt>true</tt> to transfer exception  */ ;/**  * Whether to transfer exception back as a serialized java object  * if processing failed due to an exception  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  *  * @param transferException <tt>true</tt> to transfer exception  */ void setTransferException(boolean transferException).
true;;0;1;/**  * Whether to transfer exception back as a serialized java object  * if processing failed due to an exception  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  *  * @return <tt>true</tt> to transfer exception  */ ;/**  * Whether to transfer exception back as a serialized java object  * if processing failed due to an exception  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  *  * @return <tt>true</tt> to transfer exception  */ boolean isTransferException().
true;;1;1;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  *  * @param allowJavaSerializedObject <tt>true</tt> to allow serializing java objects  */ ;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  *  * @param allowJavaSerializedObject <tt>true</tt> to allow serializing java objects  */ void setAllowJavaSerializedObject(boolean allowJavaSerializedObject).
true;;0;1;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ ;/**  * Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object  * <p/>  * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming  * data from the request to Java and that can be a potential security risk.  */ boolean isAllowJavaSerializedObject().
true;;0;1;/**  * The status codes which are considered a success response. The values are inclusive. Multiple ranges can be  * defined, separated by comma, e.g. <tt>200-204,209,301-304</tt>. Each range must be a single number or from-to  * with the dash included.  * <p/>  * The default range is <tt>200-299</tt>  */ ;/**  * The status codes which are considered a success response. The values are inclusive. Multiple ranges can be  * defined, separated by comma, e.g. <tt>200-204,209,301-304</tt>. Each range must be a single number or from-to  * with the dash included.  * <p/>  * The default range is <tt>200-299</tt>  */ String getOkStatusCodeRange().
true;;1;1;/**  * The status codes which are considered a success response. The values are inclusive. Multiple ranges can be  * defined, separated by comma, e.g. <tt>200-204,209,301-304</tt>. Each range must be a single number or from-to  * with the dash included.  * <p/>  * The default range is <tt>200-299</tt>  */ ;/**  * The status codes which are considered a success response. The values are inclusive. Multiple ranges can be  * defined, separated by comma, e.g. <tt>200-204,209,301-304</tt>. Each range must be a single number or from-to  * with the dash included.  * <p/>  * The default range is <tt>200-299</tt>  */ void setOkStatusCodeRange(String okStatusCodeRange).
