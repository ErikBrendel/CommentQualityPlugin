# id;timestamp;commentText;codeText;commentWords;codeWords
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1459607891;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1459607891;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1459607891;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1460979582;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1460979582;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1462433668;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1494089501;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1504855747;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1524063209;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1540108163;Provides an iterable collection of references, even if the original array is null;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references != null ? Arrays.asList(references) : Collections.<ServiceReference>emptyList()__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,null;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,arrays,as,list,references,collections,service,reference,empty,list
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal... principals);1494089501;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<String>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<String>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,string,command,callable,else,command,future,new,future,task,string,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal... principals);1504855747;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<String>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<String>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,string,command,callable,else,command,future,new,future,task,string,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal... principals);1524063209;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,command,callable,else,command,future,new,future,task,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal... principals);1540108163;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,command,callable,else,command,future,new,future,task,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal ... principals);1459607891;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, Principal ... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal ... principals);1459607891;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, Principal ... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal ... principals);1459607891;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, Principal ... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal ... principals);1460979582;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, Principal ... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal ... principals);1460979582;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, Principal ... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal ... principals);1462433668;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, Principal ... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals);1459607891;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<String>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<String>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,string,command,callable,else,command,future,new,future,task,string,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals);1459607891;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<String>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<String>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,string,command,callable,else,command,future,new,future,task,string,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals);1459607891;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<String>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<String>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,string,command,callable,else,command,future,new,future,task,string,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals);1460979582;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<String>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<String>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,string,command,callable,else,command,future,new,future,task,string,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals);1460979582;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under_@return;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<String>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<String>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under,return;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,string,command,callable,else,command,future,new,future,task,string,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals);1462433668;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command    The command to execute._@param timeout    The amount of time in millis to wait for the command to execute._@param silent     Specifies if the command should be displayed in the screen._@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, final Long timeout, final Boolean silent, final Principal ... principals) {__        waitForCommandService(command)__        String response__        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()__        final PrintStream printStream = new PrintStream(byteArrayOutputStream)__        final Callable<String> commandCallable = new Callable<String>() {_            @Override_            public String call() throws Exception {_                try {_                    if (!silent) {_                        System.err.println(command)__                    }_                    final CommandProcessor commandProcessor = getOsgiService(CommandProcessor.class)__                    final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err)__                    commandSession.execute(command)__                } catch (Exception e) {_                    throw new RuntimeException(e.getMessage(), e)__                }_                printStream.flush()__                return byteArrayOutputStream.toString()__            }_        }___        FutureTask<String> commandFuture__        if (principals.length == 0) {_            commandFuture = new FutureTask<String>(commandCallable)__        } else {_            _            commandFuture = new FutureTask<String>(new Callable<String>() {_                @Override_                public String call() throws Exception {_                    Subject subject = new Subject()__                    subject.getPrincipals().addAll(Arrays.asList(principals))__                    return Subject.doAs(subject, new PrivilegedExceptionAction<String>() {_                        @Override_                        public String run() throws Exception {_                            return commandCallable.call()__                        }_                    })__                }_            })__        }___        try {_            executor.submit(commandFuture)__            response = commandFuture.get(timeout, TimeUnit.MILLISECONDS)__        } catch (Exception e) {_            e.printStackTrace(System.err)__            response = "SHELL COMMAND TIMED OUT: "__        }__        return response__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,timeout,the,amount,of,time,in,millis,to,wait,for,the,command,to,execute,param,silent,specifies,if,the,command,should,be,displayed,in,the,screen,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,final,long,timeout,final,boolean,silent,final,principal,principals,wait,for,command,service,command,string,response,final,byte,array,output,stream,byte,array,output,stream,new,byte,array,output,stream,final,print,stream,print,stream,new,print,stream,byte,array,output,stream,final,callable,string,command,callable,new,callable,string,override,public,string,call,throws,exception,try,if,silent,system,err,println,command,final,command,processor,command,processor,get,osgi,service,command,processor,class,final,command,session,command,session,command,processor,create,session,system,in,print,stream,system,err,command,session,execute,command,catch,exception,e,throw,new,runtime,exception,e,get,message,e,print,stream,flush,return,byte,array,output,stream,to,string,future,task,string,command,future,if,principals,length,0,command,future,new,future,task,string,command,callable,else,command,future,new,future,task,string,new,callable,string,override,public,string,call,throws,exception,subject,subject,new,subject,subject,get,principals,add,all,arrays,as,list,principals,return,subject,do,as,subject,new,privileged,exception,action,string,override,public,string,run,throws,exception,return,command,callable,call,try,executor,submit,command,future,response,command,future,get,timeout,time,unit,milliseconds,catch,exception,e,e,print,stack,trace,system,err,response,shell,command,timed,out,return,response
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal... principals);1494089501;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, Principal... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal... principals);1504855747;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, Principal... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal... principals);1524063209;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, Principal... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected String executeCommand(final String command, Principal... principals);1540108163;Executes a shell command and returns output as a String._Commands have a default timeout of 10 seconds.__@param command The command to execute_@param principals The principals (e.g. RolePrincipal objects) to run the command under;protected String executeCommand(final String command, Principal... principals) {_        return executeCommand(command, COMMAND_TIMEOUT, false, principals)__    };executes,a,shell,command,and,returns,output,as,a,string,commands,have,a,default,timeout,of,10,seconds,param,command,the,command,to,execute,param,principals,the,principals,e,g,role,principal,objects,to,run,the,command,under;protected,string,execute,command,final,string,command,principal,principals,return,execute,command,command,false,principals
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1459607891;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.__@param featuresBefore;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        Feature[] features = featuresService.listInstalledFeatures()__        for (Feature curFeature : features) {_            if (!featuresBefore.contains(curFeature)) {_                try {_                    System.out.println("Uninstalling " + curFeature.getName())__                    featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                } catch (Exception e) {_                    _                }_            }_        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed,param,features,before;protected,void,uninstall,new,features,set,feature,features,before,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1459607891;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.__@param featuresBefore;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        Feature[] features = featuresService.listInstalledFeatures()__        for (Feature curFeature : features) {_            if (!featuresBefore.contains(curFeature)) {_                try {_                    System.out.println("Uninstalling " + curFeature.getName())__                    featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                } catch (Exception e) {_                    _                }_            }_        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed,param,features,before;protected,void,uninstall,new,features,set,feature,features,before,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1459607891;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.__@param featuresBefore;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        Feature[] features = featuresService.listInstalledFeatures()__        for (Feature curFeature : features) {_            if (!featuresBefore.contains(curFeature)) {_                try {_                    System.out.println("Uninstalling " + curFeature.getName())__                    featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                } catch (Exception e) {_                    _                }_            }_        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed,param,features,before;protected,void,uninstall,new,features,set,feature,features,before,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1460979582;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.__@param featuresBefore;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        Feature[] features = featuresService.listInstalledFeatures()__        for (Feature curFeature : features) {_            if (!featuresBefore.contains(curFeature)) {_                try {_                    System.out.println("Uninstalling " + curFeature.getName())__                    featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                } catch (Exception e) {_                    _                }_            }_        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed,param,features,before;protected,void,uninstall,new,features,set,feature,features,before,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1460979582;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.__@param featuresBefore;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        Feature[] features = featuresService.listInstalledFeatures()__        for (Feature curFeature : features) {_            if (!featuresBefore.contains(curFeature)) {_                try {_                    System.out.println("Uninstalling " + curFeature.getName())__                    featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                } catch (Exception e) {_                    _                }_            }_        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed,param,features,before;protected,void,uninstall,new,features,set,feature,features,before,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1462433668;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        Feature[] features = featuresService.listInstalledFeatures()__        for (Feature curFeature : features) {_            if (!featuresBefore.contains(curFeature)) {_                try {_                    System.out.println("Uninstalling " + curFeature.getName())__                    featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                } catch (Exception e) {_                    _                }_            }_        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed;protected,void,uninstall,new,features,set,feature,features,before,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1494089501;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        Feature[] features = featuresService.listInstalledFeatures()__        for (Feature curFeature : features) {_            if (!featuresBefore.contains(curFeature)) {_                try {_                    System.out.println("Uninstalling " + curFeature.getName())__                    featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                } catch (Exception e) {_                    _                }_            }_        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed;protected,void,uninstall,new,features,set,feature,features,before,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1504855747;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        try {_            Feature[] features = featuresService.listInstalledFeatures()__            for (Feature curFeature : features) {_                if (!featuresBefore.contains(curFeature)) {_                    try {_                        System.out.println("Uninstalling " + curFeature.getName())__                        featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                    } catch (Exception e) {_                        _                    }_                }_            }_        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed;protected,void,uninstall,new,features,set,feature,features,before,try,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1524063209;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        try {_            Feature[] features = featuresService.listInstalledFeatures()__            for (Feature curFeature : features) {_                if (!featuresBefore.contains(curFeature)) {_                    try {_                        System.out.println("Uninstalling " + curFeature.getName())__                        featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                    } catch (Exception e) {_                        _                    }_                }_            }_        } catch (Exception e) {_            throw ObjectHelper.wrapRuntimeCamelException(e)__        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed;protected,void,uninstall,new,features,set,feature,features,before,try,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e,catch,exception,e,throw,object,helper,wrap,runtime,camel,exception,e
CamelKarafTestSupport -> protected void uninstallNewFeatures(Set<Feature> featuresBefore);1540108163;The feature service does not uninstall feature dependencies when uninstalling a single feature._So we need to make sure we uninstall all features that were newly installed.;protected void uninstallNewFeatures(Set<Feature> featuresBefore) {_        try {_            Feature[] features = featuresService.listInstalledFeatures()__            for (Feature curFeature : features) {_                if (!featuresBefore.contains(curFeature)) {_                    try {_                        System.out.println("Uninstalling " + curFeature.getName())__                        featuresService.uninstallFeature(curFeature.getName(), curFeature.getVersion())__                    } catch (Exception e) {_                        _                    }_                }_            }_        } catch (Exception e) {_            throw RuntimeCamelException.wrapRuntimeCamelException(e)__        }_    };the,feature,service,does,not,uninstall,feature,dependencies,when,uninstalling,a,single,feature,so,we,need,to,make,sure,we,uninstall,all,features,that,were,newly,installed;protected,void,uninstall,new,features,set,feature,features,before,try,feature,features,features,service,list,installed,features,for,feature,cur,feature,features,if,features,before,contains,cur,feature,try,system,out,println,uninstalling,cur,feature,get,name,features,service,uninstall,feature,cur,feature,get,name,cur,feature,get,version,catch,exception,e,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e
