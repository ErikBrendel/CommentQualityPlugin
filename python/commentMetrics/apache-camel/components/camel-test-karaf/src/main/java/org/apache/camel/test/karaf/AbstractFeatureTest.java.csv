# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1459607891;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1459607891;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1460979582;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1460979582;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1460980616;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1461057076;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1461855834;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1461912409;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1472374149;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1479916234;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1482007822;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1482136598;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1483629060;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1489048779;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1489062887;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1489412218;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1489565332;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1491588135;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<ServiceReference>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,service,reference,0,arrays,as,list,references
AbstractFeatureTest -> private static Collection<ServiceReference> asCollection(ServiceReference[] references);1524063209;Provides an iterable collection of references, even if the original array is <code>null</code>.;private static Collection<ServiceReference> asCollection(ServiceReference[] references) {_        return references == null ? new ArrayList<>(0) : Arrays.asList(references)__    };provides,an,iterable,collection,of,references,even,if,the,original,array,is,code,null,code;private,static,collection,service,reference,as,collection,service,reference,references,return,references,null,new,array,list,0,arrays,as,list,references
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1459607891;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1459607891;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1460979582;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1460979582;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1460980616;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1461057076;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1461855834;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1461912409;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1472374149;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1479916234;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1482007822;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1482136598;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1483629060;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1489048779;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1489062887;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1489412218;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1489565332;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1491588135;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
AbstractFeatureTest -> private static String explode(Dictionary<?, ?> dictionary);1524063209;Explode the dictionary into a <code>,</code> delimited list of <code>key=value</code> pairs.;private static String explode(Dictionary<?, ?> dictionary) {_        Enumeration<?> keys = dictionary.keys()__        StringBuilder result = new StringBuilder()__        while (keys.hasMoreElements()) {_            Object key = keys.nextElement()__            result.append(String.format("%s=%s", key, dictionary.get(key)))__            if (keys.hasMoreElements()) {_                result.append(", ")__            }_        }_        return result.toString()__    };explode,the,dictionary,into,a,code,code,delimited,list,of,code,key,value,code,pairs;private,static,string,explode,dictionary,dictionary,enumeration,keys,dictionary,keys,string,builder,result,new,string,builder,while,keys,has,more,elements,object,key,keys,next,element,result,append,string,format,s,s,key,dictionary,get,key,if,keys,has,more,elements,result,append,return,result,to,string
