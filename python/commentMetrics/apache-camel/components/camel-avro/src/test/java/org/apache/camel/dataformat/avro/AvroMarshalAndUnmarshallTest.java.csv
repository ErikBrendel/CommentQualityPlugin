commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testMarshalAndUnmarshalWithDataFormat() throws Exception {     marshalAndUnmarshal("direct:in", "direct:back"). }
false;public;0;4;;@Test public void testMarshalAndUnmarshalWithDSL1() throws Exception {     marshalAndUnmarshal("direct:marshal", "direct:unmarshalA"). }
false;public;0;4;;@Test public void testMarshalAndUnmarshalWithDSL2() throws Exception {     marshalAndUnmarshal("direct:marshal", "direct:unmarshalB"). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:unmarshalC").unmarshal().avro(new CamelException("wrong schema")).to("mock:reverse"). }
false;public;0;15;;@Test public void testMarshalAndUnmarshalWithDSL3() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:unmarshalC").unmarshal().avro(new CamelException("wrong schema")).to("mock:reverse").             }         }).         fail("Expect the exception here").     } catch (Exception ex) {     // expected     } }
false;private;2;17;;private void marshalAndUnmarshal(String inURI, String outURI) throws Exception {     Value input = Value.newBuilder().setValue("test body").build().     MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Value.class).     mock.message(0).body().isEqualTo(input).     Object marshalled = template.requestBody(inURI, input).     template.sendBody(outURI, marshalled).     mock.assertIsSatisfied().     Value output = mock.getReceivedExchanges().get(0).getIn().getBody(Value.class).     assertEquals(input, output). }
false;public;0;12;;@Override public void configure() throws Exception {     AvroDataFormat format = new AvroDataFormat(Value.SCHEMA$).     from("direct:in").marshal(format).     from("direct:back").unmarshal(format).to("mock:reverse").     from("direct:marshal").marshal().avro().     from("direct:unmarshalA").unmarshal().avro(Value.class.getName()).to("mock:reverse").     from("direct:unmarshalB").unmarshal().avro(Value.SCHEMA$).to("mock:reverse"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             AvroDataFormat format = new AvroDataFormat(Value.SCHEMA$).             from("direct:in").marshal(format).             from("direct:back").unmarshal(format).to("mock:reverse").             from("direct:marshal").marshal().avro().             from("direct:unmarshalA").unmarshal().avro(Value.class.getName()).to("mock:reverse").             from("direct:unmarshalB").unmarshal().avro(Value.SCHEMA$).to("mock:reverse").         }     }. }
