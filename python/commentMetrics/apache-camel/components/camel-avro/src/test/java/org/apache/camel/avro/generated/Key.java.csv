commented;modifiers;parameterAmount;loc;comment;code
false;public;0;1;;public org.apache.avro.Schema getSchema() {     return SCHEMA$. }
true;public;1;6;// Used by DatumWriter.  Applications should not call. ;// Used by DatumWriter.  Applications should not call. public java.lang.Object get(int field$) {     switch(field$) {         case 0:             return key.         default:             throw new org.apache.avro.AvroRuntimeException("Bad index").     } }
true;public;2;7;// Used by DatumReader.  Applications should not call. ;// Used by DatumReader.  Applications should not call. @SuppressWarnings(value = "unchecked") public void put(int field$, java.lang.Object value$) {     switch(field$) {         case 0:             key = (java.lang.CharSequence) value$.             break.         default:             throw new org.apache.avro.AvroRuntimeException("Bad index").     } }
true;public;0;3;/**  * Gets the value of the 'key' field.  */ ;/**  * Gets the value of the 'key' field.  */ public java.lang.CharSequence getKey() {     return key. }
true;public;1;3;/**  * Sets the value of the 'key' field.  * @param value the value to set.  */ ;/**  * Sets the value of the 'key' field.  * @param value the value to set.  */ public void setKey(java.lang.CharSequence value) {     this.key = value. }
true;public,static;0;3;/**  * Creates a new Key RecordBuilder  */ ;/**  * Creates a new Key RecordBuilder  */ public static org.apache.camel.avro.generated.Key.Builder newBuilder() {     return new org.apache.camel.avro.generated.Key.Builder(). }
true;public,static;1;3;/**  * Creates a new Key RecordBuilder by copying an existing Builder  */ ;/**  * Creates a new Key RecordBuilder by copying an existing Builder  */ public static org.apache.camel.avro.generated.Key.Builder newBuilder(org.apache.camel.avro.generated.Key.Builder other) {     return new org.apache.camel.avro.generated.Key.Builder(other). }
true;public,static;1;3;/**  * Creates a new Key RecordBuilder by copying an existing Key instance  */ ;/**  * Creates a new Key RecordBuilder by copying an existing Key instance  */ public static org.apache.camel.avro.generated.Key.Builder newBuilder(org.apache.camel.avro.generated.Key other) {     return new org.apache.camel.avro.generated.Key.Builder(other). }
true;public;0;3;/**  * Gets the value of the 'key' field  */ ;/**  * Gets the value of the 'key' field  */ public java.lang.CharSequence getKey() {     return key. }
true;public;1;6;/**  * Sets the value of the 'key' field  */ ;/**  * Sets the value of the 'key' field  */ public org.apache.camel.avro.generated.Key.Builder setKey(java.lang.CharSequence value) {     validate(fields()[0], value).     this.key = value.     fieldSetFlags()[0] = true.     return this. }
true;public;0;3;/**  * Checks whether the 'key' field has been set  */ ;/**  * Checks whether the 'key' field has been set  */ public boolean hasKey() {     return fieldSetFlags()[0]. }
true;public;0;5;/**  * Clears the value of the 'key' field  */ ;/**  * Clears the value of the 'key' field  */ public org.apache.camel.avro.generated.Key.Builder clearKey() {     key = null.     fieldSetFlags()[0] = false.     return this. }
false;public;0;10;;@Override public Key build() {     try {         Key record = new Key().         record.key = fieldSetFlags()[0] ? this.key : (java.lang.CharSequence) defaultValue(fields()[0]).         return record.     } catch (Exception e) {         throw new org.apache.avro.AvroRuntimeException(e).     } }
