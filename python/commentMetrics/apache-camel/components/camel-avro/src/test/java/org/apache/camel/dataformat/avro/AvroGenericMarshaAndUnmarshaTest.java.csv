commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     schema = getSchema().     super.setUp(). }
false;public;0;4;;@Test public void testGenericMarshalAndUnmarshal() throws InterruptedException {     marshalAndUnmarshalGeneric("direct:in", "direct:back"). }
false;private;2;17;;private void marshalAndUnmarshalGeneric(String inURI, String outURI) throws InterruptedException {     GenericRecord input = new GenericData.Record(schema).     input.put("name", "ceposta").     MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(GenericRecord.class).     mock.message(0).body().isEqualTo(input).     Object marshalled = template.requestBody(inURI, input).     template.sendBody(outURI, marshalled).     mock.assertIsSatisfied().     GenericRecord output = mock.getReceivedExchanges().get(0).getIn().getBody(GenericRecord.class).     assertEquals(input, output). }
false;public;0;7;;@Override public void configure() throws Exception {     AvroDataFormat format = new AvroDataFormat(schema).     from("direct:in").marshal(format).     from("direct:back").unmarshal(format).to("mock:reverse"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             AvroDataFormat format = new AvroDataFormat(schema).             from("direct:in").marshal(format).             from("direct:back").unmarshal(format).to("mock:reverse").         }     }. }
false;private;0;6;;private Schema getSchema() throws IOException {     String schemaLocation = getClass().getResource("user.avsc").getFile().     File schemaFile = new File(schemaLocation).     assertTrue(schemaFile.exists()).     return new Schema.Parser().parse(schemaFile). }
