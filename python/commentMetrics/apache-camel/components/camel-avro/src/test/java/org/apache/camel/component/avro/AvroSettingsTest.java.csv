commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("avro:http:localhost:" + avroPort + "/notValid?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol").to("log:test"). }
false;public;0;9;;@Test(expected = FailedToCreateRouteException.class) public void testConsumerForUnknownMessage() throws Exception {     context().addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("avro:http:localhost:" + avroPort + "/notValid?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol").to("log:test").         }     }). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:test").to("avro:http:localhost:" + avroPort + "/notValid?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol"). }
false;public;0;9;;@Test(expected = FailedToCreateRouteException.class) public void testProducerForUnknownMessage() throws Exception {     context().addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").to("avro:http:localhost:" + avroPort + "/notValid?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol").         }     }). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:test").to("avro:http:localhost:" + avroPort + "/put?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol&singleParameter=true"). }
false;public;0;9;;@Test(expected = FailedToCreateRouteException.class) public void testProducerForNonSingleParamMessage() throws Exception {     context().addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").to("avro:http:localhost:" + avroPort + "/put?protocolClassName=org.apache.camel.avro.generated.KeyValueProtocol&singleParameter=true").         }     }). }
