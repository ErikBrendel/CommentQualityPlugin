# id;timestamp;commentText;codeText;commentWords;codeWords
AvroListener -> private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception;1375068440;Creates exchange and processes it.__@param consumer	Holds processor and exception handler_@param message	Message on which exchange is created_@param params	Params of exchange_@return			Response of exchange processing_@throws Exception;private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception {_        Object response__        Exchange exchange = consumer.getEndpoint().createExchange(message, params)___        try {_            consumer.getProcessor().process(exchange)__        } catch (Throwable e) {_            consumer.getExceptionHandler().handleException(e)__        }__        if (ExchangeHelper.isOutCapable(exchange)) {_            response = exchange.getOut().getBody()__        } else {_            response = null__        }__        boolean failed = exchange.isFailed()__        if (failed) {_            if (exchange.getException() != null) {_                throw exchange.getException()__            } else {_                _                throw new AvroComponentException("Camel processing error.")__            }_        }_        return response__    };creates,exchange,and,processes,it,param,consumer,holds,processor,and,exception,handler,param,message,message,on,which,exchange,is,created,param,params,params,of,exchange,return,response,of,exchange,processing,throws,exception;private,static,object,process,exchange,avro,consumer,consumer,protocol,message,message,object,params,throws,exception,object,response,exchange,exchange,consumer,get,endpoint,create,exchange,message,params,try,consumer,get,processor,process,exchange,catch,throwable,e,consumer,get,exception,handler,handle,exception,e,if,exchange,helper,is,out,capable,exchange,response,exchange,get,out,get,body,else,response,null,boolean,failed,exchange,is,failed,if,failed,if,exchange,get,exception,null,throw,exchange,get,exception,else,throw,new,avro,component,exception,camel,processing,error,return,response
AvroListener -> private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception;1375077207;Creates exchange and processes it.__@param consumer Holds processor and exception handler_@param message Message on which exchange is created_@param params Params of exchange_@return Response of exchange processing_@throws Exception;private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception {_        Object response__        Exchange exchange = consumer.getEndpoint().createExchange(message, params)___        try {_            consumer.getProcessor().process(exchange)__        } catch (Throwable e) {_            consumer.getExceptionHandler().handleException(e)__        }__        if (ExchangeHelper.isOutCapable(exchange)) {_            response = exchange.getOut().getBody()__        } else {_            response = null__        }__        boolean failed = exchange.isFailed()__        if (failed) {_            if (exchange.getException() != null) {_                throw exchange.getException()__            } else {_                _                throw new AvroComponentException("Camel processing error.")__            }_        }_        return response__    };creates,exchange,and,processes,it,param,consumer,holds,processor,and,exception,handler,param,message,message,on,which,exchange,is,created,param,params,params,of,exchange,return,response,of,exchange,processing,throws,exception;private,static,object,process,exchange,avro,consumer,consumer,protocol,message,message,object,params,throws,exception,object,response,exchange,exchange,consumer,get,endpoint,create,exchange,message,params,try,consumer,get,processor,process,exchange,catch,throwable,e,consumer,get,exception,handler,handle,exception,e,if,exchange,helper,is,out,capable,exchange,response,exchange,get,out,get,body,else,response,null,boolean,failed,exchange,is,failed,if,failed,if,exchange,get,exception,null,throw,exchange,get,exception,else,throw,new,avro,component,exception,camel,processing,error,return,response
AvroListener -> private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception;1385953128;Creates exchange and processes it.__@param consumer Holds processor and exception handler_@param message Message on which exchange is created_@param params Params of exchange_@return Response of exchange processing_@throws Exception;private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception {_        Object response__        Exchange exchange = consumer.getEndpoint().createExchange(message, params)___        try {_            consumer.getProcessor().process(exchange)__        } catch (Throwable e) {_            consumer.getExceptionHandler().handleException(e)__        }__        if (ExchangeHelper.isOutCapable(exchange)) {_            response = exchange.getOut().getBody()__        } else {_            response = null__        }__        boolean failed = exchange.isFailed()__        if (failed) {_            if (exchange.getException() != null) {_                throw exchange.getException()__            } else {_                _                throw new AvroComponentException("Camel processing error.")__            }_        }_        return response__    };creates,exchange,and,processes,it,param,consumer,holds,processor,and,exception,handler,param,message,message,on,which,exchange,is,created,param,params,params,of,exchange,return,response,of,exchange,processing,throws,exception;private,static,object,process,exchange,avro,consumer,consumer,protocol,message,message,object,params,throws,exception,object,response,exchange,exchange,consumer,get,endpoint,create,exchange,message,params,try,consumer,get,processor,process,exchange,catch,throwable,e,consumer,get,exception,handler,handle,exception,e,if,exchange,helper,is,out,capable,exchange,response,exchange,get,out,get,body,else,response,null,boolean,failed,exchange,is,failed,if,failed,if,exchange,get,exception,null,throw,exchange,get,exception,else,throw,new,avro,component,exception,camel,processing,error,return,response
AvroListener -> private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception;1420381317;Creates exchange and processes it.__@param consumer Holds processor and exception handler_@param message Message on which exchange is created_@param params Params of exchange_@return Response of exchange processing_@throws Exception;private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception {_        Object response__        Exchange exchange = consumer.getEndpoint().createExchange(message, params)___        try {_            consumer.getProcessor().process(exchange)__        } catch (Throwable e) {_            consumer.getExceptionHandler().handleException(e)__        }__        if (ExchangeHelper.isOutCapable(exchange)) {_            response = exchange.getOut().getBody()__        } else {_            response = null__        }__        boolean failed = exchange.isFailed()__        if (failed) {_            if (exchange.getException() != null) {_                throw exchange.getException()__            } else {_                _                throw new AvroComponentException("Camel processing error.")__            }_        }_        return response__    };creates,exchange,and,processes,it,param,consumer,holds,processor,and,exception,handler,param,message,message,on,which,exchange,is,created,param,params,params,of,exchange,return,response,of,exchange,processing,throws,exception;private,static,object,process,exchange,avro,consumer,consumer,protocol,message,message,object,params,throws,exception,object,response,exchange,exchange,consumer,get,endpoint,create,exchange,message,params,try,consumer,get,processor,process,exchange,catch,throwable,e,consumer,get,exception,handler,handle,exception,e,if,exchange,helper,is,out,capable,exchange,response,exchange,get,out,get,body,else,response,null,boolean,failed,exchange,is,failed,if,failed,if,exchange,get,exception,null,throw,exchange,get,exception,else,throw,new,avro,component,exception,camel,processing,error,return,response
AvroListener -> private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception;1523968777;Creates exchange and processes it.__@param consumer Holds processor and exception handler_@param message Message on which exchange is created_@param params Params of exchange_@return Response of exchange processing_@throws Exception;private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception {_        Object response__        Exchange exchange = consumer.getEndpoint().createExchange(message, params)___        try {_            consumer.getProcessor().process(exchange)__        } catch (Throwable e) {_            consumer.getExceptionHandler().handleException(e)__        }__        if (ExchangeHelper.isOutCapable(exchange)) {_            response = exchange.getOut().getBody()__        } else {_            response = null__        }__        boolean failed = exchange.isFailed()__        if (failed) {_            if (exchange.getException() != null) {_                throw exchange.getException()__            } else {_                _                throw new AvroComponentException("Camel processing error.")__            }_        }_        return response__    };creates,exchange,and,processes,it,param,consumer,holds,processor,and,exception,handler,param,message,message,on,which,exchange,is,created,param,params,params,of,exchange,return,response,of,exchange,processing,throws,exception;private,static,object,process,exchange,avro,consumer,consumer,protocol,message,message,object,params,throws,exception,object,response,exchange,exchange,consumer,get,endpoint,create,exchange,message,params,try,consumer,get,processor,process,exchange,catch,throwable,e,consumer,get,exception,handler,handle,exception,e,if,exchange,helper,is,out,capable,exchange,response,exchange,get,out,get,body,else,response,null,boolean,failed,exchange,is,failed,if,failed,if,exchange,get,exception,null,throw,exchange,get,exception,else,throw,new,avro,component,exception,camel,processing,error,return,response
AvroListener -> private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception;1536687142;Creates exchange and processes it.__@param consumer Holds processor and exception handler_@param message Message on which exchange is created_@param params Params of exchange_@return Response of exchange processing_@throws Exception;private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception {_        Object response__        Exchange exchange = consumer.getEndpoint().createExchange(message, params)___        try {_            consumer.getProcessor().process(exchange)__        } catch (Throwable e) {_            consumer.getExceptionHandler().handleException(e)__        }__        if (ExchangeHelper.isOutCapable(exchange)) {_            response = exchange.getOut().getBody()__        } else {_            response = null__        }__        boolean failed = exchange.isFailed()__        if (failed) {_            if (exchange.getException() != null) {_                throw exchange.getException()__            } else {_                _                throw new AvroComponentException("Camel processing error.")__            }_        }_        return response__    };creates,exchange,and,processes,it,param,consumer,holds,processor,and,exception,handler,param,message,message,on,which,exchange,is,created,param,params,params,of,exchange,return,response,of,exchange,processing,throws,exception;private,static,object,process,exchange,avro,consumer,consumer,protocol,message,message,object,params,throws,exception,object,response,exchange,exchange,consumer,get,endpoint,create,exchange,message,params,try,consumer,get,processor,process,exchange,catch,throwable,e,consumer,get,exception,handler,handle,exception,e,if,exchange,helper,is,out,capable,exchange,response,exchange,get,out,get,body,else,response,null,boolean,failed,exchange,is,failed,if,failed,if,exchange,get,exception,null,throw,exchange,get,exception,else,throw,new,avro,component,exception,camel,processing,error,return,response
AvroListener -> private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception;1540108163;Creates exchange and processes it.__@param consumer Holds processor and exception handler_@param message Message on which exchange is created_@param params Params of exchange_@return Response of exchange processing_@throws Exception;private static Object processExchange(AvroConsumer consumer, Protocol.Message message, Object params) throws Exception {_        Object response__        Exchange exchange = consumer.getEndpoint().createExchange(message, params)___        try {_            consumer.getProcessor().process(exchange)__        } catch (Throwable e) {_            consumer.getExceptionHandler().handleException(e)__        }__        if (ExchangeHelper.isOutCapable(exchange)) {_            response = exchange.getOut().getBody()__        } else {_            response = null__        }__        boolean failed = exchange.isFailed()__        if (failed) {_            if (exchange.getException() != null) {_                throw exchange.getException()__            } else {_                _                throw new AvroComponentException("Camel processing error.")__            }_        }_        return response__    };creates,exchange,and,processes,it,param,consumer,holds,processor,and,exception,handler,param,message,message,on,which,exchange,is,created,param,params,params,of,exchange,return,response,of,exchange,processing,throws,exception;private,static,object,process,exchange,avro,consumer,consumer,protocol,message,message,object,params,throws,exception,object,response,exchange,exchange,consumer,get,endpoint,create,exchange,message,params,try,consumer,get,processor,process,exchange,catch,throwable,e,consumer,get,exception,handler,handle,exception,e,if,exchange,helper,is,out,capable,exchange,response,exchange,get,out,get,body,else,response,null,boolean,failed,exchange,is,failed,if,failed,if,exchange,get,exception,null,throw,exchange,get,exception,else,throw,new,avro,component,exception,camel,processing,error,return,response
AvroListener -> private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver);1375068440;Extracts parameters from RPC call to List or converts to object of appropriate type_if only one parameter set.__@param	message Avro message_@param	request Avro request_@param	singleParameter Indicates that called method has single parameter_@param	dataResolver Extracts type of parameters in call_@return	Parameters of RPC method invocation;private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver) {__        if(singleParameter) {_            Schema.Field field = message.getRequest().getFields().get(0)__            return dataResolver.getField(request, field.name(), field.pos())__        } else {_            int i = 0__            Object[] params =  new Object[message.getRequest().getFields().size()]__            for (Schema.Field param : message.getRequest().getFields()) {_                params[i] = dataResolver.getField(request, param.name(), param.pos())__                i++__            }_            return params__        }_    };extracts,parameters,from,rpc,call,to,list,or,converts,to,object,of,appropriate,type,if,only,one,parameter,set,param,message,avro,message,param,request,avro,request,param,single,parameter,indicates,that,called,method,has,single,parameter,param,data,resolver,extracts,type,of,parameters,in,call,return,parameters,of,rpc,method,invocation;private,static,object,extract,params,protocol,message,message,object,request,boolean,single,parameter,specific,data,data,resolver,if,single,parameter,schema,field,field,message,get,request,get,fields,get,0,return,data,resolver,get,field,request,field,name,field,pos,else,int,i,0,object,params,new,object,message,get,request,get,fields,size,for,schema,field,param,message,get,request,get,fields,params,i,data,resolver,get,field,request,param,name,param,pos,i,return,params
AvroListener -> private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver);1375077207;Extracts parameters from RPC call to List or converts to object of appropriate type_if only one parameter set.__@param message Avro message_@param request Avro request_@param singleParameter Indicates that called method has single parameter_@param dataResolver Extracts type of parameters in call_@return Parameters of RPC method invocation;private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver) {__        if (singleParameter) {_            Schema.Field field = message.getRequest().getFields().get(0)__            return dataResolver.getField(request, field.name(), field.pos())__        } else {_            int i = 0__            Object[] params =  new Object[message.getRequest().getFields().size()]__            for (Schema.Field param : message.getRequest().getFields()) {_                params[i] = dataResolver.getField(request, param.name(), param.pos())__                i++__            }_            return params__        }_    };extracts,parameters,from,rpc,call,to,list,or,converts,to,object,of,appropriate,type,if,only,one,parameter,set,param,message,avro,message,param,request,avro,request,param,single,parameter,indicates,that,called,method,has,single,parameter,param,data,resolver,extracts,type,of,parameters,in,call,return,parameters,of,rpc,method,invocation;private,static,object,extract,params,protocol,message,message,object,request,boolean,single,parameter,specific,data,data,resolver,if,single,parameter,schema,field,field,message,get,request,get,fields,get,0,return,data,resolver,get,field,request,field,name,field,pos,else,int,i,0,object,params,new,object,message,get,request,get,fields,size,for,schema,field,param,message,get,request,get,fields,params,i,data,resolver,get,field,request,param,name,param,pos,i,return,params
AvroListener -> private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver);1385953128;Extracts parameters from RPC call to List or converts to object of appropriate type_if only one parameter set.__@param message Avro message_@param request Avro request_@param singleParameter Indicates that called method has single parameter_@param dataResolver Extracts type of parameters in call_@return Parameters of RPC method invocation;private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver) {__        if (singleParameter) {_            Schema.Field field = message.getRequest().getFields().get(0)__            return dataResolver.getField(request, field.name(), field.pos())__        } else {_            int i = 0__            Object[] params =  new Object[message.getRequest().getFields().size()]__            for (Schema.Field param : message.getRequest().getFields()) {_                params[i] = dataResolver.getField(request, param.name(), param.pos())__                i++__            }_            return params__        }_    };extracts,parameters,from,rpc,call,to,list,or,converts,to,object,of,appropriate,type,if,only,one,parameter,set,param,message,avro,message,param,request,avro,request,param,single,parameter,indicates,that,called,method,has,single,parameter,param,data,resolver,extracts,type,of,parameters,in,call,return,parameters,of,rpc,method,invocation;private,static,object,extract,params,protocol,message,message,object,request,boolean,single,parameter,specific,data,data,resolver,if,single,parameter,schema,field,field,message,get,request,get,fields,get,0,return,data,resolver,get,field,request,field,name,field,pos,else,int,i,0,object,params,new,object,message,get,request,get,fields,size,for,schema,field,param,message,get,request,get,fields,params,i,data,resolver,get,field,request,param,name,param,pos,i,return,params
AvroListener -> private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver);1420381317;Extracts parameters from RPC call to List or converts to object of appropriate type_if only one parameter set.__@param message Avro message_@param request Avro request_@param singleParameter Indicates that called method has single parameter_@param dataResolver Extracts type of parameters in call_@return Parameters of RPC method invocation;private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver) {__        if (singleParameter) {_            Schema.Field field = message.getRequest().getFields().get(0)__            return dataResolver.getField(request, field.name(), field.pos())__        } else {_            int i = 0__            Object[] params =  new Object[message.getRequest().getFields().size()]__            for (Schema.Field param : message.getRequest().getFields()) {_                params[i] = dataResolver.getField(request, param.name(), param.pos())__                i++__            }_            return params__        }_    };extracts,parameters,from,rpc,call,to,list,or,converts,to,object,of,appropriate,type,if,only,one,parameter,set,param,message,avro,message,param,request,avro,request,param,single,parameter,indicates,that,called,method,has,single,parameter,param,data,resolver,extracts,type,of,parameters,in,call,return,parameters,of,rpc,method,invocation;private,static,object,extract,params,protocol,message,message,object,request,boolean,single,parameter,specific,data,data,resolver,if,single,parameter,schema,field,field,message,get,request,get,fields,get,0,return,data,resolver,get,field,request,field,name,field,pos,else,int,i,0,object,params,new,object,message,get,request,get,fields,size,for,schema,field,param,message,get,request,get,fields,params,i,data,resolver,get,field,request,param,name,param,pos,i,return,params
AvroListener -> private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver);1523968777;Extracts parameters from RPC call to List or converts to object of appropriate type_if only one parameter set.__@param message Avro message_@param request Avro request_@param singleParameter Indicates that called method has single parameter_@param dataResolver Extracts type of parameters in call_@return Parameters of RPC method invocation;private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver) {__        if (singleParameter) {_            Schema.Field field = message.getRequest().getFields().get(0)__            return dataResolver.getField(request, field.name(), field.pos())__        } else {_            int i = 0__            Object[] params =  new Object[message.getRequest().getFields().size()]__            for (Schema.Field param : message.getRequest().getFields()) {_                params[i] = dataResolver.getField(request, param.name(), param.pos())__                i++__            }_            return params__        }_    };extracts,parameters,from,rpc,call,to,list,or,converts,to,object,of,appropriate,type,if,only,one,parameter,set,param,message,avro,message,param,request,avro,request,param,single,parameter,indicates,that,called,method,has,single,parameter,param,data,resolver,extracts,type,of,parameters,in,call,return,parameters,of,rpc,method,invocation;private,static,object,extract,params,protocol,message,message,object,request,boolean,single,parameter,specific,data,data,resolver,if,single,parameter,schema,field,field,message,get,request,get,fields,get,0,return,data,resolver,get,field,request,field,name,field,pos,else,int,i,0,object,params,new,object,message,get,request,get,fields,size,for,schema,field,param,message,get,request,get,fields,params,i,data,resolver,get,field,request,param,name,param,pos,i,return,params
AvroListener -> private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver);1536687142;Extracts parameters from RPC call to List or converts to object of appropriate type_if only one parameter set.__@param message Avro message_@param request Avro request_@param singleParameter Indicates that called method has single parameter_@param dataResolver Extracts type of parameters in call_@return Parameters of RPC method invocation;private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver) {__        if (singleParameter) {_            Schema.Field field = message.getRequest().getFields().get(0)__            return dataResolver.getField(request, field.name(), field.pos())__        } else {_            int i = 0__            Object[] params =  new Object[message.getRequest().getFields().size()]__            for (Schema.Field param : message.getRequest().getFields()) {_                params[i] = dataResolver.getField(request, param.name(), param.pos())__                i++__            }_            return params__        }_    };extracts,parameters,from,rpc,call,to,list,or,converts,to,object,of,appropriate,type,if,only,one,parameter,set,param,message,avro,message,param,request,avro,request,param,single,parameter,indicates,that,called,method,has,single,parameter,param,data,resolver,extracts,type,of,parameters,in,call,return,parameters,of,rpc,method,invocation;private,static,object,extract,params,protocol,message,message,object,request,boolean,single,parameter,specific,data,data,resolver,if,single,parameter,schema,field,field,message,get,request,get,fields,get,0,return,data,resolver,get,field,request,field,name,field,pos,else,int,i,0,object,params,new,object,message,get,request,get,fields,size,for,schema,field,param,message,get,request,get,fields,params,i,data,resolver,get,field,request,param,name,param,pos,i,return,params
AvroListener -> private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver);1540108163;Extracts parameters from RPC call to List or converts to object of appropriate type_if only one parameter set.__@param message Avro message_@param request Avro request_@param singleParameter Indicates that called method has single parameter_@param dataResolver Extracts type of parameters in call_@return Parameters of RPC method invocation;private static Object extractParams(Protocol.Message message, Object request, boolean singleParameter, SpecificData dataResolver) {__        if (singleParameter) {_            Schema.Field field = message.getRequest().getFields().get(0)__            return dataResolver.getField(request, field.name(), field.pos())__        } else {_            int i = 0__            Object[] params =  new Object[message.getRequest().getFields().size()]__            for (Schema.Field param : message.getRequest().getFields()) {_                params[i] = dataResolver.getField(request, param.name(), param.pos())__                i++__            }_            return params__        }_    };extracts,parameters,from,rpc,call,to,list,or,converts,to,object,of,appropriate,type,if,only,one,parameter,set,param,message,avro,message,param,request,avro,request,param,single,parameter,indicates,that,called,method,has,single,parameter,param,data,resolver,extracts,type,of,parameters,in,call,return,parameters,of,rpc,method,invocation;private,static,object,extract,params,protocol,message,message,object,request,boolean,single,parameter,specific,data,data,resolver,if,single,parameter,schema,field,field,message,get,request,get,fields,get,0,return,data,resolver,get,field,request,field,name,field,pos,else,int,i,0,object,params,new,object,message,get,request,get,fields,size,for,schema,field,param,message,get,request,get,fields,params,i,data,resolver,get,field,request,param,name,param,pos,i,return,params
AvroListener -> public void register(String messageName, AvroConsumer consumer) throws AvroComponentException;1375068440;Registers consumer by appropriate message name as key in registry.__@param messageName	message name_@param consumer		avro consumer_@throws AvroComponentException;public void register(String messageName, AvroConsumer consumer) throws AvroComponentException {_        if (messageName == null) {_            if(this.defaultConsumer != null)_                throw new AvroComponentException("Default consumer already registered for uri: " + consumer.getEndpoint().getEndpointUri())__            this.defaultConsumer = consumer__        } else {_            if (consumerRegistry.putIfAbsent(messageName, consumer) != null) {_                throw new AvroComponentException("Consumer already registered for message: " + messageName + " and uri: " + consumer.getEndpoint().getEndpointUri())__            }_        }_    };registers,consumer,by,appropriate,message,name,as,key,in,registry,param,message,name,message,name,param,consumer,avro,consumer,throws,avro,component,exception;public,void,register,string,message,name,avro,consumer,consumer,throws,avro,component,exception,if,message,name,null,if,this,default,consumer,null,throw,new,avro,component,exception,default,consumer,already,registered,for,uri,consumer,get,endpoint,get,endpoint,uri,this,default,consumer,consumer,else,if,consumer,registry,put,if,absent,message,name,consumer,null,throw,new,avro,component,exception,consumer,already,registered,for,message,message,name,and,uri,consumer,get,endpoint,get,endpoint,uri
AvroListener -> public void register(String messageName, AvroConsumer consumer) throws AvroComponentException;1375077207;Registers consumer by appropriate message name as key in registry.__@param messageName message name_@param consumer avro consumer_@throws AvroComponentException;public void register(String messageName, AvroConsumer consumer) throws AvroComponentException {_        if (messageName == null) {_            if (this.defaultConsumer != null) {_                throw new AvroComponentException("Default consumer already registered for uri: " + consumer.getEndpoint().getEndpointUri())__            }    _            this.defaultConsumer = consumer__        } else {_            if (consumerRegistry.putIfAbsent(messageName, consumer) != null) {_                throw new AvroComponentException("Consumer already registered for message: " + messageName + " and uri: " + consumer.getEndpoint().getEndpointUri())__            }_        }_    };registers,consumer,by,appropriate,message,name,as,key,in,registry,param,message,name,message,name,param,consumer,avro,consumer,throws,avro,component,exception;public,void,register,string,message,name,avro,consumer,consumer,throws,avro,component,exception,if,message,name,null,if,this,default,consumer,null,throw,new,avro,component,exception,default,consumer,already,registered,for,uri,consumer,get,endpoint,get,endpoint,uri,this,default,consumer,consumer,else,if,consumer,registry,put,if,absent,message,name,consumer,null,throw,new,avro,component,exception,consumer,already,registered,for,message,message,name,and,uri,consumer,get,endpoint,get,endpoint,uri
AvroListener -> public void register(String messageName, AvroConsumer consumer) throws AvroComponentException;1385953128;Registers consumer by appropriate message name as key in registry.__@param messageName message name_@param consumer avro consumer_@throws AvroComponentException;public void register(String messageName, AvroConsumer consumer) throws AvroComponentException {_        if (messageName == null) {_            if (this.defaultConsumer != null) {_                throw new AvroComponentException("Default consumer already registered for uri: " + consumer.getEndpoint().getEndpointUri())__            }    _            this.defaultConsumer = consumer__        } else {_            if (consumerRegistry.putIfAbsent(messageName, consumer) != null) {_                throw new AvroComponentException("Consumer already registered for message: " + messageName + " and uri: " + consumer.getEndpoint().getEndpointUri())__            }_        }_    };registers,consumer,by,appropriate,message,name,as,key,in,registry,param,message,name,message,name,param,consumer,avro,consumer,throws,avro,component,exception;public,void,register,string,message,name,avro,consumer,consumer,throws,avro,component,exception,if,message,name,null,if,this,default,consumer,null,throw,new,avro,component,exception,default,consumer,already,registered,for,uri,consumer,get,endpoint,get,endpoint,uri,this,default,consumer,consumer,else,if,consumer,registry,put,if,absent,message,name,consumer,null,throw,new,avro,component,exception,consumer,already,registered,for,message,message,name,and,uri,consumer,get,endpoint,get,endpoint,uri
AvroListener -> public void register(String messageName, AvroConsumer consumer) throws AvroComponentException;1420381317;Registers consumer by appropriate message name as key in registry.__@param messageName message name_@param consumer avro consumer_@throws AvroComponentException;public void register(String messageName, AvroConsumer consumer) throws AvroComponentException {_        if (messageName == null) {_            if (this.defaultConsumer != null) {_                throw new AvroComponentException("Default consumer already registered for uri: " + consumer.getEndpoint().getEndpointUri())__            }    _            this.defaultConsumer = consumer__        } else {_            if (consumerRegistry.putIfAbsent(messageName, consumer) != null) {_                throw new AvroComponentException("Consumer already registered for message: " + messageName + " and uri: " + consumer.getEndpoint().getEndpointUri())__            }_        }_    };registers,consumer,by,appropriate,message,name,as,key,in,registry,param,message,name,message,name,param,consumer,avro,consumer,throws,avro,component,exception;public,void,register,string,message,name,avro,consumer,consumer,throws,avro,component,exception,if,message,name,null,if,this,default,consumer,null,throw,new,avro,component,exception,default,consumer,already,registered,for,uri,consumer,get,endpoint,get,endpoint,uri,this,default,consumer,consumer,else,if,consumer,registry,put,if,absent,message,name,consumer,null,throw,new,avro,component,exception,consumer,already,registered,for,message,message,name,and,uri,consumer,get,endpoint,get,endpoint,uri
AvroListener -> public void register(String messageName, AvroConsumer consumer) throws AvroComponentException;1523968777;Registers consumer by appropriate message name as key in registry.__@param messageName message name_@param consumer avro consumer_@throws AvroComponentException;public void register(String messageName, AvroConsumer consumer) throws AvroComponentException {_        if (messageName == null) {_            if (this.defaultConsumer != null) {_                throw new AvroComponentException("Default consumer already registered for uri: " + consumer.getEndpoint().getEndpointUri())__            }    _            this.defaultConsumer = consumer__        } else {_            if (consumerRegistry.putIfAbsent(messageName, consumer) != null) {_                throw new AvroComponentException("Consumer already registered for message: " + messageName + " and uri: " + consumer.getEndpoint().getEndpointUri())__            }_        }_    };registers,consumer,by,appropriate,message,name,as,key,in,registry,param,message,name,message,name,param,consumer,avro,consumer,throws,avro,component,exception;public,void,register,string,message,name,avro,consumer,consumer,throws,avro,component,exception,if,message,name,null,if,this,default,consumer,null,throw,new,avro,component,exception,default,consumer,already,registered,for,uri,consumer,get,endpoint,get,endpoint,uri,this,default,consumer,consumer,else,if,consumer,registry,put,if,absent,message,name,consumer,null,throw,new,avro,component,exception,consumer,already,registered,for,message,message,name,and,uri,consumer,get,endpoint,get,endpoint,uri
AvroListener -> public void register(String messageName, AvroConsumer consumer) throws AvroComponentException;1536687142;Registers consumer by appropriate message name as key in registry.__@param messageName message name_@param consumer avro consumer_@throws AvroComponentException;public void register(String messageName, AvroConsumer consumer) throws AvroComponentException {_        if (messageName == null) {_            if (this.defaultConsumer != null) {_                throw new AvroComponentException("Default consumer already registered for uri: " + consumer.getEndpoint().getEndpointUri())__            }    _            this.defaultConsumer = consumer__        } else {_            if (consumerRegistry.putIfAbsent(messageName, consumer) != null) {_                throw new AvroComponentException("Consumer already registered for message: " + messageName + " and uri: " + consumer.getEndpoint().getEndpointUri())__            }_        }_    };registers,consumer,by,appropriate,message,name,as,key,in,registry,param,message,name,message,name,param,consumer,avro,consumer,throws,avro,component,exception;public,void,register,string,message,name,avro,consumer,consumer,throws,avro,component,exception,if,message,name,null,if,this,default,consumer,null,throw,new,avro,component,exception,default,consumer,already,registered,for,uri,consumer,get,endpoint,get,endpoint,uri,this,default,consumer,consumer,else,if,consumer,registry,put,if,absent,message,name,consumer,null,throw,new,avro,component,exception,consumer,already,registered,for,message,message,name,and,uri,consumer,get,endpoint,get,endpoint,uri
AvroListener -> public void register(String messageName, AvroConsumer consumer) throws AvroComponentException;1540108163;Registers consumer by appropriate message name as key in registry.__@param messageName message name_@param consumer avro consumer_@throws AvroComponentException;public void register(String messageName, AvroConsumer consumer) throws AvroComponentException {_        if (messageName == null) {_            if (this.defaultConsumer != null) {_                throw new AvroComponentException("Default consumer already registered for uri: " + consumer.getEndpoint().getEndpointUri())__            }    _            this.defaultConsumer = consumer__        } else {_            if (consumerRegistry.putIfAbsent(messageName, consumer) != null) {_                throw new AvroComponentException("Consumer already registered for message: " + messageName + " and uri: " + consumer.getEndpoint().getEndpointUri())__            }_        }_    };registers,consumer,by,appropriate,message,name,as,key,in,registry,param,message,name,message,name,param,consumer,avro,consumer,throws,avro,component,exception;public,void,register,string,message,name,avro,consumer,consumer,throws,avro,component,exception,if,message,name,null,if,this,default,consumer,null,throw,new,avro,component,exception,default,consumer,already,registered,for,uri,consumer,get,endpoint,get,endpoint,uri,this,default,consumer,consumer,else,if,consumer,registry,put,if,absent,message,name,consumer,null,throw,new,avro,component,exception,consumer,already,registered,for,message,message,name,and,uri,consumer,get,endpoint,get,endpoint,uri
AvroListener -> public boolean unregister(String messageName);1375068440;Unregisters consumer by message name._Stops server in case if all consumers are unregistered and default consumer is absent or stopped.__@param messageName message name_@return true if all consumers are unregistered and defaultConsumer is absent or null._It means that this responder can be unregistered.;public boolean unregister(String messageName) {_        if(!StringUtils.isEmpty(messageName)) {_            if(consumerRegistry.remove(messageName) == null)_                Log.warn("Consumer with message name " + messageName + " was already unregistered.")__        }_        else defaultConsumer = null___        if((defaultConsumer == null) && (consumerRegistry.isEmpty())) {_            if (server != null) {_                server.close()__            }_            return true__        }_        return false__    };unregisters,consumer,by,message,name,stops,server,in,case,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,stopped,param,message,name,message,name,return,true,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,null,it,means,that,this,responder,can,be,unregistered;public,boolean,unregister,string,message,name,if,string,utils,is,empty,message,name,if,consumer,registry,remove,message,name,null,log,warn,consumer,with,message,name,message,name,was,already,unregistered,else,default,consumer,null,if,default,consumer,null,consumer,registry,is,empty,if,server,null,server,close,return,true,return,false
AvroListener -> public boolean unregister(String messageName);1375077207;Unregisters consumer by message name._Stops server in case if all consumers are unregistered and default consumer is absent or stopped.__@param messageName message name_@return true if all consumers are unregistered and defaultConsumer is absent or null._It means that this responder can be unregistered.;public boolean unregister(String messageName) {_        if (!StringUtils.isEmpty(messageName)) {_            if (consumerRegistry.remove(messageName) == null) {_                Log.warn("Consumer with message name " + messageName + " was already unregistered.")__            }_        } else {_            defaultConsumer = null__        }__        if ((defaultConsumer == null) && (consumerRegistry.isEmpty())) {_            if (server != null) {_                server.close()__            }_            return true__        }_        return false__    };unregisters,consumer,by,message,name,stops,server,in,case,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,stopped,param,message,name,message,name,return,true,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,null,it,means,that,this,responder,can,be,unregistered;public,boolean,unregister,string,message,name,if,string,utils,is,empty,message,name,if,consumer,registry,remove,message,name,null,log,warn,consumer,with,message,name,message,name,was,already,unregistered,else,default,consumer,null,if,default,consumer,null,consumer,registry,is,empty,if,server,null,server,close,return,true,return,false
AvroListener -> public boolean unregister(String messageName);1385953128;Unregisters consumer by message name._Stops server in case if all consumers are unregistered and default consumer is absent or stopped.__@param messageName message name_@return true if all consumers are unregistered and defaultConsumer is absent or null._It means that this responder can be unregistered.;public boolean unregister(String messageName) {_        if (!StringUtils.isEmpty(messageName)) {_            if (consumerRegistry.remove(messageName) == null) {_                Log.warn("Consumer with message name " + messageName + " was already unregistered.")__            }_        } else {_            defaultConsumer = null__        }__        if ((defaultConsumer == null) && (consumerRegistry.isEmpty())) {_            if (server != null) {_                server.close()__            }_            return true__        }_        return false__    };unregisters,consumer,by,message,name,stops,server,in,case,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,stopped,param,message,name,message,name,return,true,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,null,it,means,that,this,responder,can,be,unregistered;public,boolean,unregister,string,message,name,if,string,utils,is,empty,message,name,if,consumer,registry,remove,message,name,null,log,warn,consumer,with,message,name,message,name,was,already,unregistered,else,default,consumer,null,if,default,consumer,null,consumer,registry,is,empty,if,server,null,server,close,return,true,return,false
AvroListener -> public boolean unregister(String messageName);1420381317;Unregisters consumer by message name._Stops server in case if all consumers are unregistered and default consumer is absent or stopped.__@param messageName message name_@return true if all consumers are unregistered and defaultConsumer is absent or null._It means that this responder can be unregistered.;public boolean unregister(String messageName) {_        if (!StringUtils.isEmpty(messageName)) {_            if (consumerRegistry.remove(messageName) == null) {_                Log.warn("Consumer with message name " + messageName + " was already unregistered.")__            }_        } else {_            defaultConsumer = null__        }__        if ((defaultConsumer == null) && (consumerRegistry.isEmpty())) {_            if (server != null) {_                server.close()__            }_            return true__        }_        return false__    };unregisters,consumer,by,message,name,stops,server,in,case,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,stopped,param,message,name,message,name,return,true,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,null,it,means,that,this,responder,can,be,unregistered;public,boolean,unregister,string,message,name,if,string,utils,is,empty,message,name,if,consumer,registry,remove,message,name,null,log,warn,consumer,with,message,name,message,name,was,already,unregistered,else,default,consumer,null,if,default,consumer,null,consumer,registry,is,empty,if,server,null,server,close,return,true,return,false
AvroListener -> public boolean unregister(String messageName);1523968777;Unregisters consumer by message name._Stops server in case if all consumers are unregistered and default consumer is absent or stopped.__@param messageName message name_@return true if all consumers are unregistered and defaultConsumer is absent or null._It means that this responder can be unregistered.;public boolean unregister(String messageName) {_        if (!StringUtils.isEmpty(messageName)) {_            if (consumerRegistry.remove(messageName) == null) {_                Log.warn("Consumer with message name " + messageName + " was already unregistered.")__            }_        } else {_            defaultConsumer = null__        }__        if ((defaultConsumer == null) && (consumerRegistry.isEmpty())) {_            if (server != null) {_                server.close()__            }_            return true__        }_        return false__    };unregisters,consumer,by,message,name,stops,server,in,case,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,stopped,param,message,name,message,name,return,true,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,null,it,means,that,this,responder,can,be,unregistered;public,boolean,unregister,string,message,name,if,string,utils,is,empty,message,name,if,consumer,registry,remove,message,name,null,log,warn,consumer,with,message,name,message,name,was,already,unregistered,else,default,consumer,null,if,default,consumer,null,consumer,registry,is,empty,if,server,null,server,close,return,true,return,false
AvroListener -> public boolean unregister(String messageName);1536687142;Unregisters consumer by message name._Stops server in case if all consumers are unregistered and default consumer is absent or stopped.__@param messageName message name_@return true if all consumers are unregistered and defaultConsumer is absent or null._It means that this responder can be unregistered.;public boolean unregister(String messageName) {_        if (!StringUtils.isEmpty(messageName)) {_            if (consumerRegistry.remove(messageName) == null) {_                Log.warn("Consumer with message name {} was already unregistered.", messageName)__            }_        } else {_            defaultConsumer = null__        }__        if ((defaultConsumer == null) && (consumerRegistry.isEmpty())) {_            if (server != null) {_                server.close()__            }_            return true__        }_        return false__    };unregisters,consumer,by,message,name,stops,server,in,case,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,stopped,param,message,name,message,name,return,true,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,null,it,means,that,this,responder,can,be,unregistered;public,boolean,unregister,string,message,name,if,string,utils,is,empty,message,name,if,consumer,registry,remove,message,name,null,log,warn,consumer,with,message,name,was,already,unregistered,message,name,else,default,consumer,null,if,default,consumer,null,consumer,registry,is,empty,if,server,null,server,close,return,true,return,false
AvroListener -> public boolean unregister(String messageName);1540108163;Unregisters consumer by message name._Stops server in case if all consumers are unregistered and default consumer is absent or stopped.__@param messageName message name_@return true if all consumers are unregistered and defaultConsumer is absent or null._It means that this responder can be unregistered.;public boolean unregister(String messageName) {_        if (!StringUtils.isEmpty(messageName)) {_            if (consumerRegistry.remove(messageName) == null) {_                Log.warn("Consumer with message name {} was already unregistered.", messageName)__            }_        } else {_            defaultConsumer = null__        }__        if ((defaultConsumer == null) && (consumerRegistry.isEmpty())) {_            if (server != null) {_                server.close()__            }_            return true__        }_        return false__    };unregisters,consumer,by,message,name,stops,server,in,case,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,stopped,param,message,name,message,name,return,true,if,all,consumers,are,unregistered,and,default,consumer,is,absent,or,null,it,means,that,this,responder,can,be,unregistered;public,boolean,unregister,string,message,name,if,string,utils,is,empty,message,name,if,consumer,registry,remove,message,name,null,log,warn,consumer,with,message,name,was,already,unregistered,message,name,else,default,consumer,null,if,default,consumer,null,consumer,registry,is,empty,if,server,null,server,close,return,true,return,false
AvroListener -> private Server initAndStartServer(AvroConfiguration configuration) throws Exception;1375068440;Initializes and starts http or netty server on basis of transport protocol from configuration.___@param configuration_@return			Initialized and started server_@throws java.io.IOException;private Server initAndStartServer(AvroConfiguration configuration) throws Exception {_        SpecificResponder responder__        Server server___        if(configuration.isReflectionProtocol()) {_            responder = new AvroReflectResponder(configuration.getProtocol(), this)__        }_        else {_            responder = new AvroSpecificResponder(configuration.getProtocol(), this)__        }___        if(AVRO_HTTP_TRANSPORT.equalsIgnoreCase(configuration.getTransport()))_            server = new HttpServer(responder, configuration.getPort())__        else  if(AVRO_NETTY_TRANSPORT.equalsIgnoreCase(configuration.getTransport()))_            server = new NettyServer(responder, new InetSocketAddress(configuration.getHost(), configuration.getPort()))__        else throw new IllegalArgumentException("Unknown transport " + configuration.getTransport())___        server.start()___        return server__    };initializes,and,starts,http,or,netty,server,on,basis,of,transport,protocol,from,configuration,param,configuration,return,initialized,and,started,server,throws,java,io,ioexception;private,server,init,and,start,server,avro,configuration,configuration,throws,exception,specific,responder,responder,server,server,if,configuration,is,reflection,protocol,responder,new,avro,reflect,responder,configuration,get,protocol,this,else,responder,new,avro,specific,responder,configuration,get,protocol,this,if,equals,ignore,case,configuration,get,transport,server,new,http,server,responder,configuration,get,port,else,if,equals,ignore,case,configuration,get,transport,server,new,netty,server,responder,new,inet,socket,address,configuration,get,host,configuration,get,port,else,throw,new,illegal,argument,exception,unknown,transport,configuration,get,transport,server,start,return,server
AvroListener -> private Server initAndStartServer(AvroConfiguration configuration) throws Exception;1375077207;Initializes and starts http or netty server on basis of transport protocol from configuration.___@param configuration_@return Initialized and started server_@throws java.io.IOException;private Server initAndStartServer(AvroConfiguration configuration) throws Exception {_        SpecificResponder responder__        Server server___        if (configuration.isReflectionProtocol()) {_            responder = new AvroReflectResponder(configuration.getProtocol(), this)__        } else {_            responder = new AvroSpecificResponder(configuration.getProtocol(), this)__        }___        if (AVRO_HTTP_TRANSPORT.equalsIgnoreCase(configuration.getTransport())) {_            server = new HttpServer(responder, configuration.getPort())__        } else if (AVRO_NETTY_TRANSPORT.equalsIgnoreCase(configuration.getTransport())) {_            server = new NettyServer(responder, new InetSocketAddress(configuration.getHost(), configuration.getPort()))__        } else {_            throw new IllegalArgumentException("Unknown transport " + configuration.getTransport())__        }__        server.start()___        return server__    };initializes,and,starts,http,or,netty,server,on,basis,of,transport,protocol,from,configuration,param,configuration,return,initialized,and,started,server,throws,java,io,ioexception;private,server,init,and,start,server,avro,configuration,configuration,throws,exception,specific,responder,responder,server,server,if,configuration,is,reflection,protocol,responder,new,avro,reflect,responder,configuration,get,protocol,this,else,responder,new,avro,specific,responder,configuration,get,protocol,this,if,equals,ignore,case,configuration,get,transport,server,new,http,server,responder,configuration,get,port,else,if,equals,ignore,case,configuration,get,transport,server,new,netty,server,responder,new,inet,socket,address,configuration,get,host,configuration,get,port,else,throw,new,illegal,argument,exception,unknown,transport,configuration,get,transport,server,start,return,server
AvroListener -> private Server initAndStartServer(AvroConfiguration configuration) throws Exception;1385953128;Initializes and starts http or netty server on basis of transport protocol from configuration.___@param configuration_@return Initialized and started server_@throws java.io.IOException;private Server initAndStartServer(AvroConfiguration configuration) throws Exception {_        SpecificResponder responder__        Server server___        if (configuration.isReflectionProtocol()) {_            responder = new AvroReflectResponder(configuration.getProtocol(), this)__        } else {_            responder = new AvroSpecificResponder(configuration.getProtocol(), this)__        }___        if (AVRO_HTTP_TRANSPORT.equalsIgnoreCase(configuration.getTransport())) {_            server = new HttpServer(responder, configuration.getPort())__        } else if (AVRO_NETTY_TRANSPORT.equalsIgnoreCase(configuration.getTransport())) {_            server = new NettyServer(responder, new InetSocketAddress(configuration.getHost(), configuration.getPort()))__        } else {_            throw new IllegalArgumentException("Unknown transport " + configuration.getTransport())__        }__        server.start()___        return server__    };initializes,and,starts,http,or,netty,server,on,basis,of,transport,protocol,from,configuration,param,configuration,return,initialized,and,started,server,throws,java,io,ioexception;private,server,init,and,start,server,avro,configuration,configuration,throws,exception,specific,responder,responder,server,server,if,configuration,is,reflection,protocol,responder,new,avro,reflect,responder,configuration,get,protocol,this,else,responder,new,avro,specific,responder,configuration,get,protocol,this,if,equals,ignore,case,configuration,get,transport,server,new,http,server,responder,configuration,get,port,else,if,equals,ignore,case,configuration,get,transport,server,new,netty,server,responder,new,inet,socket,address,configuration,get,host,configuration,get,port,else,throw,new,illegal,argument,exception,unknown,transport,configuration,get,transport,server,start,return,server
AvroListener -> private Server initAndStartServer(AvroConfiguration configuration) throws Exception;1420381317;Initializes and starts http or netty server on basis of transport protocol from configuration.___@param configuration_@return Initialized and started server_@throws java.io.IOException;private Server initAndStartServer(AvroConfiguration configuration) throws Exception {_        SpecificResponder responder__        Server server___        if (configuration.isReflectionProtocol()) {_            responder = new AvroReflectResponder(configuration.getProtocol(), this)__        } else {_            responder = new AvroSpecificResponder(configuration.getProtocol(), this)__        }___        if (AVRO_HTTP_TRANSPORT.equalsIgnoreCase(configuration.getTransport().name())) {_            server = new HttpServer(responder, configuration.getPort())__        } else if (AVRO_NETTY_TRANSPORT.equalsIgnoreCase(configuration.getTransport().name())) {_            server = new NettyServer(responder, new InetSocketAddress(configuration.getHost(), configuration.getPort()))__        } else {_            throw new IllegalArgumentException("Unknown transport " + configuration.getTransport())__        }__        server.start()___        return server__    };initializes,and,starts,http,or,netty,server,on,basis,of,transport,protocol,from,configuration,param,configuration,return,initialized,and,started,server,throws,java,io,ioexception;private,server,init,and,start,server,avro,configuration,configuration,throws,exception,specific,responder,responder,server,server,if,configuration,is,reflection,protocol,responder,new,avro,reflect,responder,configuration,get,protocol,this,else,responder,new,avro,specific,responder,configuration,get,protocol,this,if,equals,ignore,case,configuration,get,transport,name,server,new,http,server,responder,configuration,get,port,else,if,equals,ignore,case,configuration,get,transport,name,server,new,netty,server,responder,new,inet,socket,address,configuration,get,host,configuration,get,port,else,throw,new,illegal,argument,exception,unknown,transport,configuration,get,transport,server,start,return,server
AvroListener -> private Server initAndStartServer(AvroConfiguration configuration) throws Exception;1523968777;Initializes and starts http or netty server on basis of transport protocol from configuration.___@param configuration_@return Initialized and started server_@throws java.io.IOException;private Server initAndStartServer(AvroConfiguration configuration) throws Exception {_        SpecificResponder responder__        Server server___        if (configuration.isReflectionProtocol()) {_            responder = new AvroReflectResponder(configuration.getProtocol(), this)__        } else {_            responder = new AvroSpecificResponder(configuration.getProtocol(), this)__        }___        if (AVRO_HTTP_TRANSPORT.equalsIgnoreCase(configuration.getTransport().name())) {_            server = new HttpServer(responder, configuration.getPort())__        } else if (AVRO_NETTY_TRANSPORT.equalsIgnoreCase(configuration.getTransport().name())) {_            server = new NettyServer(responder, new InetSocketAddress(configuration.getHost(), configuration.getPort()))__        } else {_            throw new IllegalArgumentException("Unknown transport " + configuration.getTransport())__        }__        server.start()___        return server__    };initializes,and,starts,http,or,netty,server,on,basis,of,transport,protocol,from,configuration,param,configuration,return,initialized,and,started,server,throws,java,io,ioexception;private,server,init,and,start,server,avro,configuration,configuration,throws,exception,specific,responder,responder,server,server,if,configuration,is,reflection,protocol,responder,new,avro,reflect,responder,configuration,get,protocol,this,else,responder,new,avro,specific,responder,configuration,get,protocol,this,if,equals,ignore,case,configuration,get,transport,name,server,new,http,server,responder,configuration,get,port,else,if,equals,ignore,case,configuration,get,transport,name,server,new,netty,server,responder,new,inet,socket,address,configuration,get,host,configuration,get,port,else,throw,new,illegal,argument,exception,unknown,transport,configuration,get,transport,server,start,return,server
AvroListener -> private Server initAndStartServer(AvroConfiguration configuration) throws Exception;1536687142;Initializes and starts http or netty server on basis of transport protocol from configuration.___@param configuration_@return Initialized and started server_@throws java.io.IOException;private Server initAndStartServer(AvroConfiguration configuration) throws Exception {_        SpecificResponder responder__        Server server___        if (configuration.isReflectionProtocol()) {_            responder = new AvroReflectResponder(configuration.getProtocol(), this)__        } else {_            responder = new AvroSpecificResponder(configuration.getProtocol(), this)__        }___        if (AVRO_HTTP_TRANSPORT.equalsIgnoreCase(configuration.getTransport().name())) {_            server = new HttpServer(responder, configuration.getPort())__        } else if (AVRO_NETTY_TRANSPORT.equalsIgnoreCase(configuration.getTransport().name())) {_            server = new NettyServer(responder, new InetSocketAddress(configuration.getHost(), configuration.getPort()))__        } else {_            throw new IllegalArgumentException("Unknown transport " + configuration.getTransport())__        }__        server.start()___        return server__    };initializes,and,starts,http,or,netty,server,on,basis,of,transport,protocol,from,configuration,param,configuration,return,initialized,and,started,server,throws,java,io,ioexception;private,server,init,and,start,server,avro,configuration,configuration,throws,exception,specific,responder,responder,server,server,if,configuration,is,reflection,protocol,responder,new,avro,reflect,responder,configuration,get,protocol,this,else,responder,new,avro,specific,responder,configuration,get,protocol,this,if,equals,ignore,case,configuration,get,transport,name,server,new,http,server,responder,configuration,get,port,else,if,equals,ignore,case,configuration,get,transport,name,server,new,netty,server,responder,new,inet,socket,address,configuration,get,host,configuration,get,port,else,throw,new,illegal,argument,exception,unknown,transport,configuration,get,transport,server,start,return,server
AvroListener -> private Server initAndStartServer(AvroConfiguration configuration) throws Exception;1540108163;Initializes and starts http or netty server on basis of transport protocol from configuration.___@param configuration_@return Initialized and started server_@throws java.io.IOException;private Server initAndStartServer(AvroConfiguration configuration) throws Exception {_        SpecificResponder responder__        Server server___        if (configuration.isReflectionProtocol()) {_            responder = new AvroReflectResponder(configuration.getProtocol(), this)__        } else {_            responder = new AvroSpecificResponder(configuration.getProtocol(), this)__        }___        if (AVRO_HTTP_TRANSPORT.equalsIgnoreCase(configuration.getTransport().name())) {_            server = new HttpServer(responder, configuration.getPort())__        } else if (AVRO_NETTY_TRANSPORT.equalsIgnoreCase(configuration.getTransport().name())) {_            server = new NettyServer(responder, new InetSocketAddress(configuration.getHost(), configuration.getPort()))__        } else {_            throw new IllegalArgumentException("Unknown transport " + configuration.getTransport())__        }__        server.start()___        return server__    };initializes,and,starts,http,or,netty,server,on,basis,of,transport,protocol,from,configuration,param,configuration,return,initialized,and,started,server,throws,java,io,ioexception;private,server,init,and,start,server,avro,configuration,configuration,throws,exception,specific,responder,responder,server,server,if,configuration,is,reflection,protocol,responder,new,avro,reflect,responder,configuration,get,protocol,this,else,responder,new,avro,specific,responder,configuration,get,protocol,this,if,equals,ignore,case,configuration,get,transport,name,server,new,http,server,responder,configuration,get,port,else,if,equals,ignore,case,configuration,get,transport,name,server,new,netty,server,responder,new,inet,socket,address,configuration,get,host,configuration,get,port,else,throw,new,illegal,argument,exception,unknown,transport,configuration,get,transport,server,start,return,server
