commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getDataFormatName() {     return "avro". }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;protected;0;12;;@Override protected void doStart() throws Exception {     if (schema != null) {         if (schema instanceof Schema) {             actualSchema = (Schema) schema.         } else {             actualSchema = loadSchema(schema.getClass().getName()).         }     } else if (instanceClassName != null) {         actualSchema = loadSchema(instanceClassName).     } }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
false;public;0;3;;// the getter/setter for Schema is Object type in the API public Object getSchema() {     return actualSchema != null ? actualSchema : schema. }
false;public;1;3;;public void setSchema(Object schema) {     this.schema = schema. }
false;public;0;3;;public String getInstanceClassName() {     return instanceClassName. }
false;public;1;3;;public void setInstanceClassName(String className) throws Exception {     instanceClassName = className. }
false;protected;1;16;;protected Schema loadSchema(String className) throws CamelException, ClassNotFoundException {     // must use same class loading procedure to ensure working in OSGi     Class<?> instanceClass = camelContext.getClassResolver().resolveMandatoryClass(className).     Class<?> genericContainer = camelContext.getClassResolver().resolveMandatoryClass(GENERIC_CONTAINER_CLASSNAME).     if (genericContainer.isAssignableFrom(instanceClass)) {         try {             Method method = instanceClass.getMethod("getSchema").             return (Schema) method.invoke(camelContext.getInjector().newInstance(instanceClass)).         } catch (Exception ex) {             throw new CamelException("Error calling getSchema on " + instanceClass, ex).         }     } else {         throw new CamelException("Class " + instanceClass + " must be instanceof " + GENERIC_CONTAINER_CLASSNAME).     } }
false;public;3;9;;public void marshal(Exchange exchange, Object graph, OutputStream outputStream) throws Exception {     // the schema should be from the graph class name     Schema useSchema = actualSchema != null ? actualSchema : loadSchema(graph.getClass().getName()).     DatumWriter<Object> datum = new SpecificDatumWriter<>(useSchema).     Encoder encoder = EncoderFactory.get().binaryEncoder(outputStream, null).     datum.write(graph, encoder).     encoder.flush(). }
false;public;2;16;;public Object unmarshal(Exchange exchange, InputStream inputStream) throws Exception {     ObjectHelper.notNull(actualSchema, "schema", this).     ClassLoader classLoader = null.     Class<?> clazz = camelContext.getClassResolver().resolveClass(actualSchema.getFullName()).     if (clazz != null) {         classLoader = clazz.getClassLoader().     }     SpecificData specificData = new SpecificDataNoCache(classLoader).     DatumReader<GenericRecord> reader = new SpecificDatumReader<>(null, null, specificData).     reader.setSchema(actualSchema).     Decoder decoder = DecoderFactory.get().binaryDecoder(inputStream, null).     Object result = reader.read(null, decoder).     return result. }
