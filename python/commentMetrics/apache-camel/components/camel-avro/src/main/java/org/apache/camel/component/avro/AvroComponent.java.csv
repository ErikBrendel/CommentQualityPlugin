# id;timestamp;commentText;codeText;commentWords;codeWords
AvroComponent -> public void unregister(String uri, String messageName);1375068440;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri			URI of the endpoint without message name_@param messageName	message name;public void unregister(String uri, String messageName) {_    	if(listenerRegistry.get(uri).unregister(messageName)) listenerRegistry.remove(uri)__    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1375077207;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1377445896;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1420381317;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1425140025;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1429000009;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1451237123;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1451237124;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1470118430;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1470118430;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1474381874;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1482322625;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1523968777;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1540108158;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1540108163;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1547241305;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> public void unregister(String uri, String messageName);1547622156;Calls unregister of consumer by appropriate message name._In case if all consumers are unregistered then it removes responder from the registry.__@param uri URI of the endpoint without message name_@param messageName message name;public void unregister(String uri, String messageName) {_        if (listenerRegistry.get(uri).unregister(messageName)) {_            listenerRegistry.remove(uri)__        }_    };calls,unregister,of,consumer,by,appropriate,message,name,in,case,if,all,consumers,are,unregistered,then,it,removes,responder,from,the,registry,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name;public,void,unregister,string,uri,string,message,name,if,listener,registry,get,uri,unregister,message,name,listener,registry,remove,uri
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1335885915;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                Field f = protocolClass.getField("PROTOCOL")__                if (f != null) {_                    Protocol protocol = (Protocol) f.get(null)__                    config.setProtocol(protocol)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1375068440;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_            	try {_            		Field f = protocolClass.getField("PROTOCOL")__            		if (f != null) {_                        Protocol protocol = (Protocol) f.get(null)__                        config.setProtocol(protocol)__                    }_            	} catch(NoSuchFieldException e) {_            		ReflectData reflectData = ReflectData.get()__                	config.setProtocol(reflectData.getProtocol(protocolClass))__                	config.setReflectionProtocol(true)__            	}_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck =  config.getMessageName() == null ?_                    messageMap.values() :_                    Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message: messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size() +_                            " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1375077207;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message: messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1377445896;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1420381317;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1425140025;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1429000009;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1451237123;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1451237124;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1470118430;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol) f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null_                    ? messageMap.values()_                    : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1470118430;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol) f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null_                    ? messageMap.values()_                    : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1474381874;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1482322625;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1523968777;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1540108158;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1540108163;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1547241305;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception;1547622156;Applies endpoint parameters to configuration & resolves protocol and other required configuration properties.;private void applyToConfiguration(AvroConfiguration config, URI endpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(endpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                try {_                    Field f = protocolClass.getField("PROTOCOL")__                    if (f != null) {_                        Protocol protocol = (Protocol)f.get(null)__                        config.setProtocol(protocol)__                    }_                } catch (NoSuchFieldException e) {_                    ReflectData reflectData = ReflectData.get()__                    config.setProtocol(reflectData.getProtocol(protocolClass))__                    config.setReflectionProtocol(true)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }__        if (config.getMessageName() != null && !config.getProtocol().getMessages().containsKey(config.getMessageName())) {_            throw new IllegalArgumentException("Message " + config.getMessageName() + " is not defined in protocol")__        }__        if (config.isSingleParameter()) {_            Map<String, Protocol.Message> messageMap = config.getProtocol().getMessages()__            Iterable<Protocol.Message> messagesToCheck = config.getMessageName() == null _                ? messageMap.values() _                : Collections.singleton(messageMap.get(config.getMessageName()))__            for (Protocol.Message message : messagesToCheck) {_                if (message.getRequest().getFields().size() != 1) {_                    throw new IllegalArgumentException("Single parameter option can't be used with message "_                            + message.getName() + " because it has " + message.getRequest().getFields().size()_                            + " parameters defined"_                    )__                }_            }_        }_    };applies,endpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties;private,void,apply,to,configuration,avro,configuration,config,uri,endpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,endpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,try,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,catch,no,such,field,exception,e,reflect,data,reflect,data,reflect,data,get,config,set,protocol,reflect,data,get,protocol,protocol,class,config,set,reflection,protocol,true,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol,if,config,get,message,name,null,config,get,protocol,get,messages,contains,key,config,get,message,name,throw,new,illegal,argument,exception,message,config,get,message,name,is,not,defined,in,protocol,if,config,is,single,parameter,map,string,protocol,message,message,map,config,get,protocol,get,messages,iterable,protocol,message,messages,to,check,config,get,message,name,null,message,map,values,collections,singleton,message,map,get,config,get,message,name,for,protocol,message,message,messages,to,check,if,message,get,request,get,fields,size,1,throw,new,illegal,argument,exception,single,parameter,option,can,t,be,used,with,message,message,get,name,because,it,has,message,get,request,get,fields,size,parameters,defined
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1375068440;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just registers consumer.__@param uri			URI of the endpoint without message name_@param messageName	message name_@param consumer		consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_    	AvroListener listener = listenerRegistry.get(uri)__    	if(listener == null) {_    		listener = new AvroListener(consumer.getEndpoint())__    		listenerRegistry.put(uri, listener)__    	}_    	listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1375077207;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1377445896;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1420381317;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1425140025;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1429000009;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1451237123;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1451237124;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1470118430;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1470118430;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1474381874;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1482322625;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1523968777;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1540108158;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1540108163;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1547241305;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void register(String uri, String messageName, AvroConsumer consumer) throws Exception;1547622156;Registers new responder with uri as key. Registers consumer in responder._In case if responder is already registered by this uri then just_registers consumer.__@param uri URI of the endpoint without message name_@param messageName message name_@param consumer consumer that will be registered in providers` registry_@throws Exception;public void register(String uri, String messageName, AvroConsumer consumer) throws Exception {_        AvroListener listener = listenerRegistry.get(uri)__        if (listener == null) {_            listener = new AvroListener(consumer.getEndpoint())__            listenerRegistry.put(uri, listener)__        }_        listener.register(messageName, consumer)__    };registers,new,responder,with,uri,as,key,registers,consumer,in,responder,in,case,if,responder,is,already,registered,by,this,uri,then,just,registers,consumer,param,uri,uri,of,the,endpoint,without,message,name,param,message,name,message,name,param,consumer,consumer,that,will,be,registered,in,providers,registry,throws,exception;public,void,register,string,uri,string,message,name,avro,consumer,consumer,throws,exception,avro,listener,listener,listener,registry,get,uri,if,listener,null,listener,new,avro,listener,consumer,get,endpoint,listener,registry,put,uri,listener,listener,register,message,name,consumer
AvroComponent -> public void setSingleParameter(boolean singleParameter);1470118430;If true, consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message_@param singleParameter;public void setSingleParameter(boolean singleParameter) {_        configuration.setSingleParameter(singleParameter)__    };if,true,consumer,parameter,won,t,be,wrapped,into,array,will,fail,if,protocol,specifies,more,then,1,parameter,for,the,message,param,single,parameter;public,void,set,single,parameter,boolean,single,parameter,configuration,set,single,parameter,single,parameter
AvroComponent -> public void setSingleParameter(boolean singleParameter);1470118430;If true, consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message_@param singleParameter;public void setSingleParameter(boolean singleParameter) {_        getConfigurationOrCreate().setSingleParameter(singleParameter)__    };if,true,consumer,parameter,won,t,be,wrapped,into,array,will,fail,if,protocol,specifies,more,then,1,parameter,for,the,message,param,single,parameter;public,void,set,single,parameter,boolean,single,parameter,get,configuration,or,create,set,single,parameter,single,parameter
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI enpointUri, Map<String, Object> parameters) throws Exception;1328379798;Applies enpoint parameters to configuration & resolves protocol and other required configuration properties._@param config_@param enpointUri_@param parameters_@throws Exception;private void applyToConfiguration(AvroConfiguration config, URI enpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(enpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                Field f = protocolClass.getField("PROTOCOL")__                if (f != null) {_                    Protocol protocol = (Protocol) f.get(null)__                    config.setProtocol(protocol)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }_    };applies,enpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties,param,config,param,enpoint,uri,param,parameters,throws,exception;private,void,apply,to,configuration,avro,configuration,config,uri,enpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,enpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol
AvroComponent -> private void applyToConfiguration(AvroConfiguration config, URI enpointUri, Map<String, Object> parameters) throws Exception;1328449994;Applies enpoint parameters to configuration & resolves protocol and other required configuration properties._@param config_@param enpointUri_@param parameters_@throws Exception;private void applyToConfiguration(AvroConfiguration config, URI enpointUri, Map<String, Object> parameters) throws Exception {_        config.parseURI(enpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            if (protocolClass != null) {_                Field f = protocolClass.getField("PROTOCOL")__                if (f != null) {_                    Protocol protocol = (Protocol) f.get(null)__                    config.setProtocol(protocol)__                }_            }_        }__        if (config.getProtocol() == null) {_            throw new IllegalArgumentException("Avro configuration does not contain protocol")__        }_    };applies,enpoint,parameters,to,configuration,resolves,protocol,and,other,required,configuration,properties,param,config,param,enpoint,uri,param,parameters,throws,exception;private,void,apply,to,configuration,avro,configuration,config,uri,enpoint,uri,map,string,object,parameters,throws,exception,config,parse,uri,enpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,if,protocol,class,null,field,f,protocol,class,get,field,protocol,if,f,null,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,if,config,get,protocol,null,throw,new,illegal,argument,exception,avro,configuration,does,not,contain,protocol
AvroComponent -> public void setProtocolClassName(String protocolClassName);1470118430;Avro protocol to use defined by the FQN class name_@param protocolClassName;public void setProtocolClassName(String protocolClassName) {_        configuration.setProtocolClassName(protocolClassName)__    };avro,protocol,to,use,defined,by,the,fqn,class,name,param,protocol,class,name;public,void,set,protocol,class,name,string,protocol,class,name,configuration,set,protocol,class,name,protocol,class,name
AvroComponent -> public void setProtocolClassName(String protocolClassName);1470118430;Avro protocol to use defined by the FQN class name_@param protocolClassName;public void setProtocolClassName(String protocolClassName) {_        getConfigurationOrCreate().setProtocolClassName(protocolClassName)__    };avro,protocol,to,use,defined,by,the,fqn,class,name,param,protocol,class,name;public,void,set,protocol,class,name,string,protocol,class,name,get,configuration,or,create,set,protocol,class,name,protocol,class,name
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1429000009;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1451237123;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1451237124;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1470118430;To use a shared {@link AvroConfiguration} to configure options once. Properties of the shared configuration can also be set individually.;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once,properties,of,the,shared,configuration,can,also,be,set,individually;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1470118430;To use a shared {@link AvroConfiguration} to configure options once. Properties of the shared configuration can also be set individually.;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once,properties,of,the,shared,configuration,can,also,be,set,individually;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1474381874;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1482322625;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1523968777;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1540108158;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1540108163;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1547241305;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setConfiguration(AvroConfiguration configuration);1547622156;To use a shared {@link AvroConfiguration} to configure options once;public void setConfiguration(AvroConfiguration configuration) {_        this.configuration = configuration__    };to,use,a,shared,link,avro,configuration,to,configure,options,once;public,void,set,configuration,avro,configuration,configuration,this,configuration,configuration
AvroComponent -> public void setProtocolLocation(String protocolLocation);1470118430;Avro protocol location_@param protocolLocation;public void setProtocolLocation(String protocolLocation) {_        configuration.setProtocolLocation(protocolLocation)__    };avro,protocol,location,param,protocol,location;public,void,set,protocol,location,string,protocol,location,configuration,set,protocol,location,protocol,location
AvroComponent -> public void setProtocolLocation(String protocolLocation);1470118430;Avro protocol location_@param protocolLocation;public void setProtocolLocation(String protocolLocation) {_        getConfigurationOrCreate().setProtocolLocation(protocolLocation)__    };avro,protocol,location,param,protocol,location;public,void,set,protocol,location,string,protocol,location,get,configuration,or,create,set,protocol,location,protocol,location
AvroComponent -> public void setMessageName(String messageName);1470118430;The name of the message to send._@param messageName;public void setMessageName(String messageName) {_        configuration.setMessageName(messageName)__    };the,name,of,the,message,to,send,param,message,name;public,void,set,message,name,string,message,name,configuration,set,message,name,message,name
AvroComponent -> public void setMessageName(String messageName);1470118430;The name of the message to send._@param messageName;public void setMessageName(String messageName) {_        getConfigurationOrCreate().setMessageName(messageName)__    };the,name,of,the,message,to,send,param,message,name;public,void,set,message,name,string,message,name,get,configuration,or,create,set,message,name,message,name
AvroComponent -> public void setReflectionProtocol(boolean isReflectionProtocol);1470118430;If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected_@param isReflectionProtocol;public void setReflectionProtocol(boolean isReflectionProtocol) {_        configuration.setReflectionProtocol(isReflectionProtocol)__    };if,protocol,object,provided,is,reflection,protocol,should,be,used,only,with,protocol,parameter,because,for,protocol,class,name,protocol,type,will,be,auto,detected,param,is,reflection,protocol;public,void,set,reflection,protocol,boolean,is,reflection,protocol,configuration,set,reflection,protocol,is,reflection,protocol
AvroComponent -> public void setReflectionProtocol(boolean isReflectionProtocol);1470118430;If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected_@param isReflectionProtocol;public void setReflectionProtocol(boolean isReflectionProtocol) {_        getConfigurationOrCreate().setReflectionProtocol(isReflectionProtocol)__    };if,protocol,object,provided,is,reflection,protocol,should,be,used,only,with,protocol,parameter,because,for,protocol,class,name,protocol,type,will,be,auto,detected,param,is,reflection,protocol;public,void,set,reflection,protocol,boolean,is,reflection,protocol,get,configuration,or,create,set,reflection,protocol,is,reflection,protocol
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1328305273;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }_        URI enpointUri = new URI(URISupport.normalizeUri(remaining))__        config.parseURI(enpointUri, parameters, this)__        setProperties(config, parameters)___        if (config.getProtocol() == null && config.getProtocolClassName() != null) {_            Class<?> protocolClass = getCamelContext().getClassResolver().resolveClass(config.getProtocolClassName())__            Field f = protocolClass.getField("PROTOCOL")__            Protocol protocol = (Protocol) f.get(null)__            config.setProtocol(protocol)__        }__        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,enpoint,uri,new,uri,urisupport,normalize,uri,remaining,config,parse,uri,enpoint,uri,parameters,this,set,properties,config,parameters,if,config,get,protocol,null,config,get,protocol,class,name,null,class,protocol,class,get,camel,context,get,class,resolver,resolve,class,config,get,protocol,class,name,field,f,protocol,class,get,field,protocol,protocol,protocol,protocol,f,get,null,config,set,protocol,protocol,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1328379798;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI enpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, enpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,enpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,enpoint,uri,parameters,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1328449994;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI enpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, enpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,enpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,enpoint,uri,parameters,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1335885915;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI enpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, enpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,enpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,enpoint,uri,parameters,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1375068440;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI enpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, enpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,enpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,enpoint,uri,parameters,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1375077207;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI enpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, enpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,enpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,enpoint,uri,parameters,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1377445896;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI enpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, enpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,enpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,enpoint,uri,parameters,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1420381317;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI enpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, enpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(enpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,enpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,enpoint,uri,parameters,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,enpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1425140025;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1429000009;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1451237123;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1451237124;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1470118430;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1470118430;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1474381874;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1482322625;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1523968777;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1540108158;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1540108163;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1547241305;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1547622156;A factory method allowing derived components to create a new endpoint_from the given URI, remaining path and optional parameters__@param uri        the full URI of the endpoint_@param remaining  the remaining part of the URI without the query_parameters or component prefix_@param parameters the optional parameters passed in_@return a newly created endpoint or null if the endpoint cannot be_created based on the inputs;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {_        AvroConfiguration config__        if (configuration != null) {_            config = configuration.copy()__        } else {_            config = new AvroConfiguration()__        }__        URI endpointUri = new URI(URISupport.normalizeUri(remaining))__        applyToConfiguration(config, endpointUri, parameters)___        if (AvroConstants.AVRO_NETTY_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroNettyEndpoint(remaining, this, config)__        } else if (AvroConstants.AVRO_HTTP_TRANSPORT.equals(endpointUri.getScheme())) {_            return new AvroHttpEndpoint(remaining, this, config)__        } else {_            throw new IllegalArgumentException("Unknown avro scheme. Should use either netty or http.")__        }_    };a,factory,method,allowing,derived,components,to,create,a,new,endpoint,from,the,given,uri,remaining,path,and,optional,parameters,param,uri,the,full,uri,of,the,endpoint,param,remaining,the,remaining,part,of,the,uri,without,the,query,parameters,or,component,prefix,param,parameters,the,optional,parameters,passed,in,return,a,newly,created,endpoint,or,null,if,the,endpoint,cannot,be,created,based,on,the,inputs;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,avro,configuration,config,if,configuration,null,config,configuration,copy,else,config,new,avro,configuration,uri,endpoint,uri,new,uri,urisupport,normalize,uri,remaining,apply,to,configuration,config,endpoint,uri,parameters,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,netty,endpoint,remaining,this,config,else,if,avro,constants,equals,endpoint,uri,get,scheme,return,new,avro,http,endpoint,remaining,this,config,else,throw,new,illegal,argument,exception,unknown,avro,scheme,should,use,either,netty,or,http
AvroComponent -> public void setProtocol(Protocol protocol);1470118430;Avro protocol to use_@param protocol;public void setProtocol(Protocol protocol) {_        configuration.setProtocol(protocol)__    };avro,protocol,to,use,param,protocol;public,void,set,protocol,protocol,protocol,configuration,set,protocol,protocol
AvroComponent -> public void setProtocol(Protocol protocol);1470118430;Avro protocol to use_@param protocol;public void setProtocol(Protocol protocol) {_        getConfigurationOrCreate().setProtocol(protocol)__    };avro,protocol,to,use,param,protocol;public,void,set,protocol,protocol,protocol,get,configuration,or,create,set,protocol,protocol
AvroComponent -> public void setPort(int port);1470118430;Port number to use_@param port;public void setPort(int port) {_        configuration.setPort(port)__    };port,number,to,use,param,port;public,void,set,port,int,port,configuration,set,port,port
AvroComponent -> public void setPort(int port);1470118430;Port number to use_@param port;public void setPort(int port) {_        getConfigurationOrCreate().setPort(port)__    };port,number,to,use,param,port;public,void,set,port,int,port,get,configuration,or,create,set,port,port
AvroComponent -> public void setTransport(String transport);1470118430;Transport to use_@param transport;public void setTransport(String transport) {_        configuration.setTransport(transport)__    };transport,to,use,param,transport;public,void,set,transport,string,transport,configuration,set,transport,transport
AvroComponent -> public void setTransport(String transport);1470118430;Transport to use_@param transport;public void setTransport(String transport) {_        getConfigurationOrCreate().setTransport(transport)__    };transport,to,use,param,transport;public,void,set,transport,string,transport,get,configuration,or,create,set,transport,transport
AvroComponent -> public void setHost(String host);1470118430;Hostname to use_@param host;public void setHost(String host) {_        configuration.setHost(host)__    };hostname,to,use,param,host;public,void,set,host,string,host,configuration,set,host,host
AvroComponent -> public void setHost(String host);1470118430;Hostname to use_@param host;public void setHost(String host) {_        getConfigurationOrCreate().setHost(host)__    };hostname,to,use,param,host;public,void,set,host,string,host,get,configuration,or,create,set,host,host
AvroComponent -> public void setUriAuthority(String uriAuthority);1470118430;Authority to use (username and password)_@param uriAuthority;public void setUriAuthority(String uriAuthority) {_        configuration.setUriAuthority(uriAuthority)__    };authority,to,use,username,and,password,param,uri,authority;public,void,set,uri,authority,string,uri,authority,configuration,set,uri,authority,uri,authority
AvroComponent -> public void setUriAuthority(String uriAuthority);1470118430;Authority to use (username and password)_@param uriAuthority;public void setUriAuthority(String uriAuthority) {_        getConfigurationOrCreate().setUriAuthority(uriAuthority)__    };authority,to,use,username,and,password,param,uri,authority;public,void,set,uri,authority,string,uri,authority,get,configuration,or,create,set,uri,authority,uri,authority
