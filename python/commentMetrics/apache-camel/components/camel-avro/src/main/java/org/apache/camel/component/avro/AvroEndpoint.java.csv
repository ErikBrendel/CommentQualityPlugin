commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;public Exchange createExchange(Protocol.Message message, Object request) {     ExchangePattern pattern = ExchangePattern.InOut.     if (message.getResponse().equals(Schema.Type.NULL)) {         pattern = ExchangePattern.InOnly.     }     Exchange exchange = createExchange(pattern).     exchange.getIn().setBody(request).     exchange.getIn().setHeader(AvroConstants.AVRO_MESSAGE_NAME, message.getName()).     return exchange. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
true;public;1;4;/**  * Creates a new <a  * href="http://camel.apache.org/event-driven-consumer.html">Event  * Driven Consumer</a> which consumes messages from the endpoint using the  * given processor  *  * @param processor the given processor  * @return a newly created consumer  * @throws Exception can be thrown  */ ;/**  * Creates a new <a  * href="http://camel.apache.org/event-driven-consumer.html">Event  * Driven Consumer</a> which consumes messages from the endpoint using the  * given processor  *  * @param processor the given processor  * @return a newly created consumer  * @throws Exception can be thrown  */ @Override public Consumer createConsumer(Processor processor) throws Exception {     return new AvroConsumer(this, processor). }
false;public;0;3;;public AvroConfiguration getConfiguration() {     return configuration. }
