commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public,abstract;0;1;;public abstract Transceiver createTransceiver() throws Exception.
false;public;1;11;;@Override public void handleResult(Object result) {     // got result from avro, so set it on the exchange and invoke the callback     try {         // propagate headers         exchange.getOut().setHeaders(exchange.getIn().getHeaders()).         exchange.getOut().setBody(result).     } finally {         callback.done(false).     } }
false;public;1;9;;@Override public void handleError(Throwable error) {     // got error from avro, so set it on the exchange and invoke the callback     try {         exchange.setException(error).     } finally {         callback.done(false).     } }
false;public;2;44;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     Object request = exchange.getIn().getBody().     try {         String messageName.         if (!StringUtils.isEmpty(exchange.getIn().getHeader(AvroConstants.AVRO_MESSAGE_NAME, String.class))) {             messageName = exchange.getIn().getHeader(AvroConstants.AVRO_MESSAGE_NAME, String.class).         } else {             messageName = getEndpoint().getConfiguration().getMessageName().         }         requestor.request(messageName, wrapObjectToArray(request), new Callback<Object>() {              @Override             public void handleResult(Object result) {                 // got result from avro, so set it on the exchange and invoke the callback                 try {                     // propagate headers                     exchange.getOut().setHeaders(exchange.getIn().getHeaders()).                     exchange.getOut().setBody(result).                 } finally {                     callback.done(false).                 }             }              @Override             public void handleError(Throwable error) {                 // got error from avro, so set it on the exchange and invoke the callback                 try {                     exchange.setException(error).                 } finally {                     callback.done(false).                 }             }         }).     } catch (Exception e) {         exchange.setException(e).         callback.done(true).         return true.     }     // okay we continue routing asynchronously     return false. }
false;public;1;9;;public Object[] wrapObjectToArray(Object object) {     if (object instanceof Object[]) {         return (Object[]) object.     } else {         Object[] wrapper = new Object[1].         wrapper[0] = object.         return wrapper.     } }
false;protected;0;11;;@Override protected void doStart() throws Exception {     super.doStart().     transceiver = createTransceiver().     AvroConfiguration configuration = getEndpoint().getConfiguration().     if (configuration.isReflectionProtocol()) {         requestor = new AvroReflectRequestor(configuration.getProtocol(), transceiver).     } else {         requestor = new AvroSpecificRequestor(configuration.getProtocol(), transceiver).     } }
false;protected;0;9;;@Override protected void doStop() throws Exception {     if (transceiver != null) {         transceiver.close().         transceiver = null.     }     requestor = null.     super.doStop(). }
false;public;0;4;;@Override public AvroEndpoint getEndpoint() {     return (AvroEndpoint) super.getEndpoint(). }
