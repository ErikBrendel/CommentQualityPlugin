commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void ensureCustomHttpClientIsDefined() {     HttpClient httpClient = hipchatEndpoint.getConfiguration().getHttpClient().     assertNotNull(httpClient).     assertIsInstanceOf(MyCustomHttpClient.class, httpClient). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry reg = super.createRegistry().     reg.bind("myHttpClient", new MyCustomHttpClient()).     return reg. }
false;public;0;6;;@Override public void configure() {     from("direct:start").to("hipchat:http://api.hipchat.com?httpClient=#myHttpClient&authToken=anything&consumeUsers=@AUser").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("hipchat:http://api.hipchat.com?httpClient=#myHttpClient&authToken=anything&consumeUsers=@AUser").to("mock:result").         }     }. }
false;public;0;4;;@Override public HttpParams getParams() {     return innerHttpClient.getParams(). }
false;public;0;4;;@Override public ClientConnectionManager getConnectionManager() {     return innerHttpClient.getConnectionManager(). }
false;public;0;4;;@Override public void close() throws IOException {     innerHttpClient.close(). }
false;protected;3;4;;@Override protected CloseableHttpResponse doExecute(HttpHost target, HttpRequest request, HttpContext context) throws IOException, ClientProtocolException {     return innerHttpClient.execute(target, request, context). }
