commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public boolean matches(Exchange exchange) {     StatusLine status = (StatusLine) exchange.getIn().getHeader(HipchatConstants.FROM_USER_RESPONSE_STATUS).     return 200 == status.getStatusCode(). }
false;public;0;13;;@Test public void sendInOnly() throws Exception {     result.expectedMessageCount(1).     result.expectedMessagesMatches(new Predicate() {          @Override         public boolean matches(Exchange exchange) {             StatusLine status = (StatusLine) exchange.getIn().getHeader(HipchatConstants.FROM_USER_RESPONSE_STATUS).             return 200 == status.getStatusCode().         }     }).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     String hipchatEndpointUri = "hipchat:http:api.hipchat.com?authToken=XXXX&consumeUsers=@ShreyasPurohit&delay=1000".     from(hipchatEndpointUri).idempotentConsumer(simple("${in.header.HipchatMessageDate} ${in.header.HipchatFromUser}"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("mock:result"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String hipchatEndpointUri = "hipchat:http:api.hipchat.com?authToken=XXXX&consumeUsers=@ShreyasPurohit&delay=1000".             from(hipchatEndpointUri).idempotentConsumer(simple("${in.header.HipchatMessageDate} ${in.header.HipchatFromUser}"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("mock:result").         }     }. }
