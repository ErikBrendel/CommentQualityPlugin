commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void shouldConfigureEndpointCorrectlyViaXml() throws Exception {     assertIsInstanceOf(HipchatEndpoint.class, endpoint).     HipchatEndpoint hipchatEndpoint = (HipchatEndpoint) endpoint.     HipchatConfiguration configuration = hipchatEndpoint.getConfiguration().     assertThat(configuration.getAuthToken(), is("abc123")).     assertThat(configuration.getHost(), is("foobar.com")).     assertThat(configuration.getProtocol(), is("https")).     assertThat(configuration.getPort(), is(443)). }
false;protected;1;4;;@Override protected HipchatEndpoint getHipchatEndpoint(String uri) {     return new HipchatEPSuccessTestSupport(uri, this, null, null). }
false;protected;0;19;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     HipchatComponent component = new HipchatComponent(context) {          @Override         protected HipchatEndpoint getHipchatEndpoint(String uri) {             return new HipchatEPSuccessTestSupport(uri, this, null, null).         }     }.     context.addComponent("hipchat", component).     // This test is all about ensuring the endpoint is configured correctly when using the XML DSL so this     try (InputStream routes = getClass().getResourceAsStream("HipchatXmlDefinedComponentProducerTest-route.xml")) {         RoutesDefinition routesDefinition = ModelHelper.loadRoutesDefinition(context, routes).         context.adapt(ModelCamelContext.class).addRouteDefinition(routesDefinition.getRoutes().get(0)).     }     return context. }
