commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "Developer").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "text").     exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "true").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "green").     exchange.getIn().setHeader(HipchatConstants.TO_USER, "@ShreyasPurohit").     exchange.getIn().setBody("Integration test Alert"). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "Developer").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "html").     exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "false").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "red").     exchange.getIn().setHeader(HipchatConstants.TO_USER, "@ShreyasPurohit").     exchange.getIn().setBody("<b>Integration test Alert</b>"). }
false;public;0;32;;@Test public void sendInOnly() throws Exception {     result.expectedMessageCount(2).     Exchange exchange1 = template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "Developer").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "text").             exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "true").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "green").             exchange.getIn().setHeader(HipchatConstants.TO_USER, "@ShreyasPurohit").             exchange.getIn().setBody("Integration test Alert").         }     }).     Exchange exchange2 = template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "Developer").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "html").             exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "false").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "red").             exchange.getIn().setHeader(HipchatConstants.TO_USER, "@ShreyasPurohit").             exchange.getIn().setBody("<b>Integration test Alert</b>").         }     }).     assertMockEndpointsSatisfied().     assertResponseMessage(exchange1.getIn()).     assertResponseMessage(exchange2.getIn()). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "Camel Test").     exchange.getIn().setHeader(HipchatConstants.TO_USER, "@ShreyasPurohit").     exchange.getIn().setBody("A room with spaces"). }
false;public;0;16;;@Test public void sendToUriUnsafeRoomName() throws Exception {     result.expectedMessageCount(1).     Exchange exchange1 = template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "Camel Test").             exchange.getIn().setHeader(HipchatConstants.TO_USER, "@ShreyasPurohit").             exchange.getIn().setBody("A room with spaces").         }     }).     assertMockEndpointsSatisfied().     assertResponseMessage(exchange1.getIn()). }
false;private;1;4;;private void assertResponseMessage(Message message) {     assertEquals(204, message.getHeader(HipchatConstants.TO_ROOM_RESPONSE_STATUS, StatusLine.class).getStatusCode()).     assertEquals(204, message.getHeader(HipchatConstants.TO_USER_RESPONSE_STATUS, StatusLine.class).getStatusCode()). }
false;public;0;8;;@Override public void configure() throws Exception {     String hipchatEndpointUri = "hipchat:http:api.hipchat.com?authToken=XXXX".     from("direct:start").to(hipchatEndpointUri).to("mock:result"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String hipchatEndpointUri = "hipchat:http:api.hipchat.com?authToken=XXXX".             from("direct:start").to(hipchatEndpointUri).to("mock:result").         }     }. }
