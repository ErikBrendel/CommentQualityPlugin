commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "CamelUnitTest").     exchange.getIn().setHeader(HipchatConstants.TO_USER, "CamelUnitTestUser").     exchange.getIn().setBody("This is my unit test message."). }
false;public;0;19;;@Test public void sendInOnly() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "CamelUnitTest").             exchange.getIn().setHeader(HipchatConstants.TO_USER, "CamelUnitTestUser").             exchange.getIn().setBody("This is my unit test message.").         }     }).     assertMockEndpointsSatisfied().     assertCommonResultExchange(result.getExchanges().get(0)).     assertNullExchangeHeader(result.getExchanges().get(0)).     assertResponseMessage(exchange.getIn()). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "CamelUnitTest").     exchange.getIn().setHeader(HipchatConstants.TO_USER, "CamelUnitTestUser").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "CamelUnitTestBkColor").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "CamelUnitTestFormat").     exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "CamelUnitTestNotify").     exchange.getIn().setBody("This is my unit test message."). }
false;public;0;23;;@Test public void sendInOut() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "CamelUnitTest").             exchange.getIn().setHeader(HipchatConstants.TO_USER, "CamelUnitTestUser").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "CamelUnitTestBkColor").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "CamelUnitTestFormat").             exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "CamelUnitTestNotify").             exchange.getIn().setBody("This is my unit test message.").         }     }).     assertMockEndpointsSatisfied().     assertCommonResultExchange(result.getExchanges().get(0)).     assertRemainingResultExchange(result.getExchanges().get(0)).     assertResponseMessage(exchange.getIn()). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "CamelUnitTest").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "CamelUnitTestBkColor").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "CamelUnitTestFormat").     exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "CamelUnitTestNotify").     exchange.getIn().setBody("This is my unit test message."). }
false;public;0;33;;@Test public void sendInOutRoomOnly() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(HipchatConstants.TO_ROOM, "CamelUnitTest").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "CamelUnitTestBkColor").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "CamelUnitTestFormat").             exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "CamelUnitTestNotify").             exchange.getIn().setBody("This is my unit test message.").         }     }).     assertMockEndpointsSatisfied().     Exchange resultExchange = result.getExchanges().get(0).     assertIsInstanceOf(String.class, resultExchange.getIn().getBody()).     assertEquals("This is my unit test message.", resultExchange.getIn().getBody(String.class)).     assertEquals("CamelUnitTest", resultExchange.getIn().getHeader(HipchatConstants.TO_ROOM)).     assertNull(resultExchange.getIn().getHeader(HipchatConstants.TO_USER)).     assertNull(resultExchange.getIn().getHeader(HipchatConstants.TO_USER_RESPONSE_STATUS)).     assertNotNull(resultExchange.getIn().getHeader(HipchatConstants.TO_ROOM_RESPONSE_STATUS)).     assertRemainingResultExchange(result.getExchanges().get(0)).     assertEquals(204, exchange.getIn().getHeader(HipchatConstants.TO_ROOM_RESPONSE_STATUS, StatusLine.class).getStatusCode()).     assertNotNull(callback).     assertNotNull(callback.called).     assertEquals("This is my unit test message.", callback.called.get(HipchatApiConstants.API_MESSAGE)).     assertEquals("CamelUnitTestBkColor", callback.called.get(HipchatApiConstants.API_MESSAGE_COLOR)).     assertEquals("CamelUnitTestFormat", callback.called.get(HipchatApiConstants.API_MESSAGE_FORMAT)).     assertEquals("CamelUnitTestNotify", callback.called.get(HipchatApiConstants.API_MESSAGE_NOTIFY)). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(HipchatConstants.TO_USER, "CamelUnitTest").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "CamelUnitTestBkColor").     exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "CamelUnitTestFormat").     exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "CamelUnitTestNotify").     exchange.getIn().setBody("This is my unit test message."). }
false;public;0;33;;@Test public void sendInOutUserOnly() throws Exception {     result.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(HipchatConstants.TO_USER, "CamelUnitTest").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, "CamelUnitTestBkColor").             exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT, "CamelUnitTestFormat").             exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY, "CamelUnitTestNotify").             exchange.getIn().setBody("This is my unit test message.").         }     }).     assertMockEndpointsSatisfied().     Exchange resultExchange = result.getExchanges().get(0).     assertIsInstanceOf(String.class, resultExchange.getIn().getBody()).     assertEquals("This is my unit test message.", resultExchange.getIn().getBody(String.class)).     assertEquals("CamelUnitTest", resultExchange.getIn().getHeader(HipchatConstants.TO_USER)).     assertNull(resultExchange.getIn().getHeader(HipchatConstants.TO_ROOM)).     assertNull(resultExchange.getIn().getHeader(HipchatConstants.TO_ROOM_RESPONSE_STATUS)).     assertNotNull(resultExchange.getIn().getHeader(HipchatConstants.TO_USER_RESPONSE_STATUS)).     assertRemainingResultExchange(result.getExchanges().get(0)).     assertEquals(204, exchange.getIn().getHeader(HipchatConstants.TO_USER_RESPONSE_STATUS, StatusLine.class).getStatusCode()).     assertNotNull(callback).     assertNotNull(callback.called).     assertEquals("This is my unit test message.", callback.called.get(HipchatApiConstants.API_MESSAGE)).     assertNull(callback.called.get(HipchatApiConstants.API_MESSAGE_COLOR)).     assertEquals("CamelUnitTestFormat", callback.called.get(HipchatApiConstants.API_MESSAGE_FORMAT)).     assertEquals("CamelUnitTestNotify", callback.called.get(HipchatApiConstants.API_MESSAGE_NOTIFY)). }
false;private;1;6;;private void assertNullExchangeHeader(Exchange resultExchange) {     assertNull(resultExchange.getIn().getHeader(HipchatConstants.FROM_USER)).     assertNull(resultExchange.getIn().getHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR)).     assertNull(resultExchange.getIn().getHeader(HipchatConstants.MESSAGE_FORMAT)).     assertNull(resultExchange.getIn().getHeader(HipchatConstants.TRIGGER_NOTIFY)). }
false;private;1;5;;private void assertRemainingResultExchange(Exchange resultExchange) {     assertEquals("CamelUnitTestBkColor", resultExchange.getIn().getHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR)).     assertEquals("CamelUnitTestFormat", resultExchange.getIn().getHeader(HipchatConstants.MESSAGE_FORMAT)).     assertEquals("CamelUnitTestNotify", resultExchange.getIn().getHeader(HipchatConstants.TRIGGER_NOTIFY)). }
false;private;1;4;;private void assertResponseMessage(Message message) {     assertEquals(204, message.getHeader(HipchatConstants.TO_ROOM_RESPONSE_STATUS, StatusLine.class).getStatusCode()).     assertEquals(204, message.getHeader(HipchatConstants.TO_USER_RESPONSE_STATUS, StatusLine.class).getStatusCode()). }
false;private;1;8;;private void assertCommonResultExchange(Exchange resultExchange) {     assertIsInstanceOf(String.class, resultExchange.getIn().getBody()).     assertEquals("This is my unit test message.", resultExchange.getIn().getBody(String.class)).     assertEquals("CamelUnitTest", resultExchange.getIn().getHeader(HipchatConstants.TO_ROOM)).     assertEquals("CamelUnitTestUser", resultExchange.getIn().getHeader(HipchatConstants.TO_USER)).     assertNotNull(resultExchange.getIn().getHeader(HipchatConstants.TO_USER_RESPONSE_STATUS)).     assertNotNull(resultExchange.getIn().getHeader(HipchatConstants.TO_ROOM_RESPONSE_STATUS)). }
false;protected;1;4;;@Override protected HipchatEndpoint getHipchatEndpoint(String uri) {     return new HipchatEPSuccessTestSupport(uri, this, callback, null). }
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     HipchatComponent component = new HipchatComponent(context) {          @Override         protected HipchatEndpoint getHipchatEndpoint(String uri) {             return new HipchatEPSuccessTestSupport(uri, this, callback, null).         }     }.     context.addComponent("hipchat", component).     return context. }
false;public;0;6;;@Override public void configure() {     from("direct:start").to("hipchat:http:api.hipchat.com?authToken=anything").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("hipchat:http:api.hipchat.com?authToken=anything").to("mock:result").         }     }. }
false;public;1;3;;public void call(Map<String, String> postParam) {     this.called = postParam. }
