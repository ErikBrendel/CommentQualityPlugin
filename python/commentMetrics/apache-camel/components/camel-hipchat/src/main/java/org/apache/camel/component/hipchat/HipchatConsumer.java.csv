commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected int poll() throws Exception {     int messageCount = 0.     for (String user : getConfig().consumableUsers()) {         Exchange exchange = getEndpoint().createExchange().         processExchangeForUser(user, exchange).         messageCount++.     }     return messageCount. }
false;private;2;8;;private void processExchangeForUser(String user, Exchange exchange) throws Exception {     String urlPath = String.format(getMostRecentMessageUrl(), user).     log.debug("Polling HipChat Api " + urlPath + " for new messages at " + Calendar.getInstance(TimeZone.getTimeZone("UTC")).getTime()).     HttpGet httpGet = new HttpGet(getConfig().hipChatUrl() + urlPath).     CloseableHttpResponse response = executeGet(httpGet).     exchange.getIn().setHeader(HipchatConstants.FROM_USER, user).     processApiResponse(exchange, response). }
false;private;2;25;;private void processApiResponse(Exchange exchange, CloseableHttpResponse response) throws Exception {     try {         Map<String, Object> jsonMap = MAPPER.readValue(response.getEntity().getContent(), MAP_TYPE).         log.debug("Hipchat response " + response + ", json: " + MAPPER.writeValueAsString(jsonMap)).         if (jsonMap != null && jsonMap.size() > 0) {             List<Map<String, Object>> items = (List<Map<String, Object>>) jsonMap.get(HipchatApiConstants.API_ITEMS).             if (items != null && items.size() > 0) {                 try {                     Map<String, Object> item = items.get(0).                     String date = (String) item.get(HipchatApiConstants.API_DATE).                     String message = (String) item.get(HipchatApiConstants.API_MESSAGE).                     log.debug("Setting exchange body: " + message + ", header " + HipchatConstants.MESSAGE_DATE + ": " + date).                     exchange.getIn().setHeader(HipchatConstants.FROM_USER_RESPONSE_STATUS, response.getStatusLine()).                     exchange.getIn().setHeader(HipchatConstants.MESSAGE_DATE, date).                     exchange.getIn().setBody(message).                     getProcessor().process(exchange).                 } catch (Exception e) {                     throw new HipchatException("Error parsing Json response from Hipchat API", e).                 }             }         }     } finally {         response.close().     } }
false;protected;1;3;;protected CloseableHttpResponse executeGet(HttpGet httpGet) throws IOException {     return getConfig().getHttpClient().execute(httpGet). }
false;private;0;3;;private String getMostRecentMessageUrl() {     return getConfig().withAuthToken(HipchatApiConstants.URI_PATH_USER_LATEST_PRIVATE_CHAT) + "&" + HipchatApiConstants.DEFAULT_MAX_RESULT. }
false;private;0;3;;private HipchatConfiguration getConfig() {     return getEndpoint().getConfiguration(). }
false;public;0;4;;@Override public HipchatEndpoint getEndpoint() {     return (HipchatEndpoint) super.getEndpoint(). }
false;public;0;7;;@Override public String toString() {     if (hipchatConsumerToString == null) {         hipchatConsumerToString = "HipchatConsumer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return hipchatConsumerToString. }
