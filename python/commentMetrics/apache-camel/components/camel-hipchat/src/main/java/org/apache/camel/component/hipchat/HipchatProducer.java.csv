commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;public void process(Exchange exchange) throws Exception {     Message message = getMessageForResponse(exchange).     String user = exchange.getIn().getHeader(HipchatConstants.TO_USER, String.class).     if (user != null) {         message.setHeader(HipchatConstants.TO_USER_RESPONSE_STATUS, sendUserMessage(user, exchange)).     }     String room = exchange.getIn().getHeader(HipchatConstants.TO_ROOM, String.class).     if (room != null) {         message.setHeader(HipchatConstants.TO_ROOM_RESPONSE_STATUS, sendRoomMessage(room, exchange)).     } }
false;private;2;12;;private StatusLine sendRoomMessage(String room, Exchange exchange) throws IOException, InvalidPayloadException {     String urlPath = String.format(getConfig().withAuthToken(HipchatApiConstants.URI_PATH_ROOM_NOTIFY), room).     String backGroundColor = exchange.getIn().getHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR, String.class).     Map<String, String> jsonParam = getCommonHttpPostParam(exchange).     if (backGroundColor != null) {         jsonParam.put(HipchatApiConstants.API_MESSAGE_COLOR, backGroundColor).     }     log.info("Sending message to room: " + room + ", " + MAPPER.writeValueAsString(jsonParam)).     StatusLine statusLine = post(encodeHttpURI(urlPath), jsonParam).     log.debug("Response status for send room message: {}", statusLine).     return statusLine. }
false;private;2;8;;private StatusLine sendUserMessage(String user, Exchange exchange) throws IOException, InvalidPayloadException {     String urlPath = String.format(getConfig().withAuthToken(HipchatApiConstants.URI_PATH_USER_MESSAGE), user).     Map<String, String> jsonParam = getCommonHttpPostParam(exchange).     log.info("Sending message to user: " + user + ", " + MAPPER.writeValueAsString(jsonParam)).     StatusLine statusLine = post(urlPath, jsonParam).     log.debug("Response status for send user message: {}", statusLine).     return statusLine. }
false;private;1;11;;private Map<String, String> getCommonHttpPostParam(Exchange exchange) throws InvalidPayloadException {     String format = exchange.getIn().getHeader(HipchatConstants.MESSAGE_FORMAT, "text", String.class).     String notify = exchange.getIn().getHeader(HipchatConstants.TRIGGER_NOTIFY, String.class).     Map<String, String> jsonMap = new HashMap<>(4).     jsonMap.put(HipchatApiConstants.API_MESSAGE, exchange.getIn().getMandatoryBody(String.class)).     if (notify != null) {         jsonMap.put(HipchatApiConstants.API_MESSAGE_NOTIFY, notify).     }     jsonMap.put(HipchatApiConstants.API_MESSAGE_FORMAT, format).     return jsonMap. }
false;protected;2;10;;protected StatusLine post(String urlPath, Map<String, String> postParam) throws IOException {     HttpPost httpPost = new HttpPost(getConfig().hipChatUrl() + urlPath).     httpPost.setEntity(new StringEntity(MAPPER.writeValueAsString(postParam), ContentType.APPLICATION_JSON)).     CloseableHttpResponse closeableHttpResponse = getConfig().getHttpClient().execute(httpPost).     try {         return closeableHttpResponse.getStatusLine().     } finally {         closeableHttpResponse.close().     } }
false;private;1;8;;private Message getMessageForResponse(final Exchange exchange) {     if (exchange.getPattern().isOutCapable()) {         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         return out.     }     return exchange.getIn(). }
false;private;0;3;;private HipchatConfiguration getConfig() {     return getEndpoint().getConfiguration(). }
false;public;0;4;;@Override public HipchatEndpoint getEndpoint() {     return (HipchatEndpoint) super.getEndpoint(). }
false;public;0;7;;@Override public String toString() {     if (hipchatProducerToString == null) {         hipchatProducerToString = "HipchatProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]".     }     return hipchatProducerToString. }
