commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testInOutQueueProducerTTL() throws Exception {     Assume.assumeFalse(externalAmq).     mockExpiredAdvisory.expectedMessageCount(1).     String endpoint = String.format("sjms:queue:%s?ttl=1000&exchangePattern=InOut&responseTimeOut=500", TEST_INOUT_DESTINATION_NAME).     try {         template.requestBody(endpoint, "test message").         fail("we aren't expecting any consumers, so should not succeed").     } catch (Exception e) {     // we are expecting an exception here because there are no consumers on this queue,     // so we will not be able to do a real InOut/request-response, but that's okay     // we're just interested in the message becoming expired     }     assertMockEndpointsSatisfied().     DestinationViewMBean queue = getQueueMBean(TEST_INOUT_DESTINATION_NAME).     assertEquals("There were unexpected messages left in the queue: " + TEST_INOUT_DESTINATION_NAME, 0, queue.getQueueSize()). }
false;public;0;14;;@Test public void testInOnlyQueueProducerTTL() throws Exception {     Assume.assumeFalse(externalAmq).     mockExpiredAdvisory.expectedMessageCount(1).     String endpoint = String.format("sjms:queue:%s?ttl=1000", TEST_INONLY_DESTINATION_NAME).     template.sendBody(endpoint, "test message").     assertMockEndpointsSatisfied().     DestinationViewMBean queue = getQueueMBean(TEST_INONLY_DESTINATION_NAME).     assertEquals("There were unexpected messages left in the queue: " + TEST_INONLY_DESTINATION_NAME, 0, queue.getQueueSize()). }
false;protected;1;19;;@Override protected void configureBroker(BrokerService broker) throws Exception {     broker.setUseJmx(true).     broker.setPersistent(true).     broker.setDataDirectory("target/activemq-data").     broker.deleteAllMessages().     broker.setAdvisorySupport(true).     broker.addConnector(brokerUri).     // configure expiration rate     ActiveMQQueue queueName = new ActiveMQQueue(">").     PolicyEntry entry = new PolicyEntry().     entry.setDestination(queueName).     entry.setExpireMessagesPeriod(1000).     PolicyMap policyMap = new PolicyMap().     policyMap.put(queueName, entry).     broker.setDestinationPolicy(policyMap). }
false;public;0;6;;@Override public void configure() throws Exception {     from("sjms:topic:ActiveMQ.Advisory.Expired.Queue.>").routeId(EXPIRED_MESSAGE_ROUTE_ID).to(MOCK_EXPIRED_ADVISORY). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sjms:topic:ActiveMQ.Advisory.Expired.Queue.>").routeId(EXPIRED_MESSAGE_ROUTE_ID).to(MOCK_EXPIRED_ADVISORY).         }     }. }
