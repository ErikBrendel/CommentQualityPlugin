commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testProducerWithPrefill() throws Exception {     sendBodyAndAssert("sjms:queue:producer"). }
false;public;0;4;;@Test public void testProducerWithoutPrefill() throws Exception {     sendBodyAndAssert("sjms:queue:producer?prefillPool=false"). }
false;private;1;9;;private void sendBodyAndAssert(final String uri) throws InterruptedException {     String body1 = "Hello World".     String body2 = "G'day World".     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived(body1, body2).     template.sendBody(uri, body1).     template.sendBody(uri, body2).     result.assertIsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from("sjms:queue:producer").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("sjms:queue:producer").to("mock:result").         }     }. }
