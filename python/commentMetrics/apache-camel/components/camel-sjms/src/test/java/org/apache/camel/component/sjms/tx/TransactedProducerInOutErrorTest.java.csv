commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test(expected = FailedToCreateRouteException.class) public void test() throws Exception {     CamelContext context = new DefaultCamelContext().     context.addRoutes(createRouteBuilder()).     SjmsComponent component = context.getComponent("sjms", SjmsComponent.class).     component.setConnectionFactory(CamelJmsTestHelper.createConnectionFactory()).     try {         context.start().     } catch (Throwable t) {         Assert.assertEquals(FailedToCreateRouteException.class, t.getClass()).         Assert.assertEquals(FailedToCreateProducerException.class, t.getCause().getClass()).         Assert.assertEquals(IllegalArgumentException.class, t.getCause().getCause().getClass()).         LOG.info("Exception was thrown as expected", t).         throw t.     } }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").to("sjms:queue:test-in?namedReplyTo=test-out&exchangePattern=InOut&transacted=true").to("mock:result").     from("sjms:queue:test-in?exchangePattern=InOut").log("Using ${threadName} to process ${body}").transform(body().prepend("Bye ")). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("sjms:queue:test-in?namedReplyTo=test-out&exchangePattern=InOut&transacted=true").to("mock:result").             from("sjms:queue:test-in?exchangePattern=InOut").log("Using ${threadName} to process ${body}").transform(body().prepend("Bye ")).         }     }. }
