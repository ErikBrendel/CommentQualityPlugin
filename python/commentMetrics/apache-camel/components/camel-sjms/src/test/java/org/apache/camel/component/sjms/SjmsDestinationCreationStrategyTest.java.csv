commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = new DefaultCamelContext().     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUri).     setupFactoryExternal(connectionFactory).     SjmsComponent component = new SjmsComponent().     component.setConnectionFactory(connectionFactory).     component.setDestinationCreationStrategy(new TestDestinationCreationStrategyTest()).     camelContext.addComponent("sjms", component).     return camelContext. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("response"). }
false;public;0;9;;@Override public void configure() throws Exception {     from("sjms:queue:inout?prefillPool=false&exchangePattern=InOut").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("response").         }     }). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sjms:queue:inout?prefillPool=false&exchangePattern=InOut").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("response").                 }             }).         }     }. }
false;public;0;11;;@Test public void testSjmsComponentUsesCustomDestinationCreationStrategy() throws Exception {     assertFalse(createDestinationCalled).     template.sendBody("sjms:queue:inonly?prefillPool=false", "hello world").     assertTrue(createDestinationCalled).     assertFalse(createTemporaryDestination).     String response = (String) template.sendBody("sjms:queue:inout?prefillPool=false&exchangePattern=InOut", ExchangePattern.InOut, "hello world 2").     assertTrue(createTemporaryDestination).     assertEquals("response", response). }
false;public;3;7;;@Override public Destination createDestination(Session session, String name, boolean topic) throws JMSException {     if (name.equals("inonly")) {         createDestinationCalled = true.     }     return super.createDestination(session, name, topic). }
false;public;2;5;;@Override public Destination createTemporaryDestination(Session session, boolean topic) throws JMSException {     createTemporaryDestination = true.     return super.createTemporaryDestination(session, topic). }
