commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testInOnlyConsumerAsyncTrue() throws Exception {     getMockEndpoint(MOCK_RESULT).expectedBodiesReceived("Hello World", "Hello Camel").     template.sendBody("sjms:queue:in.only.consumer.async", "Hello Camel").     template.sendBody("sjms:queue:in.only.consumer.async", "Hello World").     // Thread.sleep(4000).     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     if (exchange.getIn().getBody(String.class).equals("Hello Camel")) {         Thread.sleep(2000).     } }
false;public;0;11;;@Override public void configure() throws Exception {     from("sjms:queue:in.only.consumer.async?synchronous=false").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             if (exchange.getIn().getBody(String.class).equals("Hello Camel")) {                 Thread.sleep(2000).             }         }     }).to("log:after").to(MOCK_RESULT). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sjms:queue:in.only.consumer.async?synchronous=false").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     if (exchange.getIn().getBody(String.class).equals("Hello Camel")) {                         Thread.sleep(2000).                     }                 }             }).to("log:after").to(MOCK_RESULT).         }     }. }
