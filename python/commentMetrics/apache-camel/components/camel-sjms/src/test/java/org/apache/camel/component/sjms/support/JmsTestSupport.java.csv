commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;27;/**  * Set up the Broker  *  * @see org.apache.camel.test.junit4.CamelTestSupport#doPreSetup()  *  * @throws Exception  */ ;/**  * Set up the Broker  *  * @see org.apache.camel.test.junit4.CamelTestSupport#doPreSetup()  *  * @throws Exception  */ @Override protected void doPreSetup() throws Exception {     deleteDirectory("target/activemq-data").     properties = new Properties().     final URL url = getClass().getResource("/test-options.properties").     int port.     String host.     try (InputStream inStream = url.openStream()) {         properties.load(inStream).         if (Boolean.valueOf(properties.getProperty("amq.external"))) {             log.info("Using external AMQ").             port = Integer.parseInt(properties.getProperty("amq.port")).             host = properties.getProperty("amq.host").             externalAmq = true.         } else {             port = AvailablePortFinder.getNextAvailable(33333).             host = "localhost".         }     }     brokerUri = String.format("tcp://%s:%s", host, port).     if (!externalAmq) {         broker = new BrokerService().         broker.getManagementContext().setConnectorPort(AvailablePortFinder.getNextAvailable(port + 1)).         configureBroker(broker).         startBroker().     } }
false;protected;1;6;;protected void configureBroker(BrokerService broker) throws Exception {     broker.setUseJmx(true).     broker.setPersistent(false).     broker.deleteAllMessages().     broker.addConnector(brokerUri). }
false;protected;1;6;;protected void setupFactoryExternal(ActiveMQConnectionFactory factory) {     if (externalAmq) {         factory.setUserName(properties.getProperty("amq.username")).         factory.setPassword(properties.getProperty("amq.password")).     } }
false;private;0;4;;private void startBroker() throws Exception {     broker.start().     broker.waitUntilStarted(). }
false;public;0;23;;@Override public void tearDown() throws Exception {     super.tearDown().     DefaultCamelContext dcc = (DefaultCamelContext) context.     while (broker != null && !dcc.isStopped()) {         log.info("Waiting on the Camel Context to stop").     }     log.info("Closing JMS Session").     if (getSession() != null) {         getSession().close().         setSession(null).     }     log.info("Closing JMS Connection").     if (connection != null) {         connection.stop().         connection = null.     }     log.info("Stopping the ActiveMQ Broker").     if (broker != null) {         broker.stop().         broker = null.     } }
true;protected;0;14;/*      * @see org.apache.camel.test.junit4.CamelTestSupport#createCamelContext()      * @return      * @throws Exception      */ ;/*      * @see org.apache.camel.test.junit4.CamelTestSupport#createCamelContext()      * @return      * @throws Exception      */ @Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUri).     setupFactoryExternal(connectionFactory).     connection = connectionFactory.createConnection().     connection.start().     session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE).     SjmsComponent component = new SjmsComponent().     component.setConnectionCount(1).     component.setConnectionFactory(connectionFactory).     camelContext.addComponent("sjms", component).     return camelContext. }
false;public;1;3;;public DestinationViewMBean getQueueMBean(String queueName) throws MalformedObjectNameException {     return getDestinationMBean(queueName, false). }
false;public;2;7;;public DestinationViewMBean getDestinationMBean(String destinationName, boolean topic) throws MalformedObjectNameException {     String domain = "org.apache.activemq".     String destinationType = topic ? "Topic" : "Queue".     ObjectName name = new ObjectName(String.format("%s:type=Broker,brokerName=localhost,destinationType=%s,destinationName=%s", domain, destinationType, destinationName)).     return (DestinationViewMBean) broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class, true). }
false;public;1;3;;public void setSession(Session session) {     this.session = session. }
false;public;0;3;;public Session getSession() {     return session. }
false;public;1;3;;public MessageConsumer createQueueConsumer(String destination) throws Exception {     return new Jms11ObjectFactory().createMessageConsumer(session, destinationCreationStrategy.createDestination(session, destination, false), null, false, null, true, false). }
false;public;2;3;;public MessageConsumer createTopicConsumer(String destination, String messageSelector) throws Exception {     return new Jms11ObjectFactory().createMessageConsumer(session, destinationCreationStrategy.createDestination(session, destination, true), messageSelector, true, null, true, false). }
