commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return false. }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     mc1 = createQueueConsumer(TEST_DESTINATION_NAME + ".request").     mc2 = createQueueConsumer(TEST_DESTINATION_NAME + ".request").     mc1.setMessageListener(new MyMessageListener()).     mc2.setMessageListener(new MyMessageListener()). }
false;public;0;11;;@Override @After public void tearDown() throws Exception {     MyMessageListener l1 = (MyMessageListener) mc1.getMessageListener().     l1.close().     mc1.close().     MyMessageListener l2 = (MyMessageListener) mc2.getMessageListener().     l2.close().     mc2.close().     super.tearDown(). }
false;public;0;12;;@Override public void run() {     try {         final String requestText = "Message " + tempI.         final String responseText = "Response Message " + tempI.         String response = template.requestBody("direct:start", requestText, String.class).         assertNotNull(response).         assertEquals(responseText, response).     } catch (Exception e) {         log.error("TODO Auto-generated catch block", e).     } }
true;public;0;32;/**  * Test to verify that when using the consumer listener for the InOut  * producer we get the correct message back.  *  * @throws Exception  */ ;/**  * Test to verify that when using the consumer listener for the InOut  * producer we get the correct message back.  *  * @throws Exception  */ @Test public void testInOutQueueProducer() throws Exception {     ExecutorService executor = Executors.newFixedThreadPool(2).     for (int i = 1. i <= 5000. i++) {         final int tempI = i.         Runnable worker = new Runnable() {              @Override             public void run() {                 try {                     final String requestText = "Message " + tempI.                     final String responseText = "Response Message " + tempI.                     String response = template.requestBody("direct:start", requestText, String.class).                     assertNotNull(response).                     assertEquals(responseText, response).                 } catch (Exception e) {                     log.error("TODO Auto-generated catch block", e).                 }             }         }.         executor.execute(worker).     }     while (context.getInflightRepository().size() > 0) {         Thread.sleep(100).     }     executor.shutdown().     while (!executor.isTerminated()) {         Thread.sleep(100).     } }
false;public;0;8;;public void configure() {     from("direct:start").to("log:" + TEST_DESTINATION_NAME + ".in.log?showBody=true").inOut("sjms:queue:" + TEST_DESTINATION_NAME + ".request" + "?namedReplyTo=" + TEST_DESTINATION_NAME + ".response&consumerCount=10&producerCount=20&synchronous=false").threads(20).to("log:" + TEST_DESTINATION_NAME + ".out.log?showBody=true"). }
true;protected;0;13;/**  * @see org.apache.camel.test.junit4.CamelTestSupport#createRouteBuilder()  *  * @return  *  * @throws Exception  */ ;/**  * @see org.apache.camel.test.junit4.CamelTestSupport#createRouteBuilder()  *  * @return  *  * @throws Exception  */ @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("log:" + TEST_DESTINATION_NAME + ".in.log?showBody=true").inOut("sjms:queue:" + TEST_DESTINATION_NAME + ".request" + "?namedReplyTo=" + TEST_DESTINATION_NAME + ".response&consumerCount=10&producerCount=20&synchronous=false").threads(20).to("log:" + TEST_DESTINATION_NAME + ".out.log?showBody=true").         }     }. }
false;public;1;17;;@Override public void onMessage(Message message) {     try {         TextMessage request = (TextMessage) message.         String text = request.getText().         TextMessage response = getSession().createTextMessage().         response.setText("Response " + text).         response.setJMSCorrelationID(request.getJMSCorrelationID()).         if (mp == null) {             mp = getSession().createProducer(message.getJMSReplyTo()).         }         mp.send(response).     } catch (JMSException e) {         fail(e.getLocalizedMessage()).     } }
false;public;0;3;;public void close() throws JMSException {     mp.close(). }
