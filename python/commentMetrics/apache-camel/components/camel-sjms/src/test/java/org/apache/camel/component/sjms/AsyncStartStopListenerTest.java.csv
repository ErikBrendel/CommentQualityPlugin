commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testAsyncStartConsumer() throws Exception {     sendBodyAndAssert("sjms:queue:foo.start"). }
false;public;0;4;;@Test public void testAsyncStartStopConsumer() throws Exception {     sendBodyAndAssert("sjms:queue:foo.startstop"). }
false;public;0;4;;@Test public void testAsyncStopConsumer() throws Exception {     sendBodyAndAssert("sjms:queue:foo.stop"). }
false;public;0;4;;@Test public void testAsyncStopProducer() throws Exception {     sendBodyAndAssert("sjms:queue:foo?asyncStopListener=true"). }
false;public;0;4;;@Test public void testAsyncStartProducer() throws Exception {     sendBodyAndAssert("sjms:queue:foo?asyncStartListener=true"). }
false;public;0;4;;@Test public void testAsyncStartStopProducer() throws Exception {     sendBodyAndAssert("sjms:queue:foo?asyncStopListener=true&asyncStartListener=true"). }
false;private;1;9;;private void sendBodyAndAssert(final String uri) throws InterruptedException {     String body1 = "Hello World".     String body2 = "G'day World".     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived(body1, body2).     template.sendBody(uri, body1).     template.sendBody(uri, body2).     result.assertIsSatisfied(). }
false;public;0;6;;public void configure() throws Exception {     from("sjms:queue:foo.startstop?asyncStartListener=true&asyncStopListener=true").to("mock:result").     from("sjms:queue:foo.start?asyncStartListener=true").to("mock:result").     from("sjms:queue:foo.stop?asyncStopListener=true").to("mock:result").     from("sjms:queue:foo").to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("sjms:queue:foo.startstop?asyncStartListener=true&asyncStopListener=true").to("mock:result").             from("sjms:queue:foo.start?asyncStartListener=true").to("mock:result").             from("sjms:queue:foo.stop?asyncStopListener=true").to("mock:result").             from("sjms:queue:foo").to("mock:result").         }     }. }
