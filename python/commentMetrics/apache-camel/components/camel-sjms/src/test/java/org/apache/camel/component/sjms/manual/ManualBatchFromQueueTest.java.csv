commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;16;;@Override protected CamelContext createCamelContext() throws Exception {     SimpleRegistry registry = new SimpleRegistry().     registry.put("testStrategy", new ListAggregationStrategy()).     CamelContext camel = new DefaultCamelContext(registry).     SjmsBatchComponent sjms = new SjmsBatchComponent().     sjms.setAsyncStartListener(true).     log.info("Using live connection to existing ActiveMQ broker running on {}", url).     sjms.setConnectionFactory(new ActiveMQConnectionFactory(url)).     camel.addComponent("sjms-batch", sjms).     return camel. }
false;public;0;6;;@Test public void testConsume() throws Exception {     getMockEndpoint("mock:foo").expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied(1, TimeUnit.MINUTES). }
false;public;0;6;;@Override public void configure() throws Exception {     from("sjms-batch:queue:foo?asyncStartListener=true&completionSize=3&completionTimeout=60000&aggregationStrategy=#testStrategy").to("log:foo").to("mock:foo"). }
false;protected;0;11;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sjms-batch:queue:foo?asyncStartListener=true&completionSize=3&completionTimeout=60000&aggregationStrategy=#testStrategy").to("log:foo").to("mock:foo").         }     }. }
