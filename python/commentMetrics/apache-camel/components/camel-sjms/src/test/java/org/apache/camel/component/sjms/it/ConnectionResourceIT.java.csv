commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;/**  * Test method for  * {@link org.apache.commons.pool.ObjectPool#returnObject(java.lang.Object)}  * .  *  * @throws Exception  */ ;/**  * Test method for  * {@link org.apache.commons.pool.ObjectPool#returnObject(java.lang.Object)}  * .  *  * @throws Exception  */ @Test public void testCreateConnections() throws Exception {     ConnectionResource pool = new AMQConnectionResource("tcp://localhost:33333", 1).     assertNotNull(pool).     Connection connection = pool.borrowConnection().     assertNotNull(connection).     assertNotNull(connection.createSession(false, Session.AUTO_ACKNOWLEDGE)).     pool.returnConnection(connection).     Connection connection2 = pool.borrowConnection().     assertNotNull(connection2). }
false;public;0;17;;@Test public void testConnectionResourceRouter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(100).     mock.expectsNoDuplicates(body()).     StopWatch watch = new StopWatch().     for (int i = 0. i < 100. i++) {         template.sendBody("seda:start", "" + i).     }     // just in case we run on slow boxes     assertMockEndpointsSatisfied(20, TimeUnit.SECONDS).     log.info("Took " + watch.taken() + " ms. to process 100 messages request/reply over JMS"). }
true;protected;0;9;/*      * @see org.apache.camel.test.junit4.CamelTestSupport#createCamelContext()      * @return      * @throws Exception      */ ;/*      * @see org.apache.camel.test.junit4.CamelTestSupport#createCamelContext()      * @return      * @throws Exception      */ @Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = new DefaultCamelContext().     AMQConnectionResource pool = new AMQConnectionResource("tcp://localhost:33333", 1).     SjmsComponent component = new SjmsComponent().     component.setConnectionResource(pool).     camelContext.addComponent("sjms", component).     return camelContext. }
false;public;0;11;;@Override public void configure() throws Exception {     from("seda:start").to("sjms:queue:in.foo?namedReplyTo=out.bar&exchangePattern=InOut&producerCount=5").to("mock:result").     from("sjms:queue:in.foo?exchangePattern=InOut&consumerCount=20").log("Using ${threadName} to process ${body}").transform(body().prepend("Bye ")). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").to("sjms:queue:in.foo?namedReplyTo=out.bar&exchangePattern=InOut&producerCount=5").to("mock:result").             from("sjms:queue:in.foo?exchangePattern=InOut&consumerCount=20").log("Using ${threadName} to process ${body}").transform(body().prepend("Bye ")).         }     }. }
false;public;0;3;;public void stop() {     pcf.stop(). }
false;public;0;6;;@Override public Connection borrowConnection() throws Exception {     Connection answer = pcf.createConnection().     answer.start().     return answer. }
false;public;1;6;;@Override public void returnConnection(Connection connection) throws Exception {     // Do nothing in this case since the PooledConnectionFactory takes     // care of this for us     log.info("Connection returned"). }
