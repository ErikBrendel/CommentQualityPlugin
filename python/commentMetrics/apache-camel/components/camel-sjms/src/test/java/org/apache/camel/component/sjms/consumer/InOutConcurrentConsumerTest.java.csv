commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testConcurrent() throws Exception {     doSendMessages(10, 5). }
false;public;0;3;;public String call() throws Exception {     return template.requestBody("direct:start", "Message " + index, String.class). }
false;private;2;25;;private void doSendMessages(int messages, int poolSize) throws Exception {     result.expectedMessageCount(messages).     result.expectsNoDuplicates(body()).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     final List<Future<String>> futures = new ArrayList<>().     for (int i = 0. i < messages. i++) {         final int index = i.         Future<String> out = executor.submit(new Callable<String>() {              public String call() throws Exception {                 return template.requestBody("direct:start", "Message " + index, String.class).             }         }).         futures.add(out).     }     assertMockEndpointsSatisfied().     for (int i = 0. i < futures.size(). i++) {         Object out = futures.get(i).get().         assertEquals("Bye Message " + i, out).     }     executor.shutdownNow(). }
false;protected;0;4;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     return camelContext. }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     // sleep a little to simulate heavy work and force concurrency processing     Thread.sleep(1000).     exchange.getOut().setBody("Bye " + body).     exchange.getOut().setHeader("threadName", Thread.currentThread().getName()). }
false;public;0;16;;public void configure() throws Exception {     from("direct:start").to("sjms:a?consumerCount=5&exchangePattern=InOut&namedReplyTo=myResponse").to("mock:result").     from("sjms:a?consumerCount=5&exchangePattern=InOut&namedReplyTo=myResponse").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             // sleep a little to simulate heavy work and force concurrency processing             Thread.sleep(1000).             exchange.getOut().setBody("Bye " + body).             exchange.getOut().setHeader("threadName", Thread.currentThread().getName()).         }     }). }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").to("sjms:a?consumerCount=5&exchangePattern=InOut&namedReplyTo=myResponse").to("mock:result").             from("sjms:a?consumerCount=5&exchangePattern=InOut&namedReplyTo=myResponse").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     // sleep a little to simulate heavy work and force concurrency processing                     Thread.sleep(1000).                     exchange.getOut().setBody("Bye " + body).                     exchange.getOut().setHeader("threadName", Thread.currentThread().getName()).                 }             }).         }     }. }
