commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testSynchronous() throws Exception {     String reply = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", reply).     assertTrue("Should use same threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Bye World"). }
false;public;0;23;;public void configure() throws Exception {     from("direct:start").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).inOut(url).process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:result").     from("sjms:queue:in?exchangePattern=InOut").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Bye World").         }     }). }
false;protected;0;27;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).inOut(url).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:result").             from("sjms:queue:in?exchangePattern=InOut").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Bye World").                 }             }).         }     }. }
