commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testConsumerInOnly() throws Exception {     CamelContext context = new DefaultCamelContext().     context.addRoutes(createConsumerInOnlyRouteBuilder()).     try {         context.start().     } catch (Throwable t) {         Assert.assertEquals(IllegalArgumentException.class, t.getClass()).         LOG.info("Expected exception was thrown", t).         return.     }     Assert.fail("No exception was thrown"). }
false;public;0;13;;@Test public void testConsumerInOut() throws Exception {     CamelContext context = new DefaultCamelContext().     context.addRoutes(createConsumerInOutRouteBuilder()).     try {         context.start().     } catch (Throwable t) {         Assert.assertEquals(IllegalArgumentException.class, t.getClass()).         LOG.info("Expected exception was thrown", t).         return.     }     Assert.fail("No exception was thrown"). }
false;public;0;15;;@Test public void testProducerInOnly() throws Exception {     CamelContext context = new DefaultCamelContext().     context.addRoutes(createProducerInOnlyRouteBuilder()).     try {         context.start().     } catch (Throwable t) {         Assert.assertEquals(FailedToCreateRouteException.class, t.getClass()).         Assert.assertEquals(FailedToCreateProducerException.class, t.getCause().getClass()).         Assert.assertEquals(IllegalArgumentException.class, t.getCause().getCause().getClass()).         LOG.info("Expected exception was thrown", t).         return.     }     Assert.fail("No exception was thrown"). }
false;public;0;15;;@Test public void testProducerInOut() throws Exception {     CamelContext context = new DefaultCamelContext().     context.addRoutes(createProducerInOutRouteBuilder()).     try {         context.start().     } catch (Throwable t) {         Assert.assertEquals(FailedToCreateRouteException.class, t.getClass()).         Assert.assertEquals(FailedToCreateProducerException.class, t.getCause().getClass()).         Assert.assertEquals(IllegalArgumentException.class, t.getCause().getCause().getClass()).         LOG.info("Expected exception was thrown", t).         return.     }     Assert.fail("No exception was thrown"). }
false;public;0;5;;@Override public void configure() throws Exception {     from("sjms:queue:test-in?exchangePattern=InOnly").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createConsumerInOnlyRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sjms:queue:test-in?exchangePattern=InOnly").to("mock:result").         }     }. }
false;public;0;5;;@Override public void configure() throws Exception {     from("sjms:queue:test-in?exchangePattern=InOut").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createConsumerInOutRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("sjms:queue:test-in?exchangePattern=InOut").to("mock:result").         }     }. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:inonly").to("sjms:queue:test-out?exchangePattern=InOnly").to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createProducerInOnlyRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:inonly").to("sjms:queue:test-out?exchangePattern=InOnly").to("mock:result").         }     }. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:inout").to("sjms:queue:test-out?exchangePattern=InOut").to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createProducerInOutRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:inout").to("sjms:queue:test-out?exchangePattern=InOut").to("mock:result").         }     }. }
