commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return false. }
false;public;0;25;;@Test public void testInOnlyTopicProducerProducer() throws Exception {     MessageConsumer mc = createTopicConsumer(TEST_DESTINATION_NAME, null).     assertNotNull(mc).     final String expectedBody = "Hello World!".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived(expectedBody).     template.sendBody("direct:start", expectedBody).     Message message = mc.receive(5000).     assertNotNull(message).     assertTrue(message instanceof TextMessage).     TextMessage tm = (TextMessage) message.     String text = tm.getText().     assertNotNull(text).     template.sendBody("direct:finish", text).     mock.assertIsSatisfied().     mc.close(). }
false;public;0;7;;public void configure() {     from("direct:start").to("sjms:topic:" + TEST_DESTINATION_NAME).     from("direct:finish").to("log:test.log.1?showBody=true", "mock:result"). }
true;protected;0;12;/**  * @see org.apache.camel.test.junit4.CamelTestSupport#createRouteBuilder()  *  * @return  * @throws Exception  */ ;/**  * @see org.apache.camel.test.junit4.CamelTestSupport#createRouteBuilder()  *  * @return  * @throws Exception  */ @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("sjms:topic:" + TEST_DESTINATION_NAME).             from("direct:finish").to("log:test.log.1?showBody=true", "mock:result").         }     }. }
