commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;9;;@Test public void testDefaults() throws Exception {     Endpoint endpoint = context.getEndpoint(BEAN_NAME + ":test").     assertNotNull(endpoint).     assertTrue(endpoint instanceof SjmsEndpoint).     SjmsEndpoint sjms = (SjmsEndpoint) endpoint.     assertEquals(sjms.getEndpointUri(), BEAN_NAME + "://test").     assertEquals(sjms.createExchange().getPattern(), ExchangePattern.InOnly). }
false;public;0;7;;@Test public void testQueueEndpoint() throws Exception {     Endpoint sjms = context.getEndpoint(BEAN_NAME + ":queue:test").     assertNotNull(sjms).     assertTrue(sjms instanceof SjmsEndpoint).     assertEquals(sjms.getEndpointUri(), BEAN_NAME + "://queue:test"). }
false;public;0;7;;@Test public void testTopicEndpoint() throws Exception {     Endpoint sjms = context.getEndpoint(BEAN_NAME + ":topic:test").     assertNotNull(sjms).     assertTrue(sjms instanceof SjmsEndpoint).     assertEquals(sjms.getEndpointUri(), BEAN_NAME + "://topic:test"). }
false;protected;0;11;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false").     SjmsComponent component = new SjmsComponent().     component.setConnectionCount(1).     component.setConnectionFactory(connectionFactory).     camelContext.addComponent(BEAN_NAME, component).     return camelContext. }
