# id;timestamp;commentText;codeText;commentWords;codeWords
BatchTransactedTopicConsumerTest -> @Test     public void testEndpointConfiguredBatchTransaction() throws Exception;1346298132;Verify that messages are being redelivered_@throws Exception;@Test_    public void testEndpointConfiguredBatchTransaction() throws Exception {_        _        getMockEndpoint("mock:test.before").expectedMessageCount(10)__        getMockEndpoint("mock:test.after").expectedMessageCount(10)___        _        for (int i = 1_ i <= 10_ i++) {_            template.sendBody("direct:start", "Hello World " + i)__        }__        getMockEndpoint("mock:test.before").assertIsSatisfied()__        getMockEndpoint("mock:test.after").assertIsSatisfied()___    };verify,that,messages,are,being,redelivered,throws,exception;test,public,void,test,endpoint,configured,batch,transaction,throws,exception,get,mock,endpoint,mock,test,before,expected,message,count,10,get,mock,endpoint,mock,test,after,expected,message,count,10,for,int,i,1,i,10,i,template,send,body,direct,start,hello,world,i,get,mock,endpoint,mock,test,before,assert,is,satisfied,get,mock,endpoint,mock,test,after,assert,is,satisfied
BatchTransactedTopicConsumerTest -> @Test     public void testEndpointConfiguredBatchTransaction() throws Exception;1348524340;Verify that after only sending 10 messages that 10 are delivered to the_processor and upon the 10th message throwing an Exception which causes_the messages deliveries to be rolled back. The messages should then be_redelivered with the JMSRedelivered flag set to true for a total of 20_delivered messages, 10 to each topic.__@throws Exception;@Test_    public void testEndpointConfiguredBatchTransaction() throws Exception {_        _        getMockEndpoint("mock:test.before.1").expectedMessageCount(10)__        getMockEndpoint("mock:test.before.2").expectedMessageCount(10)__        getMockEndpoint("mock:test.after.1").expectedMinimumMessageCount(10)__        getMockEndpoint("mock:test.after.2").expectedMessageCount(10)___        _        for (int i = 1_ i <= 10_ i++) {_            template.sendBody("direct:start", "Hello World " + i)__        }__        getMockEndpoint("mock:test.before.1").assertIsSatisfied()__        getMockEndpoint("mock:test.before.2").assertIsSatisfied()__        getMockEndpoint("mock:test.after.1").assertIsSatisfied()__        getMockEndpoint("mock:test.after.2").assertIsSatisfied()___    };verify,that,after,only,sending,10,messages,that,10,are,delivered,to,the,processor,and,upon,the,10th,message,throwing,an,exception,which,causes,the,messages,deliveries,to,be,rolled,back,the,messages,should,then,be,redelivered,with,the,jmsredelivered,flag,set,to,true,for,a,total,of,20,delivered,messages,10,to,each,topic,throws,exception;test,public,void,test,endpoint,configured,batch,transaction,throws,exception,get,mock,endpoint,mock,test,before,1,expected,message,count,10,get,mock,endpoint,mock,test,before,2,expected,message,count,10,get,mock,endpoint,mock,test,after,1,expected,minimum,message,count,10,get,mock,endpoint,mock,test,after,2,expected,message,count,10,for,int,i,1,i,10,i,template,send,body,direct,start,hello,world,i,get,mock,endpoint,mock,test,before,1,assert,is,satisfied,get,mock,endpoint,mock,test,before,2,assert,is,satisfied,get,mock,endpoint,mock,test,after,1,assert,is,satisfied,get,mock,endpoint,mock,test,after,2,assert,is,satisfied
BatchTransactedTopicConsumerTest -> @Test     public void testEndpointConfiguredBatchTransaction() throws Exception;1348524346;Verify that after only sending 10 messages that 10 are delivered to the_processor and upon the 10th message throwing an Exception which causes_the messages deliveries to be rolled back. The messages should then be_redelivered with the JMSRedelivered flag set to true for a total of 20_delivered messages, 10 to each topic.__@throws Exception;@Test_    public void testEndpointConfiguredBatchTransaction() throws Exception {_        _        getMockEndpoint("mock:test.before.1").expectedMessageCount(10)__        getMockEndpoint("mock:test.before.2").expectedMessageCount(10)__        getMockEndpoint("mock:test.after.1").expectedMessageCount(10)__        getMockEndpoint("mock:test.after.2").expectedMessageCount(10)___        _        for (int i = 1_ i <= 10_ i++) {_            template.sendBody("direct:start", "Hello World " + i)__        }__        getMockEndpoint("mock:test.before.1").assertIsSatisfied()__        getMockEndpoint("mock:test.before.2").assertIsSatisfied()__        getMockEndpoint("mock:test.after.1").assertIsSatisfied()__        getMockEndpoint("mock:test.after.2").assertIsSatisfied()___    };verify,that,after,only,sending,10,messages,that,10,are,delivered,to,the,processor,and,upon,the,10th,message,throwing,an,exception,which,causes,the,messages,deliveries,to,be,rolled,back,the,messages,should,then,be,redelivered,with,the,jmsredelivered,flag,set,to,true,for,a,total,of,20,delivered,messages,10,to,each,topic,throws,exception;test,public,void,test,endpoint,configured,batch,transaction,throws,exception,get,mock,endpoint,mock,test,before,1,expected,message,count,10,get,mock,endpoint,mock,test,before,2,expected,message,count,10,get,mock,endpoint,mock,test,after,1,expected,message,count,10,get,mock,endpoint,mock,test,after,2,expected,message,count,10,for,int,i,1,i,10,i,template,send,body,direct,start,hello,world,i,get,mock,endpoint,mock,test,before,1,assert,is,satisfied,get,mock,endpoint,mock,test,before,2,assert,is,satisfied,get,mock,endpoint,mock,test,after,1,assert,is,satisfied,get,mock,endpoint,mock,test,after,2,assert,is,satisfied
BatchTransactedTopicConsumerTest -> @Test     public void testEndpointConfiguredBatchTransaction() throws Exception;1348675078;Verify that after only sending 10 messages that 10 are delivered to the_processor and upon the 10th message throwing an Exception which causes_the messages deliveries to be rolled back. The messages should then be_redelivered with the JMSRedelivered flag set to true for a total of 20_delivered messages, 10 to each topic.__@throws Exception;@Test_    public void testEndpointConfiguredBatchTransaction() throws Exception {_        _        getMockEndpoint("mock:test.before.1").expectedMessageCount(10)__        getMockEndpoint("mock:test.before.2").expectedMessageCount(10)__        getMockEndpoint("mock:test.after.1").expectedMessageCount(10)__        getMockEndpoint("mock:test.after.2").expectedMessageCount(10)___        _        for (int i = 1_ i <= 10_ i++) {_            template.sendBody("direct:start", "Hello World " + i)__        }__        getMockEndpoint("mock:test.before.1").assertIsSatisfied()__        getMockEndpoint("mock:test.before.2").assertIsSatisfied()__        getMockEndpoint("mock:test.after.1").assertIsSatisfied()__        getMockEndpoint("mock:test.after.2").assertIsSatisfied()___    };verify,that,after,only,sending,10,messages,that,10,are,delivered,to,the,processor,and,upon,the,10th,message,throwing,an,exception,which,causes,the,messages,deliveries,to,be,rolled,back,the,messages,should,then,be,redelivered,with,the,jmsredelivered,flag,set,to,true,for,a,total,of,20,delivered,messages,10,to,each,topic,throws,exception;test,public,void,test,endpoint,configured,batch,transaction,throws,exception,get,mock,endpoint,mock,test,before,1,expected,message,count,10,get,mock,endpoint,mock,test,before,2,expected,message,count,10,get,mock,endpoint,mock,test,after,1,expected,message,count,10,get,mock,endpoint,mock,test,after,2,expected,message,count,10,for,int,i,1,i,10,i,template,send,body,direct,start,hello,world,i,get,mock,endpoint,mock,test,before,1,assert,is,satisfied,get,mock,endpoint,mock,test,before,2,assert,is,satisfied,get,mock,endpoint,mock,test,after,1,assert,is,satisfied,get,mock,endpoint,mock,test,after,2,assert,is,satisfied
BatchTransactedTopicConsumerTest -> @Test     public void testRoute() throws Exception;1349113955;We want to verify that when consuming from a single destination with_multiple routes that we are thread safe and behave accordingly.__@throws Exception;@Test_    public void testRoute() throws Exception {_        final String destinationName = "sjms:topic:one.consumer.one.route.batch.tx.test"_ _        int routeCount = 1__        int consumerCount = 1__        int batchCount = 5__        int messageCount = 20__        int maxAttemptsCount = 10__        int totalRedeliverdFalse = 20__        int totalRedeliveredTrue = 5__        runTest(destinationName, routeCount, messageCount, totalRedeliverdFalse, totalRedeliveredTrue, batchCount, consumerCount, maxAttemptsCount)__    };we,want,to,verify,that,when,consuming,from,a,single,destination,with,multiple,routes,that,we,are,thread,safe,and,behave,accordingly,throws,exception;test,public,void,test,route,throws,exception,final,string,destination,name,sjms,topic,one,consumer,one,route,batch,tx,test,int,route,count,1,int,consumer,count,1,int,batch,count,5,int,message,count,20,int,max,attempts,count,10,int,total,redeliverd,false,20,int,total,redelivered,true,5,run,test,destination,name,route,count,message,count,total,redeliverd,false,total,redelivered,true,batch,count,consumer,count,max,attempts,count
BatchTransactedTopicConsumerTest -> @Test     public void testRoute() throws Exception;1415211488;We want to verify that when consuming from a single destination with_multiple routes that we are thread safe and behave accordingly.__@throws Exception;@Test_    public void testRoute() throws Exception {_        final String destinationName = "sjms:topic:one.consumer.one.route.batch.tx.test"_ _        int routeCount = 1__        int consumerCount = 1__        int batchCount = 5__        int messageCount = 20__        int maxAttemptsCount = 10__        int totalRedeliverdFalse = 20__        int totalRedeliveredTrue = 5__        runTest(destinationName, routeCount, messageCount, totalRedeliverdFalse, totalRedeliveredTrue, batchCount, consumerCount, maxAttemptsCount)__    };we,want,to,verify,that,when,consuming,from,a,single,destination,with,multiple,routes,that,we,are,thread,safe,and,behave,accordingly,throws,exception;test,public,void,test,route,throws,exception,final,string,destination,name,sjms,topic,one,consumer,one,route,batch,tx,test,int,route,count,1,int,consumer,count,1,int,batch,count,5,int,message,count,20,int,max,attempts,count,10,int,total,redeliverd,false,20,int,total,redelivered,true,5,run,test,destination,name,route,count,message,count,total,redeliverd,false,total,redelivered,true,batch,count,consumer,count,max,attempts,count
