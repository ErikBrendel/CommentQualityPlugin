commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testAsyncJmsConsumer() throws Exception {     // async is disabled (so we should receive in same order)     getMockEndpoint("mock:result").expectedBodiesReceived("Camel", "Hello World").     template.sendBody("sjms:queue:start", "Hello Camel").     template.sendBody("sjms:queue:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;13;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     camelContext.addComponent("async", new MyAsyncComponent()).     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false").     SjmsComponent component = new SjmsComponent().     component.setConnectionFactory(connectionFactory).     camelContext.addComponent("sjms", component).     return camelContext. }
false;public;0;11;;@Override public void configure() throws Exception {     // disable async in only mode on the consumer     from("sjms:queue:start").choice().when(body().contains("Camel")).to("async:camel?delay=2000").to("mock:result").otherwise().to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // disable async in only mode on the consumer             from("sjms:queue:start").choice().when(body().contains("Camel")).to("async:camel?delay=2000").to("mock:result").otherwise().to("mock:result").         }     }. }
