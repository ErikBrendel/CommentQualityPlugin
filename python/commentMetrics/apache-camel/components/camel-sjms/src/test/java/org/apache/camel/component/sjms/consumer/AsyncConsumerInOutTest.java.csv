commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testAsyncJmsConsumer() throws Exception {     // Hello World is received first despite its send last     // the reason is that the first message is processed asynchronously     // and it takes 2 sec to complete, so in between we have time to     // process the 2nd message on the queue     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Bye Camel").     template.sendBody("sjms:queue:start", "Hello Camel").     template.sendBody("sjms:queue:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;13;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     camelContext.addComponent("async", new MyAsyncComponent()).     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://broker?broker.persistent=false&broker.useJmx=false").     SjmsComponent component = new SjmsComponent().     component.setConnectionFactory(connectionFactory).     camelContext.addComponent("sjms", component).     return camelContext. }
false;public;0;17;;@Override public void configure() throws Exception {     // enable async in only mode on the consumer     from("sjms:queue:start?synchronous=false").choice().when(body().contains("Camel")).to("async:camel?delay=2000").inOut("sjms:queue:in.out.test?namedReplyTo=response.queue&synchronous=false").to("mock:result").otherwise().to("log:other").to("mock:result").     from("sjms:queue:in.out.test?exchangePattern=InOut&synchronous=false").to("log:camel").transform(constant("Bye Camel")). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable async in only mode on the consumer             from("sjms:queue:start?synchronous=false").choice().when(body().contains("Camel")).to("async:camel?delay=2000").inOut("sjms:queue:in.out.test?namedReplyTo=response.queue&synchronous=false").to("mock:result").otherwise().to("log:other").to("mock:result").             from("sjms:queue:in.out.test?exchangePattern=InOut&synchronous=false").to("log:camel").transform(constant("Bye Camel")).         }     }. }
