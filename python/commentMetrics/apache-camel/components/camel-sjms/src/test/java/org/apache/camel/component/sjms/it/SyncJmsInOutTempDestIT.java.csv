commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testSynchronous() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(100).     mock.expectsNoDuplicates(body()).     StopWatch watch = new StopWatch().     for (int i = 0. i < 100. i++) {         template.sendBody("seda:start", "" + i).     }     // just in case we run on slow boxes     assertMockEndpointsSatisfied(20, TimeUnit.SECONDS).     log.info("Took " + watch.taken() + " ms. to process 100 messages request/reply over JMS"). }
false;public;0;10;;@Override public void configure() throws Exception {     from("seda:start").to("sjms:in.foo.tempQ?exchangePattern=InOut").to("mock:result").     from("sjms:in.foo.tempQ?exchangePattern=InOut").log("Using ${threadName} to process ${body}").transform(body().prepend("Bye ")). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").to("sjms:in.foo.tempQ?exchangePattern=InOut").to("mock:result").             from("sjms:in.foo.tempQ?exchangePattern=InOut").log("Using ${threadName} to process ${body}").transform(body().prepend("Bye ")).         }     }. }
