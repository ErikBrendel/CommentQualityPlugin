commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testAynchronous() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Hello Camel").     template.sendBody("sjms:start", "Hello Camel").     template.sendBody("sjms:start", "Hello World").     Thread.sleep(5000).     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = (String) exchange.getIn().getBody().     if (body.contains("Camel")) {         Thread.sleep(2000).     } }
false;public;0;15;;public void configure() throws Exception {     from("sjms:queue:start?synchronous=false").to("sjms:queue:in.out.temp.queue?exchangePattern=InOut&synchronous=false").to("mock:result").     from("sjms:queue:in.out.temp.queue?exchangePattern=InOut&synchronous=false").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = (String) exchange.getIn().getBody().             if (body.contains("Camel")) {                 Thread.sleep(2000).             }         }     }). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("sjms:queue:start?synchronous=false").to("sjms:queue:in.out.temp.queue?exchangePattern=InOut&synchronous=false").to("mock:result").             from("sjms:queue:in.out.temp.queue?exchangePattern=InOut&synchronous=false").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = (String) exchange.getIn().getBody().                     if (body.contains("Camel")) {                         Thread.sleep(2000).                     }                 }             }).         }     }. }
