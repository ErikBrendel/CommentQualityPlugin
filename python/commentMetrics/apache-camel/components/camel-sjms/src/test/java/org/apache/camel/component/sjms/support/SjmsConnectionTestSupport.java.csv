commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;0;1;;public abstract String getConnectionUri().
false;public,static;0;3;;@BeforeClass public static void setUpBeforeClass() throws Exception { }
false;public,static;0;3;;@AfterClass public static void tearDownAfterClass() throws Exception { }
false;public;0;10;;@Before public void setup() throws Exception {     if (ObjectHelper.isEmpty(getConnectionUri()) || getConnectionUri().startsWith("vm")) {         vmTestConnectionFactory = new ActiveMQConnectionFactory(VM_BROKER_CONNECT_STRING).     } else {         createBroker().     } }
false;public;0;13;;@After public void teardown() throws Exception {     if (vmTestConnectionFactory != null) {         vmTestConnectionFactory = null.     }     if (testConnectionFactory != null) {         testConnectionFactory = null.     }     if (brokerService != null) {         destroyBroker().     } }
false;public;1;9;;public ActiveMQConnectionFactory createTestConnectionFactory(String uri) {     ActiveMQConnectionFactory cf = null.     if (ObjectHelper.isEmpty(uri)) {         cf = new ActiveMQConnectionFactory(VM_BROKER_CONNECT_STRING).     } else {         cf = new ActiveMQConnectionFactory(uri).     }     return cf. }
false;protected;0;11;;protected void createBroker() throws Exception {     String connectString = getConnectionUri().     if (ObjectHelper.isEmpty(connectString)) {         connectString = TCP_BROKER_CONNECT_STRING.     }     brokerService = new BrokerService().     brokerService.setPersistent(isPersistenceEnabled()).     brokerService.addConnector(connectString).     brokerService.start().     brokerService.waitUntilStarted(). }
false;protected;0;6;;protected void destroyBroker() throws Exception {     if (brokerService != null) {         brokerService.stop().         brokerService.waitUntilStopped().     } }
false;public;1;4;;public void setTestConnectionFactory(ActiveMQConnectionFactory testConnectionFactory) {     this.testConnectionFactory = testConnectionFactory. }
false;public;0;3;;public ActiveMQConnectionFactory getTestConnectionFactory() {     return testConnectionFactory. }
false;public;1;3;;public void setPersistenceEnabled(boolean persistenceEnabled) {     this.persistenceEnabled = persistenceEnabled. }
false;public;0;3;;public boolean isPersistenceEnabled() {     return persistenceEnabled. }
