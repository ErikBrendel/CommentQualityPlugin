commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;8;;@Test public void testSynchronous() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Camel", "Hello World").     template.sendBody("sjms:topic:start", "Hello Camel").     template.sendBody("sjms:topic:start", "Hello World").     Thread.sleep(3000).     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = (String) exchange.getIn().getBody().     if (body.contains("Camel")) {         Thread.sleep(2000).     } }
false;public;0;14;;public void configure() throws Exception {     from("sjms:topic:start").to("log:request").to("sjms:topic:in.out.topic?exchangePattern=InOut&namedReplyTo=in.out.topic.response").to("log:response").to("mock:result").     from("sjms:topic:in.out.topic?exchangePattern=InOut").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = (String) exchange.getIn().getBody().             if (body.contains("Camel")) {                 Thread.sleep(2000).             }         }     }). }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("sjms:topic:start").to("log:request").to("sjms:topic:in.out.topic?exchangePattern=InOut&namedReplyTo=in.out.topic.response").to("log:response").to("mock:result").             from("sjms:topic:in.out.topic?exchangePattern=InOut").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = (String) exchange.getIn().getBody().                     if (body.contains("Camel")) {                         Thread.sleep(2000).                     }                 }             }).         }     }. }
