# id;timestamp;commentText;codeText;commentWords;codeWords
SjmsBatchConsumerTest -> @Test     public void testConsumption_multipleConsumerEndpoints() throws Exception;1437137782;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumption_multipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                    .multicast()_                        .toF("sjms:%s", queueName + "A")_                        .toF("sjms:%s", queueName + "B")_                    .end()___                fromF("sjmsbatch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjmsbatch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjmsbatch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjmsbatch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumption_multipleConsumerEndpoints() throws Exception;1437137782;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumption_multipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                    .multicast()_                        .toF("sjms:%s", queueName + "A")_                        .toF("sjms:%s", queueName + "B")_                    .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1437139515;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1456048967;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1461921869;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1463837702;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1490688234;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1490688234;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1521541903;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1524063178;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1537290824;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1540108158;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
SjmsBatchConsumerTest -> @Test     public void testConsumptionMultipleConsumerEndpoints() throws Exception;1551167777;Checks whether multiple consumer endpoints can operate in parallel.;@Test_    public void testConsumptionMultipleConsumerEndpoints() throws Exception {_        final int completionTimeout = 2000__        final int completionSize = 5___        final String queueName = getQueueName()__        context.addRoutes(new RouteBuilder() {_            public void configure() throws Exception {__                from("direct:in")_                    .split().body()_                        .multicast()_                            .toF("sjms:%s", queueName + "A")_                            .toF("sjms:%s", queueName + "B")_                        .end()___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "A", completionTimeout, completionSize).routeId("batchConsumerA")_                        .to("mock:outA")___                fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",_                        queueName + "B", completionTimeout, completionSize).routeId("batchConsumerB")_                        .to("mock:outB")___            }_        })__        context.start()___        int messageCount = 5___        assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE)__        MockEndpoint mockOutA = getMockEndpoint("mock:outA")__        mockOutA.expectedMessageCount(1)_  _        MockEndpoint mockOutB = getMockEndpoint("mock:outB")__        mockOutB.expectedMessageCount(1)_  __        template.sendBody("direct:in", generateStrings(messageCount))__        assertMockEndpointsSatisfied()___        assertFirstMessageBodyOfLength(mockOutA, messageCount)__        assertFirstMessageBodyOfLength(mockOutB, messageCount)__    };checks,whether,multiple,consumer,endpoints,can,operate,in,parallel;test,public,void,test,consumption,multiple,consumer,endpoints,throws,exception,final,int,completion,timeout,2000,final,int,completion,size,5,final,string,queue,name,get,queue,name,context,add,routes,new,route,builder,public,void,configure,throws,exception,from,direct,in,split,body,multicast,to,f,sjms,s,queue,name,a,to,f,sjms,s,queue,name,b,end,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,a,completion,timeout,completion,size,route,id,batch,consumer,a,to,mock,out,a,from,f,sjms,batch,s,completion,timeout,s,completion,size,s,aggregation,strategy,test,strategy,queue,name,b,completion,timeout,completion,size,route,id,batch,consumer,b,to,mock,out,b,context,start,int,message,count,5,assert,true,message,count,sjms,batch,endpoint,mock,endpoint,mock,out,a,get,mock,endpoint,mock,out,a,mock,out,a,expected,message,count,1,mock,endpoint,mock,out,b,get,mock,endpoint,mock,out,b,mock,out,b,expected,message,count,1,template,send,body,direct,in,generate,strings,message,count,assert,mock,endpoints,satisfied,assert,first,message,body,of,length,mock,out,a,message,count,assert,first,message,body,of,length,mock,out,b,message,count
