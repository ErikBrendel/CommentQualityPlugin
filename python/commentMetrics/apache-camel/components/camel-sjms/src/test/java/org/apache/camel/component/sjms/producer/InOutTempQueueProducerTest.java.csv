commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;15;;@Test public void testInOutQueueProducer() throws Exception {     String queueName = "in.out.queue.producer.test.request".     MessageConsumer mc = createQueueConsumer(queueName).     assertNotNull(mc).     final String requestText = "Hello World!".     final String responseText = "How are you".     mc.setMessageListener(new MyMessageListener(requestText, responseText)).     Object responseObject = template.requestBody("sjms:queue:" + queueName + "?exchangePattern=InOut", requestText).     assertNotNull(responseObject).     assertTrue(responseObject instanceof String).     assertEquals(responseText, responseObject).     mc.close(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(requestText).     exchange.getIn().setHeader("JMSCorrelationID", correlationId). }
false;public;0;24;;@Test public void testInOutQueueProducerWithCorrelationId() throws Exception {     String queueName = "in.out.queue.producer.test.request".     MessageConsumer mc = createQueueConsumer(queueName).     assertNotNull(mc).     final String requestText = "Hello World!".     final String responseText = "How are you".     mc.setMessageListener(new MyMessageListener(requestText, responseText)).     final String correlationId = UUID.randomUUID().toString().replace("-", "").     Exchange exchange = template.request("sjms:queue:" + queueName + "?exchangePattern=InOut", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(requestText).             exchange.getIn().setHeader("JMSCorrelationID", correlationId).         }     }).     assertNotNull(exchange).     assertTrue(exchange.getIn().getBody() instanceof String).     assertEquals(responseText, exchange.getOut().getBody()).     assertEquals(correlationId, exchange.getOut().getHeader("JMSCorrelationID", String.class)).     mc.close(). }
false;public;1;18;;@Override public void onMessage(Message message) {     try {         TextMessage request = (TextMessage) message.         assertNotNull(request).         String text = request.getText().         assertEquals(requestText, text).         TextMessage response = getSession().createTextMessage().         response.setText(responseText).         response.setJMSCorrelationID(request.getJMSCorrelationID()).         MessageProducer mp = getSession().createProducer(message.getJMSReplyTo()).         mp.send(response).         mp.close().     } catch (JMSException e) {         fail(e.getLocalizedMessage()).     } }
