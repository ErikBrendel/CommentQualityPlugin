# id;timestamp;commentText;codeText;commentWords;codeWords
BatchTransactedConcurrentMultipleConsumerTest -> @Test     public void testEndpointConfiguredBatchTransaction() throws Exception;1348673758;Verify that the batch transactions behave correctly when we combine it_with concurrent consumers.__@throws Exception;@Test_    public void testEndpointConfiguredBatchTransaction() throws Exception {__        getMockEndpoint("mock:test.redelivered.false").expectedMessageCount(175)__        getMockEndpoint("mock:test.redelivered.true").expectedMessageCount(25)___        _        _        getMockEndpoint("mock:test.after").expectedMessageCount(0)___        _        for (int i = 1_ i <= MESSAGE_COUNT_ i++) {_            String message = "Hello World " + i__            template.sendBody("direct:start", message)__            log.trace("Sending message: {}", message)__        }_        assertMockEndpointsSatisfied()___    };verify,that,the,batch,transactions,behave,correctly,when,we,combine,it,with,concurrent,consumers,throws,exception;test,public,void,test,endpoint,configured,batch,transaction,throws,exception,get,mock,endpoint,mock,test,redelivered,false,expected,message,count,175,get,mock,endpoint,mock,test,redelivered,true,expected,message,count,25,get,mock,endpoint,mock,test,after,expected,message,count,0,for,int,i,1,i,i,string,message,hello,world,i,template,send,body,direct,start,message,log,trace,sending,message,message,assert,mock,endpoints,satisfied
BatchTransactedConcurrentMultipleConsumerTest -> @Test     public void testEndpointConfiguredBatchTransaction() throws Exception;1348761047;Verify that the batch transactions behave correctly when we combine it_with concurrent consumers.__@throws Exception;@Test_    public void testEndpointConfiguredBatchTransaction() throws Exception {__        getMockEndpoint("mock:test.redelivered.false").expectedMessageCount(175)__        getMockEndpoint("mock:test.redelivered.true").expectedMessageCount(25)___        _        _        getMockEndpoint("mock:test.after").expectedMessageCount(0)___        _        for (int i = 1_ i <= MESSAGE_COUNT_ i++) {_            String message = "Hello World " + i__            template.sendBody("direct:start", message)__            log.trace("Sending message: {}", message)__        }_        assertMockEndpointsSatisfied()___    };verify,that,the,batch,transactions,behave,correctly,when,we,combine,it,with,concurrent,consumers,throws,exception;test,public,void,test,endpoint,configured,batch,transaction,throws,exception,get,mock,endpoint,mock,test,redelivered,false,expected,message,count,175,get,mock,endpoint,mock,test,redelivered,true,expected,message,count,25,get,mock,endpoint,mock,test,after,expected,message,count,0,for,int,i,1,i,i,string,message,hello,world,i,template,send,body,direct,start,message,log,trace,sending,message,message,assert,mock,endpoints,satisfied
BatchTransactedConcurrentMultipleConsumerTest -> @Test     public void testEndpointConfiguredBatchTransaction() throws Exception;1348761053;Verify that the batch transactions behave correctly when we combine it_with concurrent consumers.__@throws Exception;@Test_    public void testEndpointConfiguredBatchTransaction() throws Exception {__        getMockEndpoint("mock:test.redelivered.false").expectedMessageCount(175)__        getMockEndpoint("mock:test.redelivered.true").expectedMessageCount(25)___        _        _        getMockEndpoint("mock:test.after").expectedMessageCount(0)___        _        for (int i = 1_ i <= MESSAGE_COUNT_ i++) {_            String message = "Hello World " + i__            template.sendBody("direct:start", message)__            log.trace("Sending message: {}", message)__        }_        assertMockEndpointsSatisfied(10, TimeUnit.SECONDS)___    };verify,that,the,batch,transactions,behave,correctly,when,we,combine,it,with,concurrent,consumers,throws,exception;test,public,void,test,endpoint,configured,batch,transaction,throws,exception,get,mock,endpoint,mock,test,redelivered,false,expected,message,count,175,get,mock,endpoint,mock,test,redelivered,true,expected,message,count,25,get,mock,endpoint,mock,test,after,expected,message,count,0,for,int,i,1,i,i,string,message,hello,world,i,template,send,body,direct,start,message,log,trace,sending,message,message,assert,mock,endpoints,satisfied,10,time,unit,seconds
BatchTransactedConcurrentMultipleConsumerTest -> @Test     public void testEndpointConfiguredBatchTransaction() throws Exception;1348773746;Verify that the batch transactions behave correctly when we combine it_with concurrent consumers.__@throws Exception;@Test_    public void testEndpointConfiguredBatchTransaction() throws Exception {__        getMockEndpoint("mock:test.redelivered.false").expectedMessageCount(TOTAL_REDELIVERED_FALSE)__        getMockEndpoint("mock:test.redelivered.true").expectedMessageCount(TOTAL_REDELIVERED_TRUE)___        _        _        getMockEndpoint("mock:test.after").expectedMessageCount(0)___        _        for (int i = 1_ i <= MESSAGE_COUNT_ i++) {_            String message = "Hello World " + i__            template.sendBody("direct:start", message)__            log.trace("Sending message: {}", message)__        }_        Thread.sleep(3000)__        assertMockEndpointsSatisfied(5, TimeUnit.SECONDS)___    };verify,that,the,batch,transactions,behave,correctly,when,we,combine,it,with,concurrent,consumers,throws,exception;test,public,void,test,endpoint,configured,batch,transaction,throws,exception,get,mock,endpoint,mock,test,redelivered,false,expected,message,count,get,mock,endpoint,mock,test,redelivered,true,expected,message,count,get,mock,endpoint,mock,test,after,expected,message,count,0,for,int,i,1,i,i,string,message,hello,world,i,template,send,body,direct,start,message,log,trace,sending,message,message,thread,sleep,3000,assert,mock,endpoints,satisfied,5,time,unit,seconds
BatchTransactedConcurrentMultipleConsumerTest -> @Test     public void testRoute() throws Exception;1349113955;We want to verify that when consuming from a single destination with_multiple routes that we are thread safe and behave accordingly.__@throws Exception;@Test_    public void testRoute() throws Exception {_        final String destinationName = "sjms:queue:two.consumer.one.route.batch.tx.test"_ _        int routeCount = 1__        int consumerCount = 2__        int batchCount = 5__        int messageCount = 20__        int maxAttemptsCount = 10__        int totalRedeliverdFalse = 20__        int totalRedeliveredTrue = 5__        runTest(destinationName, routeCount, messageCount, totalRedeliverdFalse, totalRedeliveredTrue, batchCount, consumerCount, maxAttemptsCount)__    };we,want,to,verify,that,when,consuming,from,a,single,destination,with,multiple,routes,that,we,are,thread,safe,and,behave,accordingly,throws,exception;test,public,void,test,route,throws,exception,final,string,destination,name,sjms,queue,two,consumer,one,route,batch,tx,test,int,route,count,1,int,consumer,count,2,int,batch,count,5,int,message,count,20,int,max,attempts,count,10,int,total,redeliverd,false,20,int,total,redelivered,true,5,run,test,destination,name,route,count,message,count,total,redeliverd,false,total,redelivered,true,batch,count,consumer,count,max,attempts,count
BatchTransactedConcurrentMultipleConsumerTest -> @Test     public void testRoute() throws Exception;1415211488;We want to verify that when consuming from a single destination with_multiple routes that we are thread safe and behave accordingly.__@throws Exception;@Test_    public void testRoute() throws Exception {_        final String destinationName = "sjms:queue:two.consumer.one.route.batch.tx.test"_ _        int routeCount = 1__        int consumerCount = 2__        int batchCount = 5__        int messageCount = 20__        int maxAttemptsCount = 10__        int totalRedeliverdFalse = 20__        int totalRedeliveredTrue = 5__        runTest(destinationName, routeCount, messageCount, totalRedeliverdFalse, totalRedeliveredTrue, batchCount, consumerCount, maxAttemptsCount)__    };we,want,to,verify,that,when,consuming,from,a,single,destination,with,multiple,routes,that,we,are,thread,safe,and,behave,accordingly,throws,exception;test,public,void,test,route,throws,exception,final,string,destination,name,sjms,queue,two,consumer,one,route,batch,tx,test,int,route,count,1,int,consumer,count,2,int,batch,count,5,int,message,count,20,int,max,attempts,count,10,int,total,redeliverd,false,20,int,total,redelivered,true,5,run,test,destination,name,route,count,message,count,total,redeliverd,false,total,redelivered,true,batch,count,consumer,count,max,attempts,count
