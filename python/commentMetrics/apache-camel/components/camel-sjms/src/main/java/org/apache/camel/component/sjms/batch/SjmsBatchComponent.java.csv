# id;timestamp;commentText;codeText;commentWords;codeWords
SjmsBatchComponent -> public void setRecoveryInterval(int recoveryInterval);1482434535;Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds._The default is 5000 ms, that is, 5 seconds.;public void setRecoveryInterval(int recoveryInterval) {_        this.recoveryInterval = recoveryInterval__    };specifies,the,interval,between,recovery,attempts,i,e,when,a,connection,is,being,refreshed,in,milliseconds,the,default,is,5000,ms,that,is,5,seconds;public,void,set,recovery,interval,int,recovery,interval,this,recovery,interval,recovery,interval
SjmsBatchComponent -> public void setRecoveryInterval(int recoveryInterval);1537290824;Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds._The default is 5000 ms, that is, 5 seconds.;public void setRecoveryInterval(int recoveryInterval) {_        this.recoveryInterval = recoveryInterval__    };specifies,the,interval,between,recovery,attempts,i,e,when,a,connection,is,being,refreshed,in,milliseconds,the,default,is,5000,ms,that,is,5,seconds;public,void,set,recovery,interval,int,recovery,interval,this,recovery,interval,recovery,interval
SjmsBatchComponent -> public void setRecoveryInterval(int recoveryInterval);1540108158;Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds._The default is 5000 ms, that is, 5 seconds.;public void setRecoveryInterval(int recoveryInterval) {_        this.recoveryInterval = recoveryInterval__    };specifies,the,interval,between,recovery,attempts,i,e,when,a,connection,is,being,refreshed,in,milliseconds,the,default,is,5000,ms,that,is,5,seconds;public,void,set,recovery,interval,int,recovery,interval,this,recovery,interval,recovery,interval
SjmsBatchComponent -> public void setRecoveryInterval(int recoveryInterval);1547241305;Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds._The default is 5000 ms, that is, 5 seconds.;public void setRecoveryInterval(int recoveryInterval) {_        this.recoveryInterval = recoveryInterval__    };specifies,the,interval,between,recovery,attempts,i,e,when,a,connection,is,being,refreshed,in,milliseconds,the,default,is,5000,ms,that,is,5,seconds;public,void,set,recovery,interval,int,recovery,interval,this,recovery,interval,recovery,interval
SjmsBatchComponent -> public void setRecoveryInterval(int recoveryInterval);1548332772;Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds._The default is 5000 ms, that is, 5 seconds.;public void setRecoveryInterval(int recoveryInterval) {_        this.recoveryInterval = recoveryInterval__    };specifies,the,interval,between,recovery,attempts,i,e,when,a,connection,is,being,refreshed,in,milliseconds,the,default,is,5000,ms,that,is,5,seconds;public,void,set,recovery,interval,int,recovery,interval,this,recovery,interval,recovery,interval
SjmsBatchComponent -> public void setRecoveryInterval(int recoveryInterval);1548410840;Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds._The default is 5000 ms, that is, 5 seconds.;public void setRecoveryInterval(int recoveryInterval) {_        this.recoveryInterval = recoveryInterval__    };specifies,the,interval,between,recovery,attempts,i,e,when,a,connection,is,being,refreshed,in,milliseconds,the,default,is,5000,ms,that,is,5,seconds;public,void,set,recovery,interval,int,recovery,interval,this,recovery,interval,recovery,interval
SjmsBatchComponent -> public void setAsyncStartListener(boolean asyncStartListener);1482434535;Whether to startup the consumer message listener asynchronously, when starting a route._For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying_and/or failover. This will cause Camel to block while starting routes. By setting this option to true,_you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread_in asynchronous mode. If this option is used, then beware that if the connection could not be established,_then an exception is logged at WARN level, and the consumer will not be able to receive messages__You can then restart the route to retry.;public void setAsyncStartListener(boolean asyncStartListener) {_        this.asyncStartListener = asyncStartListener__    };whether,to,startup,the,consumer,message,listener,asynchronously,when,starting,a,route,for,example,if,a,jms,consumer,cannot,get,a,connection,to,a,remote,jms,broker,then,it,may,block,while,retrying,and,or,failover,this,will,cause,camel,to,block,while,starting,routes,by,setting,this,option,to,true,you,will,let,routes,startup,while,the,jms,consumer,connects,to,the,jms,broker,using,a,dedicated,thread,in,asynchronous,mode,if,this,option,is,used,then,beware,that,if,the,connection,could,not,be,established,then,an,exception,is,logged,at,warn,level,and,the,consumer,will,not,be,able,to,receive,messages,you,can,then,restart,the,route,to,retry;public,void,set,async,start,listener,boolean,async,start,listener,this,async,start,listener,async,start,listener
SjmsBatchComponent -> public void setAsyncStartListener(boolean asyncStartListener);1537290824;Whether to startup the consumer message listener asynchronously, when starting a route._For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying_and/or failover. This will cause Camel to block while starting routes. By setting this option to true,_you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread_in asynchronous mode. If this option is used, then beware that if the connection could not be established,_then an exception is logged at WARN level, and the consumer will not be able to receive messages__You can then restart the route to retry.;public void setAsyncStartListener(boolean asyncStartListener) {_        this.asyncStartListener = asyncStartListener__    };whether,to,startup,the,consumer,message,listener,asynchronously,when,starting,a,route,for,example,if,a,jms,consumer,cannot,get,a,connection,to,a,remote,jms,broker,then,it,may,block,while,retrying,and,or,failover,this,will,cause,camel,to,block,while,starting,routes,by,setting,this,option,to,true,you,will,let,routes,startup,while,the,jms,consumer,connects,to,the,jms,broker,using,a,dedicated,thread,in,asynchronous,mode,if,this,option,is,used,then,beware,that,if,the,connection,could,not,be,established,then,an,exception,is,logged,at,warn,level,and,the,consumer,will,not,be,able,to,receive,messages,you,can,then,restart,the,route,to,retry;public,void,set,async,start,listener,boolean,async,start,listener,this,async,start,listener,async,start,listener
SjmsBatchComponent -> public void setAsyncStartListener(boolean asyncStartListener);1540108158;Whether to startup the consumer message listener asynchronously, when starting a route._For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying_and/or failover. This will cause Camel to block while starting routes. By setting this option to true,_you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread_in asynchronous mode. If this option is used, then beware that if the connection could not be established,_then an exception is logged at WARN level, and the consumer will not be able to receive messages__You can then restart the route to retry.;public void setAsyncStartListener(boolean asyncStartListener) {_        this.asyncStartListener = asyncStartListener__    };whether,to,startup,the,consumer,message,listener,asynchronously,when,starting,a,route,for,example,if,a,jms,consumer,cannot,get,a,connection,to,a,remote,jms,broker,then,it,may,block,while,retrying,and,or,failover,this,will,cause,camel,to,block,while,starting,routes,by,setting,this,option,to,true,you,will,let,routes,startup,while,the,jms,consumer,connects,to,the,jms,broker,using,a,dedicated,thread,in,asynchronous,mode,if,this,option,is,used,then,beware,that,if,the,connection,could,not,be,established,then,an,exception,is,logged,at,warn,level,and,the,consumer,will,not,be,able,to,receive,messages,you,can,then,restart,the,route,to,retry;public,void,set,async,start,listener,boolean,async,start,listener,this,async,start,listener,async,start,listener
SjmsBatchComponent -> public void setAsyncStartListener(boolean asyncStartListener);1547241305;Whether to startup the consumer message listener asynchronously, when starting a route._For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying_and/or failover. This will cause Camel to block while starting routes. By setting this option to true,_you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread_in asynchronous mode. If this option is used, then beware that if the connection could not be established,_then an exception is logged at WARN level, and the consumer will not be able to receive messages__You can then restart the route to retry.;public void setAsyncStartListener(boolean asyncStartListener) {_        this.asyncStartListener = asyncStartListener__    };whether,to,startup,the,consumer,message,listener,asynchronously,when,starting,a,route,for,example,if,a,jms,consumer,cannot,get,a,connection,to,a,remote,jms,broker,then,it,may,block,while,retrying,and,or,failover,this,will,cause,camel,to,block,while,starting,routes,by,setting,this,option,to,true,you,will,let,routes,startup,while,the,jms,consumer,connects,to,the,jms,broker,using,a,dedicated,thread,in,asynchronous,mode,if,this,option,is,used,then,beware,that,if,the,connection,could,not,be,established,then,an,exception,is,logged,at,warn,level,and,the,consumer,will,not,be,able,to,receive,messages,you,can,then,restart,the,route,to,retry;public,void,set,async,start,listener,boolean,async,start,listener,this,async,start,listener,async,start,listener
SjmsBatchComponent -> public void setAsyncStartListener(boolean asyncStartListener);1548332772;Whether to startup the consumer message listener asynchronously, when starting a route._For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying_and/or failover. This will cause Camel to block while starting routes. By setting this option to true,_you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread_in asynchronous mode. If this option is used, then beware that if the connection could not be established,_then an exception is logged at WARN level, and the consumer will not be able to receive messages__You can then restart the route to retry.;public void setAsyncStartListener(boolean asyncStartListener) {_        this.asyncStartListener = asyncStartListener__    };whether,to,startup,the,consumer,message,listener,asynchronously,when,starting,a,route,for,example,if,a,jms,consumer,cannot,get,a,connection,to,a,remote,jms,broker,then,it,may,block,while,retrying,and,or,failover,this,will,cause,camel,to,block,while,starting,routes,by,setting,this,option,to,true,you,will,let,routes,startup,while,the,jms,consumer,connects,to,the,jms,broker,using,a,dedicated,thread,in,asynchronous,mode,if,this,option,is,used,then,beware,that,if,the,connection,could,not,be,established,then,an,exception,is,logged,at,warn,level,and,the,consumer,will,not,be,able,to,receive,messages,you,can,then,restart,the,route,to,retry;public,void,set,async,start,listener,boolean,async,start,listener,this,async,start,listener,async,start,listener
SjmsBatchComponent -> public void setAsyncStartListener(boolean asyncStartListener);1548410840;Whether to startup the consumer message listener asynchronously, when starting a route._For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying_and/or failover. This will cause Camel to block while starting routes. By setting this option to true,_you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread_in asynchronous mode. If this option is used, then beware that if the connection could not be established,_then an exception is logged at WARN level, and the consumer will not be able to receive messages__You can then restart the route to retry.;public void setAsyncStartListener(boolean asyncStartListener) {_        this.asyncStartListener = asyncStartListener__    };whether,to,startup,the,consumer,message,listener,asynchronously,when,starting,a,route,for,example,if,a,jms,consumer,cannot,get,a,connection,to,a,remote,jms,broker,then,it,may,block,while,retrying,and,or,failover,this,will,cause,camel,to,block,while,starting,routes,by,setting,this,option,to,true,you,will,let,routes,startup,while,the,jms,consumer,connects,to,the,jms,broker,using,a,dedicated,thread,in,asynchronous,mode,if,this,option,is,used,then,beware,that,if,the,connection,could,not,be,established,then,an,exception,is,logged,at,warn,level,and,the,consumer,will,not,be,able,to,receive,messages,you,can,then,restart,the,route,to,retry;public,void,set,async,start,listener,boolean,async,start,listener,this,async,start,listener,async,start,listener
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1437139515;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1463119124;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1463119920;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1482332324;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1482346687;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1482434535;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1537290824;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1540108158;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1547241305;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1548332772;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
SjmsBatchComponent -> public void setConnectionFactory(ConnectionFactory connectionFactory);1548410840;A ConnectionFactory is required to enable the SjmsBatchComponent.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_        this.connectionFactory = connectionFactory__    };a,connection,factory,is,required,to,enable,the,sjms,batch,component;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
