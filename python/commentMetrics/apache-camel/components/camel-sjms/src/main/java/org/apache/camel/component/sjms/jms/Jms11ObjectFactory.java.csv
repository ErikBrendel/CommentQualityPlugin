commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public MessageConsumer createMessageConsumer(Session session, Endpoint endpoint) throws Exception {     SjmsEndpoint sjmsEndpoint = (SjmsEndpoint) endpoint.     Destination destination = sjmsEndpoint.getDestinationCreationStrategy().createDestination(session, sjmsEndpoint.getDestinationName(), sjmsEndpoint.isTopic()).     return createMessageConsumer(session, destination, sjmsEndpoint.getMessageSelector(), sjmsEndpoint.isTopic(), sjmsEndpoint.getDurableSubscriptionId(), true, false). }
false;public;7;11;;public MessageConsumer createMessageConsumer(Session session, Destination destination, String messageSelector, boolean topic, String subscriptionId, boolean durable, boolean shared) throws Exception {     // noLocal is default false according to JMS spec     return createMessageConsumer(session, destination, messageSelector, topic, subscriptionId, durable, shared, false). }
false;public;8;30;;@Override public MessageConsumer createMessageConsumer(Session session, Destination destination, String messageSelector, boolean topic, String subscriptionId, boolean durable, boolean shared, boolean noLocal) throws Exception {     MessageConsumer messageConsumer.     if (topic) {         if (ObjectHelper.isNotEmpty(subscriptionId)) {             if (ObjectHelper.isNotEmpty(messageSelector)) {                 messageConsumer = session.createDurableSubscriber((Topic) destination, subscriptionId, messageSelector, noLocal).             } else {                 messageConsumer = session.createDurableSubscriber((Topic) destination, subscriptionId).             }         } else {             if (ObjectHelper.isNotEmpty(messageSelector)) {                 messageConsumer = session.createConsumer(destination, messageSelector, noLocal).             } else {                 messageConsumer = session.createConsumer(destination).             }         }     } else {         if (ObjectHelper.isNotEmpty(messageSelector)) {             messageConsumer = session.createConsumer(destination, messageSelector).         } else {             messageConsumer = session.createConsumer(destination).         }     }     return messageConsumer. }
false;public;2;8;;@Override public MessageProducer createMessageProducer(Session session, Endpoint endpoint) throws Exception {     SjmsEndpoint sjmsEndpoint = (SjmsEndpoint) endpoint.     Destination destination = sjmsEndpoint.getDestinationCreationStrategy().createDestination(session, sjmsEndpoint.getDestinationName(), sjmsEndpoint.isTopic()).     return createMessageProducer(session, destination, sjmsEndpoint.isPersistent(), sjmsEndpoint.getTtl()). }
false;public;4;12;;public MessageProducer createMessageProducer(Session session, Destination destination, boolean persistent, long ttl) throws Exception {     MessageProducer messageProducer = session.createProducer(destination).     messageProducer.setDeliveryMode(persistent ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT).     if (ttl > 0) {         messageProducer.setTimeToLive(ttl).     }     return messageProducer. }
