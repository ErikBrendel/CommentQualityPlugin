commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected TransactionCommitStrategy getCommitStrategy() {     if (isEndpointTransacted()) {         return super.getCommitStrategy() == null ? new DefaultTransactionCommitStrategy() : super.getCommitStrategy().     }     return null. }
false;public;4;36;;@Override public void sendMessage(final Exchange exchange, final AsyncCallback callback, final MessageProducerResources producer, final ReleaseProducerCallback releaseProducerCallback) throws Exception {     try {         Collection<Message> messages = new ArrayList<>(1).         if (exchange.getIn().getBody() != null) {             if (exchange.getIn().getBody() instanceof List) {                 Iterable<?> payload = (Iterable<?>) exchange.getIn().getBody().                 for (final Object object : payload) {                     Message message.                     if (BatchMessage.class.isInstance(object)) {                         BatchMessage<?> batchMessage = (BatchMessage<?>) object.                         message = getEndpoint().getBinding().makeJmsMessage(exchange, batchMessage.getPayload(), batchMessage.getHeaders(), producer.getSession(), null).                     } else {                         message = getEndpoint().getBinding().makeJmsMessage(exchange, object, exchange.getIn().getHeaders(), producer.getSession(), null).                     }                     messages.add(message).                 }             } else {                 Message message = getEndpoint().getBinding().makeJmsMessage(exchange, producer.getSession()).                 messages.add(message).             }         } else {             Message message = getEndpoint().getBinding().makeJmsMessage(exchange, producer.getSession()).             messages.add(message).         }         for (final Message message : messages) {             producer.getMessageProducer().send(message).         }     } catch (Exception e) {         exchange.setException(new CamelExchangeException("Unable to complete sending the JMS message", exchange, e)).     } finally {         releaseProducerCallback.release(producer).         callback.done(isSynchronous()).     } }
