# id;timestamp;commentText;codeText;commentWords;codeWords
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1437137782;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch._@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = (timeRemaining > pollDuration) ? pollDuration : timeRemaining___            LOG.debug("waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,time,remaining,poll,duration,poll,duration,time,remaining,log,debug,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1437137782;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch._@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = (timeRemaining > pollDuration) ? pollDuration : timeRemaining___            LOG.debug("waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,time,remaining,poll,duration,poll,duration,time,remaining,log,debug,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1437139515;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = (timeRemaining > pollDuration) ? pollDuration : timeRemaining___            LOG.debug("waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,time,remaining,poll,duration,poll,duration,time,remaining,log,debug,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1441617001;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = (timeRemaining > pollDuration) ? pollDuration : timeRemaining___            LOG.debug("waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,time,remaining,poll,duration,poll,duration,time,remaining,log,debug,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1451411006;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = (timeRemaining > pollDuration) ? pollDuration : timeRemaining___            LOG.debug("waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,time,remaining,poll,duration,poll,duration,time,remaining,log,debug,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1456048967;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1456048967;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1456129206;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1456130396;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1461921869;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1463837702;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1482066476;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1482434535;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1483966724;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1490688234;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1490688234;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1490688234;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1490688234;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1490688234;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1537290824;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1540108158;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1540108163;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1540108763;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private long getReceiveWaitTime(long timeElapsed);1543932141;Determine the time that a call to {@link MessageConsumer#receive()} should wait given the time that has elapsed for this batch.__@param timeElapsed The time that has elapsed._@return The shorter of the time remaining or poll duration.;private long getReceiveWaitTime(long timeElapsed) {_            long timeRemaining = getTimeRemaining(timeElapsed)___            _            if (timeRemaining <= 0) { _                timeRemaining = 1__            }_            final long waitTime = Math.min(timeRemaining, pollDuration)___            LOG.trace("Waiting for {}", waitTime)__            return waitTime__        };determine,the,time,that,a,call,to,link,message,consumer,receive,should,wait,given,the,time,that,has,elapsed,for,this,batch,param,time,elapsed,the,time,that,has,elapsed,return,the,shorter,of,the,time,remaining,or,poll,duration;private,long,get,receive,wait,time,long,time,elapsed,long,time,remaining,get,time,remaining,time,elapsed,if,time,remaining,0,time,remaining,1,final,long,wait,time,math,min,time,remaining,poll,duration,log,trace,waiting,for,wait,time,return,wait,time
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1456048967;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(SjmsBatchEndpoint.PROPERTY_BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + MESSAGE_RECEIVED.addAndGet(batchSize))__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                processor.process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,sjms,batch,endpoint,integer,class,if,log,is,debug,enabled,log,debug,processing,batch,id,size,batch,size,total,add,and,get,batch,size,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1456048967;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(SjmsBatchEndpoint.PROPERTY_BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + MESSAGE_RECEIVED.addAndGet(batchSize))__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                processor.process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,sjms,batch,endpoint,integer,class,if,log,is,debug,enabled,log,debug,processing,batch,id,size,batch,size,total,add,and,get,batch,size,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1456129206;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(SjmsBatchEndpoint.PROPERTY_BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + MESSAGE_RECEIVED.addAndGet(batchSize))__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                processor.process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,sjms,batch,endpoint,integer,class,if,log,is,debug,enabled,log,debug,processing,batch,id,size,batch,size,total,add,and,get,batch,size,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1456130396;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                processor.process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1461921869;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                processor.process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1463837702;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                processor.process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1482066476;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1482434535;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1483966724;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1490688234;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1490688234;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1490688234;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1490688234;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1490688234;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1537290824;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1540108158;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1540108163;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1540108763;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processBatch(Exchange exchange, Session session);1543932141;Send an message with the batches messages.;private void processBatch(Exchange exchange, Session session) {_            int id = BATCH_COUNT.getAndIncrement()__            int batchSize = exchange.getProperty(Exchange.BATCH_SIZE, Integer.class)__            if (LOG.isDebugEnabled()) {_                long total = MESSAGE_RECEIVED.get() + batchSize__                LOG.debug("Processing batch[" + id + "]:size=" + batchSize + ":total=" + total)__            }__            SessionCompletion sessionCompletion = new SessionCompletion(session)__            exchange.addOnCompletion(sessionCompletion)__            try {_                getProcessor().process(exchange)__                long total = MESSAGE_PROCESSED.addAndGet(batchSize)__                LOG.debug("Completed processing[{}]:total={}", id, total)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };send,an,message,with,the,batches,messages;private,void,process,batch,exchange,exchange,session,session,int,id,get,and,increment,int,batch,size,exchange,get,property,exchange,integer,class,if,log,is,debug,enabled,long,total,get,batch,size,log,debug,processing,batch,id,size,batch,size,total,total,session,completion,session,completion,new,session,completion,session,exchange,add,on,completion,session,completion,try,get,processor,process,exchange,long,total,add,and,get,batch,size,log,debug,completed,processing,total,id,total,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1456048967;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1456048967;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1456129206;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1456130396;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1461921869;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1463837702;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1482066476;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1482434535;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1483966724;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1490688234;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1490688234;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1490688234;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1490688234;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1490688234;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1537290824;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1540108158;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1540108163;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1540108763;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
SjmsBatchConsumer -> BatchConsumptionLoop -> private void processEmptyMessage();1543932141;No messages in batch so send an empty message instead.;private void processEmptyMessage() {_            Exchange exchange = getEndpoint().createExchange()__            log.debug("Sending empty message as there were no messages from polling: {}", getEndpoint())__            try {_                getProcessor().process(exchange)__            } catch (Exception e) {_                getExceptionHandler().handleException("Error processing exchange", exchange, e)__            }_        };no,messages,in,batch,so,send,an,empty,message,instead;private,void,process,empty,message,exchange,exchange,get,endpoint,create,exchange,log,debug,sending,empty,message,as,there,were,no,messages,from,polling,get,endpoint,try,get,processor,process,exchange,catch,exception,e,get,exception,handler,handle,exception,error,processing,exchange,exchange,e
