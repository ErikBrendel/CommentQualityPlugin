# id;timestamp;commentText;codeText;commentWords;codeWords
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1415347214;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        Connection conn = getConnectionResource().borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            Destination destination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getDestinationName(), isTopic())__            MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, destination, getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            getConnectionResource().returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,conn,get,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,destination,destination,get,endpoint,get,destination,creation,strategy,create,destination,session,get,destination,name,is,topic,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,destination,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,get,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1441617001;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        Connection conn = getConnectionResource().borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            Destination destination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getDestinationName(), isTopic())__            MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, destination, getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            getConnectionResource().returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,conn,get,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,destination,destination,get,endpoint,get,destination,creation,strategy,create,destination,session,get,destination,name,is,topic,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,destination,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,get,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1476797752;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        Connection conn = getConnectionResource().borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            Destination destination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getDestinationName(), isTopic())__            MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, destination, getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            getConnectionResource().returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,conn,get,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,destination,destination,get,endpoint,get,destination,creation,strategy,create,destination,session,get,destination,name,is,topic,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,destination,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,get,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1476863370;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        Connection conn = getConnectionResource().borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            Destination destination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getDestinationName(), isTopic())__            MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, destination, getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            getConnectionResource().returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,conn,get,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,destination,destination,get,endpoint,get,destination,creation,strategy,create,destination,session,get,destination,name,is,topic,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,destination,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,get,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1482171448;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        ConnectionResource connectionResource = getOrCreateConnectionResource()__        Connection conn = connectionResource.borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            Destination destination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getDestinationName(), isTopic())__            MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, destination, getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            connectionResource.returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,resource,connection,resource,get,or,create,connection,resource,connection,conn,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,destination,destination,get,endpoint,get,destination,creation,strategy,create,destination,session,get,destination,name,is,topic,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,destination,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1482409596;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        ConnectionResource connectionResource = getOrCreateConnectionResource()__        Connection conn = connectionResource.borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            Destination destination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getDestinationName(), isTopic())__            MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, destination, getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            connectionResource.returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,resource,connection,resource,get,or,create,connection,resource,connection,conn,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,destination,destination,get,endpoint,get,destination,creation,strategy,create,destination,session,get,destination,name,is,topic,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,destination,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1489430295;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        ConnectionResource connectionResource = getOrCreateConnectionResource()__        Connection conn = connectionResource.borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, getEndpoint())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            connectionResource.returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,resource,connection,resource,get,or,create,connection,resource,connection,conn,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,message,consumer,message,consumer,get,endpoint,get,jms,object,factory,create,message,consumer,session,get,endpoint,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1520496305;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        ConnectionResource connectionResource = getOrCreateConnectionResource()__        Connection conn = connectionResource.borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, getEndpoint())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            connectionResource.returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,resource,connection,resource,get,or,create,connection,resource,connection,conn,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,message,consumer,message,consumer,get,endpoint,get,jms,object,factory,create,message,consumer,session,get,endpoint,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1524063178;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        ConnectionResource connectionResource = getOrCreateConnectionResource()__        Connection conn = connectionResource.borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, getEndpoint())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            connectionResource.returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,resource,connection,resource,get,or,create,connection,resource,connection,conn,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,message,consumer,message,consumer,get,endpoint,get,jms,object,factory,create,message,consumer,session,get,endpoint,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1540108163;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        ConnectionResource connectionResource = getOrCreateConnectionResource()__        Connection conn = connectionResource.borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, getEndpoint())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            connectionResource.returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,resource,connection,resource,get,or,create,connection,resource,connection,conn,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,message,consumer,message,consumer,get,endpoint,get,jms,object,factory,create,message,consumer,session,get,endpoint,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> private MessageConsumerResources createConsumer() throws Exception;1543932141;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        ConnectionResource connectionResource = getOrCreateConnectionResource()__        Connection conn = connectionResource.borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            MessageConsumer messageConsumer = getEndpoint().getJmsObjectFactory().createMessageConsumer(session, getEndpoint())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            connectionResource.returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,resource,connection,resource,get,or,create,connection,resource,connection,conn,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,message,consumer,message,consumer,get,endpoint,get,jms,object,factory,create,message,consumer,session,get,endpoint,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1349476580;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy = null__        if (this.getTransactionCommitStrategy() != null) {_            commitStrategy = this.getTransactionCommitStrategy()__        } else if (this.getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(this.getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        AbstractMessageHandler messageHandler = null__        if (getSjmsEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, new SessionTransactionSynchronization(session, commitStrategy))__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, new SessionTransactionSynchronization(session, commitStrategy))__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,null,if,this,get,transaction,commit,strategy,null,commit,strategy,this,get,transaction,commit,strategy,else,if,this,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,this,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,abstract,message,handler,message,handler,null,if,get,sjms,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,new,session,transaction,synchronization,session,commit,strategy,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,new,session,transaction,synchronization,session,commit,strategy,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1351626400;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy = null__        if (this.getTransactionCommitStrategy() != null) {_            commitStrategy = this.getTransactionCommitStrategy()__        } else if (this.getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(this.getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }_        _        Synchronization synchronization = null__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            synchronization = new SessionBatchTransactionSynchronization(session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler = null__        if (getSjmsEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,null,if,this,get,transaction,commit,strategy,null,commit,strategy,this,get,transaction,commit,strategy,else,if,this,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,this,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,null,if,commit,strategy,instanceof,batch,transaction,commit,strategy,synchronization,new,session,batch,transaction,synchronization,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,null,if,get,sjms,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1352796608;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy = null__        if (this.getTransactionCommitStrategy() != null) {_            commitStrategy = this.getTransactionCommitStrategy()__        } else if (this.getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(this.getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getSjmsEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,null,if,this,get,transaction,commit,strategy,null,commit,strategy,this,get,transaction,commit,strategy,else,if,this,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,this,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,sjms,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1354318669;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy = null__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,null,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1383063455;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy = null__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,null,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1415211488;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy = null__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,null,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1415327622;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy = null__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,null,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1415347214;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy = null__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,null,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1441617001;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1476797752;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1476863370;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1482171448;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }_        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1482409596;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }__        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1489430295;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }__        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1520496305;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted() || isSynchronous()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted() || isSynchronous()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }__        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,is,synchronous,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,is,synchronous,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1524063178;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted() || isSynchronous()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted() || isSynchronous()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }__        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,is,synchronous,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,is,synchronous,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1540108163;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted() || isSynchronous()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted() || isSynchronous()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }__        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,is,synchronous,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,is,synchronous,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> protected MessageListener createMessageHandler(Session session);1543932141;Helper factory method used to create a MessageListener based on the MEP__@param session a session is only required if we are a transacted consumer_@return the listener;protected MessageListener createMessageHandler(Session session) {__        TransactionCommitStrategy commitStrategy__        if (getTransactionCommitStrategy() != null) {_            commitStrategy = getTransactionCommitStrategy()__        } else if (getTransactionBatchCount() > 0) {_            commitStrategy = new BatchTransactionCommitStrategy(getTransactionBatchCount())__        } else {_            commitStrategy = new DefaultTransactionCommitStrategy()__        }__        Synchronization synchronization__        if (commitStrategy instanceof BatchTransactionCommitStrategy) {_            TimedTaskManager timedTaskManager = getEndpoint().getComponent().getTimedTaskManager()__            synchronization = new SessionBatchTransactionSynchronization(timedTaskManager, session, commitStrategy, getTransactionBatchTimeout())__        } else {_            synchronization = new SessionTransactionSynchronization(session, commitStrategy)__        }__        AbstractMessageHandler messageHandler__        if (getEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {_            if (isTransacted() || isSynchronous()) {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOnlyMessageHandler(getEndpoint(), executor)__            }_        } else {_            if (isTransacted() || isSynchronous()) {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor, synchronization)__            } else {_                messageHandler = new InOutMessageHandler(getEndpoint(), executor)__            }_        }__        messageHandler.setSession(session)__        messageHandler.setProcessor(getAsyncProcessor())__        messageHandler.setSynchronous(isSynchronous())__        messageHandler.setTransacted(isTransacted())__        messageHandler.setSharedJMSSession(isSharedJMSSession())__        messageHandler.setTopic(isTopic())__        return messageHandler__    };helper,factory,method,used,to,create,a,message,listener,based,on,the,mep,param,session,a,session,is,only,required,if,we,are,a,transacted,consumer,return,the,listener;protected,message,listener,create,message,handler,session,session,transaction,commit,strategy,commit,strategy,if,get,transaction,commit,strategy,null,commit,strategy,get,transaction,commit,strategy,else,if,get,transaction,batch,count,0,commit,strategy,new,batch,transaction,commit,strategy,get,transaction,batch,count,else,commit,strategy,new,default,transaction,commit,strategy,synchronization,synchronization,if,commit,strategy,instanceof,batch,transaction,commit,strategy,timed,task,manager,timed,task,manager,get,endpoint,get,component,get,timed,task,manager,synchronization,new,session,batch,transaction,synchronization,timed,task,manager,session,commit,strategy,get,transaction,batch,timeout,else,synchronization,new,session,transaction,synchronization,session,commit,strategy,abstract,message,handler,message,handler,if,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,only,if,is,transacted,is,synchronous,message,handler,new,in,only,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,only,message,handler,get,endpoint,executor,else,if,is,transacted,is,synchronous,message,handler,new,in,out,message,handler,get,endpoint,executor,synchronization,else,message,handler,new,in,out,message,handler,get,endpoint,executor,message,handler,set,session,session,message,handler,set,processor,get,async,processor,message,handler,set,synchronous,is,synchronous,message,handler,set,transacted,is,transacted,message,handler,set,shared,jmssession,is,shared,jmssession,message,handler,set,topic,is,topic,return,message,handler
SjmsConsumer -> public boolean isSynchronous();1349476580;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getSjmsEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,sjms,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1351626400;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getSjmsEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,sjms,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1352796608;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getSjmsEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,sjms,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1354318669;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1383063455;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1415211488;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1415327622;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1415347214;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1441617001;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1476797752;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1476863370;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1482171448;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1482409596;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1489430295;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1520496305;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1524063178;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1540108163;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public boolean isSynchronous();1543932141;Use to determine whether or not to process exchanges synchronously.__@return true if synchronous;public boolean isSynchronous() {_        return getEndpoint().isSynchronous()__    };use,to,determine,whether,or,not,to,process,exchanges,synchronously,return,true,if,synchronous;public,boolean,is,synchronous,return,get,endpoint,is,synchronous
SjmsConsumer -> public long getTransactionBatchTimeout();1351626400;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getSjmsEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,sjms,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1352796608;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getSjmsEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,sjms,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1354318669;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1383063455;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1415211488;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1415327622;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1415347214;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1441617001;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1476797752;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1476863370;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1482171448;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1482409596;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1489430295;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1520496305;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1524063178;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1540108163;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public long getTransactionBatchTimeout();1543932141;Returns the timeout value for batch transactions.__@return long;public long getTransactionBatchTimeout() {_        return getEndpoint().getTransactionBatchTimeout()__    };returns,the,timeout,value,for,batch,transactions,return,long;public,long,get,transaction,batch,timeout,return,get,endpoint,get,transaction,batch,timeout
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1349476580;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getSjmsEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,sjms,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1351626400;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getSjmsEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,sjms,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1352796608;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getSjmsEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,sjms,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1354318669;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1383063455;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1415211488;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1415327622;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1415347214;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1441617001;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1476797752;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1476863370;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1482171448;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1482409596;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1489430295;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1520496305;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1524063178;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1540108163;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public TransactionCommitStrategy getTransactionCommitStrategy();1543932141;Gets the commit strategy.__@return the transactionCommitStrategy;public TransactionCommitStrategy getTransactionCommitStrategy() {_        return getEndpoint().getTransactionCommitStrategy()__    };gets,the,commit,strategy,return,the,transaction,commit,strategy;public,transaction,commit,strategy,get,transaction,commit,strategy,return,get,endpoint,get,transaction,commit,strategy
SjmsConsumer -> public int getConsumerCount();1349476580;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getSjmsEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,sjms,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1351626400;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getSjmsEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,sjms,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1352796608;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getSjmsEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,sjms,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1354318669;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1383063455;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1415211488;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1415327622;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1415347214;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1441617001;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1476797752;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1476863370;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1482171448;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1482409596;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1489430295;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1520496305;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1524063178;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1540108163;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getConsumerCount();1543932141;Returns the number of consumer listeners.__@return the consumerCount;public int getConsumerCount() {_        return getEndpoint().getConsumerCount()__    };returns,the,number,of,consumer,listeners,return,the,consumer,count;public,int,get,consumer,count,return,get,endpoint,get,consumer,count
SjmsConsumer -> public int getTransactionBatchCount();1349476580;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getSjmsEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,sjms,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1351626400;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getSjmsEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,sjms,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1352796608;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getSjmsEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,sjms,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1354318669;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1383063455;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1415211488;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1415327622;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1415347214;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1441617001;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1476797752;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1476863370;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1482171448;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1482409596;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1489430295;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1520496305;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1524063178;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1540108163;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> public int getTransactionBatchCount();1543932141;If transacted, returns the nubmer of messages to be processed before_committing the transaction.__@return the transactionBatchCount;public int getTransactionBatchCount() {_        return getEndpoint().getTransactionBatchCount()__    };if,transacted,returns,the,nubmer,of,messages,to,be,processed,before,committing,the,transaction,return,the,transaction,batch,count;public,int,get,transaction,batch,count,return,get,endpoint,get,transaction,batch,count
SjmsConsumer -> MessageConsumerResources -> public MessageConsumerResources(Session session, MessageConsumer messageConsumer);1349476580;@param session_@param messageProducer;public MessageConsumerResources(Session session, MessageConsumer messageConsumer) {_            super()__            this.session = session__            this.messageConsumer = messageConsumer__        };param,session,param,message,producer;public,message,consumer,resources,session,session,message,consumer,message,consumer,super,this,session,session,this,message,consumer,message,consumer
SjmsConsumer -> MessageConsumerResources -> public MessageConsumerResources(Session session, MessageConsumer messageConsumer);1351626400;@param session_@param messageProducer;public MessageConsumerResources(Session session, MessageConsumer messageConsumer) {_            super()__            this.session = session__            this.messageConsumer = messageConsumer__        };param,session,param,message,producer;public,message,consumer,resources,session,session,message,consumer,message,consumer,super,this,session,session,this,message,consumer,message,consumer
SjmsConsumer -> public String getDurableSubscriptionId();1349476580;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getSjmsEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,sjms,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1351626400;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getSjmsEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,sjms,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1352796608;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getSjmsEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,sjms,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1354318669;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1383063455;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1415211488;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1415327622;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1415347214;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1441617001;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1476797752;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1476863370;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1482171448;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1482409596;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1489430295;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1520496305;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1524063178;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1540108163;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> public String getDurableSubscriptionId();1543932141;Gets the durable subscription Id.__@return the durableSubscriptionId;public String getDurableSubscriptionId() {_        return getEndpoint().getDurableSubscriptionId()__    };gets,the,durable,subscription,id,return,the,durable,subscription,id;public,string,get,durable,subscription,id,return,get,endpoint,get,durable,subscription,id
SjmsConsumer -> protected String createId();1343905000;@return;protected String createId() {_        String answer = null__        SecureRandom ng = new SecureRandom()__        UUID uuid = new UUID(ng.nextLong(), ng.nextLong())__        answer = uuid.toString()__        return answer__    };return;protected,string,create,id,string,answer,null,secure,random,ng,new,secure,random,uuid,uuid,new,uuid,ng,next,long,ng,next,long,answer,uuid,to,string,return,answer
SjmsConsumer -> protected String createId();1344346492;@return;protected String createId() {_        String answer = null__        SecureRandom ng = new SecureRandom()__        UUID uuid = new UUID(ng.nextLong(), ng.nextLong())__        answer = uuid.toString()__        return answer__    };return;protected,string,create,id,string,answer,null,secure,random,ng,new,secure,random,uuid,uuid,new,uuid,ng,next,long,ng,next,long,answer,uuid,to,string,return,answer
SjmsConsumer -> protected String createId();1346298132;@return;protected String createId() {_        String answer = null__        SecureRandom ng = new SecureRandom()__        UUID uuid = new UUID(ng.nextLong(), ng.nextLong())__        answer = uuid.toString()__        return answer__    };return;protected,string,create,id,string,answer,null,secure,random,ng,new,secure,random,uuid,uuid,new,uuid,ng,next,long,ng,next,long,answer,uuid,to,string,return,answer
SjmsConsumer -> protected String createId();1348673753;@return;protected String createId() {_        String answer = null__        SecureRandom ng = new SecureRandom()__        UUID uuid = new UUID(ng.nextLong(), ng.nextLong())__        answer = uuid.toString()__        return answer__    };return;protected,string,create,id,string,answer,null,secure,random,ng,new,secure,random,uuid,uuid,new,uuid,ng,next,long,ng,next,long,answer,uuid,to,string,return,answer
SjmsConsumer -> @SuppressWarnings("unused")     private MessageConsumerResources createConsumer() throws Exception;1383063455;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;@SuppressWarnings("unused")_    private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer = null__        Connection conn = null__        try {_            conn = getConnectionResource().borrowConnection()__            _            Session session = null__            MessageConsumer messageConsumer = null__            if (isTransacted()) {_                session = conn.createSession(true, Session.SESSION_TRANSACTED)__            } else {_                session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)__            }_            messageConsumer = JmsObjectFactory.createMessageConsumer(session, getDestinationName(), getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)__            _            if (session == null) {_                throw new CamelException("Message Consumer Creation Exception: Session is NULL")__            }_            if (messageConsumer == null) {_                throw new CamelException("Message Consumer Creation Exception: MessageConsumer is NULL")__            }_            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer: " + e.getLocalizedMessage())__        } finally {_            if (conn != null) {_                getConnectionResource().returnConnection(conn)__            }_        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;suppress,warnings,unused,private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,null,connection,conn,null,try,conn,get,connection,resource,borrow,connection,session,session,null,message,consumer,message,consumer,null,if,is,transacted,session,conn,create,session,true,session,else,session,conn,create,session,false,session,message,consumer,jms,object,factory,create,message,consumer,session,get,destination,name,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,if,session,null,throw,new,camel,exception,message,consumer,creation,exception,session,is,null,if,message,consumer,null,throw,new,camel,exception,message,consumer,creation,exception,message,consumer,is,null,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,get,localized,message,finally,if,conn,null,get,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> @SuppressWarnings("unused")     private MessageConsumerResources createConsumer() throws Exception;1415211488;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;@SuppressWarnings("unused")_    private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer = null__        Connection conn = null__        try {_            conn = getConnectionResource().borrowConnection()___            Session session = null__            MessageConsumer messageConsumer = null__            if (isTransacted()) {_                session = conn.createSession(true, Session.SESSION_TRANSACTED)__            } else {_                session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)__            }_            messageConsumer = JmsObjectFactory.createMessageConsumer(session, getDestinationName(), getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            if (session == null) {_                throw new CamelException("Message Consumer Creation Exception: Session is NULL")__            }_            if (messageConsumer == null) {_                throw new CamelException("Message Consumer Creation Exception: MessageConsumer is NULL")__            }_            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer: " + e.getLocalizedMessage())__        } finally {_            if (conn != null) {_                getConnectionResource().returnConnection(conn)__            }_        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;suppress,warnings,unused,private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,null,connection,conn,null,try,conn,get,connection,resource,borrow,connection,session,session,null,message,consumer,message,consumer,null,if,is,transacted,session,conn,create,session,true,session,else,session,conn,create,session,false,session,message,consumer,jms,object,factory,create,message,consumer,session,get,destination,name,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,if,session,null,throw,new,camel,exception,message,consumer,creation,exception,session,is,null,if,message,consumer,null,throw,new,camel,exception,message,consumer,creation,exception,message,consumer,is,null,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,get,localized,message,finally,if,conn,null,get,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> @SuppressWarnings("unused")     private MessageConsumerResources createConsumer() throws Exception;1415327622;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;@SuppressWarnings("unused")_    private MessageConsumerResources createConsumer() throws Exception {_        MessageConsumerResources answer__        Connection conn = getConnectionResource().borrowConnection()__        try {_            Session session = conn.createSession(isTransacted(), isTransacted() ? Session.SESSION_TRANSACTED : Session.AUTO_ACKNOWLEDGE)__            Destination destination = getEndpoint().getDestinationCreationStrategy().createDestination(session, getDestinationName(), isTopic())__            MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, destination, getMessageSelector(), isTopic(), getDurableSubscriptionId())__            MessageListener handler = createMessageHandler(session)__            messageConsumer.setMessageListener(handler)___            answer = new MessageConsumerResources(session, messageConsumer)__        } catch (Exception e) {_            log.error("Unable to create the MessageConsumer", e)__            throw e__        } finally {_            getConnectionResource().returnConnection(conn)__        }_        return answer__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;suppress,warnings,unused,private,message,consumer,resources,create,consumer,throws,exception,message,consumer,resources,answer,connection,conn,get,connection,resource,borrow,connection,try,session,session,conn,create,session,is,transacted,is,transacted,session,session,destination,destination,get,endpoint,get,destination,creation,strategy,create,destination,session,get,destination,name,is,topic,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,destination,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,answer,new,message,consumer,resources,session,message,consumer,catch,exception,e,log,error,unable,to,create,the,message,consumer,e,throw,e,finally,get,connection,resource,return,connection,conn,return,answer
SjmsConsumer -> public String getDestinationName();1349476580;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getSjmsEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,sjms,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1351626400;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getSjmsEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,sjms,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1352796608;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getSjmsEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,sjms,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1354318669;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1383063455;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1415211488;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1415327622;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1415347214;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1441617001;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1476797752;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1476863370;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1482171448;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1482409596;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1489430295;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1520496305;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1524063178;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1540108163;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> public String getDestinationName();1543932141;The destination name for this consumer.__@return String;public String getDestinationName() {_        return getEndpoint().getDestinationName()__    };the,destination,name,for,this,consumer,return,string;public,string,get,destination,name,return,get,endpoint,get,destination,name
SjmsConsumer -> MessageConsumerPool -> @Override         protected MessageConsumerResources createObject() throws Exception;1349476580;Creates a new MessageConsumerResources instance.__@see org.apache.camel.component.sjms.jms.ObjectPool#createObject()__@return_@throws Exception;@Override_        protected MessageConsumerResources createObject() throws Exception {_            MessageConsumerResources model = null__            if (isTransacted() || getSjmsEndpoint().getExchangePattern().equals(ExchangePattern.InOut)) {_                model = createConsumerWithDedicatedSession()__            } else {_                model = createConsumerListener()__            }_            return model__        };creates,a,new,message,consumer,resources,instance,see,org,apache,camel,component,sjms,jms,object,pool,create,object,return,throws,exception;override,protected,message,consumer,resources,create,object,throws,exception,message,consumer,resources,model,null,if,is,transacted,get,sjms,endpoint,get,exchange,pattern,equals,exchange,pattern,in,out,model,create,consumer,with,dedicated,session,else,model,create,consumer,listener,return,model
SjmsConsumer -> MessageConsumerPool -> @Override         protected MessageConsumerResources createObject() throws Exception;1351626400;Creates a new MessageConsumerResources instance.__@see org.apache.camel.component.sjms.jms.ObjectPool#createObject()__@return_@throws Exception;@Override_        protected MessageConsumerResources createObject() throws Exception {_            MessageConsumerResources model = null__            if (isTransacted() || getSjmsEndpoint().getExchangePattern().equals(ExchangePattern.InOut)) {_                model = createConsumerWithDedicatedSession()__            } else {_                model = createConsumerListener()__            }_            return model__        };creates,a,new,message,consumer,resources,instance,see,org,apache,camel,component,sjms,jms,object,pool,create,object,return,throws,exception;override,protected,message,consumer,resources,create,object,throws,exception,message,consumer,resources,model,null,if,is,transacted,get,sjms,endpoint,get,exchange,pattern,equals,exchange,pattern,in,out,model,create,consumer,with,dedicated,session,else,model,create,consumer,listener,return,model
SjmsConsumer -> MessageConsumerPool -> @Override         protected MessageConsumerResources createObject() throws Exception;1352796608;Creates a new MessageConsumerResources instance.__@see org.apache.camel.component.sjms.jms.ObjectPool#createObject();@Override_        protected MessageConsumerResources createObject() throws Exception {_            MessageConsumerResources model = null__            if (isTransacted() || getSjmsEndpoint().getExchangePattern().equals(ExchangePattern.InOut)) {_                model = createConsumerWithDedicatedSession()__            } else {_                model = createConsumerListener()__            }_            return model__        };creates,a,new,message,consumer,resources,instance,see,org,apache,camel,component,sjms,jms,object,pool,create,object;override,protected,message,consumer,resources,create,object,throws,exception,message,consumer,resources,model,null,if,is,transacted,get,sjms,endpoint,get,exchange,pattern,equals,exchange,pattern,in,out,model,create,consumer,with,dedicated,session,else,model,create,consumer,listener,return,model
SjmsConsumer -> MessageConsumerPool -> @Override         protected MessageConsumerResources createObject() throws Exception;1354318669;Creates a new MessageConsumerResources instance.__@see org.apache.camel.component.sjms.jms.ObjectPool#createObject();@Override_        protected MessageConsumerResources createObject() throws Exception {_            MessageConsumerResources model = null__            if (isTransacted() || getEndpoint().getExchangePattern().equals(ExchangePattern.InOut)) {_                model = createConsumerWithDedicatedSession()__            } else {_                model = createConsumerListener()__            }_            return model__        };creates,a,new,message,consumer,resources,instance,see,org,apache,camel,component,sjms,jms,object,pool,create,object;override,protected,message,consumer,resources,create,object,throws,exception,message,consumer,resources,model,null,if,is,transacted,get,endpoint,get,exchange,pattern,equals,exchange,pattern,in,out,model,create,consumer,with,dedicated,session,else,model,create,consumer,listener,return,model
SjmsConsumer -> MessageConsumerPool -> @Override         protected MessageConsumerResources createObject() throws Exception;1383063455;Creates a new MessageConsumerResources instance.__@see org.apache.camel.component.sjms.jms.ObjectPool#createObject();@Override_        protected MessageConsumerResources createObject() throws Exception {_            MessageConsumerResources model = createConsumer()__            return model__        };creates,a,new,message,consumer,resources,instance,see,org,apache,camel,component,sjms,jms,object,pool,create,object;override,protected,message,consumer,resources,create,object,throws,exception,message,consumer,resources,model,create,consumer,return,model
SjmsConsumer -> public boolean isTopic();1349476580;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getSjmsEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,sjms,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1351626400;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getSjmsEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,sjms,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1352796608;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getSjmsEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,sjms,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1354318669;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1383063455;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1415211488;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1415327622;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1415347214;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1441617001;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1476797752;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1476863370;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1482171448;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1482409596;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1489430295;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1520496305;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1524063178;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1540108163;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> public boolean isTopic();1543932141;Flag set by the endpoint used by consumers and producers to determine if_the consumer is a JMS Topic.__@return the topic true if consumer is a JMS Topic, default is false;public boolean isTopic() {_        return getEndpoint().isTopic()__    };flag,set,by,the,endpoint,used,by,consumers,and,producers,to,determine,if,the,consumer,is,a,jms,topic,return,the,topic,true,if,consumer,is,a,jms,topic,default,is,false;public,boolean,is,topic,return,get,endpoint,is,topic
SjmsConsumer -> private MessageConsumerResources createConsumerListener() throws Exception;1349476580;Creates a {@link MessageConsumerResources} with a shared {@link Session}_for non-transacted InOnly consumers.__@return_@throws Exception;private MessageConsumerResources createConsumerListener() throws Exception {_        Session queueSession = getSessionPool().borrowObject()__        MessageConsumer messageConsumer = null__        if (isTopic()) {_            messageConsumer = JmsObjectFactory.createTopicConsumer(queueSession, getDestinationName(), getMessageSelector())__        } else {_            messageConsumer = JmsObjectFactory.createQueueConsumer(queueSession, getDestinationName(), getMessageSelector())__        }_        getSessionPool().returnObject(queueSession)__        _        MessageListener handler = createMessageHandler(null)__        messageConsumer.setMessageListener(handler)__        return new MessageConsumerResources(messageConsumer)__    };creates,a,link,message,consumer,resources,with,a,shared,link,session,for,non,transacted,in,only,consumers,return,throws,exception;private,message,consumer,resources,create,consumer,listener,throws,exception,session,queue,session,get,session,pool,borrow,object,message,consumer,message,consumer,null,if,is,topic,message,consumer,jms,object,factory,create,topic,consumer,queue,session,get,destination,name,get,message,selector,else,message,consumer,jms,object,factory,create,queue,consumer,queue,session,get,destination,name,get,message,selector,get,session,pool,return,object,queue,session,message,listener,handler,create,message,handler,null,message,consumer,set,message,listener,handler,return,new,message,consumer,resources,message,consumer
SjmsConsumer -> private MessageConsumerResources createConsumerListener() throws Exception;1351626400;Creates a {@link MessageConsumerResources} with a shared {@link Session}_for non-transacted InOnly consumers.__@return_@throws Exception;private MessageConsumerResources createConsumerListener() throws Exception {_        Session queueSession = getSessionPool().borrowObject()__        MessageConsumer messageConsumer = null__        if (isTopic()) {_            messageConsumer = JmsObjectFactory.createTopicConsumer(queueSession, getDestinationName(), getMessageSelector())__        } else {_            messageConsumer = JmsObjectFactory.createQueueConsumer(queueSession, getDestinationName(), getMessageSelector())__        }_        getSessionPool().returnObject(queueSession)__        _        MessageListener handler = createMessageHandler(null)__        messageConsumer.setMessageListener(handler)__        return new MessageConsumerResources(messageConsumer)__    };creates,a,link,message,consumer,resources,with,a,shared,link,session,for,non,transacted,in,only,consumers,return,throws,exception;private,message,consumer,resources,create,consumer,listener,throws,exception,session,queue,session,get,session,pool,borrow,object,message,consumer,message,consumer,null,if,is,topic,message,consumer,jms,object,factory,create,topic,consumer,queue,session,get,destination,name,get,message,selector,else,message,consumer,jms,object,factory,create,queue,consumer,queue,session,get,destination,name,get,message,selector,get,session,pool,return,object,queue,session,message,listener,handler,create,message,handler,null,message,consumer,set,message,listener,handler,return,new,message,consumer,resources,message,consumer
SjmsConsumer -> private MessageConsumerResources createConsumerListener() throws Exception;1352796608;Creates a {@link MessageConsumerResources} with a shared {@link Session}_for non-transacted InOnly consumers.;private MessageConsumerResources createConsumerListener() throws Exception {_        Session queueSession = getSessionPool().borrowObject()__        MessageConsumer messageConsumer = null__        if (isTopic()) {_            messageConsumer = JmsObjectFactory.createTopicConsumer(queueSession, getDestinationName(), getMessageSelector())__        } else {_            messageConsumer = JmsObjectFactory.createQueueConsumer(queueSession, getDestinationName(), getMessageSelector())__        }_        getSessionPool().returnObject(queueSession)__        _        MessageListener handler = createMessageHandler(null)__        messageConsumer.setMessageListener(handler)__        return new MessageConsumerResources(messageConsumer)__    };creates,a,link,message,consumer,resources,with,a,shared,link,session,for,non,transacted,in,only,consumers;private,message,consumer,resources,create,consumer,listener,throws,exception,session,queue,session,get,session,pool,borrow,object,message,consumer,message,consumer,null,if,is,topic,message,consumer,jms,object,factory,create,topic,consumer,queue,session,get,destination,name,get,message,selector,else,message,consumer,jms,object,factory,create,queue,consumer,queue,session,get,destination,name,get,message,selector,get,session,pool,return,object,queue,session,message,listener,handler,create,message,handler,null,message,consumer,set,message,listener,handler,return,new,message,consumer,resources,message,consumer
SjmsConsumer -> private MessageConsumerResources createConsumerListener() throws Exception;1354318669;Creates a {@link MessageConsumerResources} with a shared {@link Session}_for non-transacted InOnly consumers.;private MessageConsumerResources createConsumerListener() throws Exception {_        Session queueSession = getSessionPool().borrowObject()__        MessageConsumer messageConsumer = null__        if (isTopic()) {_            messageConsumer = JmsObjectFactory.createTopicConsumer(queueSession, getDestinationName(), getMessageSelector())__        } else {_            messageConsumer = JmsObjectFactory.createQueueConsumer(queueSession, getDestinationName(), getMessageSelector())__        }_        getSessionPool().returnObject(queueSession)__        _        MessageListener handler = createMessageHandler(null)__        messageConsumer.setMessageListener(handler)__        return new MessageConsumerResources(messageConsumer)__    };creates,a,link,message,consumer,resources,with,a,shared,link,session,for,non,transacted,in,only,consumers;private,message,consumer,resources,create,consumer,listener,throws,exception,session,queue,session,get,session,pool,borrow,object,message,consumer,message,consumer,null,if,is,topic,message,consumer,jms,object,factory,create,topic,consumer,queue,session,get,destination,name,get,message,selector,else,message,consumer,jms,object,factory,create,queue,consumer,queue,session,get,destination,name,get,message,selector,get,session,pool,return,object,queue,session,message,listener,handler,create,message,handler,null,message,consumer,set,message,listener,handler,return,new,message,consumer,resources,message,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1415211488;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1415327622;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1415347214;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1441617001;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1476797752;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1476863370;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1482171448;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1482409596;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1489430295;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1520496305;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1524063178;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1540108163;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public MessageConsumerResources makeObject() throws Exception;1543932141;Creates a new MessageConsumerResources instance.__@see org.apache.commons.pool.PoolableObjectFactory#makeObject();@Override_        public MessageConsumerResources makeObject() throws Exception {_            return createConsumer()__        };creates,a,new,message,consumer,resources,instance,see,org,apache,commons,pool,poolable,object,factory,make,object;override,public,message,consumer,resources,make,object,throws,exception,return,create,consumer
SjmsConsumer -> public boolean isSharedJMSSession();1476797752;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> public boolean isSharedJMSSession();1476863370;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> public boolean isSharedJMSSession();1482171448;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> public boolean isSharedJMSSession();1482409596;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> public boolean isSharedJMSSession();1489430295;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> public boolean isSharedJMSSession();1520496305;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> public boolean isSharedJMSSession();1524063178;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> public boolean isSharedJMSSession();1540108163;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> public boolean isSharedJMSSession();1543932141;Use to determine if JMS session should be propagated to share with other SJMS endpoints.__@return true if shared, otherwise false;public boolean isSharedJMSSession() {_        return getEndpoint().isSharedJMSSession()__    };use,to,determine,if,jms,session,should,be,propagated,to,share,with,other,sjms,endpoints,return,true,if,shared,otherwise,false;public,boolean,is,shared,jmssession,return,get,endpoint,is,shared,jmssession
SjmsConsumer -> MessageConsumerPool -> @Override         protected void destroyObject(MessageConsumerResources model) throws Exception;1349476580;Cleans up the MessageConsumerResources.__@see org.apache.camel.component.sjms.jms.ObjectPool#destroyObject(java.lang.Object)__@param model_@throws Exception;@Override_        protected void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }_                _                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,camel,component,sjms,jms,object,pool,destroy,object,java,lang,object,param,model,throws,exception;override,protected,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerPool -> @Override         protected void destroyObject(MessageConsumerResources model) throws Exception;1351626400;Cleans up the MessageConsumerResources.__@see org.apache.camel.component.sjms.jms.ObjectPool#destroyObject(java.lang.Object)__@param model_@throws Exception;@Override_        protected void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }_                _                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,camel,component,sjms,jms,object,pool,destroy,object,java,lang,object,param,model,throws,exception;override,protected,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerPool -> @Override         protected void destroyObject(MessageConsumerResources model) throws Exception;1352796608;Cleans up the MessageConsumerResources.__@see org.apache.camel.component.sjms.jms.ObjectPool#destroyObject(java.lang.Object);@Override_        protected void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }_                _                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,camel,component,sjms,jms,object,pool,destroy,object,java,lang,object;override,protected,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerPool -> @Override         protected void destroyObject(MessageConsumerResources model) throws Exception;1354318669;Cleans up the MessageConsumerResources.__@see org.apache.camel.component.sjms.jms.ObjectPool#destroyObject(java.lang.Object);@Override_        protected void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }_                _                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,camel,component,sjms,jms,object,pool,destroy,object,java,lang,object;override,protected,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerPool -> @Override         protected void destroyObject(MessageConsumerResources model) throws Exception;1383063455;Cleans up the MessageConsumerResources.__@see org.apache.camel.component.sjms.jms.ObjectPool#destroyObject(java.lang.Object);@Override_        protected void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }_                _                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,camel,component,sjms,jms,object,pool,destroy,object,java,lang,object;override,protected,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResources -> public MessageConsumer getMessageConsumer();1349476580;Gets the QueueSender value of queueSender for this instance of_MessageProducerModel.__@return the queueSender;public MessageConsumer getMessageConsumer() {_            return messageConsumer__        };gets,the,queue,sender,value,of,queue,sender,for,this,instance,of,message,producer,model,return,the,queue,sender;public,message,consumer,get,message,consumer,return,message,consumer
SjmsConsumer -> MessageConsumerResources -> public MessageConsumer getMessageConsumer();1351626400;Gets the QueueSender value of queueSender for this instance of_MessageProducerModel.__@return the queueSender;public MessageConsumer getMessageConsumer() {_            return messageConsumer__        };gets,the,queue,sender,value,of,queue,sender,for,this,instance,of,message,producer,model,return,the,queue,sender;public,message,consumer,get,message,consumer,return,message,consumer
SjmsConsumer -> MessageConsumerResources -> public MessageConsumer getMessageConsumer();1352796608;Gets the QueueSender value of queueSender for this instance of_MessageProducerModel.__@return the queueSender;public MessageConsumer getMessageConsumer() {_            return messageConsumer__        };gets,the,queue,sender,value,of,queue,sender,for,this,instance,of,message,producer,model,return,the,queue,sender;public,message,consumer,get,message,consumer,return,message,consumer
SjmsConsumer -> MessageConsumerResources -> public MessageConsumer getMessageConsumer();1354318669;Gets the QueueSender value of queueSender for this instance of_MessageProducerModel.__@return the queueSender;public MessageConsumer getMessageConsumer() {_            return messageConsumer__        };gets,the,queue,sender,value,of,queue,sender,for,this,instance,of,message,producer,model,return,the,queue,sender;public,message,consumer,get,message,consumer,return,message,consumer
SjmsConsumer -> MessageConsumerResources -> public MessageConsumer getMessageConsumer();1383063455;Gets the QueueSender value of queueSender for this instance of_MessageProducerModel.__@return the queueSender;public MessageConsumer getMessageConsumer() {_            return messageConsumer__        };gets,the,queue,sender,value,of,queue,sender,for,this,instance,of,message,producer,model,return,the,queue,sender;public,message,consumer,get,message,consumer,return,message,consumer
SjmsConsumer -> @Deprecated     protected ConnectionResource getConnectionResource();1482171448;@deprecated use {@link #getOrCreateConnectionResource()};@Deprecated_    protected ConnectionResource getConnectionResource() {_        return getEndpoint().getConnectionResource()__    };deprecated,use,link,get,or,create,connection,resource;deprecated,protected,connection,resource,get,connection,resource,return,get,endpoint,get,connection,resource
SjmsConsumer -> @Deprecated     protected ConnectionResource getConnectionResource();1482409596;@deprecated use {@link #getOrCreateConnectionResource()};@Deprecated_    protected ConnectionResource getConnectionResource() {_        return getEndpoint().getConnectionResource()__    };deprecated,use,link,get,or,create,connection,resource;deprecated,protected,connection,resource,get,connection,resource,return,get,endpoint,get,connection,resource
SjmsConsumer -> @Deprecated     protected ConnectionResource getConnectionResource();1489430295;@deprecated use {@link #getOrCreateConnectionResource()};@Deprecated_    protected ConnectionResource getConnectionResource() {_        return getEndpoint().getConnectionResource()__    };deprecated,use,link,get,or,create,connection,resource;deprecated,protected,connection,resource,get,connection,resource,return,get,endpoint,get,connection,resource
SjmsConsumer -> @Deprecated     protected ConnectionResource getConnectionResource();1520496305;@deprecated use {@link #getOrCreateConnectionResource()};@Deprecated_    protected ConnectionResource getConnectionResource() {_        return getEndpoint().getConnectionResource()__    };deprecated,use,link,get,or,create,connection,resource;deprecated,protected,connection,resource,get,connection,resource,return,get,endpoint,get,connection,resource
SjmsConsumer -> @Deprecated     protected ConnectionResource getConnectionResource();1524063178;@deprecated use {@link #getOrCreateConnectionResource()};@Deprecated_    protected ConnectionResource getConnectionResource() {_        return getEndpoint().getConnectionResource()__    };deprecated,use,link,get,or,create,connection,resource;deprecated,protected,connection,resource,get,connection,resource,return,get,endpoint,get,connection,resource
SjmsConsumer -> @Deprecated     protected ConnectionResource getConnectionResource();1540108163;@deprecated use {@link #getOrCreateConnectionResource()};@Deprecated_    protected ConnectionResource getConnectionResource() {_        return getEndpoint().getConnectionResource()__    };deprecated,use,link,get,or,create,connection,resource;deprecated,protected,connection,resource,get,connection,resource,return,get,endpoint,get,connection,resource
SjmsConsumer -> @Deprecated     protected ConnectionResource getConnectionResource();1543932141;@deprecated use {@link #getOrCreateConnectionResource()};@Deprecated_    protected ConnectionResource getConnectionResource() {_        return getEndpoint().getConnectionResource()__    };deprecated,use,link,get,or,create,connection,resource;deprecated,protected,connection,resource,get,connection,resource,return,get,endpoint,get,connection,resource
SjmsConsumer -> public boolean isTransacted();1349476580;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getSjmsEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,sjms,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1351626400;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getSjmsEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,sjms,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1352796608;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getSjmsEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,sjms,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1354318669;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1383063455;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1415211488;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1415327622;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1415347214;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1441617001;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1476797752;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1476863370;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1482171448;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1482409596;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1489430295;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1520496305;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1524063178;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1540108163;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> public boolean isTransacted();1543932141;Use to determine if transactions are enabled or disabled.__@return true if transacted, otherwise false;public boolean isTransacted() {_        return getEndpoint().isTransacted()__    };use,to,determine,if,transactions,are,enabled,or,disabled,return,true,if,transacted,otherwise,false;public,boolean,is,transacted,return,get,endpoint,is,transacted
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1415211488;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1415327622;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1415347214;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1441617001;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1476797752;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1476863370;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1482171448;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1482409596;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1489430295;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1520496305;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1524063178;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1540108163;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResourcesFactory -> @Override         public void destroyObject(MessageConsumerResources model) throws Exception;1543932141;Cleans up the MessageConsumerResources.__@see org.apache.commons.pool.PoolableObjectFactory#destroyObject(java.lang.Object);@Override_        public void destroyObject(MessageConsumerResources model) throws Exception {_            if (model != null) {_                _                if (model.getMessageConsumer() != null) {_                    model.getMessageConsumer().close()__                }__                _                if (model.getSession() != null) {_                    if (model.getSession().getTransacted()) {_                        try {_                            model.getSession().rollback()__                        } catch (Exception e) {_                            _                        }_                    }_                    model.getSession().close()__                }_            }_        };cleans,up,the,message,consumer,resources,see,org,apache,commons,pool,poolable,object,factory,destroy,object,java,lang,object;override,public,void,destroy,object,message,consumer,resources,model,throws,exception,if,model,null,if,model,get,message,consumer,null,model,get,message,consumer,close,if,model,get,session,null,if,model,get,session,get,transacted,try,model,get,session,rollback,catch,exception,e,model,get,session,close
SjmsConsumer -> MessageConsumerResources -> public Session getSession();1349476580;Gets the Session value of session for this instance of_MessageProducerModel.__@return the session;public Session getSession() {_            return session__        };gets,the,session,value,of,session,for,this,instance,of,message,producer,model,return,the,session;public,session,get,session,return,session
SjmsConsumer -> MessageConsumerResources -> public Session getSession();1351626400;Gets the Session value of session for this instance of_MessageProducerModel.__@return the session;public Session getSession() {_            return session__        };gets,the,session,value,of,session,for,this,instance,of,message,producer,model,return,the,session;public,session,get,session,return,session
SjmsConsumer -> MessageConsumerResources -> public Session getSession();1352796608;Gets the Session value of session for this instance of_MessageProducerModel.__@return the session;public Session getSession() {_            return session__        };gets,the,session,value,of,session,for,this,instance,of,message,producer,model,return,the,session;public,session,get,session,return,session
SjmsConsumer -> MessageConsumerResources -> public Session getSession();1354318669;Gets the Session value of session for this instance of_MessageProducerModel.__@return the session;public Session getSession() {_            return session__        };gets,the,session,value,of,session,for,this,instance,of,message,producer,model,return,the,session;public,session,get,session,return,session
SjmsConsumer -> MessageConsumerResources -> public Session getSession();1383063455;Gets the Session value of session for this instance of_MessageProducerModel.__@return the session;public Session getSession() {_            return session__        };gets,the,session,value,of,session,for,this,instance,of,message,producer,model,return,the,session;public,session,get,session,return,session
SjmsConsumer -> public String getMessageSelector();1349476580;Sets the JMS Message selector syntax.__@param messageSelector Message selector syntax or null;public String getMessageSelector() {_        return getSjmsEndpoint().getMessageSelector()__    };sets,the,jms,message,selector,syntax,param,message,selector,message,selector,syntax,or,null;public,string,get,message,selector,return,get,sjms,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1351626400;Sets the JMS Message selector syntax.__@param messageSelector Message selector syntax or null;public String getMessageSelector() {_        return getSjmsEndpoint().getMessageSelector()__    };sets,the,jms,message,selector,syntax,param,message,selector,message,selector,syntax,or,null;public,string,get,message,selector,return,get,sjms,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1352796608;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getSjmsEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,sjms,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1354318669;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1383063455;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1415211488;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1415327622;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1415347214;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1441617001;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1476797752;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1476863370;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1482171448;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1482409596;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1489430295;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1520496305;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1524063178;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1540108163;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> public String getMessageSelector();1543932141;Gets the JMS Message selector syntax.;public String getMessageSelector() {_        return getEndpoint().getMessageSelector()__    };gets,the,jms,message,selector,syntax;public,string,get,message,selector,return,get,endpoint,get,message,selector
SjmsConsumer -> MessageConsumerResources -> public MessageConsumerResources(MessageConsumer messageConsumer);1349476580;@param messageProducer;public MessageConsumerResources(MessageConsumer messageConsumer) {_            super()__            this.session = null__            this.messageConsumer = messageConsumer__        };param,message,producer;public,message,consumer,resources,message,consumer,message,consumer,super,this,session,null,this,message,consumer,message,consumer
SjmsConsumer -> MessageConsumerResources -> public MessageConsumerResources(MessageConsumer messageConsumer);1351626400;@param messageProducer;public MessageConsumerResources(MessageConsumer messageConsumer) {_            super()__            this.session = null__            this.messageConsumer = messageConsumer__        };param,message,producer;public,message,consumer,resources,message,consumer,message,consumer,super,this,session,null,this,message,consumer,message,consumer
SjmsConsumer -> private MessageConsumerResources createConsumerWithDedicatedSession() throws Exception;1349476580;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.__@return MessageConsumerResources_@throws Exception;private MessageConsumerResources createConsumerWithDedicatedSession() throws Exception {_        Connection conn = getConnectionResource().borrowConnection()__        Session session = null__        if (isTransacted()) {_            session = conn.createSession(true, Session.SESSION_TRANSACTED)__        } else {_            session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)__        }_        MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, getDestinationName(), getMessageSelector(), isTopic(), getDurableSubscriptionId())__        MessageListener handler = createMessageHandler(session)__        messageConsumer.setMessageListener(handler)__        getConnectionResource().returnConnection(conn)__        return new MessageConsumerResources(session, messageConsumer)__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers,return,message,consumer,resources,throws,exception;private,message,consumer,resources,create,consumer,with,dedicated,session,throws,exception,connection,conn,get,connection,resource,borrow,connection,session,session,null,if,is,transacted,session,conn,create,session,true,session,else,session,conn,create,session,false,session,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,get,destination,name,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,get,connection,resource,return,connection,conn,return,new,message,consumer,resources,session,message,consumer
SjmsConsumer -> private MessageConsumerResources createConsumerWithDedicatedSession() throws Exception;1351626400;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.__@return MessageConsumerResources_@throws Exception;private MessageConsumerResources createConsumerWithDedicatedSession() throws Exception {_        Connection conn = getConnectionResource().borrowConnection()__        Session session = null__        if (isTransacted()) {_            session = conn.createSession(true, Session.SESSION_TRANSACTED)__        } else {_            session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)__        }_        MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, getDestinationName(), getMessageSelector(), isTopic(), getDurableSubscriptionId())__        MessageListener handler = createMessageHandler(session)__        messageConsumer.setMessageListener(handler)__        getConnectionResource().returnConnection(conn)__        return new MessageConsumerResources(session, messageConsumer)__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers,return,message,consumer,resources,throws,exception;private,message,consumer,resources,create,consumer,with,dedicated,session,throws,exception,connection,conn,get,connection,resource,borrow,connection,session,session,null,if,is,transacted,session,conn,create,session,true,session,else,session,conn,create,session,false,session,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,get,destination,name,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,get,connection,resource,return,connection,conn,return,new,message,consumer,resources,session,message,consumer
SjmsConsumer -> private MessageConsumerResources createConsumerWithDedicatedSession() throws Exception;1352796608;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumerWithDedicatedSession() throws Exception {_        Connection conn = getConnectionResource().borrowConnection()__        Session session = null__        if (isTransacted()) {_            session = conn.createSession(true, Session.SESSION_TRANSACTED)__        } else {_            session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)__        }_        MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, getDestinationName(), getMessageSelector(), isTopic(), getDurableSubscriptionId())__        MessageListener handler = createMessageHandler(session)__        messageConsumer.setMessageListener(handler)__        getConnectionResource().returnConnection(conn)__        return new MessageConsumerResources(session, messageConsumer)__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,with,dedicated,session,throws,exception,connection,conn,get,connection,resource,borrow,connection,session,session,null,if,is,transacted,session,conn,create,session,true,session,else,session,conn,create,session,false,session,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,get,destination,name,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,get,connection,resource,return,connection,conn,return,new,message,consumer,resources,session,message,consumer
SjmsConsumer -> private MessageConsumerResources createConsumerWithDedicatedSession() throws Exception;1354318669;Creates a {@link MessageConsumerResources} with a dedicated_{@link Session} required for transacted and InOut consumers.;private MessageConsumerResources createConsumerWithDedicatedSession() throws Exception {_        Connection conn = getConnectionResource().borrowConnection()__        Session session = null__        if (isTransacted()) {_            session = conn.createSession(true, Session.SESSION_TRANSACTED)__        } else {_            session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE)__        }_        MessageConsumer messageConsumer = JmsObjectFactory.createMessageConsumer(session, getDestinationName(), getMessageSelector(), isTopic(), getDurableSubscriptionId())__        MessageListener handler = createMessageHandler(session)__        messageConsumer.setMessageListener(handler)__        getConnectionResource().returnConnection(conn)__        return new MessageConsumerResources(session, messageConsumer)__    };creates,a,link,message,consumer,resources,with,a,dedicated,link,session,required,for,transacted,and,in,out,consumers;private,message,consumer,resources,create,consumer,with,dedicated,session,throws,exception,connection,conn,get,connection,resource,borrow,connection,session,session,null,if,is,transacted,session,conn,create,session,true,session,else,session,conn,create,session,false,session,message,consumer,message,consumer,jms,object,factory,create,message,consumer,session,get,destination,name,get,message,selector,is,topic,get,durable,subscription,id,message,listener,handler,create,message,handler,session,message,consumer,set,message,listener,handler,get,connection,resource,return,connection,conn,return,new,message,consumer,resources,session,message,consumer
