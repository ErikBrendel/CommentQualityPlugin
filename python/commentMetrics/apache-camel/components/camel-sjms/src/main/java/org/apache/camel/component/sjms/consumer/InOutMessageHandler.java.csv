# id;timestamp;commentText;codeText;commentWords;codeWords
InOutMessageHandler -> @Override     public void handleMessage(final Exchange exchange);1349476580;@param message;@Override_    public void handleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader("JMSReplyTo")__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: " + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }__            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    try {_                        AsyncProcessorHelper.process(getProcessor(), exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    boolean sync = AsyncProcessorHelper.process(getProcessor(), exchange, callback)__                    if (!sync) {_                        _                        return__                    }_                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ", exchange.getExchangeId())__        }_    };param,message;override,public,void,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jmsreply,to,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,try,async,processor,helper,process,get,processor,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,boolean,sync,async,processor,helper,process,get,processor,exchange,callback,if,sync,return,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> @Override     public void handleMessage(final Exchange exchange);1351626413;@param message;@Override_    public void handleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader(JmsMessageHelper.JMS_REPLY_TO)__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: " + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }__            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    try {_                        AsyncProcessorHelper.process(getProcessor(), exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    boolean sync = AsyncProcessorHelper.process(getProcessor(), exchange, callback)__                    if (!sync) {_                        _                        return__                    }_                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ", exchange.getExchangeId())__        }_    };param,message;override,public,void,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jms,message,helper,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,try,async,processor,helper,process,get,processor,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,boolean,sync,async,processor,helper,process,get,processor,exchange,callback,if,sync,return,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> @Override     public void handleMessage(final Exchange exchange);1354318669;@param message;@Override_    public void handleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader(JmsMessageHelper.JMS_REPLY_TO)__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: " + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }__            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), getEndpoint().getEndpointUri())__                    try {_                        AsyncProcessorHelper.process(getProcessor(), exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), getEndpoint().getEndpointUri())__                    boolean sync = AsyncProcessorHelper.process(getProcessor(), exchange, callback)__                    if (!sync) {_                        _                        return__                    }_                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ", exchange.getExchangeId())__        }_    };param,message;override,public,void,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jms,message,helper,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,get,endpoint,get,endpoint,uri,try,async,processor,helper,process,get,processor,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,get,endpoint,get,endpoint,uri,boolean,sync,async,processor,helper,process,get,processor,exchange,callback,if,sync,return,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> @Override     public void handleMessage(final Exchange exchange);1369038382;@param message;@Override_    public void handleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader(JmsMessageHelper.JMS_REPLY_TO)__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: " + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }__            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), getEndpoint().getEndpointUri())__                    try {_                        getProcessor().process(exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), getEndpoint().getEndpointUri())__                    getProcessor().process(exchange, callback)__                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ", exchange.getExchangeId())__        }_    };param,message;override,public,void,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jms,message,helper,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,get,endpoint,get,endpoint,uri,try,get,processor,process,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,get,endpoint,get,endpoint,uri,get,processor,process,exchange,callback,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1343905000;TODO Add Constructor Javadoc__@param stopped_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };todo,add,constructor,javadoc,param,stopped,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1344999539;TODO Add Constructor Javadoc__@param stopped_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };todo,add,constructor,javadoc,param,stopped,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1346298132;TODO Add Constructor Javadoc__@param endpoint_@param executor_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };todo,add,constructor,javadoc,param,endpoint,param,executor,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1349113936;TODO Add Constructor Javadoc__@param endpoint_@param executor_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };todo,add,constructor,javadoc,param,endpoint,param,executor,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1349113941;@param endpoint_@param executor_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };param,endpoint,param,executor,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1349476580;@param endpoint_@param executor_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };param,endpoint,param,executor,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1351626413;@param endpoint_@param executor_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };param,endpoint,param,executor,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1354318669;@param endpoint_@param executor_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };param,endpoint,param,executor,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization);1369038382;@param endpoint_@param executor_@param synchronization;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor, Synchronization synchronization) {_        super(endpoint, executor, synchronization)__    };param,endpoint,param,executor,param,synchronization;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,synchronization,synchronization,super,endpoint,executor,synchronization
InOutMessageHandler -> @Override     public void doHandleMessage(final Exchange exchange);1343905000;@param message;@Override_    public void doHandleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader("JMSReplyTo")__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: "_                                            + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }_            _            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    if (log.isDebugEnabled()) {_                        log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    }_                    try {_                        AsyncProcessorHelper.process(getProcessor(), exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    if (log.isDebugEnabled()) {_                        log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    }_                    boolean sync = AsyncProcessorHelper.process(getProcessor(), exchange, callback)__                    if (!sync) {_                        _                        return__                    }_                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ",_                    exchange.getExchangeId())__        }_    };param,message;override,public,void,do,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jmsreply,to,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,if,log,is,debug,enabled,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,try,async,processor,helper,process,get,processor,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,if,log,is,debug,enabled,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,boolean,sync,async,processor,helper,process,get,processor,exchange,callback,if,sync,return,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> @Override     public void doHandleMessage(final Exchange exchange);1344999539;@param message;@Override_    public void doHandleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader("JMSReplyTo")__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: "_                                            + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }_            _            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    if (log.isDebugEnabled()) {_                        log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    }_                    try {_                        AsyncProcessorHelper.process(getProcessor(), exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    if (log.isDebugEnabled()) {_                        log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    }_                    boolean sync = AsyncProcessorHelper.process(getProcessor(), exchange, callback)__                    if (!sync) {_                        _                        return__                    }_                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ",_                    exchange.getExchangeId())__        }_    };param,message;override,public,void,do,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jmsreply,to,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,if,log,is,debug,enabled,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,try,async,processor,helper,process,get,processor,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,if,log,is,debug,enabled,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,boolean,sync,async,processor,helper,process,get,processor,exchange,callback,if,sync,return,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> @Override     public void doHandleMessage(final Exchange exchange);1346298132;@param message;@Override_    public void doHandleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader("JMSReplyTo")__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: " + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }__            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    try {_                        AsyncProcessorHelper.process(getProcessor(), exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    boolean sync = AsyncProcessorHelper.process(getProcessor(), exchange, callback)__                    if (!sync) {_                        _                        return__                    }_                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ", exchange.getExchangeId())__        }_    };param,message;override,public,void,do,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jmsreply,to,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,try,async,processor,helper,process,get,processor,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,boolean,sync,async,processor,helper,process,get,processor,exchange,callback,if,sync,return,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> @Override     public void doHandleMessage(final Exchange exchange);1349113936;@param message;@Override_    public void doHandleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader("JMSReplyTo")__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: " + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }__            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    try {_                        AsyncProcessorHelper.process(getProcessor(), exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    boolean sync = AsyncProcessorHelper.process(getProcessor(), exchange, callback)__                    if (!sync) {_                        _                        return__                    }_                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ", exchange.getExchangeId())__        }_    };param,message;override,public,void,do,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jmsreply,to,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,try,async,processor,helper,process,get,processor,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,boolean,sync,async,processor,helper,process,get,processor,exchange,callback,if,sync,return,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> @Override     public void doHandleMessage(final Exchange exchange);1349113941;@param message;@Override_    public void doHandleMessage(final Exchange exchange) {_        try {_            MessageProducer messageProducer = null__            Object obj = exchange.getIn().getHeader("JMSReplyTo")__            if (obj != null) {_                Destination replyTo = null__                if (isDestination(obj)) {_                    replyTo = (Destination)obj__                } else if (obj instanceof String) {_                    replyTo = JmsObjectFactory.createDestination(getSession(), (String)obj, isTopic())__                } else {_                    throw new Exception("The value of JMSReplyTo must be a valid Destination or String.  Value provided: " + obj)__                }__                String destinationName = getDestinationName(replyTo)__                try {_                    lock.readLock().lock()__                    if (producerCache.containsKey(destinationName)) {_                        messageProducer = producerCache.get(destinationName)__                    }_                } finally {_                    lock.readLock().unlock()__                }_                if (messageProducer == null) {_                    try {_                        lock.writeLock().lock()__                        messageProducer = getSession().createProducer(replyTo)__                        producerCache.put(destinationName, messageProducer)__                    } finally {_                        lock.writeLock().unlock()__                    }_                }_            }__            MessageHanderAsyncCallback callback = new MessageHanderAsyncCallback(exchange, messageProducer)__            if (exchange.isFailed()) {_                return__            } else {_                if (isTransacted() || isSynchronous()) {_                    _                    _                    log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    try {_                        AsyncProcessorHelper.process(getProcessor(), exchange)__                    } catch (Exception e) {_                        exchange.setException(e)__                    } finally {_                        callback.done(true)__                    }_                } else {_                    _                    log.debug("Aynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), this.getEndpoint().getEndpointUri())__                    boolean sync = AsyncProcessorHelper.process(getProcessor(), exchange, callback)__                    if (!sync) {_                        _                        return__                    }_                }_            }_        } catch (Exception e) {_            exchange.setException(e)__        }__        if (log.isDebugEnabled()) {_            log.debug("SjmsMessageConsumer invoked for Exchange id:{} ", exchange.getExchangeId())__        }_    };param,message;override,public,void,do,handle,message,final,exchange,exchange,try,message,producer,message,producer,null,object,obj,exchange,get,in,get,header,jmsreply,to,if,obj,null,destination,reply,to,null,if,is,destination,obj,reply,to,destination,obj,else,if,obj,instanceof,string,reply,to,jms,object,factory,create,destination,get,session,string,obj,is,topic,else,throw,new,exception,the,value,of,jmsreply,to,must,be,a,valid,destination,or,string,value,provided,obj,string,destination,name,get,destination,name,reply,to,try,lock,read,lock,lock,if,producer,cache,contains,key,destination,name,message,producer,producer,cache,get,destination,name,finally,lock,read,lock,unlock,if,message,producer,null,try,lock,write,lock,lock,message,producer,get,session,create,producer,reply,to,producer,cache,put,destination,name,message,producer,finally,lock,write,lock,unlock,message,hander,async,callback,callback,new,message,hander,async,callback,exchange,message,producer,if,exchange,is,failed,return,else,if,is,transacted,is,synchronous,log,debug,synchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,try,async,processor,helper,process,get,processor,exchange,catch,exception,e,exchange,set,exception,e,finally,callback,done,true,else,log,debug,aynchronous,processing,message,destination,exchange,get,in,get,body,this,get,endpoint,get,endpoint,uri,boolean,sync,async,processor,helper,process,get,processor,exchange,callback,if,sync,return,catch,exception,e,exchange,set,exception,e,if,log,is,debug,enabled,log,debug,sjms,message,consumer,invoked,for,exchange,id,exchange,get,exchange,id
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1343905000;TODO Add Constructor Javadoc__@param endpoint_@param processor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        this(endpoint, executor, null)__    };todo,add,constructor,javadoc,param,endpoint,param,processor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,this,endpoint,executor,null
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1344999539;TODO Add Constructor Javadoc__@param endpoint_@param processor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        this(endpoint, executor, null)__    };todo,add,constructor,javadoc,param,endpoint,param,processor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,this,endpoint,executor,null
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1346298132;TODO Add Constructor Javadoc__@param endpoint_@param executor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        super(endpoint, executor)__    };todo,add,constructor,javadoc,param,endpoint,param,executor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,super,endpoint,executor
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1349113936;TODO Add Constructor Javadoc__@param endpoint_@param executor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        super(endpoint, executor)__    };todo,add,constructor,javadoc,param,endpoint,param,executor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,super,endpoint,executor
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1349113941;@param endpoint_@param executor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        super(endpoint, executor)__    };param,endpoint,param,executor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,super,endpoint,executor
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1349476580;@param endpoint_@param executor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        super(endpoint, executor)__    };param,endpoint,param,executor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,super,endpoint,executor
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1351626413;@param endpoint_@param executor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        super(endpoint, executor)__    };param,endpoint,param,executor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,super,endpoint,executor
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1354318669;@param endpoint_@param executor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        super(endpoint, executor)__    };param,endpoint,param,executor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,super,endpoint,executor
InOutMessageHandler -> public InOutMessageHandler(Endpoint endpoint, ExecutorService executor);1369038382;@param endpoint_@param executor;public InOutMessageHandler(Endpoint endpoint, ExecutorService executor) {_        super(endpoint, executor)__    };param,endpoint,param,executor;public,in,out,message,handler,endpoint,endpoint,executor,service,executor,super,endpoint,executor
