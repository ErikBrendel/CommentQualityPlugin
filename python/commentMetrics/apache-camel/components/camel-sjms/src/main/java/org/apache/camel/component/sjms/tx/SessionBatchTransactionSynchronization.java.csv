# id;timestamp;commentText;codeText;commentWords;codeWords
SessionBatchTransactionSynchronization -> TimeoutTask -> public void run();1351626400;When the timer executes, either commits or rolls back the session_transaction.;public void run() {_            log.info("Batch Transaction Timer expired:")__            try {_                lock.writeLock().lock()__                log.debug("Committing the current transactions")__                try {_                    if (session != null && session.getTransacted()) {_                        session.commit()__                    }_                    ((BatchTransactionCommitStrategy)commitStrategy).reset()__                } catch (Exception e) {_                    log.warn("Failed to commit the session during timeout: {}", e.getMessage())__                }_            } finally {_                lock.writeLock().unlock()__            }_        };when,the,timer,executes,either,commits,or,rolls,back,the,session,transaction;public,void,run,log,info,batch,transaction,timer,expired,try,lock,write,lock,lock,log,debug,committing,the,current,transactions,try,if,session,null,session,get,transacted,session,commit,batch,transaction,commit,strategy,commit,strategy,reset,catch,exception,e,log,warn,failed,to,commit,the,session,during,timeout,e,get,message,finally,lock,write,lock,unlock
SessionBatchTransactionSynchronization -> TimeoutTask -> public void run();1352796608;When the timer executes, either commits or rolls back the session_transaction.;public void run() {_            LOG.debug("Batch Transaction Timer expired")__            try {_                lock.writeLock().lock()__                LOG.trace("Committing the current transactions")__                try {_                    if (session != null && session.getTransacted()) {_                        session.commit()__                    }_                    ((BatchTransactionCommitStrategy)commitStrategy).reset()__                } catch (Exception e) {_                    LOG.warn("Failed to commit the session during timeout: " + e.getMessage() + ". This exception will be ignored.", e)__                }_            } finally {_                lock.writeLock().unlock()__            }_        };when,the,timer,executes,either,commits,or,rolls,back,the,session,transaction;public,void,run,log,debug,batch,transaction,timer,expired,try,lock,write,lock,lock,log,trace,committing,the,current,transactions,try,if,session,null,session,get,transacted,session,commit,batch,transaction,commit,strategy,commit,strategy,reset,catch,exception,e,log,warn,failed,to,commit,the,session,during,timeout,e,get,message,this,exception,will,be,ignored,e,finally,lock,write,lock,unlock
SessionBatchTransactionSynchronization -> TimeoutTask -> public void run();1415211488;When the timer executes, either commits or rolls back the session_transaction.;public void run() {_            LOG.debug("Batch Transaction Timer expired")__            try {_                lock.writeLock().lock()__                LOG.trace("Committing the current transactions")__                try {_                    if (session != null && session.getTransacted()) {_                        session.commit()__                    }_                    ((BatchTransactionCommitStrategy) commitStrategy).reset()__                } catch (Exception e) {_                    LOG.warn("Failed to commit the session during timeout: " + e.getMessage() + ". This exception will be ignored.", e)__                }_            } finally {_                lock.writeLock().unlock()__            }_        };when,the,timer,executes,either,commits,or,rolls,back,the,session,transaction;public,void,run,log,debug,batch,transaction,timer,expired,try,lock,write,lock,lock,log,trace,committing,the,current,transactions,try,if,session,null,session,get,transacted,session,commit,batch,transaction,commit,strategy,commit,strategy,reset,catch,exception,e,log,warn,failed,to,commit,the,session,during,timeout,e,get,message,this,exception,will,be,ignored,e,finally,lock,write,lock,unlock
SessionBatchTransactionSynchronization -> TimeoutTask -> public void run();1537290824;When the timer executes, either commits or rolls back the session_transaction.;public void run() {_            LOG.debug("Batch Transaction Timer expired")__            try {_                lock.writeLock().lock()__                LOG.trace("Committing the current transactions")__                try {_                    if (session != null && session.getTransacted()) {_                        session.commit()__                    }_                    ((BatchTransactionCommitStrategy) commitStrategy).reset()__                } catch (Exception e) {_                    LOG.warn("Failed to commit the session during timeout: " + e.getMessage() + ". This exception will be ignored.", e)__                }_            } finally {_                lock.writeLock().unlock()__            }_        };when,the,timer,executes,either,commits,or,rolls,back,the,session,transaction;public,void,run,log,debug,batch,transaction,timer,expired,try,lock,write,lock,lock,log,trace,committing,the,current,transactions,try,if,session,null,session,get,transacted,session,commit,batch,transaction,commit,strategy,commit,strategy,reset,catch,exception,e,log,warn,failed,to,commit,the,session,during,timeout,e,get,message,this,exception,will,be,ignored,e,finally,lock,write,lock,unlock
