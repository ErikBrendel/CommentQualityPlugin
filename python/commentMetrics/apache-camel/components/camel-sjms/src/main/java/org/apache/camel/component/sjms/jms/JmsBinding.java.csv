# id;timestamp;commentText;codeText;commentWords;codeWords
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1441617001;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn().getBody(), exchange.getIn().getHeaders(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,get,body,exchange,get,in,get,headers,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1441617894;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn().getBody(), exchange.getIn().getHeaders(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,get,body,exchange,get,in,get,headers,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1524063178;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn().getBody(), exchange.getIn().getHeaders(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,get,body,exchange,get,in,get,headers,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1537290824;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn().getBody(), exchange.getIn().getHeaders(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,get,body,exchange,get,in,get,headers,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1540108160;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn().getBody(), exchange.getIn().getHeaders(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,get,body,exchange,get,in,get,headers,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1540108163;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn().getBody(), exchange.getIn().getHeaders(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,get,body,exchange,get,in,get,headers,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1548332772;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn().getBody(), exchange.getIn().getHeaders(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,get,body,exchange,get,in,get,headers,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException;1548410840;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param session the JMS session used to create the message_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Session session) throws JMSException {_        Message answer = makeJmsMessage(exchange, exchange.getIn().getBody(), exchange.getIn().getHeaders(), session, null)__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,session,the,jms,session,used,to,create,the,message,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,session,session,throws,jmsexception,message,answer,make,jms,message,exchange,exchange,get,in,get,body,exchange,get,in,get,headers,session,null,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1441617001;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {__            __            _            __            _            if (!mapJmsMessage) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1441617894;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {__            __            _            __            _            if (!mapJmsMessage) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1524063178;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {__            __            _            __            _            if (!mapJmsMessage) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1537290824;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {__            __            _            __            _            if (!mapJmsMessage) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1540108160;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {__            __            _            __            _            if (!mapJmsMessage) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1540108163;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {__            __            _            __            _            if (!mapJmsMessage) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1548332772;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {__            __            _            __            _            if (!mapJmsMessage) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> public Object extractBodyFromJms(Exchange exchange, Message message);1548410840;Extracts the body from the JMS message__@param exchange the exchange_@param message  the message to extract its body_@return the body, can be <tt>null</tt>;public Object extractBodyFromJms(Exchange exchange, Message message) {_        try {__            __            _            __            _            if (!mapJmsMessage) {_                LOG.trace("Option map JMS message is false so using JMS message as body: {}", message)__                return message__            }__            if (message instanceof ObjectMessage) {_                LOG.trace("Extracting body as a ObjectMessage from JMS message: {}", message)__                ObjectMessage objectMessage = (ObjectMessage)message__                Object payload = objectMessage.getObject()__                if (payload instanceof DefaultExchangeHolder) {_                    DefaultExchangeHolder holder = (DefaultExchangeHolder) payload__                    DefaultExchangeHolder.unmarshal(exchange, holder)__                    return exchange.getIn().getBody()__                } else {_                    return objectMessage.getObject()__                }_            } else if (message instanceof TextMessage) {_                LOG.trace("Extracting body as a TextMessage from JMS message: {}", message)__                TextMessage textMessage = (TextMessage)message__                return textMessage.getText()__            } else if (message instanceof MapMessage) {_                LOG.trace("Extracting body as a MapMessage from JMS message: {}", message)__                return createMapFromMapMessage((MapMessage)message)__            } else if (message instanceof BytesMessage) {_                LOG.trace("Extracting body as a BytesMessage from JMS message: {}", message)__                return createByteArrayFromBytesMessage((BytesMessage)message)__            } else if (message instanceof StreamMessage) {_                LOG.trace("Extracting body as a StreamMessage from JMS message: {}", message)__                return message__            } else {_                return null__            }_        } catch (JMSException e) {_            throw new RuntimeCamelException("Failed to extract body due to: " + e + ". Message: " + message, e)__        }_    };extracts,the,body,from,the,jms,message,param,exchange,the,exchange,param,message,the,message,to,extract,its,body,return,the,body,can,be,tt,null,tt;public,object,extract,body,from,jms,exchange,exchange,message,message,try,if,map,jms,message,log,trace,option,map,jms,message,is,false,so,using,jms,message,as,body,message,return,message,if,message,instanceof,object,message,log,trace,extracting,body,as,a,object,message,from,jms,message,message,object,message,object,message,object,message,message,object,payload,object,message,get,object,if,payload,instanceof,default,exchange,holder,default,exchange,holder,holder,default,exchange,holder,payload,default,exchange,holder,unmarshal,exchange,holder,return,exchange,get,in,get,body,else,return,object,message,get,object,else,if,message,instanceof,text,message,log,trace,extracting,body,as,a,text,message,from,jms,message,message,text,message,text,message,text,message,message,return,text,message,get,text,else,if,message,instanceof,map,message,log,trace,extracting,body,as,a,map,message,from,jms,message,message,return,create,map,from,map,message,map,message,message,else,if,message,instanceof,bytes,message,log,trace,extracting,body,as,a,bytes,message,from,jms,message,message,return,create,byte,array,from,bytes,message,bytes,message,message,else,if,message,instanceof,stream,message,log,trace,extracting,body,as,a,stream,message,from,jms,message,message,return,message,else,return,null,catch,jmsexception,e,throw,new,runtime,camel,exception,failed,to,extract,body,due,to,e,message,message,e
JmsBinding -> protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange);1441617001;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_                || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange);1441617894;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_                || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange);1524063178;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_                || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange);1537290824;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_                || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange);1540108160;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_                || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange);1540108163;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_                || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange);1548332772;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_                || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange);1548410840;Strategy to allow filtering of headers which are put on the JMS message_<p/>_<b>Note</b>: Currently only supports sending java identifiers as keys;protected boolean shouldOutputHeader(String headerName, Object headerValue, Exchange exchange) {_        return headerFilterStrategy == null_                || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)__    };strategy,to,allow,filtering,of,headers,which,are,put,on,the,jms,message,p,b,note,b,currently,only,supports,sending,java,identifiers,as,keys;protected,boolean,should,output,header,string,header,name,object,header,value,exchange,exchange,return,header,filter,strategy,null,header,filter,strategy,apply,filter,to,camel,headers,header,name,header,value,exchange
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException;1441617001;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param body the message body_@param headers the message headers_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException {_        Message answer = null___        ____        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, body, headers, session, exchange.getContext())__                appendJmsProperties(answer, exchange, headers)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,body,the,message,body,param,headers,the,message,headers,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,object,body,map,headers,session,session,exception,cause,throws,jmsexception,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,body,headers,session,exchange,get,context,append,jms,properties,answer,exchange,headers,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException;1441617894;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param body the message body_@param headers the message headers_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException {_        Message answer = null___        ____        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, body, headers, session, exchange.getContext())__                appendJmsProperties(answer, exchange, headers)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,body,the,message,body,param,headers,the,message,headers,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,object,body,map,headers,session,session,exception,cause,throws,jmsexception,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,body,headers,session,exchange,get,context,append,jms,properties,answer,exchange,headers,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException;1524063178;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param body the message body_@param headers the message headers_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException {_        Message answer = null___        ____        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, body, headers, session, exchange.getContext())__                appendJmsProperties(answer, exchange, headers)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,body,the,message,body,param,headers,the,message,headers,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,object,body,map,headers,session,session,exception,cause,throws,jmsexception,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,body,headers,session,exchange,get,context,append,jms,properties,answer,exchange,headers,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException;1537290824;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param body the message body_@param headers the message headers_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException {_        Message answer = null___        ____        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, body, headers, session, exchange.getContext())__                appendJmsProperties(answer, exchange, headers)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,body,the,message,body,param,headers,the,message,headers,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,object,body,map,headers,session,session,exception,cause,throws,jmsexception,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,body,headers,session,exchange,get,context,append,jms,properties,answer,exchange,headers,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException;1540108160;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param body the message body_@param headers the message headers_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException {_        Message answer = null___        ____        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, body, headers, session, exchange.getContext())__                appendJmsProperties(answer, exchange, headers)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,body,the,message,body,param,headers,the,message,headers,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,object,body,map,headers,session,session,exception,cause,throws,jmsexception,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,body,headers,session,exchange,get,context,append,jms,properties,answer,exchange,headers,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException;1540108163;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param body the message body_@param headers the message headers_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException {_        Message answer = null___        ____        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, body, headers, session, exchange.getContext())__                appendJmsProperties(answer, exchange, headers)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,body,the,message,body,param,headers,the,message,headers,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,object,body,map,headers,session,session,exception,cause,throws,jmsexception,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,body,headers,session,exchange,get,context,append,jms,properties,answer,exchange,headers,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException;1548332772;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param body the message body_@param headers the message headers_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException {_        Message answer = null___        ____        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, body, headers, session, exchange.getContext())__                appendJmsProperties(answer, exchange, headers)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,body,the,message,body,param,headers,the,message,headers,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,object,body,map,headers,session,session,exception,cause,throws,jmsexception,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,body,headers,session,exchange,get,context,append,jms,properties,answer,exchange,headers,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException;1548410840;Creates a JMS message from the Camel exchange and message__@param exchange the current exchange_@param body the message body_@param headers the message headers_@param session the JMS session used to create the message_@param cause optional exception occurred that should be sent as reply instead of a regular body_@return a newly created JMS Message instance containing the_@throws JMSException if the message could not be created;public Message makeJmsMessage(Exchange exchange, Object body, Map headers, Session session, Exception cause) throws JMSException {_        Message answer = null___        ____        if (answer == null) {_            if (cause != null) {_                _                LOG.debug("Will create JmsMessage with caused exception: {}", cause)__                _                answer = createJmsMessage(cause, session)__            } else {_                _                answer = createJmsMessage(exchange, body, headers, session, exchange.getContext())__                appendJmsProperties(answer, exchange, headers)__            }_        }__        if (answer != null && messageCreatedStrategy != null) {_            messageCreatedStrategy.onMessageCreated(answer, session, exchange, null)__        }_        return answer__    };creates,a,jms,message,from,the,camel,exchange,and,message,param,exchange,the,current,exchange,param,body,the,message,body,param,headers,the,message,headers,param,session,the,jms,session,used,to,create,the,message,param,cause,optional,exception,occurred,that,should,be,sent,as,reply,instead,of,a,regular,body,return,a,newly,created,jms,message,instance,containing,the,throws,jmsexception,if,the,message,could,not,be,created;public,message,make,jms,message,exchange,exchange,object,body,map,headers,session,session,exception,cause,throws,jmsexception,message,answer,null,if,answer,null,if,cause,null,log,debug,will,create,jms,message,with,caused,exception,cause,answer,create,jms,message,cause,session,else,answer,create,jms,message,exchange,body,headers,session,exchange,get,context,append,jms,properties,answer,exchange,headers,if,answer,null,message,created,strategy,null,message,created,strategy,on,message,created,answer,session,exchange,null,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1441617001;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1441617894;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<String, Object>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,string,object,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1524063178;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1537290824;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1540108160;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1540108163;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1548332772;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException;1548410840;Extracts a {@link Map} from a {@link MapMessage};public Map<String, Object> createMapFromMapMessage(MapMessage message) throws JMSException {_        Map<String, Object> answer = new HashMap<>()__        Enumeration<?> names = message.getMapNames()__        while (names.hasMoreElements()) {_            String name = names.nextElement().toString()__            Object value = message.getObject(name)__            answer.put(name, value)__        }_        return answer__    };extracts,a,link,map,from,a,link,map,message;public,map,string,object,create,map,from,map,message,map,message,message,throws,jmsexception,map,string,object,answer,new,hash,map,enumeration,names,message,get,map,names,while,names,has,more,elements,string,name,names,next,element,to,string,object,value,message,get,object,name,answer,put,name,value,return,answer
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException;1441617001;Appends the JMS headers from the Camel {@link Message};public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException {_        if (headers != null) {_            Set<Map.Entry<String, Object>> entries = headers.entrySet()__            for (Map.Entry<String, Object> entry : entries) {_                String headerName = entry.getKey()__                Object headerValue = entry.getValue()__                appendJmsProperty(jmsMessage, exchange, headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,map,string,object,headers,throws,jmsexception,if,headers,null,set,map,entry,string,object,entries,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException;1441617894;Appends the JMS headers from the Camel {@link Message};public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException {_        if (headers != null) {_            Set<Map.Entry<String, Object>> entries = headers.entrySet()__            for (Map.Entry<String, Object> entry : entries) {_                String headerName = entry.getKey()__                Object headerValue = entry.getValue()__                appendJmsProperty(jmsMessage, exchange, headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,map,string,object,headers,throws,jmsexception,if,headers,null,set,map,entry,string,object,entries,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException;1524063178;Appends the JMS headers from the Camel {@link Message};public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException {_        if (headers != null) {_            Set<Map.Entry<String, Object>> entries = headers.entrySet()__            for (Map.Entry<String, Object> entry : entries) {_                String headerName = entry.getKey()__                Object headerValue = entry.getValue()__                appendJmsProperty(jmsMessage, exchange, headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,map,string,object,headers,throws,jmsexception,if,headers,null,set,map,entry,string,object,entries,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException;1537290824;Appends the JMS headers from the Camel {@link Message};public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException {_        if (headers != null) {_            Set<Map.Entry<String, Object>> entries = headers.entrySet()__            for (Map.Entry<String, Object> entry : entries) {_                String headerName = entry.getKey()__                Object headerValue = entry.getValue()__                appendJmsProperty(jmsMessage, exchange, headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,map,string,object,headers,throws,jmsexception,if,headers,null,set,map,entry,string,object,entries,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException;1540108160;Appends the JMS headers from the Camel {@link Message};public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException {_        if (headers != null) {_            Set<Map.Entry<String, Object>> entries = headers.entrySet()__            for (Map.Entry<String, Object> entry : entries) {_                String headerName = entry.getKey()__                Object headerValue = entry.getValue()__                appendJmsProperty(jmsMessage, exchange, headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,map,string,object,headers,throws,jmsexception,if,headers,null,set,map,entry,string,object,entries,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException;1540108163;Appends the JMS headers from the Camel {@link Message};public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException {_        if (headers != null) {_            Set<Map.Entry<String, Object>> entries = headers.entrySet()__            for (Map.Entry<String, Object> entry : entries) {_                String headerName = entry.getKey()__                Object headerValue = entry.getValue()__                appendJmsProperty(jmsMessage, exchange, headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,map,string,object,headers,throws,jmsexception,if,headers,null,set,map,entry,string,object,entries,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException;1548332772;Appends the JMS headers from the Camel {@link Message};public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException {_        if (headers != null) {_            Set<Map.Entry<String, Object>> entries = headers.entrySet()__            for (Map.Entry<String, Object> entry : entries) {_                String headerName = entry.getKey()__                Object headerValue = entry.getValue()__                appendJmsProperty(jmsMessage, exchange, headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,map,string,object,headers,throws,jmsexception,if,headers,null,set,map,entry,string,object,entries,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,header,name,header,value
JmsBinding -> public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException;1548410840;Appends the JMS headers from the Camel {@link Message};public void appendJmsProperties(Message jmsMessage, Exchange exchange, Map<String, Object> headers) throws JMSException {_        if (headers != null) {_            Set<Map.Entry<String, Object>> entries = headers.entrySet()__            for (Map.Entry<String, Object> entry : entries) {_                String headerName = entry.getKey()__                Object headerValue = entry.getValue()__                appendJmsProperty(jmsMessage, exchange, headerName, headerValue)__            }_        }_    };appends,the,jms,headers,from,the,camel,link,message;public,void,append,jms,properties,message,jms,message,exchange,exchange,map,string,object,headers,throws,jmsexception,if,headers,null,set,map,entry,string,object,entries,headers,entry,set,for,map,entry,string,object,entry,entries,string,header,name,entry,get,key,object,header,value,entry,get,value,append,jms,property,jms,message,exchange,header,name,header,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)             throws JMSException;1441617001;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_            throws JMSException {_        for (Map.Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,map,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)             throws JMSException;1441617894;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_            throws JMSException {_        for (Map.Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,map,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)             throws JMSException;1524063178;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_            throws JMSException {_        for (Map.Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,map,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)             throws JMSException;1537290824;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_            throws JMSException {_        for (Map.Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,map,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)             throws JMSException;1540108160;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_            throws JMSException {_        for (Map.Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,map,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)             throws JMSException;1540108163;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_            throws JMSException {_        for (Map.Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,map,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)             throws JMSException;1548332772;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_            throws JMSException {_        for (Map.Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,map,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)             throws JMSException;1548410840;Populates a {@link MapMessage} from a {@link Map} instance.;protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContext context)_            throws JMSException {_        for (Map.Entry<?, ?> entry : map.entrySet()) {_            String keyString = CamelContextHelper.convertTo(context, String.class, entry.getKey())__            if (keyString != null) {_                message.setObject(keyString, entry.getValue())__            }_        }_    };populates,a,link,map,message,from,a,link,map,instance;protected,void,populate,map,message,map,message,message,map,map,camel,context,context,throws,jmsexception,for,map,entry,entry,map,entry,set,string,key,string,camel,context,helper,convert,to,context,string,class,entry,get,key,if,key,string,null,message,set,object,key,string,entry,get,value
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1441617001;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1441617894;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1524063178;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1537290824;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1540108160;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1540108163;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1548332772;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected Object getValidJMSHeaderValue(String headerName, Object headerValue);1548410840;Strategy to test if the given header is valid according to the JMS spec to be set as a property_on the JMS message._<p/>_This default implementation will allow:_<ul>_<li>any primitives and their counter Objects (Integer, Double etc.)</li>_<li>String and any other literals, Character, CharSequence</li>_<li>Boolean</li>_<li>Number</li>_<li>java.util.Date</li>_</ul>__@param headerName   the header name_@param headerValue  the header value_@return  the value to use, <tt>null</tt> to ignore this header;protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {_        if (headerValue instanceof String) {_            return headerValue__        } else if (headerValue instanceof BigInteger) {_            return headerValue.toString()__        } else if (headerValue instanceof BigDecimal) {_            return headerValue.toString()__        } else if (headerValue instanceof Number) {_            return headerValue__        } else if (headerValue instanceof Character) {_            return headerValue__        } else if (headerValue instanceof CharSequence) {_            return headerValue.toString()__        } else if (headerValue instanceof Boolean) {_            return headerValue__        } else if (headerValue instanceof Date) {_            return headerValue.toString()__        }_        return null__    };strategy,to,test,if,the,given,header,is,valid,according,to,the,jms,spec,to,be,set,as,a,property,on,the,jms,message,p,this,default,implementation,will,allow,ul,li,any,primitives,and,their,counter,objects,integer,double,etc,li,li,string,and,any,other,literals,character,char,sequence,li,li,boolean,li,li,number,li,li,java,util,date,li,ul,param,header,name,the,header,name,param,header,value,the,header,value,return,the,value,to,use,tt,null,tt,to,ignore,this,header;protected,object,get,valid,jmsheader,value,string,header,name,object,header,value,if,header,value,instanceof,string,return,header,value,else,if,header,value,instanceof,big,integer,return,header,value,to,string,else,if,header,value,instanceof,big,decimal,return,header,value,to,string,else,if,header,value,instanceof,number,return,header,value,else,if,header,value,instanceof,character,return,header,value,else,if,header,value,instanceof,char,sequence,return,header,value,to,string,else,if,header,value,instanceof,boolean,return,header,value,else,if,header,value,instanceof,date,return,header,value,to,string,return,null
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1441617001;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = JmsMessageType.Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = JmsMessageType.Bytes__        } else if (body instanceof Map) {_            type = JmsMessageType.Map__        } else if (body instanceof Serializable) {_            type = JmsMessageType.Object__        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = JmsMessageType.Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,jms,message,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,jms,message,type,bytes,else,if,body,instanceof,map,type,jms,message,type,map,else,if,body,instanceof,serializable,type,jms,message,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,jms,message,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1441617894;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = JmsMessageType.Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = JmsMessageType.Bytes__        } else if (body instanceof Map) {_            type = JmsMessageType.Map__        } else if (body instanceof Serializable) {_            type = JmsMessageType.Object__        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = JmsMessageType.Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,jms,message,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,jms,message,type,bytes,else,if,body,instanceof,map,type,jms,message,type,map,else,if,body,instanceof,serializable,type,jms,message,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,jms,message,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1524063178;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = JmsMessageType.Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = JmsMessageType.Bytes__        } else if (body instanceof Map) {_            type = JmsMessageType.Map__        } else if (body instanceof Serializable) {_            type = JmsMessageType.Object__        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = JmsMessageType.Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,jms,message,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,jms,message,type,bytes,else,if,body,instanceof,map,type,jms,message,type,map,else,if,body,instanceof,serializable,type,jms,message,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,jms,message,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1537290824;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = JmsMessageType.Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = JmsMessageType.Bytes__        } else if (body instanceof Map) {_            type = JmsMessageType.Map__        } else if (body instanceof Serializable) {_            type = JmsMessageType.Object__        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = JmsMessageType.Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,jms,message,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,jms,message,type,bytes,else,if,body,instanceof,map,type,jms,message,type,map,else,if,body,instanceof,serializable,type,jms,message,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,jms,message,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1540108160;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = JmsMessageType.Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = JmsMessageType.Bytes__        } else if (body instanceof Map) {_            type = JmsMessageType.Map__        } else if (body instanceof Serializable) {_            type = JmsMessageType.Object__        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = JmsMessageType.Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,jms,message,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,jms,message,type,bytes,else,if,body,instanceof,map,type,jms,message,type,map,else,if,body,instanceof,serializable,type,jms,message,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,jms,message,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1540108163;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = JmsMessageType.Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = JmsMessageType.Bytes__        } else if (body instanceof Map) {_            type = JmsMessageType.Map__        } else if (body instanceof Serializable) {_            type = JmsMessageType.Object__        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = JmsMessageType.Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,jms,message,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,jms,message,type,bytes,else,if,body,instanceof,map,type,jms,message,type,map,else,if,body,instanceof,serializable,type,jms,message,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,jms,message,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1548332772;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = JmsMessageType.Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = JmsMessageType.Bytes__        } else if (body instanceof Map) {_            type = JmsMessageType.Map__        } else if (body instanceof Serializable) {_            type = JmsMessageType.Object__        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = JmsMessageType.Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,jms,message,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,jms,message,type,bytes,else,if,body,instanceof,map,type,jms,message,type,map,else,if,body,instanceof,serializable,type,jms,message,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,jms,message,type,bytes,return,type
JmsBinding -> protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context);1548410840;Return the {@link JmsMessageType}__@return type or null if no mapping was possible;protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context) {_        JmsMessageType type = null__        _        if (body instanceof Node || body instanceof String) {_            type = JmsMessageType.Text__        } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader_                || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {_            type = JmsMessageType.Bytes__        } else if (body instanceof Map) {_            type = JmsMessageType.Map__        } else if (body instanceof Serializable) {_            type = JmsMessageType.Object__        } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null_                || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {_            type = JmsMessageType.Bytes__        }_        return type__    };return,the,link,jms,message,type,return,type,or,null,if,no,mapping,was,possible;protected,jms,message,type,get,jmsmessage,type,for,body,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,null,if,body,instanceof,node,body,instanceof,string,type,jms,message,type,text,else,if,body,instanceof,byte,body,instanceof,wrapped,file,body,instanceof,file,body,instanceof,reader,body,instanceof,input,stream,body,instanceof,byte,buffer,body,instanceof,stream,cache,type,jms,message,type,bytes,else,if,body,instanceof,map,type,jms,message,type,map,else,if,body,instanceof,serializable,type,jms,message,type,object,else,if,exchange,get,context,get,type,converter,try,convert,to,file,class,body,null,exchange,get,context,get,type,converter,try,convert,to,input,stream,class,body,null,type,jms,message,type,bytes,return,type
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1441617001;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_            case Text: {_                TextMessage message = session.createTextMessage()__                if (body != null) {_                    String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                    message.setText(payload)__                }_                return message__            }_            case Bytes: {_                BytesMessage message = session.createBytesMessage()__                if (body != null) {_                    byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                    message.writeBytes(payload)__                }_                return message__            }_            case Map: {_                MapMessage message = session.createMapMessage()__                if (body != null) {_                    Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                    populateMapMessage(message, payload, context)__                }_                return message__            }_            case Object:_                ObjectMessage message = session.createObjectMessage()__                if (body != null) {_                    try {_                        Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                        message.setObject(payload)__                    } catch (NoTypeConversionAvailableException e) {_                        _                        JMSException cause = new MessageFormatException(e.getMessage())__                        cause.initCause(e)__                        throw cause__                    }_                }_                return message__            default:_                break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1441617894;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1524063178;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1537290824;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1540108160;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1540108163;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1548332772;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException;1548410840;Create the {@link Message}__@return jmsMessage or null if the mapping was not successfully;protected Message createJmsMessageForType(Exchange exchange, Object body, Map<String, Object> headers, Session session, CamelContext context, JmsMessageType type) throws JMSException {_        switch (type) {_        case Text: {_            TextMessage message = session.createTextMessage()__            if (body != null) {_                String payload = context.getTypeConverter().convertTo(String.class, exchange, body)__                message.setText(payload)__            }_            return message__        }_        case Bytes: {_            BytesMessage message = session.createBytesMessage()__            if (body != null) {_                byte[] payload = context.getTypeConverter().convertTo(byte[].class, exchange, body)__                message.writeBytes(payload)__            }_            return message__        }_        case Map: {_            MapMessage message = session.createMapMessage()__            if (body != null) {_                Map<?, ?> payload = context.getTypeConverter().convertTo(Map.class, exchange, body)__                populateMapMessage(message, payload, context)__            }_            return message__        }_        case Object:_            ObjectMessage message = session.createObjectMessage()__            if (body != null) {_                try {_                    Serializable payload = context.getTypeConverter().mandatoryConvertTo(Serializable.class, exchange, body)__                    message.setObject(payload)__                } catch (NoTypeConversionAvailableException e) {_                    _                    JMSException cause = new MessageFormatException(e.getMessage())__                    cause.initCause(e)__                    throw cause__                }_            }_            return message__        default:_            break__        }_        return null__    };create,the,link,message,return,jms,message,or,null,if,the,mapping,was,not,successfully;protected,message,create,jms,message,for,type,exchange,exchange,object,body,map,string,object,headers,session,session,camel,context,context,jms,message,type,type,throws,jmsexception,switch,type,case,text,text,message,message,session,create,text,message,if,body,null,string,payload,context,get,type,converter,convert,to,string,class,exchange,body,message,set,text,payload,return,message,case,bytes,bytes,message,message,session,create,bytes,message,if,body,null,byte,payload,context,get,type,converter,convert,to,byte,class,exchange,body,message,write,bytes,payload,return,message,case,map,map,message,message,session,create,map,message,if,body,null,map,payload,context,get,type,converter,convert,to,map,class,exchange,body,populate,map,message,message,payload,context,return,message,case,object,object,message,message,session,create,object,message,if,body,null,try,serializable,payload,context,get,type,converter,mandatory,convert,to,serializable,class,exchange,body,message,set,object,payload,catch,no,type,conversion,available,exception,e,jmsexception,cause,new,message,format,exception,e,get,message,cause,init,cause,e,throw,cause,return,message,default,break,return,null
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1441617001;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1441617894;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1524063178;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1537290824;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1540108160;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1540108163;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1548332772;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
JmsBinding -> protected boolean isStandardJMSHeader(String headerName);1548410840;Is the given header a standard JMS header_@param headerName the header name_@return <tt>true</tt> if its a standard JMS header;protected boolean isStandardJMSHeader(String headerName) {_        if (!headerName.startsWith("JMS")) {_            return false__        }_        if (headerName.startsWith("JMSX")) {_            return false__        }_        _        if (headerName.startsWith("JMS_")) {_            return false__        }__        _        if (headerName.length() > 3) {_            Character fourth = headerName.charAt(3)__            if (Character.isLetter(fourth)) {_                return true__            }_        }__        return false__    };is,the,given,header,a,standard,jms,header,param,header,name,the,header,name,return,tt,true,tt,if,its,a,standard,jms,header;protected,boolean,is,standard,jmsheader,string,header,name,if,header,name,starts,with,jms,return,false,if,header,name,starts,with,jmsx,return,false,if,header,name,starts,with,return,false,if,header,name,length,3,character,fourth,header,name,char,at,3,if,character,is,letter,fourth,return,true,return,false
