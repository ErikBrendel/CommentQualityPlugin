commented;modifiers;parameterAmount;loc;comment;code
false;public;1;29;;@Override public void handleMessage(final Exchange exchange) {     if (log.isDebugEnabled()) {         log.debug("Handling InOnly Message: {}", exchange.getIn().getBody()).     }     if (!exchange.isFailed()) {         NoOpAsyncCallback callback = new NoOpAsyncCallback().         if (isTransacted() || isSynchronous()) {             // must process synchronous if transacted or configured to do so             if (log.isDebugEnabled()) {                 log.debug("Synchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), getEndpoint().getEndpointUri()).             }             try {                 getProcessor().process(exchange).             } catch (Exception e) {                 exchange.setException(e).             } finally {                 callback.done(true).             }         } else {             // process asynchronous using the async routing engine             if (log.isDebugEnabled()) {                 log.debug("Asynchronous processing: Message[{}], Destination[{}] ", exchange.getIn().getBody(), getEndpoint().getEndpointUri()).             }             getProcessor().process(exchange, callback).         }     } }
false;public;0;4;;@Override public void close() { // no-op }
false;public;1;4;;@Override public void done(boolean sync) {     log.debug("NoOpAsyncCallback InOnly Exchange complete"). }
