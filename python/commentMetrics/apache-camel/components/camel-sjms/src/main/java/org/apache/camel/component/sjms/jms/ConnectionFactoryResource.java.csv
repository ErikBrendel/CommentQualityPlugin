commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public boolean validateObject(Connection connection) {     try {         // ensure connection works so we need to start it         connection.start().         return true.     } catch (Throwable e) {     // ignore     }     return false. }
false;public;0;4;;@Override public Connection borrowConnection() throws Exception {     return connections.borrowObject(). }
false;public;1;4;;@Override public void returnConnection(Connection connection) throws Exception {     connections.returnObject(connection). }
false;public;0;22;;@Override public Connection makeObject() throws Exception {     Connection connection = null.     if (connectionFactory != null) {         if (getUsername() != null && getPassword() != null) {             connection = connectionFactory.createConnection(getUsername(), getPassword()).         } else {             connection = connectionFactory.createConnection().         }     }     if (connection != null) {         if (ObjectHelper.isNotEmpty(getClientId())) {             connection.setClientID(getClientId()).         }         // we want to listen for exceptions         if (exceptionListener != null) {             connection.setExceptionListener(exceptionListener).         }         connection.start().     }     return connection. }
false;public;1;7;;@Override public void destroyObject(Connection connection) throws Exception {     if (connection != null) {         connection.stop().         connection.close().     } }
false;public;0;3;;public ConnectionFactory getConnectionFactory() {     return connectionFactory. }
false;public;1;3;;public void setConnectionFactory(ConnectionFactory connectionFactory) {     this.connectionFactory = connectionFactory. }
false;public;0;3;;public String getUsername() {     return username. }
false;public;1;3;;public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public String getClientId() {     return clientId. }
false;public;1;3;;public void setClientId(String clientId) {     this.clientId = clientId. }
false;public;0;3;;public ExceptionListener getExceptionListener() {     return exceptionListener. }
false;public;1;3;;public void setExceptionListener(ExceptionListener exceptionListener) {     this.exceptionListener = exceptionListener. }
false;public;0;3;;public int size() {     return connections.getNumActive() + connections.getNumIdle(). }
false;public;0;5;;public void fillPool() throws Exception {     while (connections.getNumIdle() < connections.getMaxIdle()) {         connections.addObject().     } }
false;public;0;3;;public void drainPool() throws Exception {     connections.close(). }
