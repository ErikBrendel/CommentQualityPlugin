commented;modifiers;parameterAmount;loc;comment;code
false;public;0;42;;@Test public void testExecuteInOnlyLocalCamelContext() throws Exception {     String camelEndpointId = "testCamelRoute".     String camelRouteUri = "direct:" + camelEndpointId.     String testReponse = "testResponse".     String runtimeManagerId = "testRuntimeManager".     when(runtimeManager.getIdentifier()).thenReturn(runtimeManagerId).     when(producerTemplate.send(eq(camelRouteUri), ArgumentMatchers.any(Exchange.class))).thenReturn(outExchange).     when(producerTemplate.getCamelContext()).thenReturn(camelContext).     when(camelContext.createProducerTemplate()).thenReturn(producerTemplate).     HeadersMapFactory hmf = new DefaultHeadersMapFactory().     when(camelContext.getHeadersMapFactory()).thenReturn(hmf).     // Register the RuntimeManager bound camelcontext.     try {         ServiceRegistry.get().register(runtimeManagerId + "_CamelService", camelContext).         WorkItemImpl workItem = new WorkItemImpl().         workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId).         workItem.setParameter("Request", "someRequest").         workItem.setDeploymentId("testDeploymentId").         workItem.setProcessInstanceId(1L).         workItem.setId(1L).         AbstractCamelWorkItemHandler handler = new InOnlyCamelWorkItemHandler(runtimeManager).         TestWorkItemManager manager = new TestWorkItemManager().         handler.executeWorkItem(workItem, manager).         assertThat(manager.getResults(), is(notNullValue())).         // InOnly does not complete WorkItem.         assertThat(manager.getResults().size(), equalTo(0)).     } finally {         ServiceRegistry.get().remove(runtimeManagerId + "_CamelService").     } }
