commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routeId(routeId).setBody(simple("${body.getParameter(\"Request\")}")).to("mock:result"). }
false;public;0;40;;@Test public void testSyncInOnly() throws Exception {     // Setup     String routeId = "testSyncInOnlyExceptionRoute".     RouteBuilder builder = new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId(routeId).setBody(simple("${body.getParameter(\"Request\")}")).to("mock:result").         }     }.     context.addRoutes(builder).     try {         // Register the Camel Context with the jBPM ServiceRegistry.         ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, context).         // Test         String expectedBody = "helloRequest".         resultEndpoint.expectedBodiesReceived(expectedBody).         WorkItemImpl workItem = new WorkItemImpl().         workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, "start").         workItem.setParameter("Request", expectedBody).         TestWorkItemManager manager = new TestWorkItemManager().         WorkItemHandler handler = new InOnlyCamelWorkItemHandler().         handler.executeWorkItem(workItem, manager).         // Assertions         assertThat(manager.getResults().size(), equalTo(0)).         resultEndpoint.assertIsSatisfied().     } finally {         // Cleanup         context.removeRoute(routeId).         ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY).     } }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").routeId(routeId).setBody(simple("${body.getParameter(\"Request\")}")).throwException(new IllegalArgumentException("Illegal contennt!")).to("mock:result"). }
false;public;0;41;;@Test(expected = WorkItemHandlerRuntimeException.class) public void testSyncInOnlyException() throws Exception {     // Setup     String routeId = "testSyncInOnlyExceptionRoute".     RouteBuilder builder = new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId(routeId).setBody(simple("${body.getParameter(\"Request\")}")).throwException(new IllegalArgumentException("Illegal contennt!")).to("mock:result").         }     }.     context.addRoutes(builder).     try {         // Register the Camel Context with the jBPM ServiceRegistry.         ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, context).         // Test         String expectedBody = "helloRequest".         resultEndpoint.expectedBodiesReceived(expectedBody).         WorkItemImpl workItem = new WorkItemImpl().         workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, "start").         workItem.setParameter("Request", expectedBody).         TestWorkItemManager manager = new TestWorkItemManager().         WorkItemHandler handler = new InOnlyCamelWorkItemHandler().         handler.executeWorkItem(workItem, manager).         // Assertions         assertThat(manager.getResults().size(), equalTo(0)).         resultEndpoint.assertIsSatisfied().     } finally {         // Cleanup         context.removeRoute(routeId).         ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY).     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routeId(routeId).setBody(simple("${body.getParameter(\"Request\")}")).to("mock:result"). }
false;public;0;41;;@Test public void testSyncInOut() throws Exception {     // Setup     String routeId = "testSyncInOnlyExceptionRoute".     RouteBuilder builder = new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId(routeId).setBody(simple("${body.getParameter(\"Request\")}")).to("mock:result").         }     }.     context.addRoutes(builder).     try {         // Register the Camel Context with the jBPM ServiceRegistry.         ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, context).         // Test         String expectedBody = "helloRequest".         resultEndpoint.expectedBodiesReceived(expectedBody).         WorkItemImpl workItem = new WorkItemImpl().         workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, "start").         workItem.setParameter("Request", expectedBody).         TestWorkItemManager manager = new TestWorkItemManager().         AbstractCamelWorkItemHandler handler = new InOutCamelWorkItemHandler().         handler.executeWorkItem(workItem, manager).         // Assertions         assertThat(manager.getResults().size(), equalTo(1)).         resultEndpoint.assertIsSatisfied().     } finally {         // Cleanup         context.removeRoute(routeId).         ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY).     } }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").routeId(routeId).setBody(simple("${body.getParameter(\"Request\")}")).throwException(new IllegalArgumentException("Illegal contennt!")).to("mock:result"). }
false;public;0;37;;@Test(expected = WorkItemHandlerRuntimeException.class) public void testSyncInOutException() throws Exception {     // Setup     String routeId = "testSyncInOutExceptionRoute".     RouteBuilder builder = new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId(routeId).setBody(simple("${body.getParameter(\"Request\")}")).throwException(new IllegalArgumentException("Illegal contennt!")).to("mock:result").         }     }.     context.addRoutes(builder).     try {         // Register the Camel Context with the jBPM ServiceRegistry.         ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, context).         // Test         String expectedBody = "helloRequest".         resultEndpoint.expectedBodiesReceived(expectedBody).         WorkItemImpl workItem = new WorkItemImpl().         workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, "start").         workItem.setParameter("Request", expectedBody).         TestWorkItemManager manager = new TestWorkItemManager().         WorkItemHandler handler = new InOutCamelWorkItemHandler().         handler.executeWorkItem(workItem, manager).     } finally {         // Cleanup         context.removeRoute(routeId).         ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY).     } }
