commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void cleanup() {     RuntimeManagerRegistry.get().remove(identifier). }
false;public;0;9;;@Test public void testInit() {     CamelKieServerExtension extension = new CamelKieServerExtension().     extension.init(null, null).     DefaultCamelContext globalCamelContext = (DefaultCamelContext) ServiceRegistry.get().service(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY).     List<RouteDefinition> globalRestDefinitions = globalCamelContext.getRouteDefinitions().     assertThat(globalRestDefinitions.size(), equalTo(1)).     assertThat(globalCamelContext.getRouteDefinition("unitTestRoute"), is(notNullValue())). }
false;public;0;16;;@Test public void testCreateContainer() {     CamelKieServerExtension extension = new CamelKieServerExtension().     final String containerId = "testContainer".     when(kieContainerInstance.getKieContainer()).thenReturn(kieContainer).     when(kieContainer.getClassLoader()).thenReturn(this.getClass().getClassLoader()).     extension.createContainer(containerId, kieContainerInstance, new HashMap<String, Object>()).     DefaultCamelContext camelContext = (DefaultCamelContext) ServiceRegistry.get().service("testContainer" + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX).     List<RouteDefinition> restDefinitions = camelContext.getRouteDefinitions().     assertThat(restDefinitions.size(), equalTo(1)).     assertThat(camelContext.getRoute("unitTestRoute"), is(notNullValue())). }
false;public;0;7;;@Test public void testDefaultSetup() {     CamelKieServerExtension extension = new CamelKieServerExtension().     assertNull(extension.getCamelContextBuilder()). }
false;public;0;5;;@Override public CamelContext buildCamelContext() {     // for test purpose return simply null as camel context     return null. }
false;protected;0;12;;@Override protected CamelContextBuilder discoverCamelContextBuilder() {     return new CamelContextBuilder() {          @Override         public CamelContext buildCamelContext() {             // for test purpose return simply null as camel context             return null.         }     }. }
false;public;0;23;;@Test public void testDefaultSetupCustomDiscovery() {     CamelKieServerExtension extension = new CamelKieServerExtension() {          @Override         protected CamelContextBuilder discoverCamelContextBuilder() {             return new CamelContextBuilder() {                  @Override                 public CamelContext buildCamelContext() {                     // for test purpose return simply null as camel context                     return null.                 }             }.         }     }.     assertNotNull(extension.getCamelContextBuilder()).     assertNull(extension.getCamelContextBuilder().buildCamelContext()). }
false;public;0;9;;@Test public void testBuildGlobalCamelContext() throws Exception {     CamelKieServerExtension extension = new CamelKieServerExtension().     CamelContext context = extension.buildGlobalContext().     assertNotNull(context).     context.stop(). }
false;public;0;5;;@Override public CamelContext buildCamelContext() {     // for test purpose return simply null as camel context     return null. }
false;public;0;15;;@Test public void testBuildGlobalCamelContextCustomBuilder() throws Exception {     CamelKieServerExtension extension = new CamelKieServerExtension(new CamelContextBuilder() {          @Override         public CamelContext buildCamelContext() {             // for test purpose return simply null as camel context             return null.         }     }).     CamelContext context = extension.buildGlobalContext().     assertNull(context). }
false;public;0;17;;@Test public void testBuildDeploymentCamelContext() throws Exception {     when(runtimeManager.getIdentifier()).thenReturn(identifier).     when(runtimeManager.getEnvironment()).thenReturn(runtimeEnvironment).     Environment environment = KieServices.get().newEnvironment().     when(runtimeEnvironment.getEnvironment()).thenReturn(environment).     RuntimeManagerRegistry.get().register(runtimeManager).     CamelKieServerExtension extension = new CamelKieServerExtension().     CamelContext context = extension.buildDeploymentContext(identifier, this.getClass().getClassLoader()).     assertNotNull(context).     context.stop(). }
false;public;0;5;;@Override public CamelContext buildCamelContext() {     // for test purpose return simply null as camel context     return null. }
false;public;0;25;;@Test public void testBuildDeploymentCamelContextCustomBuilder() throws Exception {     when(runtimeManager.getIdentifier()).thenReturn(identifier).     when(runtimeManager.getEnvironment()).thenReturn(runtimeEnvironment).     Environment environment = KieServices.get().newEnvironment().     environment.set(JBPMConstants.CAMEL_CONTEXT_BUILDER_KEY, new CamelContextBuilder() {          @Override         public CamelContext buildCamelContext() {             // for test purpose return simply null as camel context             return null.         }     }).     when(runtimeEnvironment.getEnvironment()).thenReturn(environment).     RuntimeManagerRegistry.get().register(runtimeManager).     CamelKieServerExtension extension = new CamelKieServerExtension().     CamelContext context = extension.buildDeploymentContext(identifier, this.getClass().getClassLoader()).     assertNull(context). }
