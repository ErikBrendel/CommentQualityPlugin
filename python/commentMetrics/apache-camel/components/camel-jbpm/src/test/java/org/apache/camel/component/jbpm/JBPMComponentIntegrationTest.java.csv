commented;modifiers;parameterAmount;loc;comment;code
false;public;0;48;;@SuppressWarnings("unchecked") @Test public void interactsOverRest() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     // let's start process instance for evaluation process     Map<String, Object> params = new HashMap<>().     params.put("employee", "wbadmin").     params.put("reason", "Camel asks for it").     Map<String, Object> headers = new HashMap<>().     headers.put(JBPMConstants.PROCESS_ID, "evaluation").     headers.put(JBPMConstants.PARAMETERS, params).     template.sendBodyAndHeaders("direct:start", null, headers).     assertMockEndpointsSatisfied().     Long processInstanceId = (Long) getMockEndpoint("mock:result").getExchanges().get(0).getIn().getBody().     assertNotNull(processInstanceId).     // now let's collect user tasks     headers = new HashMap<>().     headers.put(JBPMConstants.OPERATION, JBPMConstants.OPERATION + Operation.getTasksOwned).     template.sendBodyAndHeaders("direct:start", null, headers).     getMockEndpoint("mock:result").expectedMessageCount(2).     assertMockEndpointsSatisfied().     List<TaskSummary> tasks = (List<TaskSummary>) getMockEndpoint("mock:result").getExchanges().get(1).getIn().getBody().     assertEquals(1, tasks.size()).     // let's complete first user task     headers = new HashMap<>().     headers.put(JBPMConstants.TASK_ID, tasks.get(0).getId()).     headers.put(JBPMConstants.OPERATION, JBPMConstants.OPERATION + Operation.completeTask).     template.sendBodyAndHeaders("direct:start", null, headers).     getMockEndpoint("mock:result").expectedMessageCount(3).     assertMockEndpointsSatisfied().     // lastly let's abort process instance we just created     headers = new HashMap<>().     headers.put(JBPMConstants.PROCESS_INSTANCE_ID, processInstanceId).     headers.put(JBPMConstants.OPERATION, JBPMConstants.OPERATION + Operation.abortProcessInstance).     template.sendBodyAndHeaders("direct:start", null, headers).     getMockEndpoint("mock:result").expectedMessageCount(4).     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() {     from("direct:start").to("jbpm:http://localhost:8080/kie-server/services/rest/server?userName=wbadmin&password=wbadmin" + "&deploymentId=evaluation").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("jbpm:http://localhost:8080/kie-server/services/rest/server?userName=wbadmin&password=wbadmin" + "&deploymentId=evaluation").to("mock:result").         }     }. }
