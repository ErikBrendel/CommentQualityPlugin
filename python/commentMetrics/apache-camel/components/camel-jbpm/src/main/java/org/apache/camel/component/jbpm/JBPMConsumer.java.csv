commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;25;;@Override protected void doStart() throws Exception {     super.doStart().     DeploymentService deploymentService = (DeploymentService) ServiceRegistry.get().service(ServiceRegistry.DEPLOYMENT_SERVICE).     if (configuration.getDeploymentId() != null) {         InternalRuntimeManager manager = (InternalRuntimeManager) deploymentService.getRuntimeManager(configuration.getDeploymentId()).         configure(manager, this).         LOGGER.debug("JBPM Camel Consumer configured and started for deployment id {}", configuration.getDeploymentId()).     } else {         ((ListenerSupport) deploymentService).addListener(this).         for (DeployedUnit deployed : deploymentService.getDeployedUnits()) {             InternalRuntimeManager manager = (InternalRuntimeManager) deployed.getRuntimeManager().             configure(manager, this).         }         LOGGER.debug("JBPM Camel Consumer configured and started on all available deployments").     } }
false;protected;0;17;;@Override protected void doStop() throws Exception {     super.doStop().     DeploymentService deploymentService = (DeploymentService) ServiceRegistry.get().service(ServiceRegistry.DEPLOYMENT_SERVICE).     if (configuration.getDeploymentId() != null) {         LOGGER.debug("JBPM Camel Consumer unconfigured and stopped for deployment id {}", configuration.getDeploymentId()).     } else {         ((ListenerSupport) deploymentService).removeListener(this).         LOGGER.debug("JBPM Camel Consumer unconfigured and stopped on all available deployments").     }     if (JBPMConstants.JBPM_EVENT_EMITTER.equals(configuration.getEventListenerType())) {         ServiceRegistry.get().remove("CamelEventEmitter").     } }
false;public;1;7;;@Override public void done(boolean doneSync) {     // handle any thrown exception     if (exchange.getException() != null) {         getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).     } }
false;public;2;29;;public void sendMessage(String eventType, Object body) {     Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly).     exchange.getIn().setHeader("EventType", eventType).     exchange.getIn().setBody(body).     if (!endpoint.isSynchronous()) {         getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 // handle any thrown exception                 if (exchange.getException() != null) {                     getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).                 }             }         }).     } else {         try {             getProcessor().process(exchange).         } catch (Exception e) {             exchange.setException(e).         }         // handle any thrown exception         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).         }     } }
false;public;1;6;;@Override public void onDeploy(DeploymentEvent event) {     InternalRuntimeManager manager = (InternalRuntimeManager) event.getDeployedUnit().getRuntimeManager().     configure(manager, this). }
false;public;1;4;;@Override public void onUnDeploy(DeploymentEvent event) { // no-op }
false;public;1;5;;@Override public void onActivate(DeploymentEvent event) { // no-op }
false;public;1;5;;@Override public void onDeactivate(DeploymentEvent event) { // no-op }
false;protected;2;10;;protected void configure(InternalRuntimeManager manager, JBPMConsumer consumer) {     String eventListenerType = configuration.getEventListenerType().     if (eventListenerType == null) {         return.     }     configureConsumer(eventListenerType, manager, consumer). }
false;protected;3;37;;protected void configureConsumer(String eventListenerType, InternalRuntimeManager manager, JBPMConsumer consumer) {     LOGGER.debug("Configuring Camel JBPM Consumer for {} on runtime manager {}", eventListenerType, manager).     CacheManager cacheManager = manager.getCacheManager().     JBPMCamelConsumerAware consumerAware = null.     if (JBPMConstants.JBPM_PROCESS_EVENT_LISTENER.equals(eventListenerType)) {         consumerAware = (JBPMCamelConsumerAware) cacheManager.get("new org.apache.camel.component.jbpm.listeners.CamelProcessEventListener()").         if (consumerAware == null) {             consumerAware = new CamelProcessEventListener().             cacheManager.add("new org.apache.camel.component.jbpm.listeners.CamelProcessEventListener()", consumerAware).         }         LOGGER.debug("Configuring JBPMConsumer on process event listener {}", consumerAware).     } else if (JBPMConstants.JBPM_TASK_EVENT_LISTENER.equals(eventListenerType)) {         consumerAware = (JBPMCamelConsumerAware) cacheManager.get("new org.apache.camel.component.jbpm.listeners.CamelTaskEventListener()").         if (consumerAware == null) {             consumerAware = new CamelTaskEventListener().             cacheManager.add("new org.apache.camel.component.jbpm.listeners.CamelTaskEventListener()", consumerAware).         }         LOGGER.debug("Configuring JBPMConsumer on task event listener {}", consumerAware).     } else if (JBPMConstants.JBPM_CASE_EVENT_LISTENER.equals(eventListenerType)) {         consumerAware = (JBPMCamelConsumerAware) cacheManager.get("new org.apache.camel.component.jbpm.listeners.CamelCaseEventListener()").         if (consumerAware == null) {             consumerAware = new CamelCaseEventListener().             cacheManager.add("new org.apache.camel.component.jbpm.listeners.CamelCaseEventListener()", consumerAware).         }         LOGGER.debug("Configuring JBPMConsumer on case event listener {}", consumerAware).     } else if (JBPMConstants.JBPM_EVENT_EMITTER.equals(eventListenerType)) {         LOGGER.debug("Configuring JBPMConsumer for event emitter").         ServiceRegistry.get().register("CamelEventEmitter", new CamelEventEmitter(this, configuration.getEmitterSendItems())).         return.     }     LOGGER.debug("Adding consumer {} on {}", consumer, consumerAware).     consumerAware.addConsumer(consumer). }
false;public;0;4;;@Override public String toString() {     return "JBPMConsumer [endpoint=" + endpoint + ", configuration=" + configuration + "]". }
