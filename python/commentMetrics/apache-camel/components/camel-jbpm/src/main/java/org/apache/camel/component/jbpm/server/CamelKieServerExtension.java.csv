commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isInitialized() {     return camelContext != null. }
false;public;0;4;;@Override public boolean isActive() {     return !DISABLED. }
false;public;2;19;;@Override public void init(KieServerImpl kieServer, KieServerRegistry registry) {     if (this.managedCamel && this.camelContext == null) {         this.camelContext = (DefaultCamelContext) buildGlobalContext().         this.camelContext.setName("KIE Server Camel context").         try (InputStream is = this.getClass().getResourceAsStream("/global-camel-routes.xml")) {             if (is != null) {                 RoutesDefinition routes = camelContext.loadRoutesDefinition(is).                 camelContext.addRouteDefinitions(routes.getRoutes()).             }         } catch (Exception e) {             LOGGER.error("Error while adding Camel context for KIE Server", e).         }     }     ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, this.camelContext). }
false;public;2;12;;@Override public void destroy(KieServerImpl kieServer, KieServerRegistry registry) {     ServiceRegistry.get().remove("GlobalCamelService").     if (this.managedCamel && this.camelContext != null) {         try {             this.camelContext.stop().         } catch (Exception e) {             LOGGER.error("Failed at stopping KIE Server extension {}", EXTENSION_NAME).         }     } }
false;public;3;24;;@Override public void createContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {     ClassLoader classloader = kieContainerInstance.getKieContainer().getClassLoader().     try (InputStream is = classloader.getResourceAsStream("camel-routes.xml")) {         if (is != null) {             DefaultCamelContext context = (DefaultCamelContext) buildDeploymentContext(id, classloader).             context.setName("KIE Server Camel context for container " + kieContainerInstance.getContainerId()).             RoutesDefinition routes = context.loadRoutesDefinition(is).             annotateKJarRoutes(routes, id).             context.addRouteDefinitions(routes.getRoutes()).             context.start().             camelContexts.put(id, context).             ServiceRegistry.get().register(id + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX, context).         }     } catch (Exception e) {         LOGGER.error("Error while adding Camel context for {}", kieContainerInstance.getContainerId(), e).     } }
false;public;3;5;;@Override public void updateContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {     disposeContainer(id, kieContainerInstance, parameters).     createContainer(id, kieContainerInstance, parameters). }
false;public;3;4;;@Override public boolean isUpdateContainerAllowed(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {     return true. }
false;public;3;14;;@Override public void disposeContainer(String id, KieContainerInstance kieContainerInstance, Map<String, Object> parameters) {     DefaultCamelContext context = camelContexts.get(id).     if (context != null) {         ServiceRegistry.get().remove(id + "_CamelService").         try {             context.stop().         } catch (Exception e) {             LOGGER.error("Error while removing Camel context for container {}", id, e).         }     } }
false;public;1;4;;@Override public List<Object> getAppComponents(SupportedTransports type) {     return Collections.emptyList(). }
false;public;1;4;;@Override public <T> T getAppComponents(Class<T> serviceType) {     return null. }
false;public;0;4;;@Override public String getImplementedCapability() {     return "Integration". }
false;public;0;4;;@Override public List<Object> getServices() {     return Collections.emptyList(). }
false;public;0;4;;@Override public String getExtensionName() {     return EXTENSION_NAME. }
false;public;0;4;;@Override public Integer getStartOrder() {     return 50. }
false;public;0;10;;@Override public void serverStarted() {     if (this.managedCamel && this.camelContext != null && !this.camelContext.isStarted()) {         try {             this.camelContext.start().         } catch (Exception e) {             LOGGER.error("Failed at start Camel context", e).         }     } }
false;public;0;4;;@Override public String toString() {     return EXTENSION_NAME + " KIE Server extension". }
false;public;0;3;;public DefaultCamelContext getCamelContext() {     return camelContext. }
false;public;0;3;;public CamelContextBuilder getCamelContextBuilder() {     return camelContextBuilder. }
false;protected;2;22;;protected void annotateKJarRoutes(RoutesDefinition routes, String deploymentId) {     for (RouteDefinition route : routes.getRoutes()) {         for (FromDefinition from : route.getInputs()) {             if (from.getUri().startsWith("jbpm:events") && !from.getUri().contains("deploymentId")) {                 StringBuilder uri = new StringBuilder(from.getUri()).                 String[] split = from.getUri().split("\\?").                 if (split.length == 1) {                     // no query given                     uri.append("?").                 } else {                     // already query params exist                     uri.append("&").                 }                 uri.append("deploymentId=").append(deploymentId).                 from.setUri(uri.toString()).             }         }     } }
false;protected;0;8;;protected CamelContext buildGlobalContext() {     if (camelContextBuilder != null) {         return camelContextBuilder.buildCamelContext().     }     return new CamelContextBuilder() {     }.buildCamelContext(). }
false;protected;2;17;;protected CamelContext buildDeploymentContext(String identifier, ClassLoader classloader) {     InternalRuntimeManager runtimeManager = (InternalRuntimeManager) RuntimeManagerRegistry.get().getManager(identifier).     if (runtimeManager != null) {         CamelContextBuilder deploymentContextBuilder = (CamelContextBuilder) runtimeManager.getEnvironment().getEnvironment().get(JBPMConstants.CAMEL_CONTEXT_BUILDER_KEY).         if (deploymentContextBuilder != null) {             return deploymentContextBuilder.buildCamelContext().         }     }     CamelContext camelContext = new CamelContextBuilder() {     }.buildCamelContext().     camelContext.setApplicationContextClassLoader(classloader).     return camelContext. }
false;protected;0;10;;protected CamelContextBuilder discoverCamelContextBuilder() {     ServiceLoader<CamelContextBuilder> builders = ServiceLoader.load(CamelContextBuilder.class).     Iterator<CamelContextBuilder> it = builders.iterator().     if (it.hasNext()) {         return it.next().     }     return null. }
