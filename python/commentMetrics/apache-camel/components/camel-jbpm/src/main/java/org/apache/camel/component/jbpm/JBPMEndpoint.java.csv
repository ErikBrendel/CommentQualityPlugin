commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public Producer createProducer() throws Exception {     KieServicesConfiguration kieConfiguration = KieServicesFactory.newRestConfiguration(configuration.getConnectionURL().toExternalForm(), configuration.getUserName(), configuration.getPassword()).     if (configuration.getTimeout() != null) {         kieConfiguration.setTimeout(configuration.getTimeout()).     }     if (configuration.getExtraJaxbClasses() != null) {         List<Class<?>> classes = Arrays.asList(configuration.getExtraJaxbClasses()).         kieConfiguration.addExtraClasses(new LinkedHashSet<>(classes)).     }     KieServicesClient kieServerClient = KieServicesFactory.newKieServicesClient(kieConfiguration).     LOGGER.debug("JBPM Producer created with KieServerClient configured for {}", configuration.getConnectionURL()).     return new JBPMProducer(this, kieServerClient). }
false;public;1;4;;public Consumer createConsumer(Processor processor) throws Exception {     LOGGER.debug("JBPM Consumer created and configured for deployment {}", configuration.getDeploymentId()).     return new JBPMConsumer(this, processor). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;1;3;;public void setConfiguration(JBPMConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public JBPMConfiguration getConfiguration() {     return configuration. }
