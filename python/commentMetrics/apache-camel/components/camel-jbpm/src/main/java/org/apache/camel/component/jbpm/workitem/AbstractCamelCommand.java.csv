commented;modifiers;parameterAmount;loc;comment;code
false;public;1;28;;@Override public ExecutionResults execute(CommandContext ctx) throws Exception {     WorkItem workItem = (WorkItem) ctx.getData("workItem").     String camelEndpointId = (String) workItem.getParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM).     // We only support direct. We don't need to support more, as direct simply gives us the entrypoint into the actual Camel Routes.     String camelUri = "direct:" + camelEndpointId.     ProducerTemplate producerTemplate = getProducerTemplate(ctx).     Exchange inExchange = ExchangeBuilder.anExchange(producerTemplate.getCamelContext()).withBody(workItem).build().     Exchange outExchange = producerTemplate.send(camelUri, inExchange).     // producerTemplate.send does not throw exceptions, instead they are set on the returned Exchange.     if (outExchange.getException() != null) {         throw outExchange.getException().     }     Message outMessage = outExchange.getOut().     ExecutionResults results = new ExecutionResults().     Object response = outMessage.getBody().     results.setData(JBPMConstants.RESPONSE_WI_PARAM, response).     results.setData(JBPMConstants.MESSAGE_WI_PARAM, outMessage).     return results. }
false;protected,abstract;1;1;;protected abstract ProducerTemplate getProducerTemplate(CommandContext ctx).
