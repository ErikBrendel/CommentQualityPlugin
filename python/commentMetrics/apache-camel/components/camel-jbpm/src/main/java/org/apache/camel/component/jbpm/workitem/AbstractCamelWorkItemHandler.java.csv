commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;private ProducerTemplate buildProducerTemplate(String key) {     CamelContext camelContext = (CamelContext) ServiceRegistry.get().service(key).     return this.producerTemplate = camelContext.createProducerTemplate(). }
false;public;2;24;;public void executeWorkItem(WorkItem workItem, final WorkItemManager manager) {     if (!initialized) {         this.producerTemplate = buildProducerTemplate(camelContextKey).         initialized = true.     }     String workItemCamelEndpointId = getCamelEndpointId(workItem).     // We only support direct. We don't need to support more, as direct simply gives us the entrypoint into the actual Camel Routes.     String camelUri = "direct:" + workItemCamelEndpointId.     try {         Exchange requestExchange = buildExchange(producerTemplate, workItem).         logger.debug("Sending Camel Exchange to: " + camelUri).         Exchange responseExchange = producerTemplate.send(camelUri, requestExchange).         // producerTemplate.send does not throw exceptions, instead they are set on the returned Exchange.         if (responseExchange.getException() != null) {             throw responseExchange.getException().         }         handleResponse(responseExchange, workItem, manager).     } catch (Exception e) {         handleException(e).     } }
false;protected;1;22;;protected String getCamelEndpointId(WorkItem workItem) {     String workItemCamelEndpointId = (String) workItem.getParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM).     if (camelEndpointId != null && !camelEndpointId.isEmpty()) {         if (workItemCamelEndpointId != null && !workItemCamelEndpointId.isEmpty()) {             logger.debug("The Camel Endpoint ID has been set on both the WorkItemHanlder and WorkItem. The '" + JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM + "' configured on the WorkItem overrides the global configuation.").         } else {             workItemCamelEndpointId = camelEndpointId.         }     }     if (workItemCamelEndpointId == null || workItemCamelEndpointId.isEmpty()) {         throw new IllegalArgumentException("No Camel Endpoint ID specified. Please configure the '" + JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM + "' in either the constructor of this WorkItemHandler, or pass it via the " + JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM + "' WorkItem parameter.").     }     return workItemCamelEndpointId. }
false;protected,abstract;3;1;;protected abstract void handleResponse(Exchange responseExchange, WorkItem workItem, WorkItemManager manager).
false;protected,abstract;2;1;;protected abstract Exchange buildExchange(ProducerTemplate template, WorkItem workItem).
false;public;2;3;;public void abortWorkItem(WorkItem workItem, WorkItemManager manager) { // Do nothing, cannot be aborted }
false;public;0;9;;@Override public void close() {     try {         this.producerTemplate.stop().     } catch (Exception e) {         logger.warn("Error encountered while closing the Camel Producer Template.", e).     // Not much we can do here, so swallowing exception.     } }
