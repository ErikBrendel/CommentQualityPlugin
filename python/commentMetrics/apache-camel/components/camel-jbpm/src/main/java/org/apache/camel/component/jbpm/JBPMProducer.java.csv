commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected void doStart() throws Exception {     LOGGER.trace("starting producer").     super.doStart().     LOGGER.trace("started producer"). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     super.doStop(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     getOperation(exchange).execute(kieServicesClient, configuration, exchange). }
false;;1;11;;Operation getOperation(Exchange exchange) {     String operation = exchange.getIn().getHeader(JBPMConstants.OPERATION, String.class).     if (operation == null && configuration.getOperation() != null) {         operation = JBPMConstants.OPERATION + configuration.getOperation().     }     if (operation == null) {         operation = JBPMConstants.OPERATION + Operation.startProcess.     }     LOGGER.trace("Operation: [{}]", operation).     return Operation.valueOf(operation.substring(JBPMConstants.OPERATION.length())). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class).     Long processInstance = processClient.startProcess(configuration.getDeploymentId(), getProcessId(configuration, exchange), getParameters(configuration, exchange)).     setResult(exchange, processInstance). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class).     processClient.abortProcessInstance(configuration.getDeploymentId(), safe(getProcessInstanceId(configuration, exchange))). }
false;;3;11;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class).     Long processInstanceId = getProcessInstanceId(configuration, exchange).     if (processInstanceId != null) {         processClient.signalProcessInstance(configuration.getDeploymentId(), processInstanceId, getEventType(configuration, exchange), getEvent(configuration, exchange)).     } else {         processClient.signal(configuration.getDeploymentId(), getEventType(configuration, exchange), getEvent(configuration, exchange)).     } }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class).     ProcessInstance processInstance = processClient.getProcessInstance(configuration.getDeploymentId(), safe(getProcessInstanceId(configuration, exchange))).     setResult(exchange, processInstance). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     QueryServicesClient queryClient = kieServicesClient.getServicesClient(QueryServicesClient.class).     Collection<ProcessInstance> processInstances = queryClient.findProcessInstances(getPage(configuration, exchange), getPageSize(configuration, exchange)).     setResult(exchange, processInstances). }
false;;3;15;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     RuleServicesClient ruleClient = kieServicesClient.getServicesClient(RuleServicesClient.class).     List<Command<?>> commands = new ArrayList<Command<?>>().     BatchExecutionCommand executionCommand = commandsFactory.newBatchExecution(commands).     Integer max = getMaxNumber(configuration, exchange).     if (max != null) {         commands.add(commandsFactory.newFireAllRules(max)).     } else {         commands.add(commandsFactory.newFireAllRules()).     }     ServiceResponse<ExecutionResults> reply = ruleClient.executeCommandsWithResults(configuration.getDeploymentId(), executionCommand).     setResult(exchange, reply.getResult()). }
false;;3;11;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     RuleServicesClient ruleClient = kieServicesClient.getServicesClient(RuleServicesClient.class).     List<Command<?>> commands = new ArrayList<Command<?>>().     BatchExecutionCommand executionCommand = commandsFactory.newBatchExecution(commands).     String identifier = getIdentifier(configuration, exchange).     commands.add(commandsFactory.newGetGlobal(identifier, identifier)).     ServiceResponse<ExecutionResults> reply = ruleClient.executeCommandsWithResults(configuration.getDeploymentId(), executionCommand).     setResult(exchange, reply.getResult().getValue(identifier)). }
false;;3;10;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     RuleServicesClient ruleClient = kieServicesClient.getServicesClient(RuleServicesClient.class).     List<Command<?>> commands = new ArrayList<Command<?>>().     BatchExecutionCommand executionCommand = commandsFactory.newBatchExecution(commands).     commands.add(commandsFactory.newSetGlobal(getIdentifier(configuration, exchange), getValue(configuration, exchange))).     ruleClient.executeCommandsWithResults(configuration.getDeploymentId(), executionCommand). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class).     processClient.abortWorkItem(configuration.getDeploymentId(), safe(getProcessInstanceId(configuration, exchange)), safe(getWorkItemId(configuration, exchange))). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     ProcessServicesClient processClient = kieServicesClient.getServicesClient(ProcessServicesClient.class).     processClient.completeWorkItem(configuration.getDeploymentId(), safe(getProcessInstanceId(configuration, exchange)), safe(getWorkItemId(configuration, exchange)), getParameters(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.activateTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.claimTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.completeAutoProgress(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange), getParameters(configuration, exchange)). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.delegateTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange), getTargetUserId(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.exitTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.failTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange), getParameters(configuration, exchange)). }
false;;3;7;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     TaskAttachment attachment = taskClient.getTaskAttachmentById(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), safe(getAttachmentId(configuration, exchange))).     setResult(exchange, attachment). }
false;;3;7;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     List<TaskSummary> taskSummaries = taskClient.findTasksAssignedAsBusinessAdministrator(getUserId(configuration, exchange), getPage(configuration, exchange), getPageSize(configuration, exchange)).     setResult(exchange, taskSummaries). }
false;;3;7;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     List<TaskSummary> taskSummaries = taskClient.findTasksAssignedAsPotentialOwner(getUserId(configuration, exchange), getStatuses(configuration, exchange), getPage(configuration, exchange), getPageSize(configuration, exchange)).     setResult(exchange, taskSummaries). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     TaskInstance task = taskClient.findTaskByWorkItemId(safe(getWorkItemId(configuration, exchange))).     setResult(exchange, task). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     TaskInstance task = taskClient.findTaskById(safe(getTaskId(configuration, exchange))).     setResult(exchange, task). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     Map<String, Object> content = taskClient.getTaskOutputContentByTaskId(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange))).     setResult(exchange, content). }
false;;3;7;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     List<TaskSummary> processInstanceIds = taskClient.findTasksByStatusByProcessInstanceId(safe(getProcessInstanceId(configuration, exchange)), Collections.emptyList(), getPage(configuration, exchange), getPageSize(configuration, exchange)).     setResult(exchange, processInstanceIds). }
false;;3;8;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     List<TaskSummary> taskSummaryList = taskClient.findTasksByStatusByProcessInstanceId(safe(getProcessInstanceId(configuration, exchange)), getStatuses(configuration, exchange), getPage(configuration, exchange), getPageSize(configuration, exchange)).     setResult(exchange, taskSummaryList). }
false;;3;7;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     List<TaskSummary> summaryList = taskClient.findTasksOwned(getUserId(configuration, exchange), getPage(configuration, exchange), getPageSize(configuration, exchange)).     setResult(exchange, summaryList). }
false;;3;6;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.nominateTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange), getEntities(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.releaseTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.resumeTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.skipTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.startTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.stopTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;3;5;;@Override void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange) {     UserTaskServicesClient taskClient = kieServicesClient.getServicesClient(UserTaskServicesClient.class).     taskClient.suspendTask(configuration.getDeploymentId(), safe(getTaskId(configuration, exchange)), getUserId(configuration, exchange)). }
false;;2;7;;List<String> getStatuses(JBPMConfiguration configuration, Exchange exchange) {     List<String> statusList = exchange.getIn().getHeader(JBPMConstants.STATUS_LIST, List.class).     if (statusList == null) {         statusList = configuration.getStatuses().     }     return statusList. }
false;;2;7;;List<String> getEntities(JBPMConfiguration configuration, Exchange exchange) {     List<String> entityList = exchange.getIn().getHeader(JBPMConstants.ENTITY_LIST, List.class).     if (entityList == null) {         entityList = configuration.getEntities().     }     return entityList. }
false;;2;7;;Long getAttachmentId(JBPMConfiguration configuration, Exchange exchange) {     Long attachmentId = exchange.getIn().getHeader(JBPMConstants.ATTACHMENT_ID, Long.class).     if (attachmentId == null) {         attachmentId = configuration.getAttachmentId().     }     return attachmentId. }
false;;2;7;;Long getContentId(JBPMConfiguration configuration, Exchange exchange) {     Long contentId = exchange.getIn().getHeader(JBPMConstants.CONTENT_ID, Long.class).     if (contentId == null) {         contentId = configuration.getContentId().     }     return contentId. }
false;;2;7;;String getTargetUserId(JBPMConfiguration configuration, Exchange exchange) {     String userId = exchange.getIn().getHeader(JBPMConstants.TARGET_USER_ID, String.class).     if (userId == null) {         userId = configuration.getTargetUserId().     }     return userId. }
false;;2;7;;Integer getPage(JBPMConfiguration configuration, Exchange exchange) {     Integer page = exchange.getIn().getHeader(JBPMConstants.RESULT_PAGE, Integer.class).     if (page == null) {         page = configuration.getPage().     }     return page. }
false;;2;7;;Integer getPageSize(JBPMConfiguration configuration, Exchange exchange) {     Integer pageSize = exchange.getIn().getHeader(JBPMConstants.RESULT_PAGE_SIZE, Integer.class).     if (pageSize == null) {         pageSize = configuration.getPageSize().     }     return pageSize. }
false;;2;7;;Task getTask(JBPMConfiguration configuration, Exchange exchange) {     Task task = exchange.getIn().getHeader(JBPMConstants.TASK, Task.class).     if (task == null) {         task = configuration.getTask().     }     return task. }
false;;2;7;;String getUserId(JBPMConfiguration configuration, Exchange exchange) {     String userId = exchange.getIn().getHeader(JBPMConstants.USER_ID, String.class).     if (userId == null) {         userId = configuration.getUserId().     }     return userId. }
false;;2;7;;Long getTaskId(JBPMConfiguration configuration, Exchange exchange) {     Long taskId = exchange.getIn().getHeader(JBPMConstants.TASK_ID, Long.class).     if (taskId == null) {         taskId = configuration.getTaskId().     }     return taskId. }
false;;2;7;;Long getWorkItemId(JBPMConfiguration configuration, Exchange exchange) {     Long workItemId = exchange.getIn().getHeader(JBPMConstants.WORK_ITEM_ID, Long.class).     if (workItemId == null) {         workItemId = configuration.getWorkItemId().     }     return workItemId. }
false;;2;7;;String getIdentifier(JBPMConfiguration configuration, Exchange exchange) {     String identifier = exchange.getIn().getHeader(JBPMConstants.IDENTIFIER, String.class).     if (identifier == null) {         identifier = configuration.getIdentifier().     }     return identifier. }
false;;2;7;;Integer getMaxNumber(JBPMConfiguration configuration, Exchange exchange) {     Integer max = exchange.getIn().getHeader(JBPMConstants.MAX_NUMBER, Integer.class).     if (max == null) {         max = configuration.getMaxNumber().     }     return max. }
false;;2;7;;Object getEvent(JBPMConfiguration configuration, Exchange exchange) {     Object event = exchange.getIn().getHeader(JBPMConstants.EVENT).     if (event == null) {         event = configuration.getEvent().     }     return event. }
false;;2;7;;String getEventType(JBPMConfiguration configuration, Exchange exchange) {     String eventType = exchange.getIn().getHeader(JBPMConstants.EVENT_TYPE, String.class).     if (eventType == null) {         eventType = configuration.getEventType().     }     return eventType. }
false;;2;7;;String getProcessId(JBPMConfiguration configuration, Exchange exchange) {     String processId = exchange.getIn().getHeader(JBPMConstants.PROCESS_ID, String.class).     if (processId == null) {         processId = configuration.getProcessId().     }     return processId. }
false;;2;7;;Long getProcessInstanceId(JBPMConfiguration configuration, Exchange exchange) {     Long processInstanceId = exchange.getIn().getHeader(JBPMConstants.PROCESS_INSTANCE_ID, Long.class).     if (processInstanceId == null) {         processInstanceId = configuration.getProcessInstanceId().     }     return processInstanceId. }
false;;2;7;;Map<String, Object> getParameters(JBPMConfiguration configuration, Exchange exchange) {     Map<String, Object> parameters = exchange.getIn().getHeader(JBPMConstants.PARAMETERS, Map.class).     if (parameters == null) {         parameters = configuration.getParameters().     }     return parameters. }
false;;2;7;;Object getValue(JBPMConfiguration configuration, Exchange exchange) {     Object value = exchange.getIn().getHeader(JBPMConstants.VALUE).     if (value == null) {         value = configuration.getValue().     }     return value. }
false;;1;3;;Message getResultMessage(Exchange exchange) {     return ExchangeHelper.isOutCapable(exchange) ? exchange.getOut() : exchange.getIn(). }
false;;1;3;;long safe(Long aLong) {     return aLong != null ? aLong : 0. }
false;;2;3;;void setResult(Exchange exchange, Object result) {     getResultMessage(exchange).setBody(result). }
false;abstract;3;1;;abstract void execute(KieServicesClient kieServicesClient, JBPMConfiguration configuration, Exchange exchange).
