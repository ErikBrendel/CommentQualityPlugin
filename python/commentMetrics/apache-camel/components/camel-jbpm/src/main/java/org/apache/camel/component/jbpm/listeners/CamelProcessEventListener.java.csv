commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void beforeProcessStarted(ProcessStartedEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("beforeProcessStarted", event). }
false;public;1;8;;@Override public void afterProcessStarted(ProcessStartedEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("afterProcessStarted", event). }
false;public;1;7;;@Override public void beforeProcessCompleted(ProcessCompletedEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("beforeProcessCompleted", event). }
false;public;1;7;;@Override public void afterProcessCompleted(ProcessCompletedEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("afterProcessCompleted", event). }
false;public;1;7;;@Override public void beforeNodeTriggered(ProcessNodeTriggeredEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("beforeNodeTriggered", event). }
false;public;1;7;;@Override public void afterNodeTriggered(ProcessNodeTriggeredEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("afterNodeTriggered", event). }
false;public;1;7;;@Override public void beforeNodeLeft(ProcessNodeLeftEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("beforeNodeLeft", event). }
false;public;1;7;;@Override public void afterNodeLeft(ProcessNodeLeftEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("afterNodeLeft", event). }
false;public;1;7;;@Override public void beforeVariableChanged(ProcessVariableChangedEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("beforeVariableChanged", event). }
false;public;1;7;;@Override public void afterVariableChanged(ProcessVariableChangedEvent event) {     if (consumers.isEmpty()) {         return.     }     sendMessage("afterVariableChanged", event). }
false;public;0;4;;@Override public void close() { }
false;public;1;4;;@Override public void addConsumer(JBPMConsumer consumer) {     this.consumers.add(consumer). }
false;public;1;4;;@Override public void removeConsumer(JBPMConsumer consumer) {     this.consumers.remove(consumer). }
false;protected;2;3;;protected void sendMessage(String eventType, Object event) {     this.consumers.stream().filter(c -> c.getStatus().isStarted()).forEach(c -> c.sendMessage(eventType, event)). }
