commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new GeoCoderProducer(this). }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Cannot consume from this component"). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public String getLanguage() {     return language. }
true;public;1;3;/**  * The language to use.  */ ;/**  * The language to use.  */ public void setLanguage(String language) {     this.language = language. }
false;public;0;3;;public String getAddress() {     return address. }
true;public;1;3;/**  * The geo address which should be prefixed with <tt>address:</tt>  */ ;/**  * The geo address which should be prefixed with <tt>address:</tt>  */ public void setAddress(String address) {     this.address = address. }
false;public;0;3;;public String getLatlng() {     return latlng. }
true;public;1;3;/**  * The geo latitude and longitude which should be prefixed with <tt>latlng:</tt>  */ ;/**  * The geo latitude and longitude which should be prefixed with <tt>latlng:</tt>  */ public void setLatlng(String latlng) {     this.latlng = latlng. }
false;public;0;3;;public boolean isHeadersOnly() {     return headersOnly. }
true;public;1;3;/**  * Whether to only enrich the Exchange with headers, and leave the body as-is.  */ ;/**  * Whether to only enrich the Exchange with headers, and leave the body as-is.  */ public void setHeadersOnly(boolean headersOnly) {     this.headersOnly = headersOnly. }
false;public;0;3;;public String getClientId() {     return clientId. }
true;public;1;3;/**  * To use google premium with this client id  */ ;/**  * To use google premium with this client id  */ public void setClientId(String clientId) {     this.clientId = clientId. }
false;public;0;3;;public String getClientKey() {     return clientKey. }
true;public;1;3;/**  * To use google premium with this client key  */ ;/**  * To use google premium with this client key  */ public void setClientKey(String clientKey) {     this.clientKey = clientKey. }
false;private;0;3;;private String getApiKey() {     return apiKey. }
true;public;1;3;/**  * To use google apiKey  */ ;/**  * To use google apiKey  */ public void setApiKey(String apiKey) {     this.apiKey = apiKey. }
true;public;1;3;/**  * The proxy host name  */ ;/**  * The proxy host name  */ public void setProxyHost(String proxyHost) {     this.proxyHost = proxyHost. }
false;public;0;3;;public int getProxyPort() {     return proxyPort. }
true;public;1;3;/**  * The proxy port number  */ ;/**  * The proxy port number  */ public void setProxyPort(int proxyPort) {     this.proxyPort = proxyPort. }
false;public;0;3;;public String getProxyAuthMethod() {     return proxyAuthMethod. }
true;public;1;3;/**  * Authentication method for proxy, either as Basic, Digest or NTLM.  */ ;/**  * Authentication method for proxy, either as Basic, Digest or NTLM.  */ public void setProxyAuthMethod(String proxyAuthMethod) {     this.proxyAuthMethod = proxyAuthMethod. }
false;public;0;3;;public String getProxyAuthUsername() {     return proxyAuthUsername. }
true;public;1;3;/**  * Username for proxy authentication  */ ;/**  * Username for proxy authentication  */ public void setProxyAuthUsername(String proxyAuthUsername) {     this.proxyAuthUsername = proxyAuthUsername. }
false;public;0;3;;public String getProxyAuthPassword() {     return proxyAuthPassword. }
true;public;1;3;/**  * Password for proxy authentication  */ ;/**  * Password for proxy authentication  */ public void setProxyAuthPassword(String proxyAuthPassword) {     this.proxyAuthPassword = proxyAuthPassword. }
false;public;0;3;;public String getProxyAuthDomain() {     return proxyAuthDomain. }
true;public;1;3;/**  * Domain for proxy NTML authentication  */ ;/**  * Domain for proxy NTML authentication  */ public void setProxyAuthDomain(String proxyAuthDomain) {     this.proxyAuthDomain = proxyAuthDomain. }
false;public;0;3;;public String getProxyAuthHost() {     return proxyAuthHost. }
true;public;1;3;/**  * Optional host for proxy NTML authentication  */ ;/**  * Optional host for proxy NTML authentication  */ public void setProxyAuthHost(String proxyAuthHost) {     this.proxyAuthHost = proxyAuthHost. }
false;;0;15;;GeoApiContext createGeoApiContext() {     GeoApiContext.Builder builder = new GeoApiContext.Builder().     if (clientId != null) {         builder = builder.enterpriseCredentials(clientId, clientKey).     } else {         builder = builder.apiKey(getApiKey()).     }     if (isProxyDefined()) {         builder = builder.proxy(createProxy()).         if (isProxyAuthDefined()) {             builder = configureProxyAuth(builder).         }     }     return builder.build(). }
false;private;1;9;;private GeoApiContext.Builder configureProxyAuth(GeoApiContext.Builder builder) {     AuthenticationMethod auth = getCamelContext().getTypeConverter().convertTo(AuthenticationMethod.class, proxyAuthMethod).     if (auth == AuthenticationMethod.Basic || auth == AuthenticationMethod.Digest) {         builder = builder.proxyAuthentication(proxyAuthUsername, proxyAuthPassword).     } else {         throw new IllegalArgumentException("Unknown proxyAuthMethod " + proxyAuthMethod).     }     return builder. }
false;private;0;3;;private Proxy createProxy() {     return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort)). }
false;private;0;3;;private boolean isProxyDefined() {     return proxyHost != null && proxyPort != null. }
false;private;0;3;;private boolean isProxyAuthDefined() {     return proxyAuthMethod != null. }
