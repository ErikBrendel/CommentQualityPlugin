commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart().     scheduleSessionListenerChecker(). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     super.doStop().     cancelSessionListenerChecker().     unregisterListenerAndLogoutSession(). }
false;protected;0;4;;protected JcrEndpoint getJcrEndpoint() {     JcrEndpoint endpoint = (JcrEndpoint) getEndpoint().     return endpoint. }
false;private,synchronized;0;56;;private synchronized void createSessionAndRegisterListener() throws RepositoryException {     log.trace("createSessionAndRegisterListener START").     if (ObjectHelper.isEmpty(getJcrEndpoint().getWorkspaceName())) {         session = getJcrEndpoint().getRepository().login(getJcrEndpoint().getCredentials()).     } else {         session = getJcrEndpoint().getRepository().login(getJcrEndpoint().getCredentials(), getJcrEndpoint().getWorkspaceName()).     }     int eventTypes = getJcrEndpoint().getEventTypes().     String absPath = getJcrEndpoint().getBase().     if (absPath == null) {         absPath = "/".     } else if (!absPath.startsWith("/")) {         absPath = "/" + absPath.     }     boolean isDeep = getJcrEndpoint().isDeep().     String[] uuid = null.     String uuids = getJcrEndpoint().getUuids().     if (uuids != null) {         uuids = uuids.trim().         if (!"".equals(uuids)) {             uuid = uuids.split(",").         }     }     String[] nodeTypeName = null.     String nodeTypeNames = getJcrEndpoint().getNodeTypeNames().     if (nodeTypeNames != null) {         nodeTypeNames = nodeTypeNames.trim().         if (!"".equals(nodeTypeNames)) {             nodeTypeName = nodeTypeNames.split(",").         }     }     boolean noLocal = getJcrEndpoint().isNoLocal().     eventListener = new EndpointEventListener(getJcrEndpoint(), getProcessor()).     if (log.isDebugEnabled()) {         log.debug("Adding JCR Event Listener, {}, on {}. eventTypes=" + eventTypes + ", isDeep=" + isDeep + ", uuid=" + Arrays.toString(uuid) + ", nodeTypeName=" + Arrays.toString(nodeTypeName) + ", noLocal=" + noLocal, eventListener, absPath).     }     session.getWorkspace().getObservationManager().addEventListener(eventListener, eventTypes, absPath, isDeep, uuid, nodeTypeName, noLocal).     log.trace("createSessionAndRegisterListener END"). }
false;private,synchronized;0;23;;private synchronized void unregisterListenerAndLogoutSession() throws RepositoryException {     log.trace("unregisterListenerAndLogoutSession START").     if (session != null) {         try {             if (!session.isLive()) {                 log.info("Session was is no more live.").             } else {                 if (eventListener != null) {                     session.getWorkspace().getObservationManager().removeEventListener(eventListener).                     eventListener = null.                 }                 session.logout().             }         } finally {             eventListener = null.             session = null.         }     }     log.trace("unregisterListenerAndLogoutSession END"). }
false;private;0;5;;private void cancelSessionListenerChecker() {     if (sessionListenerCheckerScheduledFuture != null) {         sessionListenerCheckerScheduledFuture.cancel(true).     } }
false;private;0;10;;private void scheduleSessionListenerChecker() {     String name = "JcrConsumerSessionChecker[" + getJcrEndpoint().getEndpointConfiguredDestinationName() + "]".     ScheduledExecutorService executor = getJcrEndpoint().getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, name).     JcrConsumerSessionListenerChecker sessionListenerChecker = new JcrConsumerSessionListenerChecker().     long sessionLiveCheckIntervalOnStart = JcrConsumer.this.getJcrEndpoint().getSessionLiveCheckIntervalOnStart().     long sessionLiveCheckInterval = JcrConsumer.this.getJcrEndpoint().getSessionLiveCheckInterval().     sessionListenerCheckerScheduledFuture = executor.scheduleWithFixedDelay(sessionListenerChecker, sessionLiveCheckIntervalOnStart, sessionLiveCheckInterval, TimeUnit.MILLISECONDS). }
false;public;0;25;;public void run() {     log.debug("JcrConsumerSessionListenerChecker starts.").     boolean isSessionLive = false.     synchronized (this) {         if (JcrConsumer.this.session != null) {             try {                 isSessionLive = JcrConsumer.this.session.isLive().             } catch (Exception e) {                 log.debug("Exception while checking jcr session", e).             }         }     }     if (!isSessionLive) {         try {             createSessionAndRegisterListener().         } catch (RepositoryException e) {             log.error("Failed to create session and register listener", e).         }     }     log.debug("JcrConsumerSessionListenerChecker stops."). }
