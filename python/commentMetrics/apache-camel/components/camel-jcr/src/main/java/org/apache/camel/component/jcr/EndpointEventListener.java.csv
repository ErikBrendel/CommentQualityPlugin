commented;modifiers;parameterAmount;loc;comment;code
false;public;1;27;;public void onEvent(EventIterator events) {     LOG.trace("onEvent START").     LOG.debug("{} consumer received JCR events: {}", endpoint, events).     RuntimeCamelException rce = null.     try {         final Exchange exchange = createExchange(events).         try {             LOG.debug("Processor, {}, is processing exchange, {}", processor, exchange).             processor.process(exchange).         } catch (Exception e) {             exchange.setException(e).         }         rce = exchange.getException(RuntimeCamelException.class).     } catch (Exception e) {         rce = wrapRuntimeCamelException(e).     }     if (rce != null) {         LOG.trace("onEvent END throwing exception: {}", rce.toString()).         throw rce.     }     LOG.trace("onEvent END"). }
false;private;1;13;;private Exchange createExchange(EventIterator events) {     Exchange exchange = endpoint.createExchange().     List<Event> eventList = new LinkedList<>().     if (events != null) {         while (events.hasNext()) {             eventList.add(events.nextEvent()).         }     }     exchange.getIn().setBody(eventList).     return exchange. }
