commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testCreateNodeWithAuthentication() throws Exception {     Exchange exchange = createExchangeWithBody("<message>hello!</message>").     Exchange out = template.send("direct:a", exchange).     assertNotNull(out).     String uuid = out.getOut().getBody(String.class).     assertNull("Expected body to be null, found JCR node UUID", uuid).     assertTrue("Wrong exception type", out.getException() instanceof LoginException). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: jcr     from("direct:a").setHeader(JcrConstants.JCR_NODE_NAME, constant("node")).setHeader("my.contents.property", body()).to("jcr://not-a-user:nonexisting-password@repository" + BASE_REPO_PATH). // END SNIPPET: jcr }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: jcr             from("direct:a").setHeader(JcrConstants.JCR_NODE_NAME, constant("node")).setHeader("my.contents.property", body()).to("jcr://not-a-user:nonexisting-password@repository" + BASE_REPO_PATH).         // END SNIPPET: jcr         }     }. }
