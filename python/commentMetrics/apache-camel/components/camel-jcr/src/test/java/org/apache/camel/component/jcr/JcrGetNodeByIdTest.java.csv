commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Override @Before public void setUp() throws Exception {     super.setUp().     Session session = openSession().     Node node = session.getRootNode().addNode("home").addNode("test").     node.setProperty("content.approved", APPROVED).     node.setProperty("my.contents.property", CONTENT).     ValueFactory valFact = session.getValueFactory().     Value[] vals = new Value[] { valFact.createValue("value-1"), valFact.createValue("value-2") }.     node.setProperty("my.multi.valued", vals).     identifier = node.getIdentifier().     session.save().     session.logout(). }
false;public;0;10;;@Test public void testJcrProducer() throws Exception {     result.expectedMessageCount(1).     result.expectedHeaderReceived("my.contents.property", CONTENT).     result.expectedHeaderReceived("content.approved", APPROVED).     Exchange exchange = createExchangeWithBody(identifier).     template.send("direct:a", exchange).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: jcr-get-node     from("direct:a").setHeader(JcrConstants.JCR_OPERATION, constant(JcrConstants.JCR_GET_BY_ID)).to("jcr://user:pass@repository").to("mock:result"). // END SNIPPET: jcr-get-node }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: jcr-get-node             from("direct:a").setHeader(JcrConstants.JCR_OPERATION, constant(JcrConstants.JCR_GET_BY_ID)).to("jcr://user:pass@repository").to("mock:result").         // END SNIPPET: jcr-get-node         }     }. }
