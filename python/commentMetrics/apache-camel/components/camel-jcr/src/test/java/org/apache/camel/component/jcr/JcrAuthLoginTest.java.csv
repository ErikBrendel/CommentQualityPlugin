commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testCreateNodeWithAuthentication() throws Exception {     Exchange exchange = createExchangeWithBody("<message>hello!</message>").     Exchange out = template.send("direct:a", exchange).     assertNotNull(out).     String uuid = out.getOut().getBody(String.class).     assertNotNull("Out body was null. expected JCR node UUID", uuid).     Session session = getRepository().login(new SimpleCredentials("admin", "admin".toCharArray())).     try {         Node node = session.getNodeByIdentifier(uuid).         assertNotNull(node).         assertEquals(BASE_REPO_PATH + "/node", node.getPath()).     } finally {         if (session != null && session.isLive()) {             session.logout().         }     } }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: jcr     from("direct:a").setHeader(JcrConstants.JCR_NODE_NAME, constant("node")).setHeader("my.contents.property", body()).to("jcr://test:quatloos@repository" + BASE_REPO_PATH). // END SNIPPET: jcr }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: jcr             from("direct:a").setHeader(JcrConstants.JCR_NODE_NAME, constant("node")).setHeader("my.contents.property", body()).to("jcr://test:quatloos@repository" + BASE_REPO_PATH).         // END SNIPPET: jcr         }     }. }
