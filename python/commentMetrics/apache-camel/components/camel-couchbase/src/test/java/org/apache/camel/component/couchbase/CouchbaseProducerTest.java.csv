commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void before() throws Exception {     when(endpoint.getProducerRetryAttempts()).thenReturn(CouchbaseConstants.DEFAULT_PRODUCER_RETRIES).     producer = new CouchbaseProducer(endpoint, client, 0, 0).     when(exchange.getIn()).thenReturn(msg). }
false;public;0;4;;@Test(expected = CouchbaseException.class) public void testBodyMandatory() throws Exception {     producer.process(exchange). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testPersistToLowerThanSupported() throws Exception {     producer = new CouchbaseProducer(endpoint, client, -1, 0). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testPersistToHigherThanSupported() throws Exception {     producer = new CouchbaseProducer(endpoint, client, 5, 0). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testReplicateToLowerThanSupported() throws Exception {     producer = new CouchbaseProducer(endpoint, client, 0, -1). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testReplicateToHigherThanSupported() throws Exception {     producer = new CouchbaseProducer(endpoint, client, 0, 4). }
false;public;0;8;;@Test public void testMaximumValuesForPersistToAndRepicateTo() throws Exception {     try {         producer = new CouchbaseProducer(endpoint, client, 4, 3).     } catch (IllegalArgumentException e) {         Assert.fail("Exception was thrown while testing maximum values for persistTo and replicateTo parameters " + e.getMessage()).     } }
false;public;1;5;;@Override public Object answer(InvocationOnMock invocation) throws Exception {     return true. }
false;public;0;27;;@Test public void testExpiryTimeIsSet() throws Exception {     when(of.get()).thenAnswer(new Answer<Object>() {          @Override         public Object answer(InvocationOnMock invocation) throws Exception {             return true.         }     }).     when(client.set(anyString(), anyInt(), any(), any(), any())).thenReturn(of).     // Mock out some headers so we can set an expiry     int expiry = 5000.     Map<String, Object> testHeaders = new HashMap<>().     testHeaders.put("CCB_TTL", Integer.toString(expiry)).     when(msg.getHeaders()).thenReturn(testHeaders).     when(msg.getHeader(HEADER_TTL, String.class)).thenReturn(Integer.toString(expiry)).     when(endpoint.getId()).thenReturn("123").     when(endpoint.getOperation()).thenReturn("CCB_PUT").     when(exchange.getOut()).thenReturn(msg).     producer.process(exchange).     verify(client).set(anyString(), eq(expiry), any(), any(), any()). }
false;public;1;5;;@Override public Object answer(InvocationOnMock invocation) throws Exception {     throw new RuntimeException("Timed out waiting for operation"). }
false;public;0;22;;@Test public void testTimeOutRetryToException() throws Exception {     when(of.get()).thenAnswer(new Answer<Object>() {          @Override         public Object answer(InvocationOnMock invocation) throws Exception {             throw new RuntimeException("Timed out waiting for operation").         }     }).     when(client.set(anyString(), anyInt(), any(), any(), any())).thenReturn(of).     when(endpoint.getId()).thenReturn("123").     when(endpoint.getOperation()).thenReturn("CCB_PUT").     try {         producer.process(exchange).     } catch (Exception e) {         // do nothing         verify(of, times(3)).get().     } }
false;public;1;4;;@Override public Object answer(InvocationOnMock invocation) throws Exception {     return true. }
false;public;1;4;;@Override public Object answer(InvocationOnMock invocation) throws Exception {     throw new RuntimeException("Timed out waiting for operation"). }
false;public;0;25;;@Test public void testTimeOutRetryThenSuccess() throws Exception {     when(of.get()).thenAnswer(new Answer<Object>() {          @Override         public Object answer(InvocationOnMock invocation) throws Exception {             throw new RuntimeException("Timed out waiting for operation").         }     }).thenAnswer(new Answer<Object>() {          @Override         public Object answer(InvocationOnMock invocation) throws Exception {             return true.         }     }).     when(client.set(anyString(), anyInt(), any(), any(), any())).thenReturn(of).     when(endpoint.getId()).thenReturn("123").     when(endpoint.getOperation()).thenReturn("CCB_PUT").     when(exchange.getOut()).thenReturn(msg).     producer.process(exchange).     verify(of, times(2)).get().     verify(msg).setBody(true). }
false;public;1;4;;@Override public Object answer(InvocationOnMock invocation) throws Exception {     return true. }
false;public;1;4;;@Override public Object answer(InvocationOnMock invocation) throws Exception {     throw new RuntimeException("Timed out waiting for operation"). }
false;public;1;4;;@Override public Object answer(InvocationOnMock invocation) throws Exception {     throw new RuntimeException("Timed out waiting for operation"). }
false;public;0;30;;@Test public void testTimeOutRetryTwiceThenSuccess() throws Exception {     when(of.get()).thenAnswer(new Answer<Object>() {          @Override         public Object answer(InvocationOnMock invocation) throws Exception {             throw new RuntimeException("Timed out waiting for operation").         }     }).thenAnswer(new Answer<Object>() {          @Override         public Object answer(InvocationOnMock invocation) throws Exception {             throw new RuntimeException("Timed out waiting for operation").         }     }).thenAnswer(new Answer<Object>() {          @Override         public Object answer(InvocationOnMock invocation) throws Exception {             return true.         }     }).     when(client.set(anyString(), anyInt(), any(), any(), any())).thenReturn(of).     when(endpoint.getId()).thenReturn("123").     when(endpoint.getOperation()).thenReturn("CCB_PUT").     when(exchange.getOut()).thenReturn(msg).     producer.process(exchange).     verify(of, times(3)).get().     verify(msg).setBody(true). }
