commented;modifiers;parameterAmount;loc;comment;code
false;public;1;34;;@Override public void process(Exchange exchange) throws Exception {     Map<String, Object> headers = exchange.getIn().getHeaders().     String id = (headers.containsKey(HEADER_ID)) ? exchange.getIn().getHeader(HEADER_ID, String.class) : endpoint.getId().     int ttl = (headers.containsKey(HEADER_TTL)) ? Integer.parseInt(exchange.getIn().getHeader(HEADER_TTL, String.class)) : DEFAULT_TTL.     if (endpoint.isAutoStartIdForInserts()) {         id = Long.toString(startId).         startId++.     } else if (id == null) {         throw new CouchbaseException(HEADER_ID + " is not specified in message header or endpoint URL.", exchange).     }     if (endpoint.getOperation().equals(COUCHBASE_PUT)) {         log.info("Type of operation: PUT").         Object obj = exchange.getIn().getBody().         exchange.getOut().setBody(setDocument(id, ttl, obj, persistTo, replicateTo)).     } else if (endpoint.getOperation().equals(COUCHBASE_GET)) {         log.info("Type of operation: GET").         Object result = client.get(id).         exchange.getOut().setBody(result).     } else if (endpoint.getOperation().equals(COUCHBASE_DELETE)) {         log.info("Type of operation: DELETE").         Future<Boolean> result = client.delete(id).         exchange.getOut().setBody(result.get()).     }     // cleanup the cache headers     exchange.getIn().removeHeader(HEADER_ID). }
false;protected;0;7;;@Override protected void doStop() throws Exception {     super.doStop().     if (client != null) {         client.shutdown().     } }
false;private;5;3;;private Boolean setDocument(String id, int expiry, Object obj, PersistTo persistTo, ReplicateTo replicateTo) throws Exception {     return setDocument(id, expiry, obj, producerRetryAttempts, persistTo, replicateTo). }
false;private;6;18;;private Boolean setDocument(String id, int expiry, Object obj, int retryAttempts, PersistTo persistTo, ReplicateTo replicateTo) throws Exception {     OperationFuture<Boolean> result = client.set(id, expiry, obj, persistTo, replicateTo).     try {         if (!result.get()) {             throw new Exception("Unable to save Document. " + id).         }         return true.     } catch (Exception e) {         if (retryAttempts <= 0) {             throw e.         } else {             log.info("Unable to save Document, retrying in " + producerRetryPause + "ms (" + retryAttempts + ")").             Thread.sleep(producerRetryPause).             return setDocument(id, expiry, obj, retryAttempts - 1, persistTo, replicateTo).         }     } }
