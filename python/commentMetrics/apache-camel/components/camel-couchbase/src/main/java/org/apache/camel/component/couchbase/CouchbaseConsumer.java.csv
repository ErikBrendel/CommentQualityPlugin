commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;24;;protected void doInit() {     query.setIncludeDocs(true).     int limit = endpoint.getLimit().     if (limit > 0) {         query.setLimit(limit).     }     int skip = endpoint.getSkip().     if (skip > 0) {         query.setSkip(skip).     }     query.setDescending(endpoint.isDescending()).     String rangeStartKey = endpoint.getRangeStartKey().     String rangeEndKey = endpoint.getRangeEndKey().     if ("".equals(rangeStartKey) || "".equals(rangeEndKey)) {         return.     }     query.setRange(rangeStartKey, rangeEndKey). }
false;protected;0;5;;@Override protected void doStart() throws Exception {     log.info("Starting Couchbase consumer").     super.doStart(). }
false;protected;0;8;;@Override protected void doStop() throws Exception {     log.info("Stopping Couchbase consumer").     super.doStop().     if (client != null) {         client.shutdown().     } }
false;protected,synchronized;0;52;;@Override protected synchronized int poll() throws Exception {     ViewResponse result = client.query(view, query).     log.info("Received result set from Couchbase").     if (log.isTraceEnabled()) {         log.trace("ViewResponse = {}", result).     }     String consumerProcessedStrategy = endpoint.getConsumerProcessedStrategy().     for (ViewRow row : result) {         String id = row.getId().         Object doc = row.getDocument().         String key = row.getKey().         String designDocumentName = endpoint.getDesignDocumentName().         String viewName = endpoint.getViewName().         Exchange exchange = endpoint.createExchange().         exchange.getIn().setBody(doc).         exchange.getIn().setHeader(HEADER_ID, id).         exchange.getIn().setHeader(HEADER_KEY, key).         exchange.getIn().setHeader(HEADER_DESIGN_DOCUMENT_NAME, designDocumentName).         exchange.getIn().setHeader(HEADER_VIEWNAME, viewName).         if ("delete".equalsIgnoreCase(consumerProcessedStrategy)) {             if (log.isTraceEnabled()) {                 log.trace("Deleting doc with ID {}", id).             }             client.delete(id).         } else if ("filter".equalsIgnoreCase(consumerProcessedStrategy)) {             if (log.isTraceEnabled()) {                 log.trace("Filtering out ID {}", id).             }         // add filter for already processed docs         } else {             log.trace("No strategy set for already processed docs, beware of duplicates!").         }         logDetails(id, doc, key, designDocumentName, viewName, exchange).         try {             this.getProcessor().process(exchange).         } catch (Exception e) {             this.getExceptionHandler().handleException("Error processing exchange.", exchange, e).         }     }     return result.size(). }
false;private;6;13;;private void logDetails(String id, Object doc, String key, String designDocumentName, String viewName, Exchange exchange) {     if (log.isTraceEnabled()) {         log.trace("Created exchange = {}", exchange).         log.trace("Added Document in body = {}", doc).         log.trace("Adding to Header").         log.trace("ID = {}", id).         log.trace("Key = {}", key).         log.trace("Design Document Name = {}", designDocumentName).         log.trace("View Name = {}", viewName).     } }
