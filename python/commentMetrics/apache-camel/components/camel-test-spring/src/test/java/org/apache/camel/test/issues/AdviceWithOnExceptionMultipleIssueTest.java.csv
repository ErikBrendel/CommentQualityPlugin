commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/test/issues/AdviceWithOnExceptionMultipleIssueTest.xml"). }
false;public;0;4;;@Override public boolean isUseAdviceWith() {     return true. }
false;public;1;3;;@Override public void process(Exchange exchange) throws Exception { }
false;public;0;8;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:resultA").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {         }     }). }
false;public;0;3;;@Override public void configure() throws Exception { }
false;public;0;25;;@Test public void testSimpleMultipleAdvice() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("RouteA"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:resultA").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                 }             }).         }     }).     RouteReifier.adviceWith(context.getRouteDefinition("RouteB"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {         }     }).     context.start().     getMockEndpoint("mock:resultA").expectedMessageCount(1).     template.sendBody("direct:startA", "a trigger").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new Exception("my exception"). }
false;public;0;9;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:resultA").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new Exception("my exception").         }     }). }
false;public;0;20;;@Test public void testMultipleAdviceWithExceptionThrown() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("RouteA"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:resultA").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     throw new Exception("my exception").                 }             }).         }     }).     context.start().     getMockEndpoint("mock:resultA").expectedMessageCount(0).     template.sendBody("direct:startA", "a trigger").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new Exception("my exception"). }
false;public;0;9;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:resultA").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new Exception("my exception").         }     }). }
false;public;0;3;;@Override public void configure() throws Exception { }
false;public;0;26;;@Test public void testMultipleAdvice() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("RouteA"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:resultA").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     throw new Exception("my exception").                 }             }).         }     }).     RouteReifier.adviceWith(context.getRouteDefinition("RouteB"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {         }     }).     context.start().     getMockEndpoint("mock:resultA").expectedMessageCount(0).     template.sendBody("direct:startA", "a trigger").     assertMockEndpointsSatisfied(). }
