commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Exists primarily for testing purposes, but allows for access to the underlying stop watch instance for a test.  */ ;/**  * Exists primarily for testing purposes, but allows for access to the underlying stop watch instance for a test.  */ public static StopWatch getStopWatch() {     return threadStopWatch.get(). }
false;public;1;5;;@Override public void beforeTestMethod(TestContext testContext) throws Exception {     StopWatch stopWatch = new StopWatch().     threadStopWatch.set(stopWatch). }
false;public;1;15;;@Override public void afterTestMethod(TestContext testContext) throws Exception {     StopWatch watch = threadStopWatch.get().     if (watch != null) {         long time = watch.taken().         Logger log = LoggerFactory.getLogger(testContext.getTestClass()).         log.info("********************************************************************************").         log.info("Testing done: " + testContext.getTestMethod().getName() + "(" + testContext.getTestClass().getName() + ")").         log.info("Took: " + TimeUtils.printDuration(time) + " (" + time + " millis)").         log.info("********************************************************************************").         threadStopWatch.remove().     } }
