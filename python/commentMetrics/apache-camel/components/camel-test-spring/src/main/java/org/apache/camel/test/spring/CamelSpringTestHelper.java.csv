commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static String getOriginalJmxDisabled() {     return originalJmxDisabledValue.get(). }
false;public,static;1;3;;public static void setOriginalJmxDisabledValue(String originalValue) {     originalJmxDisabledValue.set(originalValue). }
false;public,static;0;3;;public static Class<?> getTestClass() {     return testClazz.get(). }
false;public,static;1;3;;public static void setTestClass(Class<?> testClass) {     testClazz.set(testClass). }
false;public,static;0;3;;public static Method getTestMethod() {     return testContext.get().getTestMethod(). }
false;public,static;1;3;;public static void setTestContext(TestContext context) {     testContext.set(context). }
true;public,static;1;11;/**  * Returns all methods defined in {@code clazz} and its superclasses/interfaces.  */ ;/**  * Returns all methods defined in {@code clazz} and its superclasses/interfaces.  */ public static Collection<Method> getAllMethods(Class<?> clazz) {     Set<Method> methods = new LinkedHashSet<>().     Class<?> currentClass = clazz.     while (currentClass != null) {         methods.addAll(Arrays.asList(clazz.getMethods())).         currentClass = currentClass.getSuperclass().     }     return methods. }
true;public,static;2;7;/**  * Executes {@code strategy} against all {@link SpringCamelContext}s found in the Spring context.  * This method reduces the amount of repeated find and loop code throughout this class.  *  * @param context the Spring context to search  * @param strategy the strategy to execute against the found {@link SpringCamelContext}s  *  * @throws Exception if there is an error executing any of the strategies  */ ;/**  * Executes {@code strategy} against all {@link SpringCamelContext}s found in the Spring context.  * This method reduces the amount of repeated find and loop code throughout this class.  *  * @param context the Spring context to search  * @param strategy the strategy to execute against the found {@link SpringCamelContext}s  *  * @throws Exception if there is an error executing any of the strategies  */ public static void doToSpringCamelContexts(ApplicationContext context, DoToSpringCamelContextsStrategy strategy) throws Exception {     Map<String, SpringCamelContext> contexts = context.getBeansOfType(SpringCamelContext.class).     for (Entry<String, SpringCamelContext> entry : contexts.entrySet()) {         strategy.execute(entry.getKey(), entry.getValue()).     } }
false;;2;1;;void execute(String contextName, SpringCamelContext camelContext) throws Exception.
