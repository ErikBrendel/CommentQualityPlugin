commented;modifiers;parameterAmount;loc;comment;code
false;public;1;23;;@Override public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {     Class<?> testClass = getTestClass().     if (logger.isDebugEnabled()) {         logger.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig).     }     // Pre CamelContext(s) instantiation setup     CamelAnnotationsHandler.handleDisableJmx(null, testClass).     try {         SpringCamelContext.setNoStart(true).         System.setProperty("skipStartingCamelContext", "true").         ConfigurableApplicationContext context = (ConfigurableApplicationContext) super.loadContext(mergedConfig).         SpringCamelContext.setNoStart(false).         System.clearProperty("skipStartingCamelContext").         return loadContext(context, testClass).     } finally {         cleanup(testClass).     } }
true;public;2;18;/**  * Performs the bulk of the Spring application context loading/customization.  *  * @param context the partially configured context.  The context should have the bean definitions loaded, but nothing else.  * @param testClass the test class being executed  * @return the initialized (refreshed) Spring application context  *  * @throws Exception if there is an error during initialization/customization  */ ;/**  * Performs the bulk of the Spring application context loading/customization.  *  * @param context the partially configured context.  The context should have the bean definitions loaded, but nothing else.  * @param testClass the test class being executed  * @return the initialized (refreshed) Spring application context  *  * @throws Exception if there is an error during initialization/customization  */ public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {     AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context).     // Post CamelContext(s) instantiation but pre CamelContext(s) start setup     CamelAnnotationsHandler.handleRouteCoverage(context, testClass, s -> getTestMethod().getName()).     CamelAnnotationsHandler.handleProvidesBreakpoint(context, testClass).     CamelAnnotationsHandler.handleShutdownTimeout(context, testClass).     CamelAnnotationsHandler.handleMockEndpoints(context, testClass).     CamelAnnotationsHandler.handleMockEndpointsAndSkip(context, testClass).     CamelAnnotationsHandler.handleUseOverridePropertiesWithPropertiesComponent(context, testClass).     // CamelContext(s) startup     CamelAnnotationsHandler.handleCamelContextStartup(context, testClass).     return context. }
true;protected;1;12;/**  * Cleanup/restore global state to defaults / pre-test values after the test setup  * is complete.  *  * @param testClass the test class being executed  */ ;/**  * Cleanup/restore global state to defaults / pre-test values after the test setup  * is complete.  *  * @param testClass the test class being executed  */ protected void cleanup(Class<?> testClass) {     SpringCamelContext.setNoStart(false).     if (testClass.isAnnotationPresent(DisableJmx.class)) {         if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {             System.clearProperty(JmxSystemPropertyKeys.DISABLED).         } else {             System.setProperty(JmxSystemPropertyKeys.DISABLED, CamelSpringTestHelper.getOriginalJmxDisabled()).         }     } }
true;protected;0;3;/**  * Returns the class under test in order to enable inspection of annotations while the  * Spring context is being created.  *  * @return the test class that is being executed  * @see CamelSpringTestHelper  */ ;/**  * Returns the class under test in order to enable inspection of annotations while the  * Spring context is being created.  *  * @return the test class that is being executed  * @see CamelSpringTestHelper  */ protected Class<?> getTestClass() {     return CamelSpringTestHelper.getTestClass(). }
true;protected;0;3;/**  * Returns the test method under test.  *  * @return the method that is being executed  * @see CamelSpringTestHelper  */ ;/**  * Returns the test method under test.  *  * @return the method that is being executed  * @see CamelSpringTestHelper  */ protected Method getTestMethod() {     return CamelSpringTestHelper.getTestMethod(). }
