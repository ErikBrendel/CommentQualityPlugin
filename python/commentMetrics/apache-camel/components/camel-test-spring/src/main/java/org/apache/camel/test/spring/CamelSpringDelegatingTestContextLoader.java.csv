# id;timestamp;commentText;codeText;commentWords;codeWords
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1345794602;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed__@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1351671692;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1351756296;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1351975322;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1363248313;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1416797412;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1437298046;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)___        logger.info(">>>> I was here <<<<<")___        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,logger,info,i,was,here,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1459168150;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)___        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1460191526;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)___        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1460724619;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)___        _        CamelAnnotationsHandler.handleProvidesBreakpoint(context, testClass)__        CamelAnnotationsHandler.handleShutdownTimeout(context, testClass)__        CamelAnnotationsHandler.handleMockEndpoints(context, testClass)__        CamelAnnotationsHandler.handleMockEndpointsAndSkip(context, testClass)__        CamelAnnotationsHandler.handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        _        _        CamelAnnotationsHandler.handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,camel,annotations,handler,handle,provides,breakpoint,context,test,class,camel,annotations,handler,handle,shutdown,timeout,context,test,class,camel,annotations,handler,handle,mock,endpoints,context,test,class,camel,annotations,handler,handle,mock,endpoints,and,skip,context,test,class,camel,annotations,handler,handle,use,override,properties,with,properties,component,context,test,class,camel,annotations,handler,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1507828883;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)___        _        CamelAnnotationsHandler.handleRouteCoverage(context, testClass, (String) -> getTestMethod().getName())__        CamelAnnotationsHandler.handleProvidesBreakpoint(context, testClass)__        CamelAnnotationsHandler.handleShutdownTimeout(context, testClass)__        CamelAnnotationsHandler.handleMockEndpoints(context, testClass)__        CamelAnnotationsHandler.handleMockEndpointsAndSkip(context, testClass)__        CamelAnnotationsHandler.handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        _        _        CamelAnnotationsHandler.handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,camel,annotations,handler,handle,route,coverage,context,test,class,string,get,test,method,get,name,camel,annotations,handler,handle,provides,breakpoint,context,test,class,camel,annotations,handler,handle,shutdown,timeout,context,test,class,camel,annotations,handler,handle,mock,endpoints,context,test,class,camel,annotations,handler,handle,mock,endpoints,and,skip,context,test,class,camel,annotations,handler,handle,use,override,properties,with,properties,component,context,test,class,camel,annotations,handler,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1508056499;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)___        _        CamelAnnotationsHandler.handleRouteCoverage(context, testClass, s -> getTestMethod().getName())__        CamelAnnotationsHandler.handleProvidesBreakpoint(context, testClass)__        CamelAnnotationsHandler.handleShutdownTimeout(context, testClass)__        CamelAnnotationsHandler.handleMockEndpoints(context, testClass)__        CamelAnnotationsHandler.handleMockEndpointsAndSkip(context, testClass)__        CamelAnnotationsHandler.handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        _        _        CamelAnnotationsHandler.handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,camel,annotations,handler,handle,route,coverage,context,test,class,s,get,test,method,get,name,camel,annotations,handler,handle,provides,breakpoint,context,test,class,camel,annotations,handler,handle,shutdown,timeout,context,test,class,camel,annotations,handler,handle,mock,endpoints,context,test,class,camel,annotations,handler,handle,mock,endpoints,and,skip,context,test,class,camel,annotations,handler,handle,use,override,properties,with,properties,component,context,test,class,camel,annotations,handler,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1527182197;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)___        _        CamelAnnotationsHandler.handleRouteCoverage(context, testClass, s -> getTestMethod().getName())__        CamelAnnotationsHandler.handleProvidesBreakpoint(context, testClass)__        CamelAnnotationsHandler.handleShutdownTimeout(context, testClass)__        CamelAnnotationsHandler.handleMockEndpoints(context, testClass)__        CamelAnnotationsHandler.handleMockEndpointsAndSkip(context, testClass)__        CamelAnnotationsHandler.handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        _        _        CamelAnnotationsHandler.handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,camel,annotations,handler,handle,route,coverage,context,test,class,s,get,test,method,get,name,camel,annotations,handler,handle,provides,breakpoint,context,test,class,camel,annotations,handler,handle,shutdown,timeout,context,test,class,camel,annotations,handler,handle,mock,endpoints,context,test,class,camel,annotations,handler,handle,mock,endpoints,and,skip,context,test,class,camel,annotations,handler,handle,use,override,properties,with,properties,component,context,test,class,camel,annotations,handler,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)         throws Exception;1551254258;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;public ApplicationContext loadContext(ConfigurableApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors((BeanDefinitionRegistry) context)___        _        CamelAnnotationsHandler.handleRouteCoverage(context, testClass, s -> getTestMethod().getName())__        CamelAnnotationsHandler.handleProvidesBreakpoint(context, testClass)__        CamelAnnotationsHandler.handleShutdownTimeout(context, testClass)__        CamelAnnotationsHandler.handleMockEndpoints(context, testClass)__        CamelAnnotationsHandler.handleMockEndpointsAndSkip(context, testClass)__        CamelAnnotationsHandler.handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        _        _        CamelAnnotationsHandler.handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;public,application,context,load,context,configurable,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,bean,definition,registry,context,camel,annotations,handler,handle,route,coverage,context,test,class,s,get,test,method,get,name,camel,annotations,handler,handle,provides,breakpoint,context,test,class,camel,annotations,handler,handle,shutdown,timeout,context,test,class,camel,annotations,handler,handle,mock,endpoints,context,test,class,camel,annotations,handler,handle,mock,endpoints,and,skip,context,test,class,camel,annotations,handler,handle,use,override,properties,with,properties,component,context,test,class,camel,annotations,handler,handle,camel,context,startup,context,test,class,return,context
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1345794602;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1351671692;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1351756296;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1351975322;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1363248313;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1416797412;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1437298046;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1459168150;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1460191526;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1460724619;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1507828883;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1508056499;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1527182197;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void cleanup(Class<?> testClass);1551254258;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1345794602;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                logger.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                logger.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", shutdownTimeout, shutdownTimeUnit, contextName)__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351756296;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                logger.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                logger.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1363248313;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                logger.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                logger.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                logger.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1459168150;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                logger.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460191526;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                logger.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringDelegatingTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        logger.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringDelegatingTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1459168150;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        logger.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringDelegatingTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460191526;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        logger.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1345794602;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1351671692;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1351756296;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1351975322;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1363248313;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1416797412;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1437298046;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1459168150;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1460191526;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                logger.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                logger.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            logger.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1345794602;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351756296;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1363248313;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1459168150;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460191526;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    logger.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1345794602;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351756296;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1363248313;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1459168150;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460191526;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    logger.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1345794602;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1351671692;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1351756296;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1351975322;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1363248313;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1416797412;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1437298046;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1459168150;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1460191526;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1460724619;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1507828883;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1508056499;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1527182197;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected Class<?> getTestClass();1551254258;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1345794602;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351756296;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1363248313;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1459168150;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460191526;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        logger.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,logger,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringDelegatingTestContextLoader -> protected Method getTestMethod();1507828883;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringDelegatingTestContextLoader -> protected Method getTestMethod();1508056499;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringDelegatingTestContextLoader -> protected Method getTestMethod();1527182197;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringDelegatingTestContextLoader -> protected Method getTestMethod();1551254258;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1345794602;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351756296;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1363248313;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1459168150;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringDelegatingTestContextLoader -> protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460191526;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            logger.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                logger.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                logger.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    logger.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,starting,camel,context,with,name,context,name,camel,context,start
