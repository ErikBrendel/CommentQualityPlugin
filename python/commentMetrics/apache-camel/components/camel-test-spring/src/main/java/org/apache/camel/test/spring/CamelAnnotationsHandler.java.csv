# id;timestamp;commentText;codeText;commentWords;codeWords
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460724619;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1461870316;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1527182197;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1540108165;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1550397041;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpointsAndSkip(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOGGER.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,and,skip,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,logger,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460724619;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1461870316;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1527182197;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1540108165;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1550397041;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleMockEndpoints(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                public void execute(String contextName, SpringCamelContext camelContext)_                        throws Exception {_                    LOGGER.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,mock,endpoints,configurable,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460724619;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1461870316;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1527182197;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1540108165;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1550397041;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,logger,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460724619;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1461870316;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1527182197;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1540108165;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1550397041;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleCamelContextStartup(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOGGER.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOGGER.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOGGER.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }__        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {_                public void execute(String contextName,_                                    SpringCamelContext camelContext) throws Exception {_                    if (!camelContext.isStarted()) {_                        LOGGER.info("Starting CamelContext with name [{}].", contextName)__                        camelContext.start()__                    } else {_                        LOGGER.debug("CamelContext with name [{}] already started.", contextName)__                    }_                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,camel,context,startup,configurable,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,logger,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,logger,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,logger,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,if,camel,context,is,started,logger,info,starting,camel,context,with,name,context,name,camel,context,start,else,logger,debug,camel,context,with,name,already,started,context,name
CamelAnnotationsHandler -> public static void handleExcludeRoutesForSpringBoot(Class<?> testClass);1550397041;Handles @ExcludeRoutes to make it easier to exclude other routes when testing with Spring Boot.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleExcludeRoutesForSpringBoot(Class<?> testClass) {_        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class[] routes = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            CollectionStringBuffer csb = new CollectionStringBuffer(",")__            for (Class clazz : routes) {_                csb.append(clazz.getName())__            }_            String key = "CamelTestSpringExcludeRoutes"__            String value = csb.toString()___            String exists = System.getProperty(key)__            if (exists != null) {_                LOGGER.warn("Cannot use @ExcludeRoutes as JVM property " + key + " has already been set.")__            } else {_                LOGGER.info("@ExcludeRoutes annotation found. Setting up JVM property {}={}", key, value)__                System.setProperty(key, value)__            }_        }_    };handles,exclude,routes,to,make,it,easier,to,exclude,other,routes,when,testing,with,spring,boot,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,exclude,routes,for,spring,boot,class,test,class,if,test,class,is,annotation,present,exclude,routes,class,class,routes,test,class,get,annotation,exclude,routes,class,value,collection,string,buffer,csb,new,collection,string,buffer,for,class,clazz,routes,csb,append,clazz,get,name,string,key,camel,test,spring,exclude,routes,string,value,csb,to,string,string,exists,system,get,property,key,if,exists,null,logger,warn,cannot,use,exclude,routes,as,jvm,property,key,has,already,been,set,else,logger,info,exclude,routes,annotation,found,setting,up,jvm,property,key,value,system,set,property,key,value
CamelAnnotationsHandler -> public static void handleExcludeRoutesForSpringBoot(Class<?> testClass);1551254258;Handles @ExcludeRoutes to make it easier to exclude other routes when testing with Spring Boot.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleExcludeRoutesForSpringBoot(Class<?> testClass) {_        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class[] routes = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            CollectionStringBuffer csb = new CollectionStringBuffer(",")__            for (Class clazz : routes) {_                csb.append(clazz.getName())__            }_            String key = "CamelTestSpringExcludeRoutes"__            String value = csb.toString()___            String exists = System.getProperty(key)__            if (exists != null) {_                LOGGER.warn("Cannot use @ExcludeRoutes as JVM property " + key + " has already been set.")__            } else {_                LOGGER.info("@ExcludeRoutes annotation found. Setting up JVM property {}={}", key, value)__                System.setProperty(key, value)__            }_        }_    };handles,exclude,routes,to,make,it,easier,to,exclude,other,routes,when,testing,with,spring,boot,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,exclude,routes,for,spring,boot,class,test,class,if,test,class,is,annotation,present,exclude,routes,class,class,routes,test,class,get,annotation,exclude,routes,class,value,collection,string,buffer,csb,new,collection,string,buffer,for,class,clazz,routes,csb,append,clazz,get,name,string,key,camel,test,spring,exclude,routes,string,value,csb,to,string,string,exists,system,get,property,key,if,exists,null,logger,warn,cannot,use,exclude,routes,as,jvm,property,key,has,already,been,set,else,logger,info,exclude,routes,annotation,found,setting,up,jvm,property,key,value,system,set,property,key,value
CamelAnnotationsHandler -> public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception;1507828883;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty("CamelTestRouteCoverage", "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOGGER.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), testMethod)__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,route,coverage,configurable,application,context,context,class,test,class,function,test,method,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,route,coverage,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,test,method,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelAnnotationsHandler -> public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception;1507982982;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOGGER.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), testMethod)__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,route,coverage,configurable,application,context,context,class,test,class,function,test,method,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,test,method,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelAnnotationsHandler -> public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception;1524063209;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOGGER.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), testMethod)__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,route,coverage,configurable,application,context,context,class,test,class,function,test,method,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,test,method,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelAnnotationsHandler -> public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception;1527182197;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOGGER.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), testMethod)__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,route,coverage,configurable,application,context,context,class,test,class,function,test,method,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,test,method,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelAnnotationsHandler -> public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception;1536517284;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOGGER.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), testMethod)__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,route,coverage,configurable,application,context,context,class,test,class,function,test,method,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,test,method,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelAnnotationsHandler -> public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception;1540108165;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOGGER.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), testMethod)__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,route,coverage,configurable,application,context,context,class,test,class,function,test,method,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,test,method,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelAnnotationsHandler -> public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception;1550397041;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOGGER.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), testMethod)__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,route,coverage,configurable,application,context,context,class,test,class,function,test,method,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,test,method,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelAnnotationsHandler -> public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception;1551254258;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleRouteCoverage(ConfigurableApplicationContext context, Class<?> testClass, Function testMethod) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOGGER.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), testMethod)__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,route,coverage,configurable,application,context,context,class,test,class,function,test,method,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,test,method,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1460724619;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1461870316;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1507828883;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1507982982;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1524063209;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1527182197;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1536517284;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1540108165;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1550397041;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass);1551254258;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleDisableJmx(ConfigurableApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOGGER.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")___            } else {_                LOGGER.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOGGER.info("Disabling Camel JMX globally for tests by default. Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,disable,jmx,configurable,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,logger,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,logger,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,logger,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460724619;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1461870316;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1527182197;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", shutdownTimeout, shutdownTimeUnit, contextName)__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1540108165;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", shutdownTimeout, shutdownTimeUnit, contextName)__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1550397041;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", shutdownTimeout, shutdownTimeUnit, contextName)__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelAnnotationsHandler -> public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;public static void handleShutdownTimeout(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }__        CamelSpringTestHelper.doToSpringCamelContexts(context, new CamelSpringTestHelper.DoToSpringCamelContextsStrategy() {__            public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                LOGGER.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", shutdownTimeout, shutdownTimeUnit, contextName)__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;public,static,void,handle,shutdown,timeout,configurable,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,camel,spring,test,helper,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,logger,info,setting,shutdown,timeout,to,on,camel,context,with,name,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
