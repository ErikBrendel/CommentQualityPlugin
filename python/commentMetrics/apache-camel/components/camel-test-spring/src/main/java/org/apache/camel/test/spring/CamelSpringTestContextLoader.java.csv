# id;timestamp;commentText;codeText;commentWords;codeWords
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1328559040;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Loading ApplicationContext for locations ["_                        + StringUtils.arrayToCommaDelimitedString(locations) + "].")__            }_            _            GenericApplicationContext context = createContext(testClass)__            (new XmlBeanDefinitionReader(context)).loadBeanDefinitions(locations)__            AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__            _            _            handleDisableJmx(context, testClass)___            _            SpringCamelContext.setNoStart(true)__            context.refresh()__            context.registerShutdownHook()__            _            SpringCamelContext.setNoStart(false)__            _            _            handleProvidesBreakpoint(context, testClass)__            handleShutdownTimeout(context, testClass)__            handleMockEndpoints(context, testClass)__            handleLazyLoadTypeConverters(context, testClass)__            _            _            handleCamelContextStartup(context, testClass)__            _            return context__        } finally {_            SpringCamelContext.setNoStart(false)__            _            if (testClass.isAnnotationPresent(DisableJmx.class)) {_                if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                    System.clearProperty(JmxSystemPropertyKeys.DISABLED)__                } else {_                    System.setProperty(JmxSystemPropertyKeys.DISABLED,_                        CamelSpringTestHelper.getOriginalJmxDisabled())__                }_            }_        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,try,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,generic,application,context,context,create,context,test,class,new,xml,bean,definition,reader,context,load,bean,definitions,locations,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context,finally,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1329744445;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Loading ApplicationContext for locations ["_                        + StringUtils.arrayToCommaDelimitedString(locations) + "].")__            }_            _            GenericApplicationContext context = createContext(testClass)__            (new XmlBeanDefinitionReader(context)).loadBeanDefinitions(locations)__            AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__            _            _            handleDisableJmx(context, testClass)___            _            SpringCamelContext.setNoStart(true)__            context.refresh()__            context.registerShutdownHook()__            _            SpringCamelContext.setNoStart(false)__            _            _            handleProvidesBreakpoint(context, testClass)__            handleShutdownTimeout(context, testClass)__            handleMockEndpoints(context, testClass)__            handleLazyLoadTypeConverters(context, testClass)__            _            _            handleCamelContextStartup(context, testClass)__            _            return context__        } finally {_            SpringCamelContext.setNoStart(false)__            _            if (testClass.isAnnotationPresent(DisableJmx.class)) {_                if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                    System.clearProperty(JmxSystemPropertyKeys.DISABLED)__                } else {_                    System.setProperty(JmxSystemPropertyKeys.DISABLED,_                        CamelSpringTestHelper.getOriginalJmxDisabled())__                }_            }_        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,try,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,generic,application,context,context,create,context,test,class,new,xml,bean,definition,reader,context,load,bean,definitions,locations,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context,finally,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1332692086;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Loading ApplicationContext for locations ["_                        + StringUtils.arrayToCommaDelimitedString(locations) + "].")__            }_            _            GenericApplicationContext context = createContext(testClass)__            (new XmlBeanDefinitionReader(context)).loadBeanDefinitions(locations)__            AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__            _            _            handleDisableJmx(context, testClass)___            _            SpringCamelContext.setNoStart(true)__            context.refresh()__            context.registerShutdownHook()__            _            SpringCamelContext.setNoStart(false)__            _            _            handleProvidesBreakpoint(context, testClass)__            handleShutdownTimeout(context, testClass)__            handleMockEndpoints(context, testClass)__            handleLazyLoadTypeConverters(context, testClass)__            _            _            handleCamelContextStartup(context, testClass)__            _            return context__        } finally {_            SpringCamelContext.setNoStart(false)__            _            if (testClass.isAnnotationPresent(DisableJmx.class)) {_                if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                    System.clearProperty(JmxSystemPropertyKeys.DISABLED)__                } else {_                    System.setProperty(JmxSystemPropertyKeys.DISABLED,_                        CamelSpringTestHelper.getOriginalJmxDisabled())__                }_            }_        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,try,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,generic,application,context,context,create,context,test,class,new,xml,bean,definition,reader,context,load,bean,definitions,locations,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context,finally,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1332692092;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        try {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Loading ApplicationContext for locations ["_                        + StringUtils.arrayToCommaDelimitedString(locations) + "].")__            }_            _            GenericApplicationContext context = createContext(testClass)__            (new XmlBeanDefinitionReader(context)).loadBeanDefinitions(locations)__            AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__            _            _            handleDisableJmx(context, testClass)___            _            SpringCamelContext.setNoStart(true)__            context.refresh()__            context.registerShutdownHook()__            _            SpringCamelContext.setNoStart(false)__            _            _            handleProvidesBreakpoint(context, testClass)__            handleShutdownTimeout(context, testClass)__            handleMockEndpoints(context, testClass)__            handleLazyLoadTypeConverters(context, testClass)__            _            _            handleCamelContextStartup(context, testClass)__            _            return context__        } finally {_            SpringCamelContext.setNoStart(false)__            _            if (testClass.isAnnotationPresent(DisableJmx.class)) {_                if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                    System.clearProperty(JmxSystemPropertyKeys.DISABLED)__                } else {_                    System.setProperty(JmxSystemPropertyKeys.DISABLED,_                        CamelSpringTestHelper.getOriginalJmxDisabled())__                }_            }_        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,try,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,generic,application,context,context,create,context,test,class,new,xml,bean,definition,reader,context,load,bean,definitions,locations,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context,finally,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1332778642;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations ["_                    + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1334604644;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations ["_                    + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1341578861;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations ["_                    + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1343393250;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations ["_                    + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1347113703;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations ["_                    + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1351671692;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1351672225;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1351975322;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1405374721;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1416797412;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1437298046;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1460787753;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1500233148;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1507828883;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1507982982;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1508056499;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1524063209;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1536517284;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(String... locations) throws Exception;1551254258;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(String... locations) throws Exception {_        _        Class<?> testClass = getTestClass()___        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for locations [" + StringUtils.arrayToCommaDelimitedString(locations) + "].")__        }_        _        try {_            GenericApplicationContext context = createContext(testClass, null)__            loadBeanDefinitions(context, locations)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,string,locations,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,locations,string,utils,array,to,comma,delimited,string,locations,try,generic,application,context,context,create,context,test,class,null,load,bean,definitions,context,locations,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1405374721;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()___        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1416797412;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()___        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1437298046;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()___        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1460787753;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()___        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1500233148;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()___        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1507828883;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()__        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1507982982;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()__        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1508056499;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()__        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1524063209;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()__        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1536517284;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()__        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig);1551254258;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass, MergedContextConfiguration mergedConfig) {_        ApplicationContext parentContext = null__        GenericApplicationContext routeExcludingContext = null__        _        if (mergedConfig != null) {_            parentContext = mergedConfig.getParentApplicationContext()__        }_        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                if (parentContext == null) {_                    routeExcludingContext = new GenericApplicationContext()__                } else {_                    routeExcludingContext = new GenericApplicationContext(parentContext)__                }_                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            if (parentContext != null) {_                context = new GenericApplicationContext(parentContext)__            } else {_                context = new GenericApplicationContext()__            }_        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,merged,context,configuration,merged,config,application,context,parent,context,null,generic,application,context,route,excluding,context,null,if,merged,config,null,parent,context,merged,config,get,parent,application,context,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,if,parent,context,null,route,excluding,context,new,generic,application,context,else,route,excluding,context,new,generic,application,context,parent,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,if,parent,context,null,context,new,generic,application,context,parent,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1332778642;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug(String.format("Loading ApplicationContext for merged context configuration [%s].",_                mergedConfig))__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,string,format,loading,application,context,for,merged,context,configuration,s,merged,config,try,generic,application,context,context,create,context,test,class,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1334604644;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug(String.format("Loading ApplicationContext for merged context configuration [%s].",_                mergedConfig))__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,string,format,loading,application,context,for,merged,context,configuration,s,merged,config,try,generic,application,context,context,create,context,test,class,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1341578861;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug(String.format("Loading ApplicationContext for merged context configuration [%s].",_                mergedConfig))__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,string,format,loading,application,context,for,merged,context,configuration,s,merged,config,try,generic,application,context,context,create,context,test,class,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1343393250;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug(String.format("Loading ApplicationContext for merged context configuration [%s].",_                mergedConfig))__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,string,format,loading,application,context,for,merged,context,configuration,s,merged,config,try,generic,application,context,context,create,context,test,class,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1347113703;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        _        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug(String.format("Loading ApplicationContext for merged context configuration [%s].",_                mergedConfig))__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,string,format,loading,application,context,for,merged,context,configuration,s,merged,config,try,generic,application,context,context,create,context,test,class,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1351671692;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1351672225;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1351975322;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1405374721;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1416797412;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1437298046;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1460787753;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1500233148;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            prepareContext(context, mergedConfig)__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,prepare,context,context,merged,config,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1507828883;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            prepareContext(context, mergedConfig)__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,prepare,context,context,merged,config,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1507982982;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            prepareContext(context, mergedConfig)__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,prepare,context,context,merged,config,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1508056499;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            prepareContext(context, mergedConfig)__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,prepare,context,context,merged,config,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1524063209;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            prepareContext(context, mergedConfig)__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,prepare,context,context,merged,config,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1536517284;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            prepareContext(context, mergedConfig)__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,prepare,context,context,merged,config,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> @Override     public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1551254258;Modeled after the Spring implementation in {@link AbstractGenericContextLoader},_this method creates and refreshes the application context while providing for_processing of additional Camel specific post-refresh actions.  We do not provide the_pre-post hooks for customization seen in {@link AbstractGenericContextLoader} because_they probably are unnecessary for 90+% of users._<p/>_For some functionality, we cannot use {@link org.springframework.test.context.TestExecutionListener} because we need_to both produce the desired outcome during application context loading, and also cleanup_after ourselves even if the test class never executes.  Thus the listeners, which_only run if the application context is successfully initialized are insufficient to_provide the behavior described above.;@Override_    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_        Class<?> testClass = getTestClass()__        _        if (LOG.isDebugEnabled()) {_            LOG.debug("Loading ApplicationContext for merged context configuration [{}].", mergedConfig)__        }_        _        try {            _            GenericApplicationContext context = createContext(testClass, mergedConfig)__            prepareContext(context, mergedConfig)__            loadBeanDefinitions(context, mergedConfig)__            return loadContext(context, testClass)__        } finally {_            cleanup(testClass)__        }_    };modeled,after,the,spring,implementation,in,link,abstract,generic,context,loader,this,method,creates,and,refreshes,the,application,context,while,providing,for,processing,of,additional,camel,specific,post,refresh,actions,we,do,not,provide,the,pre,post,hooks,for,customization,seen,in,link,abstract,generic,context,loader,because,they,probably,are,unnecessary,for,90,of,users,p,for,some,functionality,we,cannot,use,link,org,springframework,test,context,test,execution,listener,because,we,need,to,both,produce,the,desired,outcome,during,application,context,loading,and,also,cleanup,after,ourselves,even,if,the,test,class,never,executes,thus,the,listeners,which,only,run,if,the,application,context,is,successfully,initialized,are,insufficient,to,provide,the,behavior,described,above;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,class,test,class,get,test,class,if,log,is,debug,enabled,log,debug,loading,application,context,for,merged,context,configuration,merged,config,try,generic,application,context,context,create,context,test,class,merged,config,prepare,context,context,merged,config,load,bean,definitions,context,merged,config,return,load,context,context,test,class,finally,cleanup,test,class
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1328559040;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1329744445;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1332692086;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1332692092;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1332778642;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1334604644;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1341578861;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1343393250;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1347113703;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property " _                    + "skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found "_                        + "and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but "_                        + "isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1351672225;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1405374721;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1460787753;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1500233148;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1508056499;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles starting of Camel contexts based on {@link UseAdviceWith} and other state in the JVM.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleCamelContextStartup(GenericApplicationContext context, Class<?> testClass) throws Exception {_        boolean skip = "true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))__        if (skip) {_            LOG.info("Skipping starting CamelContext(s) as system property skipStartingCamelContext is set to be true.")__        } else if (testClass.isAnnotationPresent(UseAdviceWith.class)) {_            if (testClass.getAnnotation(UseAdviceWith.class).value()) {_                LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found and isUseAdviceWith is set to true.")__                skip = true__            } else {_                LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but isUseAdviceWith is set to false.")__                skip = false__            }_        }_        _        if (!skip) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName,_                        SpringCamelContext camelContext) throws Exception {_                    LOG.info("Starting CamelContext with name [{}].", contextName)__                    camelContext.start()__                }_            })__        }_    };handles,starting,of,camel,contexts,based,on,link,use,advice,with,and,other,state,in,the,jvm,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,camel,context,startup,generic,application,context,context,class,test,class,throws,exception,boolean,skip,true,equals,ignore,case,system,get,property,skip,starting,camel,context,if,skip,log,info,skipping,starting,camel,context,s,as,system,property,skip,starting,camel,context,is,set,to,be,true,else,if,test,class,is,annotation,present,use,advice,with,class,if,test,class,get,annotation,use,advice,with,class,value,log,info,skipping,starting,camel,context,s,as,use,advice,with,annotation,was,found,and,is,use,advice,with,is,set,to,true,skip,true,else,log,info,starting,camel,context,s,as,use,advice,with,annotation,was,found,but,is,use,advice,with,is,set,to,false,skip,false,if,skip,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,starting,camel,context,with,name,context,name,camel,context,start
CamelSpringTestContextLoader -> protected Method getTestMethod();1507828883;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringTestContextLoader -> protected Method getTestMethod();1507982982;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringTestContextLoader -> protected Method getTestMethod();1508056499;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringTestContextLoader -> protected Method getTestMethod();1524063209;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringTestContextLoader -> protected Method getTestMethod();1536517284;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringTestContextLoader -> protected Method getTestMethod();1551254258;Returns the test method under test.__@return the method that is being executed_@see CamelSpringTestHelper;protected Method getTestMethod() {_        return CamelSpringTestHelper.getTestMethod()__    };returns,the,test,method,under,test,return,the,method,that,is,being,executed,see,camel,spring,test,helper;protected,method,get,test,method,return,camel,spring,test,helper,get,test,method
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1351671692;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1351672225;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1351975322;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1405374721;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1416797412;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1437298046;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1460787753;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)___        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1500233148;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)___        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1507828883;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleRouteCoverage(context, testClass)__        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)___        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,route,coverage,context,test,class,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1507982982;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleRouteCoverage(context, testClass)__        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)___        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,route,coverage,context,test,class,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1508056499;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleRouteCoverage(context, testClass)__        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)___        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,route,coverage,context,test,class,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1524063209;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleRouteCoverage(context, testClass)__        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)___        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,route,coverage,context,test,class,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1536517284;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleRouteCoverage(context, testClass)__        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)___        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,route,coverage,context,test,class,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception;1551254258;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed_@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleRouteCoverage(context, testClass)__        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleUseOverridePropertiesWithPropertiesComponent(context, testClass)___        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,route,coverage,context,test,class,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,use,override,properties,with,properties,component,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1328559040;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1329744445;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1332692086;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1332692092;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1332778642;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1334604644;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1341578861;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1343393250;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected Collection<Method> getAllMethods(Class<?> clazz);1347113703;Returns all methods defined in {@code clazz} and its superclasses/interfaces.;protected Collection<Method> getAllMethods(Class<?> clazz)  {_        _        Set<Method> methods = new HashSet<Method>()__        Class<?> currentClass = clazz__        _        while (currentClass != null) {_            methods.addAll(Arrays.asList(clazz.getMethods()))__            currentClass = currentClass.getSuperclass()_ _        }_                _        return methods__    };returns,all,methods,defined,in,code,clazz,and,its,superclasses,interfaces;protected,collection,method,get,all,methods,class,clazz,set,method,methods,new,hash,set,method,class,current,class,clazz,while,current,class,null,methods,add,all,arrays,as,list,clazz,get,methods,current,class,current,class,get,superclass,return,methods
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1328559040;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1329744445;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1332692086;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1332692092;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1332778642;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1334604644;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1341578861;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1343393250;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1347113703;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1351672225;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1405374721;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1460787753;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1500233148;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1508056499;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpoints(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)         throws Exception;1332778642;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed__@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)         throws Exception;1334604644;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed__@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)         throws Exception;1341578861;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed__@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)         throws Exception;1343393250;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed__@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)         throws Exception;1347113703;Performs the bulk of the Spring application context loading/customization.__@param context the partially configured context.  The context should have the bean definitions loaded, but nothing else._@param testClass the test class being executed__@return the initialized (refreshed) Spring application context__@throws Exception if there is an error during initialization/customization;protected ApplicationContext loadContext(GenericApplicationContext context, Class<?> testClass)_        throws Exception {_            _        AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__        _        _        handleDisableJmx(context, testClass)___        _        SpringCamelContext.setNoStart(true)__        context.refresh()__        context.registerShutdownHook()__        _        SpringCamelContext.setNoStart(false)__        _        _        handleProvidesBreakpoint(context, testClass)__        handleShutdownTimeout(context, testClass)__        handleMockEndpoints(context, testClass)__        handleMockEndpointsAndSkip(context, testClass)__        handleLazyLoadTypeConverters(context, testClass)__        _        _        handleCamelContextStartup(context, testClass)__        _        return context__    };performs,the,bulk,of,the,spring,application,context,loading,customization,param,context,the,partially,configured,context,the,context,should,have,the,bean,definitions,loaded,but,nothing,else,param,test,class,the,test,class,being,executed,return,the,initialized,refreshed,spring,application,context,throws,exception,if,there,is,an,error,during,initialization,customization;protected,application,context,load,context,generic,application,context,context,class,test,class,throws,exception,annotation,config,utils,register,annotation,config,processors,context,handle,disable,jmx,context,test,class,spring,camel,context,set,no,start,true,context,refresh,context,register,shutdown,hook,spring,camel,context,set,no,start,false,handle,provides,breakpoint,context,test,class,handle,shutdown,timeout,context,test,class,handle,mock,endpoints,context,test,class,handle,mock,endpoints,and,skip,context,test,class,handle,lazy,load,type,converters,context,test,class,handle,camel,context,startup,context,test,class,return,context
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1334604644;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpoints.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpoints.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1341578861;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1343393250;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpoints} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1347113703;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            _            final String mockEndpoints = testClass.getAnnotation(_                    MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on "_                            + "CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(_                            new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1351672225;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1405374721;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpoints, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpoints, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1460787753;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1500233148;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1508056499;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles auto-intercepting of endpoints with mocks based on {@link MockEndpointsAndSkip} and skipping the_original endpoint.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleMockEndpointsAndSkip(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(MockEndpointsAndSkip.class)) {_            final String mockEndpoints = testClass.getAnnotation(MockEndpointsAndSkip.class).value()__            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    String mockEndpointsValue = camelContext.resolvePropertyPlaceholders(mockEndpoints)__                    LOG.info("Enabling auto mocking and skipping of endpoints matching pattern [{}] on CamelContext with name [{}].", mockEndpointsValue, contextName)__                    camelContext.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(mockEndpointsValue, true))__                }_            })__        }_    };handles,auto,intercepting,of,endpoints,with,mocks,based,on,link,mock,endpoints,and,skip,and,skipping,the,original,endpoint,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,mock,endpoints,and,skip,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,mock,endpoints,and,skip,class,final,string,mock,endpoints,test,class,get,annotation,mock,endpoints,and,skip,class,value,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,string,mock,endpoints,value,camel,context,resolve,property,placeholders,mock,endpoints,log,info,enabling,auto,mocking,and,skipping,of,endpoints,matching,pattern,on,camel,context,with,name,mock,endpoints,value,context,name,camel,context,add,register,endpoint,callback,new,intercept,send,to,mock,endpoint,strategy,mock,endpoints,value,true
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1328559040;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludedClasses))__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1329744445;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludedClasses))__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1332692086;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludedClasses))__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1332692092;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludedClasses))__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1332778642;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludedClasses))__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1334604644;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludedClasses))__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1341578861;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = CastUtils.cast(Arrays.asList(excludedClasses))__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,cast,utils,cast,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1343393250;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1347113703;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed__@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {__        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(_                    ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                _                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found.  Excluding ["_                            + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition(_                        "excludingResolver", new RootBeanDefinition(_                                ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context__        _        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1351671692;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {_        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1351672225;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {_        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> protected GenericApplicationContext createContext(Class<?> testClass);1351975322;Creates and starts the Spring context while optionally starting any loaded Camel contexts.__@param testClass the test class that is being executed_@return the loaded Spring context;protected GenericApplicationContext createContext(Class<?> testClass) {_        GenericApplicationContext routeExcludingContext = null__        _        if (testClass.isAnnotationPresent(ExcludeRoutes.class)) {_            Class<?>[] excludedClasses = testClass.getAnnotation(ExcludeRoutes.class).value()__            _            if (excludedClasses.length > 0) {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Setting up package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found. Excluding [" + StringUtils.arrayToCommaDelimitedString(excludedClasses) + "].")__                }_                _                routeExcludingContext = new GenericApplicationContext()__                routeExcludingContext.registerBeanDefinition("excludingResolver", new RootBeanDefinition(ExcludingPackageScanClassResolver.class))__                routeExcludingContext.refresh()__                _                ExcludingPackageScanClassResolver excludingResolver = routeExcludingContext.getBean("excludingResolver", ExcludingPackageScanClassResolver.class)__                List<Class<?>> excluded = Arrays.asList(excludedClasses)__                excludingResolver.setExcludedClasses(new HashSet<Class<?>>(excluded))__            } else {_                if (LOG.isDebugEnabled()) {_                    LOG.debug("Not enabling package scanning excluded classes as ExcludeRoutes "_                            + "annotation was found but no classes were excluded.")__                }_            }_        }_        _        GenericApplicationContext context___        if (routeExcludingContext != null) {_            context = new GenericApplicationContext(routeExcludingContext)__        } else {_            context = new GenericApplicationContext()__        }_        _        return context__    };creates,and,starts,the,spring,context,while,optionally,starting,any,loaded,camel,contexts,param,test,class,the,test,class,that,is,being,executed,return,the,loaded,spring,context;protected,generic,application,context,create,context,class,test,class,generic,application,context,route,excluding,context,null,if,test,class,is,annotation,present,exclude,routes,class,class,excluded,classes,test,class,get,annotation,exclude,routes,class,value,if,excluded,classes,length,0,if,log,is,debug,enabled,log,debug,setting,up,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,excluding,string,utils,array,to,comma,delimited,string,excluded,classes,route,excluding,context,new,generic,application,context,route,excluding,context,register,bean,definition,excluding,resolver,new,root,bean,definition,excluding,package,scan,class,resolver,class,route,excluding,context,refresh,excluding,package,scan,class,resolver,excluding,resolver,route,excluding,context,get,bean,excluding,resolver,excluding,package,scan,class,resolver,class,list,class,excluded,arrays,as,list,excluded,classes,excluding,resolver,set,excluded,classes,new,hash,set,class,excluded,else,if,log,is,debug,enabled,log,debug,not,enabling,package,scanning,excluded,classes,as,exclude,routes,annotation,was,found,but,no,classes,were,excluded,generic,application,context,context,if,route,excluding,context,null,context,new,generic,application,context,route,excluding,context,else,context,new,generic,application,context,return,context
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1328559040;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1329744445;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1332692086;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1332692092;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1332778642;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1334604644;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1341578861;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1343393250;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1347113703;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1351671692;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1351672225;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1351975322;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1405374721;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1416797412;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1437298046;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1460787753;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1500233148;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1507828883;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1507982982;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1508056499;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1524063209;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1536517284;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> @Override     public String getResourceSuffix();1551254258;Returns &quot_<code>-context.xml</code>&quot_.;@Override_    public String getResourceSuffix() {_        return "-context.xml"__    };returns,quot,code,context,xml,code,quot;override,public,string,get,resource,suffix,return,context,xml
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1332778642;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1334604644;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1341578861;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1343393250;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1347113703;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1351671692;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1351672225;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1351975322;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1405374721;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1416797412;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1437298046;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1460787753;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1500233148;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1507828883;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1507982982;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1508056499;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1524063209;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1536517284;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void cleanup(Class<?> testClass);1551254258;Cleanup/restore global state to defaults / pre-test values after the test setup_is complete.__@param testClass the test class being executed;protected void cleanup(Class<?> testClass) {_        SpringCamelContext.setNoStart(false)__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (CamelSpringTestHelper.getOriginalJmxDisabled() == null) {_                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            } else {_                System.setProperty(JmxSystemPropertyKeys.DISABLED,_                    CamelSpringTestHelper.getOriginalJmxDisabled())__            }_        }_    };cleanup,restore,global,state,to,defaults,pre,test,values,after,the,test,setup,is,complete,param,test,class,the,test,class,being,executed;protected,void,cleanup,class,test,class,spring,camel,context,set,no,start,false,if,test,class,is,annotation,present,disable,jmx,class,if,camel,spring,test,helper,get,original,jmx,disabled,null,system,clear,property,jmx,system,property,keys,disabled,else,system,set,property,jmx,system,property,keys,disabled,camel,spring,test,helper,get,original,jmx,disabled
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1328559040;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1329744445;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1332692086;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1332692092;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1332778642;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1334604644;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1341578861;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1343393250;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1347113703;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed_@param log the logger to use_@param statics if static methods or instance methods should be processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_            _        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            _            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null, new Object[] {}))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_        _            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    _                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info(_                                 "Adding Breakpoint [{}] to CamelContext with name [{}].",_                                 breakpoint, contextName)__                        _                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,param,log,the,logger,to,use,param,statics,if,static,methods,or,instance,methods,should,be,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,new,object,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1351672225;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1405374721;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1460787753;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1500233148;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1508056499;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<Breakpoint>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,breakpoint,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles the processing of the {@link ProvidesBreakpoint} annotation on a test class.  Exists here_as it is needed in__@param context the initialized Spring context containing the Camel context(s) to insert breakpoints into_@param testClass the test class being processed__@throws Exception if there is an error processing the class;protected void handleProvidesBreakpoint(GenericApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Breakpoint> breakpoints = new LinkedList<>()__        _        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, ProvidesBreakpoint.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length != 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not a no-argument method.")__                } else if (!Breakpoint.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but does not return a Breakpoint.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                           + "] is annotated with ProvidesBreakpoint but is not public.")__                }_                _                try {_                    breakpoints.add((Breakpoint) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                           + "] threw exception during evaluation.", e)__                }_            }_        }_        _        if (breakpoints.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                _                @Override_                public void execute(String contextName, SpringCamelContext camelContext)_                    throws Exception {_                    Debugger debugger = camelContext.getDebugger()__                    if (debugger == null) {_                        debugger = new DefaultDebugger()__                        camelContext.setDebugger(debugger)__                    }_                    _                    for (Breakpoint breakpoint : breakpoints) {_                        LOG.info("Adding Breakpoint [{}] to CamelContext with name [{}].", breakpoint, contextName)__                        debugger.addBreakpoint(breakpoint)__                    }_                }_            })__        }_    };handles,the,processing,of,the,link,provides,breakpoint,annotation,on,a,test,class,exists,here,as,it,is,needed,in,param,context,the,initialized,spring,context,containing,the,camel,context,s,to,insert,breakpoints,into,param,test,class,the,test,class,being,processed,throws,exception,if,there,is,an,error,processing,the,class;protected,void,handle,provides,breakpoint,generic,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,breakpoint,breakpoints,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,provides,breakpoint,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,a,no,argument,method,else,if,breakpoint,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,does,not,return,a,breakpoint,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,provides,breakpoint,but,is,not,public,try,breakpoints,add,breakpoint,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,breakpoints,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,debugger,debugger,camel,context,get,debugger,if,debugger,null,debugger,new,default,debugger,camel,context,set,debugger,debugger,for,breakpoint,breakpoint,breakpoints,log,info,adding,breakpoint,to,camel,context,with,name,breakpoint,context,name,debugger,add,breakpoint,breakpoint
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1328559040;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1329744445;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1332692086;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1332692092;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1332778642;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1334604644;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1341578861;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1343393250;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1347113703;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1351671692;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1351672225;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1351975322;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1405374721;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1416797412;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1437298046;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1460787753;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1500233148;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1507828883;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1507982982;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1508056499;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1524063209;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1536517284;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected Class<?> getTestClass();1551254258;Returns the class under test in order to enable inspection of annotations while the_Spring context is being created.__@return the test class that is being executed_@see CamelSpringTestHelper;protected Class<?> getTestClass() {_        return CamelSpringTestHelper.getTestClass()__    };returns,the,class,under,test,in,order,to,enable,inspection,of,annotations,while,the,spring,context,is,being,created,return,the,test,class,that,is,being,executed,see,camel,spring,test,helper;protected,class,get,test,class,return,camel,spring,test,helper,get,test,class
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1460787753;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1500233148;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1508056499;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<Properties>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,properties,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles override this method to include and override properties with the Camel {@link org.apache.camel.component.properties.PropertiesComponent}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleUseOverridePropertiesWithPropertiesComponent(ConfigurableApplicationContext context, Class<?> testClass) throws Exception {_        Collection<Method> methods = getAllMethods(testClass)__        final List<Properties> properties = new LinkedList<>()___        for (Method method : methods) {_            if (AnnotationUtils.findAnnotation(method, UseOverridePropertiesWithPropertiesComponent.class) != null) {_                Class<?>[] argTypes = method.getParameterTypes()__                if (argTypes.length > 0) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.")__                } else if (!Properties.class.isAssignableFrom(method.getReturnType())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.")__                } else if (!Modifier.isStatic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.")__                } else if (!Modifier.isPublic(method.getModifiers())) {_                    throw new IllegalArgumentException("Method [" + method.getName()_                            + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.")__                }__                try {_                    properties.add((Properties) method.invoke(null))__                } catch (Exception e) {_                    throw new RuntimeException("Method [" + method.getName()_                            + "] threw exception during evaluation.", e)__                }_            }_        }__        if (properties.size() != 0) {_            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class)__                    Properties extra = new Properties()__                    for (Properties prop : properties) {_                        extra.putAll(prop)__                    }_                    if (!extra.isEmpty()) {_                        LOG.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].", extra.size(), contextName)__                        pc.setOverrideProperties(extra)__                    }_                }_            })__        }_    };handles,override,this,method,to,include,and,override,properties,with,the,camel,link,org,apache,camel,component,properties,properties,component,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,use,override,properties,with,properties,component,configurable,application,context,context,class,test,class,throws,exception,collection,method,methods,get,all,methods,test,class,final,list,properties,properties,new,linked,list,for,method,method,methods,if,annotation,utils,find,annotation,method,use,override,properties,with,properties,component,class,null,class,arg,types,method,get,parameter,types,if,arg,types,length,0,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,a,no,argument,method,else,if,properties,class,is,assignable,from,method,get,return,type,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,does,not,return,a,java,util,properties,else,if,modifier,is,static,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,static,else,if,modifier,is,public,method,get,modifiers,throw,new,illegal,argument,exception,method,method,get,name,is,annotated,with,use,override,properties,with,properties,component,but,is,not,public,try,properties,add,properties,method,invoke,null,catch,exception,e,throw,new,runtime,exception,method,method,get,name,threw,exception,during,evaluation,e,if,properties,size,0,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,properties,component,pc,camel,context,get,component,properties,properties,component,class,properties,extra,new,properties,for,properties,prop,properties,extra,put,all,prop,if,extra,is,empty,log,info,using,properties,to,override,any,existing,properties,on,the,properties,component,on,camel,context,with,name,extra,size,context,name,pc,set,override,properties,extra
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1328559040;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1329744445;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1332692086;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1332692092;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1332778642;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1334604644;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1341578861;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1343393250;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1347113703;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(_                System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found "_                        + "and disableJmx is set to true.")__                _                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__                _            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found "_                        + "and disableJmx is set to false.")__                _                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to "_                    + "override the default setting.")__            _            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1351671692;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1351672225;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1351975322;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1405374721;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1416797412;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1437298046;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1460787753;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1500233148;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))__        _        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else {_            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1507828883;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else if (!testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            _            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,if,test,class,is,annotation,present,enable,route,coverage,class,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1507982982;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else if (!testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            _            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,if,test,class,is,annotation,present,enable,route,coverage,class,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1508056499;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else if (!testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            _            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,if,test,class,is,annotation,present,enable,route,coverage,class,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1524063209;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else if (!testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            _            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,if,test,class,is,annotation,present,enable,route,coverage,class,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1536517284;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else if (!testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            _            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,if,test,class,is,annotation,present,enable,route,coverage,class,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass);1551254258;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleDisableJmx(GenericApplicationContext context, Class<?> testClass) {_        CamelSpringTestHelper.setOriginalJmxDisabledValue(System.getProperty(JmxSystemPropertyKeys.DISABLED))___        if (testClass.isAnnotationPresent(DisableJmx.class)) {_            if (testClass.getAnnotation(DisableJmx.class).value()) {_                LOG.info("Disabling Camel JMX globally as DisableJmx annotation was found and disableJmx is set to true.")__                System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__            } else {_                LOG.info("Enabling Camel JMX as DisableJmx annotation was found and disableJmx is set to false.")__                System.clearProperty(JmxSystemPropertyKeys.DISABLED)__            }_        } else if (!testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            _            LOG.info("Disabling Camel JMX globally for tests by default.  Use the DisableJMX annotation to override the default setting.")__            System.setProperty(JmxSystemPropertyKeys.DISABLED, "true")__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,disable,jmx,generic,application,context,context,class,test,class,camel,spring,test,helper,set,original,jmx,disabled,value,system,get,property,jmx,system,property,keys,disabled,if,test,class,is,annotation,present,disable,jmx,class,if,test,class,get,annotation,disable,jmx,class,value,log,info,disabling,camel,jmx,globally,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,true,system,set,property,jmx,system,property,keys,disabled,true,else,log,info,enabling,camel,jmx,as,disable,jmx,annotation,was,found,and,disable,jmx,is,set,to,false,system,clear,property,jmx,system,property,keys,disabled,else,if,test,class,is,annotation,present,enable,route,coverage,class,log,info,disabling,camel,jmx,globally,for,tests,by,default,use,the,disable,jmx,annotation,to,override,the,default,setting,system,set,property,jmx,system,property,keys,disabled,true
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1328559040;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1329744445;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1332692086;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1332692092;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1332778642;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1334604644;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1341578861;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1343393250;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1347113703;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        _        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                _                LOG.info(_                        "Setting shutdown timeout to [{} {}] on CamelContext with name [{}].",_                        new Object[] {shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1351671692;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", shutdownTimeout, shutdownTimeUnit, contextName)__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1351672225;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1351975322;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1405374721;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1416797412;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1437298046;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1460787753;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1500233148;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1508056499;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", new Object[]{shutdownTimeout, shutdownTimeUnit, contextName})__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,new,object,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", shutdownTimeout, shutdownTimeUnit, contextName)__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles updating shutdown timeouts on Camel contexts based on {@link ShutdownTimeout}.__@param context the initialized Spring context_@param testClass the test class being executed;protected void handleShutdownTimeout(GenericApplicationContext context, Class<?> testClass) throws Exception {_        final int shutdownTimeout__        final TimeUnit shutdownTimeUnit__        if (testClass.isAnnotationPresent(ShutdownTimeout.class)) {_            shutdownTimeout = testClass.getAnnotation(ShutdownTimeout.class).value()__            shutdownTimeUnit = testClass.getAnnotation(ShutdownTimeout.class).timeUnit()__        } else {_            shutdownTimeout = 10__            shutdownTimeUnit = TimeUnit.SECONDS__        }_        _        CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {_            _            @Override_            public void execute(String contextName, SpringCamelContext camelContext)_                throws Exception {_                LOG.info("Setting shutdown timeout to [{} {}] on CamelContext with name [{}].", shutdownTimeout, shutdownTimeUnit, contextName)__                camelContext.getShutdownStrategy().setTimeout(shutdownTimeout)__                camelContext.getShutdownStrategy().setTimeUnit(shutdownTimeUnit)__            }_        })__    };handles,updating,shutdown,timeouts,on,camel,contexts,based,on,link,shutdown,timeout,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;protected,void,handle,shutdown,timeout,generic,application,context,context,class,test,class,throws,exception,final,int,shutdown,timeout,final,time,unit,shutdown,time,unit,if,test,class,is,annotation,present,shutdown,timeout,class,shutdown,timeout,test,class,get,annotation,shutdown,timeout,class,value,shutdown,time,unit,test,class,get,annotation,shutdown,timeout,class,time,unit,else,shutdown,timeout,10,shutdown,time,unit,time,unit,seconds,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,setting,shutdown,timeout,to,on,camel,context,with,name,shutdown,timeout,shutdown,time,unit,context,name,camel,context,get,shutdown,strategy,set,timeout,shutdown,timeout,camel,context,get,shutdown,strategy,set,time,unit,shutdown,time,unit
CamelSpringTestContextLoader -> private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception;1507828883;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty("CamelTestRouteCoverage", "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOG.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), (String) -> getTestMethod().getName())__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;private,void,handle,route,coverage,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,route,coverage,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,string,get,test,method,get,name,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelSpringTestContextLoader -> private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception;1507982982;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOG.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), (String) -> getTestMethod().getName())__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;private,void,handle,route,coverage,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,string,get,test,method,get,name,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelSpringTestContextLoader -> private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception;1508056499;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOG.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), s -> getTestMethod().getName())__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;private,void,handle,route,coverage,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,s,get,test,method,get,name,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelSpringTestContextLoader -> private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception;1524063209;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOG.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), s -> getTestMethod().getName())__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;private,void,handle,route,coverage,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,s,get,test,method,get,name,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelSpringTestContextLoader -> private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception;1536517284;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOG.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), s -> getTestMethod().getName())__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;private,void,handle,route,coverage,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,s,get,test,method,get,name,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
CamelSpringTestContextLoader -> private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception;1551254258;Handles disabling of JMX on Camel contexts based on {@link DisableJmx}.__@param context the initialized Spring context_@param testClass the test class being executed;private void handleRouteCoverage(GenericApplicationContext context, Class<?> testClass) throws Exception {_        if (testClass.isAnnotationPresent(EnableRouteCoverage.class)) {_            System.setProperty(CamelTestSupport.ROUTE_COVERAGE_ENABLED, "true")___            CamelSpringTestHelper.doToSpringCamelContexts(context, new DoToSpringCamelContextsStrategy() {__                @Override_                public void execute(String contextName, SpringCamelContext camelContext) throws Exception {_                    LOG.info("Enabling RouteCoverage")__                    EventNotifier notifier = new RouteCoverageEventNotifier(testClass.getName(), s -> getTestMethod().getName())__                    camelContext.addService(notifier, true)__                    camelContext.getManagementStrategy().addEventNotifier(notifier)__                }_            })__        }_    };handles,disabling,of,jmx,on,camel,contexts,based,on,link,disable,jmx,param,context,the,initialized,spring,context,param,test,class,the,test,class,being,executed;private,void,handle,route,coverage,generic,application,context,context,class,test,class,throws,exception,if,test,class,is,annotation,present,enable,route,coverage,class,system,set,property,camel,test,support,true,camel,spring,test,helper,do,to,spring,camel,contexts,context,new,do,to,spring,camel,contexts,strategy,override,public,void,execute,string,context,name,spring,camel,context,camel,context,throws,exception,log,info,enabling,route,coverage,event,notifier,notifier,new,route,coverage,event,notifier,test,class,get,name,s,get,test,method,get,name,camel,context,add,service,notifier,true,camel,context,get,management,strategy,add,event,notifier,notifier
