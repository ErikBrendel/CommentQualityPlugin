commented;modifiers;parameterAmount;loc;comment;code
false;public;1;28;;@Override public void prepareTestInstance(TestContext testContext) throws Exception {     LOG.info("@RunWith(CamelSpringBootRunner.class) preparing: {}", testContext.getTestClass()).     Class<?> testClass = testContext.getTestClass().     // need to prepare this before we load spring application context     CamelAnnotationsHandler.handleExcludeRoutesForSpringBoot(testClass).     // we are customizing the Camel context with     // CamelAnnotationsHandler so we do not want to start it     // automatically, which would happen when SpringCamelContext     // is added to Spring ApplicationContext, so we set the flag     // not to start it just yet     SpringCamelContext.setNoStart(true).     System.setProperty("skipStartingCamelContext", "true").     ConfigurableApplicationContext context = (ConfigurableApplicationContext) testContext.getApplicationContext().     // Post CamelContext(s) instantiation but pre CamelContext(s) start setup     CamelAnnotationsHandler.handleProvidesBreakpoint(context, testClass).     CamelAnnotationsHandler.handleShutdownTimeout(context, testClass).     CamelAnnotationsHandler.handleMockEndpoints(context, testClass).     CamelAnnotationsHandler.handleMockEndpointsAndSkip(context, testClass).     CamelAnnotationsHandler.handleUseOverridePropertiesWithPropertiesComponent(context, testClass).     System.clearProperty("skipStartingCamelContext").     SpringCamelContext.setNoStart(false). }
false;public;1;19;;@Override public void beforeTestMethod(TestContext testContext) throws Exception {     LOG.info("@RunWith(CamelSpringBootRunner.class) before: {}.{}", testContext.getTestClass(), testContext.getTestMethod().getName()).     Class<?> testClass = testContext.getTestClass().     String testName = testContext.getTestMethod().getName().     ConfigurableApplicationContext context = (ConfigurableApplicationContext) testContext.getApplicationContext().     threadApplicationContext.set(context).     // mark Camel to be startable again and start Camel     System.clearProperty("skipStartingCamelContext").     // route coverage need to know the test method     CamelAnnotationsHandler.handleRouteCoverage(context, testClass, s -> testName).     LOG.info("Initialized CamelSpringBootRunner now ready to start CamelContext").     CamelAnnotationsHandler.handleCamelContextStartup(context, testClass). }
false;public;1;14;;@Override public void afterTestMethod(TestContext testContext) throws Exception {     LOG.info("@RunWith(CamelSpringBootRunner.class) after: {}.{}", testContext.getTestClass(), testContext.getTestMethod().getName()).     Class<?> testClass = testContext.getTestClass().     String testName = testContext.getTestMethod().getName().     ConfigurableApplicationContext context = threadApplicationContext.get().     if (context != null && context.isRunning()) {         // dump route coverage for each test method so its accurate statistics         // even if spring application context is running (i.e. its not dirtied per test method)         CamelAnnotationsHandler.handleRouteCoverageDump(context, testClass, s -> testName).     } }
