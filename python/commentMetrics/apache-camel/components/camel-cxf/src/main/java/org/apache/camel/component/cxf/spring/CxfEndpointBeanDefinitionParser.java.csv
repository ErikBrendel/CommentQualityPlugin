commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element arg0) {     return CxfSpringEndpoint.class. }
false;private;1;7;;private boolean isSpringPlaceHolder(String value) {     if (value != null && (value.startsWith("${") && value.endsWith("}")) || value.startsWith("{{") && value.endsWith("}}")) {         return true.     }     return false. }
false;protected;3;10;;@Override protected boolean parseAttributes(Element element, ParserContext ctx, BeanDefinitionBuilder bean) {     boolean addedBus = super.parseAttributes(element, ctx, bean).     final String bus = element.getAttribute("bus").     if (!addedBus && !StringUtils.isEmpty(bus)) {         bean.addPropertyReference("bus", bus.startsWith("#") ? bus.substring(1) : bus).         addedBus = true.     }     return addedBus. }
false;protected;4;14;;@Override protected void mapAttribute(BeanDefinitionBuilder bean, Element e, String name, String val) {     if ("endpointName".equals(name) || "serviceName".equals(name)) {         if (isSpringPlaceHolder(val)) {             // set the property with the String value directly             mapToProperty(bean, name + "String", val).         } else {             QName q = parseQName(e, val).             bean.addPropertyValue(name, q).         }     } else {         mapToProperty(bean, name, val).     } }
false;protected;4;21;;@Override protected void mapElement(ParserContext ctx, BeanDefinitionBuilder bean, Element el, String name) {     if ("properties".equals(name)) {         Map<String, Object> map = CastUtils.cast(ctx.getDelegate().parseMapElement(el, bean.getBeanDefinition())).         Map<String, Object> props = getPropertyMap(bean, false).         if (props != null) {             map.putAll(props).         }         bean.addPropertyValue("properties", map).     } else if ("binding".equals(name)) {         setFirstChildAsProperty(el, ctx, bean, "bindingConfig").     } else if ("inInterceptors".equals(name) || "inFaultInterceptors".equals(name) || "outInterceptors".equals(name) || "outFaultInterceptors".equals(name) || "features".equals(name) || "schemaLocations".equals(name) || "handlers".equals(name)) {         List<?> list = ctx.getDelegate().parseListElement(el, bean.getBeanDefinition()).         bean.addPropertyValue(name, list).     } else {         setFirstChildAsProperty(el, ctx, bean, name).     } }
