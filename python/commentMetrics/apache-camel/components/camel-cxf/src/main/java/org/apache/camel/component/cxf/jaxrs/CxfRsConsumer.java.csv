commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;30;;protected Server createServer() {     CxfRsEndpoint endpoint = (CxfRsEndpoint) getEndpoint().     CxfRsInvoker cxfRsInvoker = new CxfRsInvoker(endpoint, this).     JAXRSServerFactoryBean svrBean = endpoint.createJAXRSServerFactoryBean().     Bus bus = endpoint.getBus().     // We need to apply the bus setting from the CxfRsEndpoint which does not use the default bus     if (bus != null) {         svrBean.setBus(bus).     }     svrBean.setInvoker(cxfRsInvoker).     // setup the UnitOfWorkCloserInterceptor for OneWayMessageProcessor     svrBean.getInInterceptors().add(new UnitOfWorkCloserInterceptor(Phase.POST_INVOKE, true)).     // close the UnitOfWork normally     svrBean.getOutInterceptors().add(new UnitOfWorkCloserInterceptor()).     Server server = svrBean.create().     final MessageObserver originalOutFaultObserver = server.getEndpoint().getOutFaultObserver().     // proxy OutFaultObserver so we can close org.apache.camel.spi.UnitOfWork in case of error     server.getEndpoint().setOutFaultObserver(message -> {         CxfUtils.closeCamelUnitOfWork(message).         originalOutFaultObserver.onMessage(message).     }).     return server. }
false;protected;0;8;;@Override protected void doStart() throws Exception {     super.doStart().     if (server == null) {         server = createServer().     }     server.start(). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     if (server != null) {         server.stop().         server.destroy().         server = null.     }     super.doStop(). }
false;public;0;3;;public Server getServer() {     return server. }
