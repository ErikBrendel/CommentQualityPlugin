# id;timestamp;commentText;codeText;commentWords;codeWords
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1384505817;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1396497149;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1405374721;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1415211488;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1436782228;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1464443754;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1465978890;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1476946116;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1486501673;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1498820121;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1523968798;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1527562880;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1528633215;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1536605520;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1540108160;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (log.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    log.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1540108161;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (log.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    log.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1540108163;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (log.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    log.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1540108716;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (log.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    log.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1542904331;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (log.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    log.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1547630961;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (log.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    log.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1548175645;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body == null) {_                return new Object[0]__            }_            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (log.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    log.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,null,return,new,object,0,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1232329721;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        Map<String, Object> requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(DataFormat.class.getName(), dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__ _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, _                ((WrappedMessageContext)requestContext).getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,map,string,object,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,data,format,class,get,name,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,wrapped,message,context,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1232436983;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        Map<String, Object> requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(DataFormat.class.getName(), dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__ _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, _                ((WrappedMessageContext)requestContext).getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,map,string,object,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,data,format,class,get,name,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,wrapped,message,context,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1236881068;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(DataFormat.class.getName(), dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__ _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,data,format,class,get,name,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1237743794;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__ _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1238035325;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1243588852;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1248888853;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1258542329;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1260951120;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        if (LOG.isTraceEnabled()) {_            LOG.trace("BOI = " + boi)__        }_        _        ObjectHelper.notNull(boi, "You should set '" + CxfConstants.OPERATION_NAME _                + "' in header.")__        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,if,log,is,trace,enabled,log,trace,boi,boi,object,helper,not,null,boi,you,should,set,cxf,constants,in,header,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1264023724;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        ObjectHelper.notNull(boi, "BindingOperationInfo")__        _        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }_        _        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,object,helper,not,null,boi,binding,operation,info,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1264388451;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        ObjectHelper.notNull(boi, "BindingOperationInfo")__        _        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }_        _        _        if (!endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_        _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            _            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,object,helper,not,null,boi,binding,operation,info,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,if,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1273137734;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        ObjectHelper.notNull(boi, "BindingOperationInfo")__        _        _        if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {_            boi = boi.getWrappedOperation()__            cxfExchange.put(BindingOperationInfo.class, boi)__            _        } _        _        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }__        _        if (dataFormat != DataFormat.PAYLOAD && !endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_     _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            _            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,object,helper,not,null,boi,binding,operation,info,if,data,format,data,format,payload,boi,is,unwrapped,boi,boi,get,wrapped,operation,cxf,exchange,put,binding,operation,info,class,boi,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,if,data,format,data,format,payload,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1275479067;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        ObjectHelper.notNull(boi, "BindingOperationInfo")__        _        _        if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {_            boi = boi.getWrappedOperation()__            cxfExchange.put(BindingOperationInfo.class, boi)__            _        } _        _        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }__        _        if (dataFormat != DataFormat.PAYLOAD && !endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_     _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            _            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,object,helper,not,null,boi,binding,operation,info,if,data,format,data,format,payload,boi,is,unwrapped,boi,boi,get,wrapped,operation,cxf,exchange,put,binding,operation,info,class,boi,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,if,data,format,data,format,payload,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1275534327;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        CxfEndpoint endpoint = (CxfEndpoint)getEndpoint()__        CxfBinding binding = endpoint.getCxfBinding()__        _        _        WrappedMessageContext requestContext = new WrappedMessageContext(_                new HashMap<String, Object>(), null, Scope.APPLICATION)__        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        _        DataFormat dataFormat = endpoint.getDataFormat()__        camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, dataFormat)_   _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() _                    + "=" + dataFormat)__        }_        _        _        requestContext.put(DataFormat.class.getName(), dataFormat)___        _        if (dataFormat == DataFormat.MESSAGE) {_            cxfExchange.put(Client.KEEP_CONDUIT_ALIVE, true)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE  _                        + "=" + true)__            }_        }_        _        _        BindingOperationInfo boi = getBindingOperationInfo(camelExchange)__        ObjectHelper.notNull(boi, "BindingOperationInfo")__        _        _        if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {_            boi = boi.getWrappedOperation()__            cxfExchange.put(BindingOperationInfo.class, boi)__            _        } _        _        _        camelExchange.setProperty(BindingOperationInfo.class.getName(), boi)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange property: BindingOperationInfo: " + boi)__        }__        _        if (dataFormat != DataFormat.PAYLOAD && !endpoint.isWrapped() && boi != null) {_            if (boi.isUnwrappedCapable()) {_                boi = boi.getUnwrappedOperation()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Unwrapped BOI " + boi)__                }_            }_        }_     _        _        binding.populateCxfRequestFromExchange(cxfExchange, camelExchange, _                requestContext)__        _        _        _        _        requestContext.getScopes().remove(Message.PROTOCOL_HEADERS)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, requestContext.getWrappedMap())___        _        client.invoke(boi, getParams(endpoint, camelExchange), _                invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            _            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,endpoint,endpoint,cxf,endpoint,get,endpoint,cxf,binding,binding,endpoint,get,cxf,binding,wrapped,message,context,request,context,new,wrapped,message,context,new,hash,map,string,object,null,scope,application,map,string,object,response,context,new,hash,map,string,object,data,format,data,format,endpoint,get,data,format,camel,exchange,set,property,cxf,constants,data,format,if,log,is,trace,enabled,log,trace,set,camel,exchange,property,data,format,class,get,name,data,format,request,context,put,data,format,class,get,name,data,format,if,data,format,data,format,message,cxf,exchange,put,client,true,if,log,is,trace,enabled,log,trace,set,cxf,exchange,property,client,true,binding,operation,info,boi,get,binding,operation,info,camel,exchange,object,helper,not,null,boi,binding,operation,info,if,data,format,data,format,payload,boi,is,unwrapped,boi,boi,get,wrapped,operation,cxf,exchange,put,binding,operation,info,class,boi,camel,exchange,set,property,binding,operation,info,class,get,name,boi,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,boi,if,data,format,data,format,payload,endpoint,is,wrapped,boi,null,if,boi,is,unwrapped,capable,boi,boi,get,unwrapped,operation,if,log,is,trace,enabled,log,trace,unwrapped,boi,boi,binding,populate,cxf,request,from,exchange,cxf,exchange,camel,exchange,request,context,request,context,get,scopes,remove,message,map,string,object,invocation,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,request,context,get,wrapped,map,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1279807842;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        _        client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            _            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__            endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1280124068;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        _        client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            _            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__            endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1281733067;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange)__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        _        client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            _            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__            endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1283308369;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        _        client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        _        _        if (!boi.getOperationInfo().isOneWay()) {_            _            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__            endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                    responseContext)__        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1285591075;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1286104048;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1291649338;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        Client client = clientCache.get(CxfEndpointUtils.getEffectiveAddress(camelExchange, endpoint.getAddress()))___        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange, client)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__                _        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange, client), _                      invocationContext, cxfExchange)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,client,client,client,cache,get,cxf,endpoint,utils,get,effective,address,camel,exchange,endpoint,get,address,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,client,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,client,invocation,context,cxf,exchange,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1291762322;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1292390154;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1292508270;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__                if (camelExchange.getException() != null) {_                    _                    camelExchange.getOut().setFault(true)__                    camelExchange.getOut().setBody(camelExchange.getException())__                }_            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context,if,camel,exchange,get,exception,null,camel,exchange,get,out,set,fault,true,camel,exchange,get,out,set,body,camel,exchange,get,exception
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1294434260;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__                if (camelExchange.getException() != null) {_                    _                    camelExchange.getOut().setFault(true)__                    camelExchange.getOut().setBody(camelExchange.getException())__                }_            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context,if,camel,exchange,get,exception,null,camel,exchange,get,out,set,fault,true,camel,exchange,get,out,set,body,camel,exchange,get,exception
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1295354132;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__                if (camelExchange.getException() != null) {_                    _                    camelExchange.getOut().setFault(true)__                    camelExchange.getOut().setBody(camelExchange.getException())__                }_            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context,if,camel,exchange,get,exception,null,camel,exchange,get,out,set,fault,true,camel,exchange,get,out,set,body,camel,exchange,get,exception
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1296200008;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__                if (camelExchange.getException() != null) {_                    _                    camelExchange.getOut().setFault(true)__                    camelExchange.getOut().setBody(camelExchange.getException())__                }_            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context,if,camel,exchange,get,exception,null,camel,exchange,get,out,set,fault,true,camel,exchange,get,out,set,body,camel,exchange,get,exception
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1296546062;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__                if (camelExchange.getException() != null) {_                    _                    camelExchange.getOut().setFault(true)__                    camelExchange.getOut().setBody(camelExchange.getException())__                }_            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context,if,camel,exchange,get,exception,null,camel,exchange,get,out,set,fault,true,camel,exchange,get,out,set,body,camel,exchange,get,exception
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1296558142;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__                if (camelExchange.getException() != null) {_                    _                    camelExchange.getOut().setFault(true)__                    camelExchange.getOut().setBody(camelExchange.getException())__                }_            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context,if,camel,exchange,get,exception,null,camel,exchange,get,out,set,fault,true,camel,exchange,get,out,set,body,camel,exchange,get,exception
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1297969159;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Process exchange: " + camelExchange + "in sync way.")__        }_        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__                if (camelExchange.getException() != null) {_                    _                    camelExchange.getOut().setFault(true)__                    camelExchange.getOut().setBody(camelExchange.getException())__                }_            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,if,log,is,trace,enabled,log,trace,process,exchange,camel,exchange,in,sync,way,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context,if,camel,exchange,get,exception,null,camel,exchange,get,out,set,fault,true,camel,exchange,get,out,set,body,camel,exchange,get,exception
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1301257798;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__                if (camelExchange.getException() != null) {_                    _                    camelExchange.getOut().setFault(true)__                    camelExchange.getOut().setBody(camelExchange.getException())__                }_            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context,if,camel,exchange,get,exception,null,camel,exchange,get,out,set,fault,true,camel,exchange,get,out,set,body,camel,exchange,get,exception
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1305715826;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1307014084;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1307685726;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1308239620;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)__        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1315566940;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1316063056;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1324871517;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1326207413;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1330059707;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1334545037;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1337261712;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1337266008;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1337793117;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1374682271;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1375756072;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1375759861;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1384505817;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                _                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1396497149;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1405374721;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1415211488;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1436782228;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1464443754;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1465978890;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1476946116;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfExchange.getInMessage().get(Message.PROTOCOL_HEADERS))__                    endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                } catch (IOException e) {_                    LOG.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,exchange,get,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1486501673;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfExchange.getInMessage().get(Message.PROTOCOL_HEADERS))__                    endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                } catch (IOException e) {_                    LOG.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,exchange,get,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1498820121;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<String, Object>()__        Map<String, Object> responseContext = new HashMap<String, Object>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    LOG.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,string,object,map,string,object,response,context,new,hash,map,string,object,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1523968798;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    LOG.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1527562880;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    LOG.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1528633215;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    LOG.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1536605520;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        LOG.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    LOG.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1540108160;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        log.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    log.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1540108161;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        log.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    log.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1540108163;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        log.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    log.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1540108716;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        log.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    log.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1542904331;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        log.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    log.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1547630961;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        log.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    log.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public void process(Exchange camelExchange) throws Exception;1548175645;This processor binds Camel exchange to a CXF exchange and_invokes the CXF client.;public void process(Exchange camelExchange) throws Exception {_        log.trace("Process exchange: {} in sync way.", camelExchange)__        _        _        ExchangeImpl cxfExchange = new ExchangeImpl()__        _        cxfExchange.put(Bus.class, endpoint.getBus())__        _        _        BindingOperationInfo boi = prepareBindingOperation(camelExchange, cxfExchange)__        _        Map<String, Object> invocationContext = new HashMap<>()__        Map<String, Object> responseContext = new HashMap<>()__        invocationContext.put(Client.RESPONSE_CONTEXT, responseContext)__        invocationContext.put(Client.REQUEST_CONTEXT, prepareRequest(camelExchange, cxfExchange))__        _        try {_            _            client.invoke(boi, getParams(endpoint, camelExchange), _                      invocationContext, cxfExchange)___        } catch (Exception exception) {_            camelExchange.setException(exception)__        } finally {_            _            if (endpoint.getCookieHandler() != null) {_                try {_                    Message inMessage = cxfExchange.getInMessage()__                    if (inMessage != null) {_                        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)inMessage.get(Message.PROTOCOL_HEADERS))__                        endpoint.getCookieHandler().storeCookies(camelExchange, endpoint.getRequestUri(camelExchange), cxfHeaders)__                    }_                } catch (IOException e) {_                    log.error("Cannot store cookies", e)__                }_            }_            _            if (!boi.getOperationInfo().isOneWay()) {_                endpoint.getCxfBinding().populateExchangeFromCxfResponse(camelExchange, cxfExchange,_                        responseContext)__            }_        }_    };this,processor,binds,camel,exchange,to,a,cxf,exchange,and,invokes,the,cxf,client;public,void,process,exchange,camel,exchange,throws,exception,log,trace,process,exchange,in,sync,way,camel,exchange,exchange,impl,cxf,exchange,new,exchange,impl,cxf,exchange,put,bus,class,endpoint,get,bus,binding,operation,info,boi,prepare,binding,operation,camel,exchange,cxf,exchange,map,string,object,invocation,context,new,hash,map,map,string,object,response,context,new,hash,map,invocation,context,put,client,response,context,invocation,context,put,client,prepare,request,camel,exchange,cxf,exchange,try,client,invoke,boi,get,params,endpoint,camel,exchange,invocation,context,cxf,exchange,catch,exception,exception,camel,exchange,set,exception,exception,finally,if,endpoint,get,cookie,handler,null,try,message,in,message,cxf,exchange,get,in,message,if,in,message,null,map,string,list,string,cxf,headers,cast,utils,cast,map,in,message,get,message,endpoint,get,cookie,handler,store,cookies,camel,exchange,endpoint,get,request,uri,camel,exchange,cxf,headers,catch,ioexception,e,log,error,cannot,store,cookies,e,if,boi,get,operation,info,is,one,way,endpoint,get,cxf,binding,populate,exchange,from,cxf,response,camel,exchange,cxf,exchange,response,context
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1232329721;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1232436983;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1236881068;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1237743794;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1238035325;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1243588852;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1248888853;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1258542329;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1260951120;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1264023724;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1264388451;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1273137734;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1275479067;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1275534327;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1279807842;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1280124068;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1281733067;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1283308369;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1285591075;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1286104048;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1291649338;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        clientCache = new ClientCache(endpoint.getMaxClientCacheSize())__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,cache,new,client,cache,endpoint,get,max,client,cache,size
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1291762322;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1292390154;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1292508270;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1294434260;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1295354132;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1296200008;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1296546062;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1296558142;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1297969159;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1301257798;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1305715826;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1307014084;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1307685726;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1308239620;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1315566940;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1316063056;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1324871517;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1326207413;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__        client = endpoint.createClient()__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint,client,endpoint,create,client
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1330059707;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1334545037;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1337261712;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1337266008;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1337793117;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1374682271;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1375756072;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1375759861;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1384505817;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1396497149;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1405374721;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1415211488;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1436782228;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1464443754;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1465978890;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1476946116;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1486501673;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1498820121;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1523968798;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1527562880;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1528633215;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1536605520;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1540108160;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1540108161;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1540108163;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1540108716;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1542904331;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1547630961;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> public CxfProducer(CxfEndpoint endpoint) throws Exception;1548175645;Constructor to create a CxfProducer.  It will create a CXF client_object.__@param endpoint a CxfEndpoint that creates this producer_@throws Exception any exception thrown during the creation of a_CXF client;public CxfProducer(CxfEndpoint endpoint) throws Exception {_        super(endpoint)__        this.endpoint = endpoint__    };constructor,to,create,a,cxf,producer,it,will,create,a,cxf,client,object,param,endpoint,a,cxf,endpoint,that,creates,this,producer,throws,exception,any,exception,thrown,during,the,creation,of,a,cxf,client;public,cxf,producer,cxf,endpoint,endpoint,throws,exception,super,endpoint,this,endpoint,endpoint
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1286104048;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1291762322;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1292390154;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1292508270;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1294434260;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1295354132;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1296200008;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1296546062;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1296558142;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1297969159;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1301257798;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1305715826;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1307014084;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1307685726;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1308239620;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1315566940;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1316063056;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1324871517;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1326207413;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1330059707;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException;1334545037;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1232329721;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_        _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                params = new Object[0]__            }_        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,params,new,object,0,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1232436983;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_        _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                params = new Object[0]__            }_        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,params,new,object,0,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1236881068;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_        _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                params = new Object[0]__            }_        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,params,new,object,0,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1237743794;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_        _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                params = new Object[0]__            }_        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,params,new,object,0,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1238035325;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_        _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                params = new Object[0]__            }_        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,params,new,object,0,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1243588852;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_        _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                params = new Object[0]__            }_        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,params,new,object,0,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1248888853;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_        _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                params = new Object[0]__            }_        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,params,new,object,0,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1258542329;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {__        __        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1260951120;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1264023724;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1264388451;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1273137734;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1275479067;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1275534327;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1279807842;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1280124068;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1281733067;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1283308369;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private Object[] getParams(CxfEndpoint endpoint, Exchange exchange);1285591075;Get the parameters for the web service operation;private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            List<?> list = exchange.getIn().getBody(List.class)__            if (list != null) {_                params = list.toArray()__            } else {_                _                _                Iterator it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            checkParameterSize(endpoint, exchange, params)__            _        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            _            params[0] = exchange.getIn().getBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params instanceof Object[]) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[" + i + "] = " + params[i])__                }_            } else {_                LOG.trace("params = " + params)__            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,object,params,null,if,endpoint,get,data,format,data,format,pojo,list,list,exchange,get,in,get,body,list,class,if,list,null,params,list,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,body,input,stream,class,if,log,is,trace,enabled,if,params,instanceof,object,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,else,log,trace,params,params,return,params
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1232329721;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1232436983;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1236881068;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1237743794;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1238035325;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1243588852;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1248888853;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1258542329;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1260951120;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1264023724;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1264388451;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1273137734;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        _        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }__            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1275479067;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1275534327;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1279807842;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1280124068;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1281733067;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1283308369;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1285591075;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1286104048;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1291762322;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1292390154;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1292508270;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1294434260;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1295354132;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1296200008;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1296546062;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1296558142;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1297969159;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Operation namespace not in header.  Set it to: " + ns)__                }_            }            __            QName qname = new QName(ns, lp)___            if (LOG.isTraceEnabled()) {_                LOG.trace("Operation qname = " + qname.toString())__            }_            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,if,log,is,trace,enabled,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,if,log,is,trace,enabled,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1301257798;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1305715826;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1307014084;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            if (LOG.isDebugEnabled()) {_                LOG.debug("Try to find a default operation.  You should set '" _                        + CxfConstants.OPERATION_NAME + "' in header.")__            }_            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,if,log,is,debug,enabled,log,debug,try,to,find,a,default,operation,you,should,set,cxf,constants,in,header,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1307685726;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1308239620;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1315566940;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1316063056;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1324871517;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1326207413;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1330059707;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1334545037;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1337261712;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1337266008;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1337793117;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1374682271;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1375756072;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1375759861;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1384505817;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1396497149;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("Try to find a default operation. You should set '{}' in header.", CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,try,to,find,a,default,operation,you,should,set,in,header,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1405374721;Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.info("CxfProducer cannot find the {} from message header, try to use the defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.info("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,info,cxf,producer,cannot,find,the,from,message,header,try,to,use,the,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,info,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1415211488;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1436782228;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1464443754;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1465978890;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1476946116;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1486501673;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1498820121;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1523968798;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1527562880;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1528633215;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname.toString())__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,to,string,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1536605520;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            LOG.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                LOG.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            LOG.trace("Operation qname = {}", qname)__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1540108160;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                log.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            log.trace("Operation qname = {}", qname)__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1540108161;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                log.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            log.trace("Operation qname = {}", qname)__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1540108163;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                log.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            log.trace("Operation qname = {}", qname)__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1540108716;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                log.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            log.trace("Operation qname = {}", qname)__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1542904331;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                log.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            log.trace("Operation qname = {}", qname)__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1547630961;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                log.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            log.trace("Operation qname = {}", qname)__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> private BindingOperationInfo getBindingOperationInfo(Exchange ex);1548175645;<p>Get operation name from header and use it to lookup and return a_{@link BindingOperationInfo}.</p>_<p>CxfProducer lookups the operation name lookup with below order, and it uses the first found one which is not null:</p>_<ul>_<li> Using the in message header "operationName". </li>_<li> Using the defaultOperationName option value from the CxfEndpoint. </li>_<li> Using the first operation which is find from the CxfEndpoint Operations list. </li>_<ul>;private BindingOperationInfo getBindingOperationInfo(Exchange ex) {_        CxfEndpoint endpoint = (CxfEndpoint)this.getEndpoint()__        BindingOperationInfo answer = null__        String lp = ex.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class)__        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header, trying with defaultOperationName", CxfConstants.OPERATION_NAME)__            lp = endpoint.getDefaultOperationName()__        }_        if (lp == null) {_            log.debug("CxfProducer cannot find the {} from message header and there is no DefaultOperationName setting, CxfProducer will pick up the first available operation.",_                     CxfConstants.OPERATION_NAME)__            Collection<BindingOperationInfo> bois = _                client.getEndpoint().getEndpointInfo().getBinding().getOperations()__            _            Iterator<BindingOperationInfo> iter = bois.iterator()_ _            if (iter.hasNext()) {_                answer = iter.next()__            }_            _        } else {_            String ns = ex.getIn().getHeader(CxfConstants.OPERATION_NAMESPACE, String.class)__            if (ns == null) {_                ns = endpoint.getDefaultOperationNamespace()__            }_            if (ns == null) {_                ns = client.getEndpoint().getService().getName().getNamespaceURI()__                log.trace("Operation namespace not in header. Set it to: {}", ns)__            }            __            QName qname = new QName(ns, lp)___            log.trace("Operation qname = {}", qname)__            _            answer = client.getEndpoint().getEndpointInfo().getBinding().getOperation(qname)__            if (answer == null) {_                throw new IllegalArgumentException("Can't find the BindingOperationInfo with operation name " + qname_                                                   + ". Please check the message headers of operationName and operationNamespace.")_ _            }_        }_        return answer__    };p,get,operation,name,from,header,and,use,it,to,lookup,and,return,a,link,binding,operation,info,p,p,cxf,producer,lookups,the,operation,name,lookup,with,below,order,and,it,uses,the,first,found,one,which,is,not,null,p,ul,li,using,the,in,message,header,operation,name,li,li,using,the,default,operation,name,option,value,from,the,cxf,endpoint,li,li,using,the,first,operation,which,is,find,from,the,cxf,endpoint,operations,list,li,ul;private,binding,operation,info,get,binding,operation,info,exchange,ex,cxf,endpoint,endpoint,cxf,endpoint,this,get,endpoint,binding,operation,info,answer,null,string,lp,ex,get,in,get,header,cxf,constants,string,class,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,trying,with,default,operation,name,cxf,constants,lp,endpoint,get,default,operation,name,if,lp,null,log,debug,cxf,producer,cannot,find,the,from,message,header,and,there,is,no,default,operation,name,setting,cxf,producer,will,pick,up,the,first,available,operation,cxf,constants,collection,binding,operation,info,bois,client,get,endpoint,get,endpoint,info,get,binding,get,operations,iterator,binding,operation,info,iter,bois,iterator,if,iter,has,next,answer,iter,next,else,string,ns,ex,get,in,get,header,cxf,constants,string,class,if,ns,null,ns,endpoint,get,default,operation,namespace,if,ns,null,ns,client,get,endpoint,get,service,get,name,get,namespace,uri,log,trace,operation,namespace,not,in,header,set,it,to,ns,qname,qname,new,qname,ns,lp,log,trace,operation,qname,qname,answer,client,get,endpoint,get,endpoint,info,get,binding,get,operation,qname,if,answer,null,throw,new,illegal,argument,exception,can,t,find,the,binding,operation,info,with,operation,name,qname,please,check,the,message,headers,of,operation,name,and,operation,namespace,return,answer
CxfProducer -> @SuppressWarnings("deprecation")     private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1337261712;Get the parameters for the web service operation;@SuppressWarnings("deprecation")_    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;suppress,warnings,deprecation,private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,data,format,message,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> @SuppressWarnings("deprecation")     private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1337266008;Get the parameters for the web service operation;@SuppressWarnings("deprecation")_    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;suppress,warnings,deprecation,private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> @SuppressWarnings("deprecation")     private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1337793117;Get the parameters for the web service operation;@SuppressWarnings("deprecation")_    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;suppress,warnings,deprecation,private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> @SuppressWarnings("deprecation")     private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1374682271;Get the parameters for the web service operation;@SuppressWarnings("deprecation")_    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;suppress,warnings,deprecation,private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> @SuppressWarnings("deprecation")     private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1375756072;Get the parameters for the web service operation;@SuppressWarnings("deprecation")_    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;suppress,warnings,deprecation,private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
CxfProducer -> @SuppressWarnings("deprecation")     private Object[] getParams(CxfEndpoint endpoint, Exchange exchange)          throws org.apache.camel.InvalidPayloadException;1375759861;Get the parameters for the web service operation;@SuppressWarnings("deprecation")_    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) _        throws org.apache.camel.InvalidPayloadException {_      _        Object[] params = null__        if (endpoint.getDataFormat() == DataFormat.POJO) {_            Object body = exchange.getIn().getBody()__            if (body instanceof Object[]) {_                params = (Object[])body__            } else if (body instanceof List) {_                _                params = ((List<?>)body).toArray()__            } else {_                _                _                Iterator<?> it = exchange.getIn().getBody(Iterator.class)__                if (it != null && it.hasNext()) {_                    List<?> list = exchange.getContext().getTypeConverter().convertTo(List.class, it)__                    if (list != null) {_                        params = list.toArray()__                    }_                }_                if (params == null) {_                    _                    params = new Object[1]__                    params[0] = exchange.getIn().getBody()__                }_            }_            _            checkParameterSize(endpoint, exchange, params)___        } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.RAW) {_            params = new Object[1]__            params[0] = exchange.getIn().getMandatoryBody(InputStream.class)__        } else if (endpoint.getDataFormat().dealias() == DataFormat.CXF_MESSAGE) {_            params = new Object[1]__            params[0] = exchange.getIn().getBody()__        }__        if (LOG.isTraceEnabled()) {_            if (params != null) {_                for (int i = 0_ i < params.length_ i++) {_                    LOG.trace("params[{}] = {}", i, params[i])__                }_            }_        }_        _        return params__    };get,the,parameters,for,the,web,service,operation;suppress,warnings,deprecation,private,object,get,params,cxf,endpoint,endpoint,exchange,exchange,throws,org,apache,camel,invalid,payload,exception,object,params,null,if,endpoint,get,data,format,data,format,pojo,object,body,exchange,get,in,get,body,if,body,instanceof,object,params,object,body,else,if,body,instanceof,list,params,list,body,to,array,else,iterator,it,exchange,get,in,get,body,iterator,class,if,it,null,it,has,next,list,list,exchange,get,context,get,type,converter,convert,to,list,class,it,if,list,null,params,list,to,array,if,params,null,params,new,object,1,params,0,exchange,get,in,get,body,check,parameter,size,endpoint,exchange,params,else,if,endpoint,get,data,format,data,format,payload,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,cxf,payload,class,else,if,endpoint,get,data,format,dealias,data,format,raw,params,new,object,1,params,0,exchange,get,in,get,mandatory,body,input,stream,class,else,if,endpoint,get,data,format,dealias,data,format,params,new,object,1,params,0,exchange,get,in,get,body,if,log,is,trace,enabled,if,params,null,for,int,i,0,i,params,length,i,log,trace,params,i,params,i,return,params
