commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Override public void initialize(Client client, Bus bus) {     // check if there is logging interceptor     removeInterceptorWhichIsOutThePhases(client.getInInterceptors(), REMAINING_IN_PHASES, getInInterceptorNames()).     removeInterceptorWhichIsOutThePhases(client.getEndpoint().getInInterceptors(), REMAINING_IN_PHASES, getInInterceptorNames()).     client.getEndpoint().getBinding().getInInterceptors().clear().     // we need to keep the LoggingOutputInterceptor     getOutInterceptorNames().add(LoggingOutInterceptor.class.getName()).     removeInterceptorWhichIsOutThePhases(client.getOutInterceptors(), REMAINING_OUT_PHASES, getOutInterceptorNames()).     removeInterceptorWhichIsOutThePhases(client.getEndpoint().getOutInterceptors(), REMAINING_OUT_PHASES, getOutInterceptorNames()).     client.getEndpoint().getBinding().getOutInterceptors().clear().     client.getEndpoint().getOutInterceptors().add(new RawMessageContentRedirectInterceptor()). }
false;public;2;37;;@Override public void initialize(Server server, Bus bus) {     // currently we do not filter the bus     // remove the interceptors     removeInterceptorWhichIsOutThePhases(server.getEndpoint().getService().getInInterceptors(), REMAINING_IN_PHASES, getInInterceptorNames()).     removeInterceptorWhichIsOutThePhases(server.getEndpoint().getInInterceptors(), REMAINING_IN_PHASES, getInInterceptorNames()).     // we need to keep the LoggingOutputInterceptor     getOutInterceptorNames().add(LoggingOutInterceptor.class.getName()).     // Do not using the binding interceptor any more     server.getEndpoint().getBinding().getInInterceptors().clear().     removeInterceptorWhichIsOutThePhases(server.getEndpoint().getService().getOutInterceptors(), REMAINING_OUT_PHASES, getOutInterceptorNames()).     removeInterceptorWhichIsOutThePhases(server.getEndpoint().getOutInterceptors(), REMAINING_OUT_PHASES, getOutInterceptorNames()).     // Do not use the binding interceptor any more     server.getEndpoint().getBinding().getOutInterceptors().clear().     server.getEndpoint().getOutInterceptors().add(new RawMessageContentRedirectInterceptor()).     // setup the RawMessageWSDLGetInterceptor     server.getEndpoint().getInInterceptors().add(RawMessageWSDLGetInterceptor.INSTANCE).     // Oneway with RAW message     if (isOneway()) {         Interceptor<? extends Message> toRemove = null.         for (Interceptor<? extends Message> i : server.getEndpoint().getService().getInInterceptors()) {             if (i.getClass().getName().equals("org.apache.cxf.interceptor.OutgoingChainInterceptor")) {                 toRemove = i.             }         }         server.getEndpoint().getService().getInInterceptors().remove(toRemove).         server.getEndpoint().getInInterceptors().add(new OneWayOutgoingChainInterceptor()).         server.getEndpoint().getInInterceptors().add(new OneWayProcessorInterceptor()).     } }
false;protected;0;4;;@Override protected Logger getLogger() {     return LOG. }
false;public;0;3;;public boolean isOneway() {     return oneway. }
false;public;1;3;;public void setOneway(boolean oneway) {     this.oneway = oneway. }
