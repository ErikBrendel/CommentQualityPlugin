commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;21;;protected Object performInvocation(Exchange cxfExchange, final Object serviceObject, Method method, Object[] paramArray) throws Exception {     Object response = null.     if (endpoint.isPerformInvocation()) {         response = super.performInvocation(cxfExchange, serviceObject, method, paramArray).     }     paramArray = insertExchange(method, paramArray, cxfExchange).     OperationResourceInfo ori = cxfExchange.get(OperationResourceInfo.class).     if (ori.isSubResourceLocator()) {         // don't delegate the sub resource locator call to camel processor         return method.invoke(serviceObject, paramArray).     }     Continuation continuation.     if (!endpoint.isSynchronous() && (continuation = getContinuation(cxfExchange)) != null) {         LOG.trace("Calling the Camel async processors.").         return asyncInvoke(cxfExchange, serviceObject, method, paramArray, continuation, response).     } else {         LOG.trace("Calling the Camel sync processors.").         return syncInvoke(cxfExchange, serviceObject, method, paramArray, response).     } }
false;private;1;5;;private Continuation getContinuation(Exchange cxfExchange) {     ContinuationProvider provider = (ContinuationProvider) cxfExchange.getInMessage().get(ContinuationProvider.class.getName()).     return provider == null ? null : provider.getContinuation(). }
false;public;1;8;;public void done(boolean doneSync) {     // make sure the continuation resume will not be called before the suspend method in other thread     synchronized (continuation) {         LOG.trace("Resuming continuation of exchangeId: {}", camelExchange.getExchangeId()).         // resume processing after both, sync and async callbacks         continuation.resume().     } }
false;private;6;50;;private Object asyncInvoke(Exchange cxfExchange, final Object serviceObject, Method method, Object[] paramArray, final Continuation continuation, Object response) throws Exception {     synchronized (continuation) {         if (continuation.isNew()) {             final org.apache.camel.Exchange camelExchange = prepareExchange(cxfExchange, method, paramArray, response).             // we want to handle the UoW             cxfRsConsumer.createUoW(camelExchange).             // Now we don't set up the timeout value             LOG.trace("Suspending continuation of exchangeId: {}", camelExchange.getExchangeId()).             // The continuation could be called before the suspend is called             continuation.suspend(endpoint.getContinuationTimeout()).             cxfExchange.put(SUSPENED, Boolean.TRUE).             continuation.setObject(camelExchange).             cxfRsConsumer.getAsyncProcessor().process(camelExchange, new AsyncCallback() {                  public void done(boolean doneSync) {                     // make sure the continuation resume will not be called before the suspend method in other thread                     synchronized (continuation) {                         LOG.trace("Resuming continuation of exchangeId: {}", camelExchange.getExchangeId()).                         // resume processing after both, sync and async callbacks                         continuation.resume().                     }                 }             }).             return null.         }         if (!continuation.isTimeout() && continuation.isResumed()) {             cxfExchange.put(SUSPENED, Boolean.FALSE).             org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange) continuation.getObject().             try {                 return returnResponse(cxfExchange, camelExchange).             } catch (Exception ex) {                 cxfRsConsumer.doneUoW(camelExchange).                 throw ex.             }         } else {             if (continuation.isTimeout() || !continuation.isPending()) {                 cxfExchange.put(SUSPENED, Boolean.FALSE).                 org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange) continuation.getObject().                 camelExchange.setException(new ExchangeTimedOutException(camelExchange, endpoint.getContinuationTimeout())).                 try {                     return returnResponse(cxfExchange, camelExchange).                 } catch (Exception ex) {                     cxfRsConsumer.doneUoW(camelExchange).                     throw ex.                 }             }         }     }     return null. }
false;private;5;20;;private Object syncInvoke(Exchange cxfExchange, final Object serviceObject, Method method, Object[] paramArray, Object response) throws Exception {     final org.apache.camel.Exchange camelExchange = prepareExchange(cxfExchange, method, paramArray, response).     // we want to handle the UoW     cxfRsConsumer.createUoW(camelExchange).     try {         cxfRsConsumer.getProcessor().process(camelExchange).     } catch (Exception exception) {         camelExchange.setException(exception).     }     try {         return returnResponse(cxfExchange, camelExchange).     } catch (Exception ex) {         cxfRsConsumer.doneUoW(camelExchange).         throw ex.     } }
false;private;4;27;;private org.apache.camel.Exchange prepareExchange(Exchange cxfExchange, Method method, Object[] paramArray, Object response) {     ExchangePattern ep = ExchangePattern.InOut.     if (method.getReturnType() == Void.class) {         ep = ExchangePattern.InOnly.     }     final org.apache.camel.Exchange camelExchange = endpoint.createExchange(ep).     // needs access in MessageObserver/Interceptor to close the UnitOfWork     cxfExchange.put(org.apache.camel.Exchange.class, camelExchange).     if (response != null) {         camelExchange.getOut().setBody(response).     }     CxfRsBinding binding = endpoint.getBinding().     binding.populateExchangeFromCxfRsRequest(cxfExchange, camelExchange, method, paramArray).     // the CXF in message property. Question: where should this property name be set up ?     if (endpoint.isPropagateContexts()) {         camelExchange.setProperty(UriInfo.class.getName(), new UriInfoImpl(cxfExchange.getInMessage())).         camelExchange.setProperty(Request.class.getName(), new RequestImpl(cxfExchange.getInMessage())).         camelExchange.setProperty(HttpHeaders.class.getName(), new HttpHeadersImpl(cxfExchange.getInMessage())).         camelExchange.setProperty(SecurityContext.class.getName(), new SecurityContextImpl(cxfExchange.getInMessage())).     }     return camelExchange. }
false;private;2;22;;private Object returnResponse(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) throws Exception {     if (camelExchange.getException() != null) {         Throwable exception = camelExchange.getException().         Object result = null.         if (exception instanceof RuntimeCamelException) {             // Unwrap the RuntimeCamelException             if (exception.getCause() != null) {                 exception = exception.getCause().             }         }         if (exception instanceof WebApplicationException) {             result = ((WebApplicationException) exception).getResponse().             if (result != null) {                 return result.             } else {                 throw (WebApplicationException) exception.             }         }     // CAMEL-7357 throw out other exception to make sure the ExceptionMapper work     }     return endpoint.getBinding().populateCxfRsResponseFromExchange(camelExchange, cxfExchange). }
