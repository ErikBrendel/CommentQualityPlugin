# id;timestamp;commentText;codeText;commentWords;codeWords
CxfBinding -> public static void storeCxfResponse(CxfExchange exchange, Message response);1217918186;@deprecated please use {@link #storeCxfResponse(HeaderFilterStrategy, CxfExchange, Message)} instead.;public static void storeCxfResponse(CxfExchange exchange, Message response) {_        CxfBinding.storeCxfResponse(new CxfHeaderFilterStrategy(), exchange, response)__    };deprecated,please,use,link,store,cxf,response,header,filter,strategy,cxf,exchange,message,instead;public,static,void,store,cxf,response,cxf,exchange,exchange,message,response,cxf,binding,store,cxf,response,new,cxf,header,filter,strategy,exchange,response
CxfBinding -> public static void storeCxfResponse(CxfExchange exchange, Message response);1221611914;@deprecated please use {@link #storeCxfResponse(HeaderFilterStrategy, CxfExchange, Message)} instead.;public static void storeCxfResponse(CxfExchange exchange, Message response) {_        CxfBinding.storeCxfResponse(new CxfHeaderFilterStrategy(), exchange, response)__    };deprecated,please,use,link,store,cxf,response,header,filter,strategy,cxf,exchange,message,instead;public,static,void,store,cxf,response,cxf,exchange,exchange,message,response,cxf,binding,store,cxf,response,new,cxf,header,filter,strategy,exchange,response
CxfBinding -> public static void storeCxfResponse(CxfExchange exchange, Message response);1221707696;@deprecated please use {@link #storeCxfResponse(HeaderFilterStrategy, CxfExchange, Message)} instead.;public static void storeCxfResponse(CxfExchange exchange, Message response) {_        CxfBinding.storeCxfResponse(new CxfHeaderFilterStrategy(), exchange, response)__    };deprecated,please,use,link,store,cxf,response,header,filter,strategy,cxf,exchange,message,instead;public,static,void,store,cxf,response,cxf,exchange,exchange,message,response,cxf,binding,store,cxf,response,new,cxf,header,filter,strategy,exchange,response
CxfBinding -> public static void storeCxfResponse(CxfExchange exchange, Message response);1222322664;@deprecated please use {@link #storeCxfResponse(HeaderFilterStrategy, CxfExchange, Message)} instead.;public static void storeCxfResponse(CxfExchange exchange, Message response) {_        CxfBinding.storeCxfResponse(new CxfHeaderFilterStrategy(), exchange, response)__    };deprecated,please,use,link,store,cxf,response,header,filter,strategy,cxf,exchange,message,instead;public,static,void,store,cxf,response,cxf,exchange,exchange,message,response,cxf,binding,store,cxf,response,new,cxf,header,filter,strategy,exchange,response
CxfBinding -> public static void storeCxfResponse(CxfExchange exchange, Message response);1224733014;@deprecated please use {@link #storeCxfResponse(HeaderFilterStrategy, CxfExchange, Message)} instead.;public static void storeCxfResponse(CxfExchange exchange, Message response) {_        CxfBinding.storeCxfResponse(new CxfHeaderFilterStrategy(), exchange, response)__    };deprecated,please,use,link,store,cxf,response,header,filter,strategy,cxf,exchange,message,instead;public,static,void,store,cxf,response,cxf,exchange,exchange,message,response,cxf,binding,store,cxf,response,new,cxf,header,filter,strategy,exchange,response
CxfBinding -> void populateCxfRequestFromExchange(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange,             Map<String, Object> requestContext)_;1232329721;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing request</b> to be sent to CXF server.  This method is called by_{@link CxfProducer#process(org.apache.camel.Exchange)} to process a Camel Exchange_for invoking an CXF web service operation.  Note that information is populated_to CXF Exchange and the request context, which are passed as arguments to the_CXF API's Client.invoke() method.  The arguments to the web service operation_are extracted from the Camel IN message body by CxfProducer._</p>__<p>_Exchange is passed in this direction: Camel route => CxfProducer => <b>apply this_binding method </b>=> CXF server_</p>__@param cxfExchange exchange to be populated_@param camelExchange exchange that contains a request_@param requestContext a map contains request contexts.  <b>This parameter must not_be null</b>.  The Client.invoke() method does not allow caller to_pass in a CXF Message.  The request context are copied to the CXF Message by the_Client.invoke() method.  This is how caller can set properties on the CXF message.;void populateCxfRequestFromExchange(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange,_            Map<String, Object> requestContext)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,request,b,to,be,sent,to,cxf,server,this,method,is,called,by,link,cxf,producer,process,org,apache,camel,exchange,to,process,a,camel,exchange,for,invoking,an,cxf,web,service,operation,note,that,information,is,populated,to,cxf,exchange,and,the,request,context,which,are,passed,as,arguments,to,the,cxf,api,s,client,invoke,method,the,arguments,to,the,web,service,operation,are,extracted,from,the,camel,in,message,body,by,cxf,producer,p,p,exchange,is,passed,in,this,direction,camel,route,cxf,producer,b,apply,this,binding,method,b,cxf,server,p,param,cxf,exchange,exchange,to,be,populated,param,camel,exchange,exchange,that,contains,a,request,param,request,context,a,map,contains,request,contexts,b,this,parameter,must,not,be,null,b,the,client,invoke,method,does,not,allow,caller,to,pass,in,a,cxf,message,the,request,context,are,copied,to,the,cxf,message,by,the,client,invoke,method,this,is,how,caller,can,set,properties,on,the,cxf,message;void,populate,cxf,request,from,exchange,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,map,string,object,request,context
CxfBinding -> void populateCxfRequestFromExchange(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange,             Map<String, Object> requestContext)_;1238035325;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing request</b> to be sent to CXF server.  This method is called by_{@link CxfProducer#process(org.apache.camel.Exchange)} to process a Camel Exchange_for invoking an CXF web service operation.  Note that information is populated_to CXF Exchange and the request context, which are passed as arguments to the_CXF API's Client.invoke() method.  The arguments to the web service operation_are extracted from the Camel IN message body by CxfProducer._</p>__<p>_Exchange is passed in this direction: Camel route => CxfProducer => <b>apply this_binding method </b>=> CXF server_</p>__@param cxfExchange exchange to be populated_@param camelExchange exchange that contains a request_@param requestContext a map contains request contexts.  <b>This parameter must not_be null</b>.  The Client.invoke() method does not allow caller to_pass in a CXF Message.  The request context are copied to the CXF Message by the_Client.invoke() method.  This is how caller can set properties on the CXF message.;void populateCxfRequestFromExchange(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange,_            Map<String, Object> requestContext)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,request,b,to,be,sent,to,cxf,server,this,method,is,called,by,link,cxf,producer,process,org,apache,camel,exchange,to,process,a,camel,exchange,for,invoking,an,cxf,web,service,operation,note,that,information,is,populated,to,cxf,exchange,and,the,request,context,which,are,passed,as,arguments,to,the,cxf,api,s,client,invoke,method,the,arguments,to,the,web,service,operation,are,extracted,from,the,camel,in,message,body,by,cxf,producer,p,p,exchange,is,passed,in,this,direction,camel,route,cxf,producer,b,apply,this,binding,method,b,cxf,server,p,param,cxf,exchange,exchange,to,be,populated,param,camel,exchange,exchange,that,contains,a,request,param,request,context,a,map,contains,request,contexts,b,this,parameter,must,not,be,null,b,the,client,invoke,method,does,not,allow,caller,to,pass,in,a,cxf,message,the,request,context,are,copied,to,the,cxf,message,by,the,client,invoke,method,this,is,how,caller,can,set,properties,on,the,cxf,message;void,populate,cxf,request,from,exchange,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,map,string,object,request,context
CxfBinding -> void populateCxfRequestFromExchange(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange,             Map<String, Object> requestContext)_;1253539182;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing request</b> to be sent to CXF server.  This method is called by_{@link CxfProducer#process(org.apache.camel.Exchange)} to process a Camel Exchange_for invoking an CXF web service operation.  Note that information is populated_to CXF Exchange and the request context, which are passed as arguments to the_CXF API's Client.invoke() method.  The arguments to the web service operation_are extracted from the Camel IN message body by CxfProducer._</p>__<p>_Exchange is passed in this direction: Camel route => CxfProducer => <b>apply this_binding method </b>=> CXF server_</p>__@param cxfExchange exchange to be populated_@param camelExchange exchange that contains a request_@param requestContext a map contains request contexts.  <b>This parameter must not_be null</b>.  The Client.invoke() method does not allow caller to_pass in a CXF Message.  The request context are copied to the CXF Message by the_Client.invoke() method.  This is how caller can set properties on the CXF message.;void populateCxfRequestFromExchange(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange,_            Map<String, Object> requestContext)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,request,b,to,be,sent,to,cxf,server,this,method,is,called,by,link,cxf,producer,process,org,apache,camel,exchange,to,process,a,camel,exchange,for,invoking,an,cxf,web,service,operation,note,that,information,is,populated,to,cxf,exchange,and,the,request,context,which,are,passed,as,arguments,to,the,cxf,api,s,client,invoke,method,the,arguments,to,the,web,service,operation,are,extracted,from,the,camel,in,message,body,by,cxf,producer,p,p,exchange,is,passed,in,this,direction,camel,route,cxf,producer,b,apply,this,binding,method,b,cxf,server,p,param,cxf,exchange,exchange,to,be,populated,param,camel,exchange,exchange,that,contains,a,request,param,request,context,a,map,contains,request,contexts,b,this,parameter,must,not,be,null,b,the,client,invoke,method,does,not,allow,caller,to,pass,in,a,cxf,message,the,request,context,are,copied,to,the,cxf,message,by,the,client,invoke,method,this,is,how,caller,can,set,properties,on,the,cxf,message;void,populate,cxf,request,from,exchange,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,map,string,object,request,context
CxfBinding -> void populateCxfRequestFromExchange(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange,             Map<String, Object> requestContext)_;1280130252;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing request</b> to be sent to CXF server.  This method is called by_{@link CxfProducer#process(org.apache.camel.Exchange)} to process a Camel Exchange_for invoking an CXF web service operation.  Note that information is populated_to CXF Exchange and the request context, which are passed as arguments to the_CXF API's Client.invoke() method.  The arguments to the web service operation_are extracted from the Camel IN message body by CxfProducer._</p>__<p>_Exchange is passed in this direction: Camel route => CxfProducer => <b>apply this_binding method </b>=> CXF server_</p>__@param cxfExchange exchange to be populated_@param camelExchange exchange that contains a request_@param requestContext a map contains request contexts.  <b>This parameter must not_be null</b>.  The Client.invoke() method does not allow caller to_pass in a CXF Message.  The request context are copied to the CXF Message by the_Client.invoke() method.  This is how caller can set properties on the CXF message.;void populateCxfRequestFromExchange(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange,_            Map<String, Object> requestContext)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,request,b,to,be,sent,to,cxf,server,this,method,is,called,by,link,cxf,producer,process,org,apache,camel,exchange,to,process,a,camel,exchange,for,invoking,an,cxf,web,service,operation,note,that,information,is,populated,to,cxf,exchange,and,the,request,context,which,are,passed,as,arguments,to,the,cxf,api,s,client,invoke,method,the,arguments,to,the,web,service,operation,are,extracted,from,the,camel,in,message,body,by,cxf,producer,p,p,exchange,is,passed,in,this,direction,camel,route,cxf,producer,b,apply,this,binding,method,b,cxf,server,p,param,cxf,exchange,exchange,to,be,populated,param,camel,exchange,exchange,that,contains,a,request,param,request,context,a,map,contains,request,contexts,b,this,parameter,must,not,be,null,b,the,client,invoke,method,does,not,allow,caller,to,pass,in,a,cxf,message,the,request,context,are,copied,to,the,cxf,message,by,the,client,invoke,method,this,is,how,caller,can,set,properties,on,the,cxf,message;void,populate,cxf,request,from,exchange,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,map,string,object,request,context
CxfBinding -> void populateCxfRequestFromExchange(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange,             Map<String, Object> requestContext)_;1297969159;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing request</b> to be sent to CXF server.  This method is called by_{@link CxfProducer#process(org.apache.camel.Exchange)} to process a Camel Exchange_for invoking an CXF web service operation.  Note that information is populated_to CXF Exchange and the request context, which are passed as arguments to the_CXF API's Client.invoke() method.  The arguments to the web service operation_are extracted from the Camel IN message body by CxfProducer._</p>__<p>_Exchange is passed in this direction: Camel route => CxfProducer => <b>apply this_binding method </b>=> CXF server_</p>__@param cxfExchange exchange to be populated_@param camelExchange exchange that contains a request_@param requestContext a map contains request contexts.  <b>This parameter must not_be null</b>.  The Client.invoke() method does not allow caller to_pass in a CXF Message.  The request context are copied to the CXF Message by the_Client.invoke() method.  This is how caller can set properties on the CXF message.;void populateCxfRequestFromExchange(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange,_            Map<String, Object> requestContext)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,request,b,to,be,sent,to,cxf,server,this,method,is,called,by,link,cxf,producer,process,org,apache,camel,exchange,to,process,a,camel,exchange,for,invoking,an,cxf,web,service,operation,note,that,information,is,populated,to,cxf,exchange,and,the,request,context,which,are,passed,as,arguments,to,the,cxf,api,s,client,invoke,method,the,arguments,to,the,web,service,operation,are,extracted,from,the,camel,in,message,body,by,cxf,producer,p,p,exchange,is,passed,in,this,direction,camel,route,cxf,producer,b,apply,this,binding,method,b,cxf,server,p,param,cxf,exchange,exchange,to,be,populated,param,camel,exchange,exchange,that,contains,a,request,param,request,context,a,map,contains,request,contexts,b,this,parameter,must,not,be,null,b,the,client,invoke,method,does,not,allow,caller,to,pass,in,a,cxf,message,the,request,context,are,copied,to,the,cxf,message,by,the,client,invoke,method,this,is,how,caller,can,set,properties,on,the,cxf,message;void,populate,cxf,request,from,exchange,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,map,string,object,request,context
CxfBinding -> void populateCxfRequestFromExchange(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange,             Map<String, Object> requestContext)_;1540108161;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing request</b> to be sent to CXF server.  This method is called by_{@link CxfProducer#process(org.apache.camel.Exchange)} to process a Camel Exchange_for invoking an CXF web service operation.  Note that information is populated_to CXF Exchange and the request context, which are passed as arguments to the_CXF API's Client.invoke() method.  The arguments to the web service operation_are extracted from the Camel IN message body by CxfProducer._</p>__<p>_Exchange is passed in this direction: Camel route => CxfProducer => <b>apply this_binding method </b>=> CXF server_</p>__@param cxfExchange exchange to be populated_@param camelExchange exchange that contains a request_@param requestContext a map contains request contexts.  <b>This parameter must not_be null</b>.  The Client.invoke() method does not allow caller to_pass in a CXF Message.  The request context are copied to the CXF Message by the_Client.invoke() method.  This is how caller can set properties on the CXF message.;void populateCxfRequestFromExchange(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange,_            Map<String, Object> requestContext)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,request,b,to,be,sent,to,cxf,server,this,method,is,called,by,link,cxf,producer,process,org,apache,camel,exchange,to,process,a,camel,exchange,for,invoking,an,cxf,web,service,operation,note,that,information,is,populated,to,cxf,exchange,and,the,request,context,which,are,passed,as,arguments,to,the,cxf,api,s,client,invoke,method,the,arguments,to,the,web,service,operation,are,extracted,from,the,camel,in,message,body,by,cxf,producer,p,p,exchange,is,passed,in,this,direction,camel,route,cxf,producer,b,apply,this,binding,method,b,cxf,server,p,param,cxf,exchange,exchange,to,be,populated,param,camel,exchange,exchange,that,contains,a,request,param,request,context,a,map,contains,request,contexts,b,this,parameter,must,not,be,null,b,the,client,invoke,method,does,not,allow,caller,to,pass,in,a,cxf,message,the,request,context,are,copied,to,the,cxf,message,by,the,client,invoke,method,this,is,how,caller,can,set,properties,on,the,cxf,message;void,populate,cxf,request,from,exchange,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,map,string,object,request,context
CxfBinding -> void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange)_;1232329721;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing response</b> to be sent back to the CXF client.  This method is called_by {@link CxfConsumer} to translate a Camel Exchange to a CXF response Exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint <= <b>apply this binding method</b>_<= CxfConsumer <= Camel route_</p>_@param camelExchange Camel exchange that contains an out message_@param cxfExchange CXF exchange to be populated;void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,response,b,to,be,sent,back,to,the,cxf,client,this,method,is,called,by,link,cxf,consumer,to,translate,a,camel,exchange,to,a,cxf,response,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,b,apply,this,binding,method,b,cxf,consumer,camel,route,p,param,camel,exchange,camel,exchange,that,contains,an,out,message,param,cxf,exchange,cxf,exchange,to,be,populated;void,populate,cxf,response,from,exchange,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange
CxfBinding -> void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange)_;1238035325;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing response</b> to be sent back to the CXF client.  This method is called_by {@link CxfConsumer} to translate a Camel Exchange to a CXF response Exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint <= <b>apply this binding method</b>_<= CxfConsumer <= Camel route_</p>_@param camelExchange Camel exchange that contains an out message_@param cxfExchange CXF exchange to be populated;void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,response,b,to,be,sent,back,to,the,cxf,client,this,method,is,called,by,link,cxf,consumer,to,translate,a,camel,exchange,to,a,cxf,response,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,b,apply,this,binding,method,b,cxf,consumer,camel,route,p,param,camel,exchange,camel,exchange,that,contains,an,out,message,param,cxf,exchange,cxf,exchange,to,be,populated;void,populate,cxf,response,from,exchange,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange
CxfBinding -> void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange)_;1253539182;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing response</b> to be sent back to the CXF client.  This method is called_by {@link CxfConsumer} to translate a Camel Exchange to a CXF response Exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint <= <b>apply this binding method</b>_<= CxfConsumer <= Camel route_</p>_@param camelExchange Camel exchange that contains an out message_@param cxfExchange CXF exchange to be populated;void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,response,b,to,be,sent,back,to,the,cxf,client,this,method,is,called,by,link,cxf,consumer,to,translate,a,camel,exchange,to,a,cxf,response,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,b,apply,this,binding,method,b,cxf,consumer,camel,route,p,param,camel,exchange,camel,exchange,that,contains,an,out,message,param,cxf,exchange,cxf,exchange,to,be,populated;void,populate,cxf,response,from,exchange,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange
CxfBinding -> void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange)_;1280130252;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing response</b> to be sent back to the CXF client.  This method is called_by {@link CxfConsumer} to translate a Camel Exchange to a CXF response Exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint <= <b>apply this binding method</b>_<= CxfConsumer <= Camel route_</p>_@param camelExchange Camel exchange that contains an out message_@param cxfExchange CXF exchange to be populated;void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,response,b,to,be,sent,back,to,the,cxf,client,this,method,is,called,by,link,cxf,consumer,to,translate,a,camel,exchange,to,a,cxf,response,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,b,apply,this,binding,method,b,cxf,consumer,camel,route,p,param,camel,exchange,camel,exchange,that,contains,an,out,message,param,cxf,exchange,cxf,exchange,to,be,populated;void,populate,cxf,response,from,exchange,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange
CxfBinding -> void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange)_;1297969159;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing response</b> to be sent back to the CXF client.  This method is called_by {@link CxfConsumer} to translate a Camel Exchange to a CXF response Exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint <= <b>apply this binding method</b>_<= CxfConsumer <= Camel route_</p>_@param camelExchange Camel exchange that contains an out message_@param cxfExchange CXF exchange to be populated;void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,response,b,to,be,sent,back,to,the,cxf,client,this,method,is,called,by,link,cxf,consumer,to,translate,a,camel,exchange,to,a,cxf,response,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,b,apply,this,binding,method,b,cxf,consumer,camel,route,p,param,camel,exchange,camel,exchange,that,contains,an,out,message,param,cxf,exchange,cxf,exchange,to,be,populated;void,populate,cxf,response,from,exchange,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange
CxfBinding -> void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange)_;1540108161;<p>_Populate a CXF Exchange from a Camel Exchange.  The resulted CXF Exchange is an_<b>outgoing response</b> to be sent back to the CXF client.  This method is called_by {@link CxfConsumer} to translate a Camel Exchange to a CXF response Exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint <= <b>apply this binding method</b>_<= CxfConsumer <= Camel route_</p>_@param camelExchange Camel exchange that contains an out message_@param cxfExchange CXF exchange to be populated;void populateCxfResponseFromExchange(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange)_;p,populate,a,cxf,exchange,from,a,camel,exchange,the,resulted,cxf,exchange,is,an,b,outgoing,response,b,to,be,sent,back,to,the,cxf,client,this,method,is,called,by,link,cxf,consumer,to,translate,a,camel,exchange,to,a,cxf,response,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,b,apply,this,binding,method,b,cxf,consumer,camel,route,p,param,camel,exchange,camel,exchange,that,contains,an,out,message,param,cxf,exchange,cxf,exchange,to,be,populated;void,populate,cxf,response,from,exchange,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange
CxfBinding -> void copyJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;1253539182;<p>_Copy the javax.xml.ws* headers into cxfExchange's outMessage,_if the cxfExchange has no outMessage, skip this copy_</p>__@param cxfExchange CXF exchange to be populated_@param context The map which used to store the message headers;void copyJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;p,copy,the,javax,xml,ws,headers,into,cxf,exchange,s,out,message,if,the,cxf,exchange,has,no,out,message,skip,this,copy,p,param,cxf,exchange,cxf,exchange,to,be,populated,param,context,the,map,which,used,to,store,the,message,headers;void,copy,jax,ws,context,exchange,cxf,exchange,map,string,object,context
CxfBinding -> void copyJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;1280130252;<p>_Copy the javax.xml.ws* headers into cxfExchange's outMessage,_if the cxfExchange has no outMessage, skip this copy_</p>__@param cxfExchange CXF exchange to be populated_@param context The map which used to store the message headers;void copyJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;p,copy,the,javax,xml,ws,headers,into,cxf,exchange,s,out,message,if,the,cxf,exchange,has,no,out,message,skip,this,copy,p,param,cxf,exchange,cxf,exchange,to,be,populated,param,context,the,map,which,used,to,store,the,message,headers;void,copy,jax,ws,context,exchange,cxf,exchange,map,string,object,context
CxfBinding -> void copyJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;1297969159;<p>_Copy the javax.xml.ws* headers into cxfExchange's outMessage,_if the cxfExchange has no outMessage, skip this copy_</p>__@param cxfExchange CXF exchange to be populated_@param context The map which used to store the message headers;void copyJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;p,copy,the,javax,xml,ws,headers,into,cxf,exchange,s,out,message,if,the,cxf,exchange,has,no,out,message,skip,this,copy,p,param,cxf,exchange,cxf,exchange,to,be,populated,param,context,the,map,which,used,to,store,the,message,headers;void,copy,jax,ws,context,exchange,cxf,exchange,map,string,object,context
CxfBinding -> void copyJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;1540108161;<p>_Copy the javax.xml.ws* headers into cxfExchange's outMessage,_if the cxfExchange has no outMessage, skip this copy_</p>__@param cxfExchange CXF exchange to be populated_@param context The map which used to store the message headers;void copyJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;p,copy,the,javax,xml,ws,headers,into,cxf,exchange,s,out,message,if,the,cxf,exchange,has,no,out,message,skip,this,copy,p,param,cxf,exchange,cxf,exchange,to,be,populated,param,context,the,map,which,used,to,store,the,message,headers;void,copy,jax,ws,context,exchange,cxf,exchange,map,string,object,context
CxfBinding -> public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage);1217918186;@deprecated Please use {@link #copyMessage(HeaderFilterStrategy, org.apache.camel.Message, Message)} instead.;public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage) {_        CxfBinding.copyMessage(new CxfHeaderFilterStrategy(), camelMessage, cxfMessage)__    };deprecated,please,use,link,copy,message,header,filter,strategy,org,apache,camel,message,message,instead;public,static,void,copy,message,org,apache,camel,message,camel,message,org,apache,cxf,message,message,cxf,message,cxf,binding,copy,message,new,cxf,header,filter,strategy,camel,message,cxf,message
CxfBinding -> public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage);1221611914;@deprecated Please use {@link #copyMessage(HeaderFilterStrategy, org.apache.camel.Message, Message)} instead.;public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage) {_        CxfBinding.copyMessage(new CxfHeaderFilterStrategy(), camelMessage, cxfMessage)__    };deprecated,please,use,link,copy,message,header,filter,strategy,org,apache,camel,message,message,instead;public,static,void,copy,message,org,apache,camel,message,camel,message,org,apache,cxf,message,message,cxf,message,cxf,binding,copy,message,new,cxf,header,filter,strategy,camel,message,cxf,message
CxfBinding -> public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage);1221707696;@deprecated Please use {@link #copyMessage(HeaderFilterStrategy, org.apache.camel.Message, Message)} instead.;public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage) {_        CxfBinding.copyMessage(new CxfHeaderFilterStrategy(), camelMessage, cxfMessage)__    };deprecated,please,use,link,copy,message,header,filter,strategy,org,apache,camel,message,message,instead;public,static,void,copy,message,org,apache,camel,message,camel,message,org,apache,cxf,message,message,cxf,message,cxf,binding,copy,message,new,cxf,header,filter,strategy,camel,message,cxf,message
CxfBinding -> public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage);1222322664;@deprecated Please use {@link #copyMessage(HeaderFilterStrategy, org.apache.camel.Message, Message)} instead.;public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage) {_        CxfBinding.copyMessage(new CxfHeaderFilterStrategy(), camelMessage, cxfMessage)__    };deprecated,please,use,link,copy,message,header,filter,strategy,org,apache,camel,message,message,instead;public,static,void,copy,message,org,apache,camel,message,camel,message,org,apache,cxf,message,message,cxf,message,cxf,binding,copy,message,new,cxf,header,filter,strategy,camel,message,cxf,message
CxfBinding -> public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage);1224733014;@deprecated Please use {@link #copyMessage(HeaderFilterStrategy, org.apache.camel.Message, Message)} instead.;public static void copyMessage(org.apache.camel.Message camelMessage, org.apache.cxf.message.Message cxfMessage) {_        CxfBinding.copyMessage(new CxfHeaderFilterStrategy(), camelMessage, cxfMessage)__    };deprecated,please,use,link,copy,message,header,filter,strategy,org,apache,camel,message,message,instead;public,static,void,copy,message,org,apache,camel,message,camel,message,org,apache,cxf,message,message,cxf,message,cxf,binding,copy,message,new,cxf,header,filter,strategy,camel,message,cxf,message
CxfBinding -> public static Message createCxfMessage(CxfExchange exchange);1217918186;@deprecated please use {@link #createCxfMessage(HeaderFilterStrategy, CxfExchange)} instead;public static Message createCxfMessage(CxfExchange exchange) {_        return CxfBinding.createCxfMessage(new CxfHeaderFilterStrategy(), exchange)__    };deprecated,please,use,link,create,cxf,message,header,filter,strategy,cxf,exchange,instead;public,static,message,create,cxf,message,cxf,exchange,exchange,return,cxf,binding,create,cxf,message,new,cxf,header,filter,strategy,exchange
CxfBinding -> public static Message createCxfMessage(CxfExchange exchange);1221611914;@deprecated please use {@link #createCxfMessage(HeaderFilterStrategy, CxfExchange)} instead;public static Message createCxfMessage(CxfExchange exchange) {_        return CxfBinding.createCxfMessage(new CxfHeaderFilterStrategy(), exchange)__    };deprecated,please,use,link,create,cxf,message,header,filter,strategy,cxf,exchange,instead;public,static,message,create,cxf,message,cxf,exchange,exchange,return,cxf,binding,create,cxf,message,new,cxf,header,filter,strategy,exchange
CxfBinding -> public static Message createCxfMessage(CxfExchange exchange);1221707696;@deprecated please use {@link #createCxfMessage(HeaderFilterStrategy, CxfExchange)} instead;public static Message createCxfMessage(CxfExchange exchange) {_        return CxfBinding.createCxfMessage(new CxfHeaderFilterStrategy(), exchange)__    };deprecated,please,use,link,create,cxf,message,header,filter,strategy,cxf,exchange,instead;public,static,message,create,cxf,message,cxf,exchange,exchange,return,cxf,binding,create,cxf,message,new,cxf,header,filter,strategy,exchange
CxfBinding -> public static Message createCxfMessage(CxfExchange exchange);1222322664;@deprecated please use {@link #createCxfMessage(HeaderFilterStrategy, CxfExchange)} instead;public static Message createCxfMessage(CxfExchange exchange) {_        return CxfBinding.createCxfMessage(new CxfHeaderFilterStrategy(), exchange)__    };deprecated,please,use,link,create,cxf,message,header,filter,strategy,cxf,exchange,instead;public,static,message,create,cxf,message,cxf,exchange,exchange,return,cxf,binding,create,cxf,message,new,cxf,header,filter,strategy,exchange
CxfBinding -> public static Message createCxfMessage(CxfExchange exchange);1224733014;@deprecated please use {@link #createCxfMessage(HeaderFilterStrategy, CxfExchange)} instead;public static Message createCxfMessage(CxfExchange exchange) {_        return CxfBinding.createCxfMessage(new CxfHeaderFilterStrategy(), exchange)__    };deprecated,please,use,link,create,cxf,message,header,filter,strategy,cxf,exchange,instead;public,static,message,create,cxf,message,cxf,exchange,exchange,return,cxf,binding,create,cxf,message,new,cxf,header,filter,strategy,exchange
CxfBinding -> void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange, Map<String, Object> responseContext)_;1232329721;<p>_Populate a Camel Exchange from a CXF Exchange, which is a an <b>incoming response</b>_from a CXF server.  This method is called by {@link CxfProducer} after it makes an_invocation to the Client.invoke() method.  It calls this method to translate the_CXF response message to Camel message._</p>__<p>_Exchange is passed in this direction: Camel route <= <b>apply this binding method</b>_<= CxfProducer <= CXF Server_</p>_@param camelExchange exchanged to be populated_@param cxfExchange exchange that contains a response_@param responseContext map contains response context from CXF;void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange, Map<String, Object> responseContext)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,a,an,b,incoming,response,b,from,a,cxf,server,this,method,is,called,by,link,cxf,producer,after,it,makes,an,invocation,to,the,client,invoke,method,it,calls,this,method,to,translate,the,cxf,response,message,to,camel,message,p,p,exchange,is,passed,in,this,direction,camel,route,b,apply,this,binding,method,b,cxf,producer,cxf,server,p,param,camel,exchange,exchanged,to,be,populated,param,cxf,exchange,exchange,that,contains,a,response,param,response,context,map,contains,response,context,from,cxf;void,populate,exchange,from,cxf,response,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange,map,string,object,response,context
CxfBinding -> void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange, Map<String, Object> responseContext)_;1238035325;<p>_Populate a Camel Exchange from a CXF Exchange, which is a an <b>incoming response</b>_from a CXF server.  This method is called by {@link CxfProducer} after it makes an_invocation to the Client.invoke() method.  It calls this method to translate the_CXF response message to Camel message._</p>__<p>_Exchange is passed in this direction: Camel route <= <b>apply this binding method</b>_<= CxfProducer <= CXF Server_</p>_@param camelExchange exchanged to be populated_@param cxfExchange exchange that contains a response_@param responseContext map contains response context from CXF;void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange, Map<String, Object> responseContext)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,a,an,b,incoming,response,b,from,a,cxf,server,this,method,is,called,by,link,cxf,producer,after,it,makes,an,invocation,to,the,client,invoke,method,it,calls,this,method,to,translate,the,cxf,response,message,to,camel,message,p,p,exchange,is,passed,in,this,direction,camel,route,b,apply,this,binding,method,b,cxf,producer,cxf,server,p,param,camel,exchange,exchanged,to,be,populated,param,cxf,exchange,exchange,that,contains,a,response,param,response,context,map,contains,response,context,from,cxf;void,populate,exchange,from,cxf,response,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange,map,string,object,response,context
CxfBinding -> void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange, Map<String, Object> responseContext)_;1253539182;<p>_Populate a Camel Exchange from a CXF Exchange, which is a an <b>incoming response</b>_from a CXF server.  This method is called by {@link CxfProducer} after it makes an_invocation to the Client.invoke() method.  It calls this method to translate the_CXF response message to Camel message._</p>__<p>_Exchange is passed in this direction: Camel route <= <b>apply this binding method</b>_<= CxfProducer <= CXF Server_</p>_@param camelExchange exchanged to be populated_@param cxfExchange exchange that contains a response_@param responseContext map contains response context from CXF;void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange, Map<String, Object> responseContext)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,a,an,b,incoming,response,b,from,a,cxf,server,this,method,is,called,by,link,cxf,producer,after,it,makes,an,invocation,to,the,client,invoke,method,it,calls,this,method,to,translate,the,cxf,response,message,to,camel,message,p,p,exchange,is,passed,in,this,direction,camel,route,b,apply,this,binding,method,b,cxf,producer,cxf,server,p,param,camel,exchange,exchanged,to,be,populated,param,cxf,exchange,exchange,that,contains,a,response,param,response,context,map,contains,response,context,from,cxf;void,populate,exchange,from,cxf,response,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange,map,string,object,response,context
CxfBinding -> void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange, Map<String, Object> responseContext)_;1280130252;<p>_Populate a Camel Exchange from a CXF Exchange, which is a an <b>incoming response</b>_from a CXF server.  This method is called by {@link CxfProducer} after it makes an_invocation to the Client.invoke() method.  It calls this method to translate the_CXF response message to Camel message._</p>__<p>_Exchange is passed in this direction: Camel route <= <b>apply this binding method</b>_<= CxfProducer <= CXF Server_</p>_@param camelExchange exchanged to be populated_@param cxfExchange exchange that contains a response_@param responseContext map contains response context from CXF;void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange, Map<String, Object> responseContext)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,a,an,b,incoming,response,b,from,a,cxf,server,this,method,is,called,by,link,cxf,producer,after,it,makes,an,invocation,to,the,client,invoke,method,it,calls,this,method,to,translate,the,cxf,response,message,to,camel,message,p,p,exchange,is,passed,in,this,direction,camel,route,b,apply,this,binding,method,b,cxf,producer,cxf,server,p,param,camel,exchange,exchanged,to,be,populated,param,cxf,exchange,exchange,that,contains,a,response,param,response,context,map,contains,response,context,from,cxf;void,populate,exchange,from,cxf,response,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange,map,string,object,response,context
CxfBinding -> void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange, Map<String, Object> responseContext)_;1297969159;<p>_Populate a Camel Exchange from a CXF Exchange, which is a an <b>incoming response</b>_from a CXF server.  This method is called by {@link CxfProducer} after it makes an_invocation to the Client.invoke() method.  It calls this method to translate the_CXF response message to Camel message._</p>__<p>_Exchange is passed in this direction: Camel route <= <b>apply this binding method</b>_<= CxfProducer <= CXF Server_</p>_@param camelExchange exchanged to be populated_@param cxfExchange exchange that contains a response_@param responseContext map contains response context from CXF;void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange, Map<String, Object> responseContext)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,a,an,b,incoming,response,b,from,a,cxf,server,this,method,is,called,by,link,cxf,producer,after,it,makes,an,invocation,to,the,client,invoke,method,it,calls,this,method,to,translate,the,cxf,response,message,to,camel,message,p,p,exchange,is,passed,in,this,direction,camel,route,b,apply,this,binding,method,b,cxf,producer,cxf,server,p,param,camel,exchange,exchanged,to,be,populated,param,cxf,exchange,exchange,that,contains,a,response,param,response,context,map,contains,response,context,from,cxf;void,populate,exchange,from,cxf,response,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange,map,string,object,response,context
CxfBinding -> void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,             Exchange cxfExchange, Map<String, Object> responseContext)_;1540108161;<p>_Populate a Camel Exchange from a CXF Exchange, which is a an <b>incoming response</b>_from a CXF server.  This method is called by {@link CxfProducer} after it makes an_invocation to the Client.invoke() method.  It calls this method to translate the_CXF response message to Camel message._</p>__<p>_Exchange is passed in this direction: Camel route <= <b>apply this binding method</b>_<= CxfProducer <= CXF Server_</p>_@param camelExchange exchanged to be populated_@param cxfExchange exchange that contains a response_@param responseContext map contains response context from CXF;void populateExchangeFromCxfResponse(org.apache.camel.Exchange camelExchange,_            Exchange cxfExchange, Map<String, Object> responseContext)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,a,an,b,incoming,response,b,from,a,cxf,server,this,method,is,called,by,link,cxf,producer,after,it,makes,an,invocation,to,the,client,invoke,method,it,calls,this,method,to,translate,the,cxf,response,message,to,camel,message,p,p,exchange,is,passed,in,this,direction,camel,route,b,apply,this,binding,method,b,cxf,producer,cxf,server,p,param,camel,exchange,exchanged,to,be,populated,param,cxf,exchange,exchange,that,contains,a,response,param,response,context,map,contains,response,context,from,cxf;void,populate,exchange,from,cxf,response,org,apache,camel,exchange,camel,exchange,exchange,cxf,exchange,map,string,object,response,context
CxfBinding -> void extractJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;1253539182;<p>_Extract the message headers which key are start from javax.xml.ws* from the_CXF exchange's inMessage, and put these headers into the context_</p>___@param cxfExchange CXF exchange to be populated_@param context The map which used to store the message headers;void extractJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;p,extract,the,message,headers,which,key,are,start,from,javax,xml,ws,from,the,cxf,exchange,s,in,message,and,put,these,headers,into,the,context,p,param,cxf,exchange,cxf,exchange,to,be,populated,param,context,the,map,which,used,to,store,the,message,headers;void,extract,jax,ws,context,exchange,cxf,exchange,map,string,object,context
CxfBinding -> void extractJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;1280130252;<p>_Extract the message headers which key are start from javax.xml.ws* from the_CXF exchange's inMessage, and put these headers into the context_</p>___@param cxfExchange CXF exchange to be populated_@param context The map which used to store the message headers;void extractJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;p,extract,the,message,headers,which,key,are,start,from,javax,xml,ws,from,the,cxf,exchange,s,in,message,and,put,these,headers,into,the,context,p,param,cxf,exchange,cxf,exchange,to,be,populated,param,context,the,map,which,used,to,store,the,message,headers;void,extract,jax,ws,context,exchange,cxf,exchange,map,string,object,context
CxfBinding -> void extractJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;1297969159;<p>_Extract the message headers which key are start from javax.xml.ws* from the_CXF exchange's inMessage, and put these headers into the context_</p>___@param cxfExchange CXF exchange to be populated_@param context The map which used to store the message headers;void extractJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;p,extract,the,message,headers,which,key,are,start,from,javax,xml,ws,from,the,cxf,exchange,s,in,message,and,put,these,headers,into,the,context,p,param,cxf,exchange,cxf,exchange,to,be,populated,param,context,the,map,which,used,to,store,the,message,headers;void,extract,jax,ws,context,exchange,cxf,exchange,map,string,object,context
CxfBinding -> void extractJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;1540108161;<p>_Extract the message headers which key are start from javax.xml.ws* from the_CXF exchange's inMessage, and put these headers into the context_</p>___@param cxfExchange CXF exchange to be populated_@param context The map which used to store the message headers;void extractJaxWsContext(Exchange cxfExchange, Map<String, Object> context)_;p,extract,the,message,headers,which,key,are,start,from,javax,xml,ws,from,the,cxf,exchange,s,in,message,and,put,these,headers,into,the,context,p,param,cxf,exchange,cxf,exchange,to,be,populated,param,context,the,map,which,used,to,store,the,message,headers;void,extract,jax,ws,context,exchange,cxf,exchange,map,string,object,context
CxfBinding -> void populateExchangeFromCxfRequest(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange)_;1232329721;<p>_Populate a Camel Exchange from a CXF Exchange, which is an <b>incoming request</b>_from a CXF client.  This method is called by {@link CxfConsumer} to handle a_CXF request arrives at an endpoint.  It translates a CXF request to a Camel_Exchange for Camel route to process the exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint => CxfConsumer => <b>apply this_binding method </b> => Camel route_</p>_@param cxfExchange CXF exchange that contains a request_@param camelExchange Camel exchange to be populated;void populateExchangeFromCxfRequest(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,an,b,incoming,request,b,from,a,cxf,client,this,method,is,called,by,link,cxf,consumer,to,handle,a,cxf,request,arrives,at,an,endpoint,it,translates,a,cxf,request,to,a,camel,exchange,for,camel,route,to,process,the,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,cxf,consumer,b,apply,this,binding,method,b,camel,route,p,param,cxf,exchange,cxf,exchange,that,contains,a,request,param,camel,exchange,camel,exchange,to,be,populated;void,populate,exchange,from,cxf,request,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange
CxfBinding -> void populateExchangeFromCxfRequest(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange)_;1238035325;<p>_Populate a Camel Exchange from a CXF Exchange, which is an <b>incoming request</b>_from a CXF client.  This method is called by {@link CxfConsumer} to handle a_CXF request arrives at an endpoint.  It translates a CXF request to a Camel_Exchange for Camel route to process the exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint => CxfConsumer => <b>apply this_binding method </b> => Camel route_</p>_@param cxfExchange CXF exchange that contains a request_@param camelExchange Camel exchange to be populated;void populateExchangeFromCxfRequest(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,an,b,incoming,request,b,from,a,cxf,client,this,method,is,called,by,link,cxf,consumer,to,handle,a,cxf,request,arrives,at,an,endpoint,it,translates,a,cxf,request,to,a,camel,exchange,for,camel,route,to,process,the,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,cxf,consumer,b,apply,this,binding,method,b,camel,route,p,param,cxf,exchange,cxf,exchange,that,contains,a,request,param,camel,exchange,camel,exchange,to,be,populated;void,populate,exchange,from,cxf,request,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange
CxfBinding -> void populateExchangeFromCxfRequest(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange)_;1253539182;<p>_Populate a Camel Exchange from a CXF Exchange, which is an <b>incoming request</b>_from a CXF client.  This method is called by {@link CxfConsumer} to handle a_CXF request arrives at an endpoint.  It translates a CXF request to a Camel_Exchange for Camel route to process the exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint => CxfConsumer => <b>apply this_binding method </b> => Camel route_</p>_@param cxfExchange CXF exchange that contains a request_@param camelExchange Camel exchange to be populated;void populateExchangeFromCxfRequest(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,an,b,incoming,request,b,from,a,cxf,client,this,method,is,called,by,link,cxf,consumer,to,handle,a,cxf,request,arrives,at,an,endpoint,it,translates,a,cxf,request,to,a,camel,exchange,for,camel,route,to,process,the,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,cxf,consumer,b,apply,this,binding,method,b,camel,route,p,param,cxf,exchange,cxf,exchange,that,contains,a,request,param,camel,exchange,camel,exchange,to,be,populated;void,populate,exchange,from,cxf,request,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange
CxfBinding -> void populateExchangeFromCxfRequest(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange)_;1280130252;<p>_Populate a Camel Exchange from a CXF Exchange, which is an <b>incoming request</b>_from a CXF client.  This method is called by {@link CxfConsumer} to handle a_CXF request arrives at an endpoint.  It translates a CXF request to a Camel_Exchange for Camel route to process the exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint => CxfConsumer => <b>apply this_binding method </b> => Camel route_</p>_@param cxfExchange CXF exchange that contains a request_@param camelExchange Camel exchange to be populated;void populateExchangeFromCxfRequest(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,an,b,incoming,request,b,from,a,cxf,client,this,method,is,called,by,link,cxf,consumer,to,handle,a,cxf,request,arrives,at,an,endpoint,it,translates,a,cxf,request,to,a,camel,exchange,for,camel,route,to,process,the,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,cxf,consumer,b,apply,this,binding,method,b,camel,route,p,param,cxf,exchange,cxf,exchange,that,contains,a,request,param,camel,exchange,camel,exchange,to,be,populated;void,populate,exchange,from,cxf,request,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange
CxfBinding -> void populateExchangeFromCxfRequest(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange)_;1297969159;<p>_Populate a Camel Exchange from a CXF Exchange, which is an <b>incoming request</b>_from a CXF client.  This method is called by {@link CxfConsumer} to handle a_CXF request arrives at an endpoint.  It translates a CXF request to a Camel_Exchange for Camel route to process the exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint => CxfConsumer => <b>apply this_binding method </b> => Camel route_</p>_@param cxfExchange CXF exchange that contains a request_@param camelExchange Camel exchange to be populated;void populateExchangeFromCxfRequest(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,an,b,incoming,request,b,from,a,cxf,client,this,method,is,called,by,link,cxf,consumer,to,handle,a,cxf,request,arrives,at,an,endpoint,it,translates,a,cxf,request,to,a,camel,exchange,for,camel,route,to,process,the,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,cxf,consumer,b,apply,this,binding,method,b,camel,route,p,param,cxf,exchange,cxf,exchange,that,contains,a,request,param,camel,exchange,camel,exchange,to,be,populated;void,populate,exchange,from,cxf,request,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange
CxfBinding -> void populateExchangeFromCxfRequest(Exchange cxfExchange,             org.apache.camel.Exchange camelExchange)_;1540108161;<p>_Populate a Camel Exchange from a CXF Exchange, which is an <b>incoming request</b>_from a CXF client.  This method is called by {@link CxfConsumer} to handle a_CXF request arrives at an endpoint.  It translates a CXF request to a Camel_Exchange for Camel route to process the exchange._</p>__<p>_Exchange is passed in this direction: CXF Endpoint => CxfConsumer => <b>apply this_binding method </b> => Camel route_</p>_@param cxfExchange CXF exchange that contains a request_@param camelExchange Camel exchange to be populated;void populateExchangeFromCxfRequest(Exchange cxfExchange,_            org.apache.camel.Exchange camelExchange)_;p,populate,a,camel,exchange,from,a,cxf,exchange,which,is,an,b,incoming,request,b,from,a,cxf,client,this,method,is,called,by,link,cxf,consumer,to,handle,a,cxf,request,arrives,at,an,endpoint,it,translates,a,cxf,request,to,a,camel,exchange,for,camel,route,to,process,the,exchange,p,p,exchange,is,passed,in,this,direction,cxf,endpoint,cxf,consumer,b,apply,this,binding,method,b,camel,route,p,param,cxf,exchange,cxf,exchange,that,contains,a,request,param,camel,exchange,camel,exchange,to,be,populated;void,populate,exchange,from,cxf,request,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange
