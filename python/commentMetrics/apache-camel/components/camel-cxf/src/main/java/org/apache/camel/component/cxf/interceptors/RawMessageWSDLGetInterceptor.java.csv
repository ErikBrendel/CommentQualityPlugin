commented;modifiers;parameterAmount;loc;comment;code
false;public;1;47;;public void handleMessage(Message message) throws Fault {     String method = (String) message.get(Message.HTTP_REQUEST_METHOD).     String query = (String) message.get(Message.QUERY_STRING).     if (!"GET".equals(method) || StringUtils.isEmpty(query)) {         return.     }     String baseUri = (String) message.get(Message.REQUEST_URL).     String ctx = (String) message.get(Message.PATH_INFO).     Map<String, String> map = UrlUtils.parseQueryString(query).     if (isRecognizedQuery(map, baseUri, ctx, message.getExchange().getEndpoint().getEndpointInfo())) {         Document doc = getDocument(message, baseUri, map, ctx).         Endpoint e = message.getExchange().get(Endpoint.class).         Message mout = new MessageImpl().         mout.setExchange(message.getExchange()).         mout = e.getBinding().createMessage(mout).         mout.setInterceptorChain(OutgoingChainInterceptor.getOutInterceptorChain(message.getExchange())).         message.getExchange().setOutMessage(mout).         mout.put(DOCUMENT_HOLDER, doc).         Iterator<Interceptor<? extends Message>> iterator = mout.getInterceptorChain().iterator().         while (iterator.hasNext()) {             Interceptor<? extends Message> inInterceptor = iterator.next().             if (inInterceptor instanceof AbstractPhaseInterceptor) {                 AbstractPhaseInterceptor<?> interceptor = (AbstractPhaseInterceptor<?>) inInterceptor.                 if (interceptor.getPhase().equals(Phase.PREPARE_SEND) || interceptor.getPhase().equals(Phase.PRE_STREAM)) {                     // just make sure we keep the right interceptors                     continue.                 }             }             mout.getInterceptorChain().remove(inInterceptor).         }         // notice this is being added after the purge above, don't swap the order!         mout.getInterceptorChain().add(RawMessageWSDLGetOutInterceptor.INSTANCE).         // skip the service executor and goto the end of the chain.         message.getInterceptorChain().doInterceptStartingAt(message, OutgoingChainInterceptor.class.getName()).     } }
false;private;4;12;;private Document getDocument(Message message, String base, Map<String, String> params, String ctxUri) {     // to be synchronized.     synchronized (message.getExchange().getEndpoint()) {         return new WSDLGetUtils().getDocument(message, base, params, ctxUri, message.getExchange().getEndpoint().getEndpointInfo()).     } }
false;private;4;8;;private boolean isRecognizedQuery(Map<String, String> map, String baseUri, String ctx, EndpointInfo endpointInfo) {     if (map.containsKey("wsdl") || map.containsKey("xsd")) {         return true.     }     return false. }
