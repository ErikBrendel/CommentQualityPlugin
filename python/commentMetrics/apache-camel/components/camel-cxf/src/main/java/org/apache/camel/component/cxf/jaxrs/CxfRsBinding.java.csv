commented;modifiers;parameterAmount;loc;comment;code
true;;4;4;/**  * Populate the camel exchange from the CxfRsRequest, the exchange will be consumed  * by the processor which the CxfRsConsumer attached.  *  * @param camelExchange camel exchange object  * @param cxfExchange   cxf exchange object  * @param method        the method which is need for the camel component  * @param paramArray    the parameter list for the method invocation  */ ;/**  * Populate the camel exchange from the CxfRsRequest, the exchange will be consumed  * by the processor which the CxfRsConsumer attached.  *  * @param camelExchange camel exchange object  * @param cxfExchange   cxf exchange object  * @param method        the method which is need for the camel component  * @param paramArray    the parameter list for the method invocation  */ void populateExchangeFromCxfRsRequest(Exchange cxfExchange, org.apache.camel.Exchange camelExchange, Method method, Object[] paramArray).
true;;2;2;/**  * Populate the CxfRsResponse object from the camel exchange  *  * @param camelExchange camel exchange object  * @param cxfExchange   cxf exchange object  * @return the response object  * @throws Exception can be thrown if error in the binding process  */ ;/**  * Populate the CxfRsResponse object from the camel exchange  *  * @param camelExchange camel exchange object  * @param cxfExchange   cxf exchange object  * @return the response object  * @throws Exception can be thrown if error in the binding process  */ Object populateCxfRsResponseFromExchange(org.apache.camel.Exchange camelExchange, Exchange cxfExchange) throws Exception.
true;;2;3;/**  * Bind the camel in message body to a request body that gets passed  * to CXF RS {@link org.apache.cxf.jaxrs.client.WebClient} APIs.  *  * @param camelMessage  the source message  * @param camelExchange the Camel exchange  * @return the request object to be passed to invoke a WebClient  * @throws Exception can be thrown if error in the binding process  */ ;/**  * Bind the camel in message body to a request body that gets passed  * to CXF RS {@link org.apache.cxf.jaxrs.client.WebClient} APIs.  *  * @param camelMessage  the source message  * @param camelExchange the Camel exchange  * @return the request object to be passed to invoke a WebClient  * @throws Exception can be thrown if error in the binding process  */ Object bindCamelMessageBodyToRequestBody(org.apache.camel.Message camelMessage, org.apache.camel.Exchange camelExchange) throws Exception.
true;;2;3;/**  * Bind the camel headers to request headers that gets passed to CXF RS  * {@link org.apache.cxf.jaxrs.client.WebClient} APIs.  *  * @param camelHeaders  the source headers  * @param camelExchange the Camel exchange  * @throws Exception can be thrown if error in the binding process  * @return the headers  */ ;/**  * Bind the camel headers to request headers that gets passed to CXF RS  * {@link org.apache.cxf.jaxrs.client.WebClient} APIs.  *  * @param camelHeaders  the source headers  * @param camelExchange the Camel exchange  * @throws Exception can be thrown if error in the binding process  * @return the headers  */ MultivaluedMap<String, String> bindCamelHeadersToRequestHeaders(Map<String, Object> camelHeaders, org.apache.camel.Exchange camelExchange) throws Exception.
true;;2;2;/**  * Bind the HTTP response body to camel out body  *  * @param response the response  * @param camelExchange the exchange  * @return the object to be set in the Camel out message body  * @throws Exception can be thrown if error in the binding process  */ ;/**  * Bind the HTTP response body to camel out body  *  * @param response the response  * @param camelExchange the exchange  * @return the object to be set in the Camel out message body  * @throws Exception can be thrown if error in the binding process  */ Object bindResponseToCamelBody(Object response, org.apache.camel.Exchange camelExchange) throws Exception.
true;;2;3;/**  * Bind the response headers to camel out headers.  *  * @param response the response  * @param camelExchange the exchange  * @return headers to be set in the Camel out message  * @throws Exception can be thrown if error in the binding process  */ ;/**  * Bind the response headers to camel out headers.  *  * @param response the response  * @param camelExchange the exchange  * @return headers to be set in the Camel out message  * @throws Exception can be thrown if error in the binding process  */ Map<String, Object> bindResponseHeadersToCamelHeaders(Object response, org.apache.camel.Exchange camelExchange) throws Exception.
true;;3;1;/**  * Bind the Camel message to a request {@link Entity} that gets passed to {@link AsyncInvoker#method(java.lang.String, javax.ws.rs.client.Entity, javax.ws.rs.client.InvocationCallback)}.  *  * @param camelMessage  the source message  * @param camelExchange the Camel exchange  * @param body the message body  * @throws Exception can be thrown if error in the binding process  * @return the {@link Entity} to use  */ ;/**  * Bind the Camel message to a request {@link Entity} that gets passed to {@link AsyncInvoker#method(java.lang.String, javax.ws.rs.client.Entity, javax.ws.rs.client.InvocationCallback)}.  *  * @param camelMessage  the source message  * @param camelExchange the Camel exchange  * @param body the message body  * @throws Exception can be thrown if error in the binding process  * @return the {@link Entity} to use  */ Entity<Object> bindCamelMessageToRequestEntity(Object body, org.apache.camel.Message camelMessage, org.apache.camel.Exchange camelExchange) throws Exception.
