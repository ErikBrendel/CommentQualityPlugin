commented;modifiers;parameterAmount;loc;comment;code
true;protected;3;15;/**  * Override mapToProperty() to handle the '#' reference notation ourselves.  We put those  * properties with '#' in property map and let component to invoke setProperties() on the  * endpoint.  */ ;/**  * Override mapToProperty() to handle the '#' reference notation ourselves.  We put those  * properties with '#' in property map and let component to invoke setProperties() on the  * endpoint.  */ @Override protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {     if (ID_ATTRIBUTE.equals(propertyName)) {         return.     }     if (org.springframework.util.StringUtils.hasText(val)) {         if (val.startsWith("#")) {             Map<String, Object> map = getPropertyMap(bean, true).             map.put(propertyName, val).         } else {             bean.addPropertyValue(propertyName, val).         }     } }
false;protected;3;10;;@Override protected void doParse(Element element, ParserContext ctx, BeanDefinitionBuilder bean) {     super.doParse(element, ctx, bean).     bean.setLazyInit(false).     // put the bean id into the property map     Map<String, Object> map = getPropertyMap(bean, true).     map.put("beanId", resolveId(element, bean.getBeanDefinition(), ctx)).     // set the bean scope to be prototype, then we can get a new instance in each look up     bean.setScope(BeanDefinition.SCOPE_PROTOTYPE). }
false;protected;3;12;;@Override protected String resolveId(Element elem, AbstractBeanDefinition definition, ParserContext ctx) throws BeanDefinitionStoreException {     String id = super.resolveId(elem, definition, ctx).     if (StringUtils.isEmpty(id)) {         throw new BeanDefinitionStoreException("The bean id is needed.").     }     return id. }
false;protected;0;4;;@Override protected boolean hasBusProperty() {     return true. }
false;protected;2;15;;@SuppressWarnings("unchecked") protected Map<String, Object> getPropertyMap(BeanDefinitionBuilder bean, boolean lazyInstantiation) {     PropertyValue propertyValue = bean.getBeanDefinition().getPropertyValues().getPropertyValue("properties").     Map<String, Object> map = null.     if (propertyValue == null) {         if (lazyInstantiation) {             map = new HashMap<>().             bean.addPropertyValue("properties", map).         }     } else {         map = (Map<String, Object>) propertyValue.getValue().     }     return map. }
