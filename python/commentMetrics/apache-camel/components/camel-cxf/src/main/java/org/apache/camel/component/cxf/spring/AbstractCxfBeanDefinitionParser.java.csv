# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1243588852;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_        _    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1280130252;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_        _    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1307014084;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_        _    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1307020992;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_        _    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1308788876;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1319114995;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1323680223;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1523968798;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
AbstractCxfBeanDefinitionParser -> @Override     protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val);1537085443;Override mapToProperty() to handle the '#' reference notation ourselves.  We put those_properties with '#' in property map and let component to invoke setProperties() on the_endpoint.;@Override_    protected void mapToProperty(BeanDefinitionBuilder bean, String propertyName, String val) {_        if (ID_ATTRIBUTE.equals(propertyName)) {_            return__        }__        if (org.springframework.util.StringUtils.hasText(val)) {_            if (val.startsWith("#")) {_                Map<String, Object> map = getPropertyMap(bean, true)__                map.put(propertyName, val)__            } else {_                bean.addPropertyValue(propertyName, val)__            }_        }_    };override,map,to,property,to,handle,the,reference,notation,ourselves,we,put,those,properties,with,in,property,map,and,let,component,to,invoke,set,properties,on,the,endpoint;override,protected,void,map,to,property,bean,definition,builder,bean,string,property,name,string,val,if,equals,property,name,return,if,org,springframework,util,string,utils,has,text,val,if,val,starts,with,map,string,object,map,get,property,map,bean,true,map,put,property,name,val,else,bean,add,property,value,property,name,val
